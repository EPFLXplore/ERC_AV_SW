
bnoTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  080089a8  080089a8  000189a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  08008f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  200001ec  08009104  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f8  08009104  000202f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b8e4  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002eac  00000000  00000000  0003bafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fa8  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e80  00000000  00000000  0003f958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a24d  00000000  00000000  000407d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e721  00000000  00000000  0007aa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00179131  00000000  00000000  00089146  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00202277  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004eb4  00000000  00000000  002022f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001ec 	.word	0x200001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800898c 	.word	0x0800898c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001f0 	.word	0x200001f0
 80002dc:	0800898c 	.word	0x0800898c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 f9f4 	bl	8000bc0 <bno055_writeData>
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4619      	mov	r1, r3
 80007ee:	203d      	movs	r0, #61	; 0x3d
 80007f0:	f000 f9e6 	bl	8000bc0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80007fa:	2013      	movs	r0, #19
 80007fc:	f000 f9d4 	bl	8000ba8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000800:	e002      	b.n	8000808 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 f9d0 	bl	8000ba8 <bno055_delay>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffe3 	bl	80007e0 <bno055_setOperationMode>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}

0800081e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000822:	200c      	movs	r0, #12
 8000824:	f7ff ffdc 	bl	80007e0 <bno055_setOperationMode>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000830:	2120      	movs	r1, #32
 8000832:	203f      	movs	r0, #63	; 0x3f
 8000834:	f000 f9c4 	bl	8000bc0 <bno055_writeData>
  bno055_delay(700);
 8000838:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800083c:	f000 f9b4 	bl	8000ba8 <bno055_delay>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup(UART_HandleTypeDef *huart) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b0c4      	sub	sp, #272	; 0x110
 8000848:	af00      	add	r7, sp, #0
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	6018      	str	r0, [r3, #0]
  bno055_reset();
 800084e:	f7ff ffed 	bl	800082c <bno055_reset>

  uint8_t id = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000858:	f207 130d 	addw	r3, r7, #269	; 0x10d
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fa99 	bl	8000d98 <bno055_readData>
  if (id != BNO055_ID) {
 8000866:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800086a:	2ba0      	cmp	r3, #160	; 0xa0
 800086c:	d015      	beq.n	800089a <bno055_setup+0x56>
	  char data[256];
	  uint16_t size = sprintf(data,"Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800086e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8000872:	461a      	mov	r2, r3
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4910      	ldr	r1, [pc, #64]	; (80008bc <bno055_setup+0x78>)
 800087a:	4618      	mov	r0, r3
 800087c:	f006 f890 	bl	80069a0 <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  HAL_UART_Transmit(huart, data, size, 1000);
 8000886:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800088a:	f107 010c 	add.w	r1, r7, #12
 800088e:	1d38      	adds	r0, r7, #4
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	6800      	ldr	r0, [r0, #0]
 8000896:	f004 fac3 	bl	8004e20 <HAL_UART_Transmit>
  }
  bno055_setPage(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff92 	bl	80007c4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	203f      	movs	r0, #63	; 0x3f
 80008a4:	f000 f98c 	bl	8000bc0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80008a8:	f7ff ffb2 	bl	8000810 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 f97b 	bl	8000ba8 <bno055_delay>
}
 80008b2:	bf00      	nop
 80008b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	080089a8 	.word	0x080089a8

080008c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80008c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008c4:	b09f      	sub	sp, #124	; 0x7c
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff78 	bl	80007c4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80008d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008d8:	2b20      	cmp	r3, #32
 80008da:	d108      	bne.n	80008ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80008dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e4:	2208      	movs	r2, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa56 	bl	8000d98 <bno055_readData>
 80008ec:	e007      	b.n	80008fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80008ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f6:	2206      	movs	r2, #6
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fa4d 	bl	8000d98 <bno055_readData>

  double scale = 1;
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	4c81      	ldr	r4, [pc, #516]	; (8000b08 <bno055_getVector+0x248>)
 8000904:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800090c:	2b0e      	cmp	r3, #14
 800090e:	d108      	bne.n	8000922 <bno055_getVector+0x62>
    scale = magScale;
 8000910:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <bno055_getVector+0x24c>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800091c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000920:	e03a      	b.n	8000998 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	2b08      	cmp	r3, #8
 8000928:	d007      	beq.n	800093a <bno055_getVector+0x7a>
 800092a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800092e:	2b28      	cmp	r3, #40	; 0x28
 8000930:	d003      	beq.n	800093a <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000936:	2b2e      	cmp	r3, #46	; 0x2e
 8000938:	d108      	bne.n	800094c <bno055_getVector+0x8c>
    scale = accelScale;
 800093a:	4b75      	ldr	r3, [pc, #468]	; (8000b10 <bno055_getVector+0x250>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000946:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800094a:	e025      	b.n	8000998 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800094c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000950:	2b14      	cmp	r3, #20
 8000952:	d108      	bne.n	8000966 <bno055_getVector+0xa6>
    scale = angularRateScale;
 8000954:	4b6f      	ldr	r3, [pc, #444]	; (8000b14 <bno055_getVector+0x254>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000960:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000964:	e018      	b.n	8000998 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800096a:	2b1a      	cmp	r3, #26
 800096c:	d108      	bne.n	8000980 <bno055_getVector+0xc0>
    scale = eulerScale;
 800096e:	4b6a      	ldr	r3, [pc, #424]	; (8000b18 <bno055_getVector+0x258>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800097a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800097e:	e00b      	b.n	8000998 <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000984:	2b20      	cmp	r3, #32
 8000986:	d107      	bne.n	8000998 <bno055_getVector+0xd8>
    scale = quaScale;
 8000988:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <bno055_getVector+0x25c>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000994:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	2220      	movs	r2, #32
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 fb40 	bl	8006026 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80009a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d14c      	bne.n	8000a48 <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80009ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21b      	sxth	r3, r3
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80009c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80009cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80009d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80009d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b21a      	sxth	r2, r3
 80009dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80009ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80009f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80009f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80009fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a14:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a1c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a3a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a42:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000a46:	e038      	b.n	8000aba <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000a48:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a62:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a66:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a6a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000a6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a88:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a90:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000a94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000aae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000ab2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ab6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 8000aba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000abe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ace:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000ad2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000ad6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8000ada:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8000ade:	ec49 8b14 	vmov	d4, r8, r9
 8000ae2:	ec46 5b15 	vmov	d5, r5, r6
 8000ae6:	ec42 1b16 	vmov	d6, r1, r2
 8000aea:	ec44 3b17 	vmov	d7, r3, r4
}
 8000aee:	eeb0 0b44 	vmov.f64	d0, d4
 8000af2:	eeb0 1b45 	vmov.f64	d1, d5
 8000af6:	eeb0 2b46 	vmov.f64	d2, d6
 8000afa:	eeb0 3b47 	vmov.f64	d3, d7
 8000afe:	377c      	adds	r7, #124	; 0x7c
 8000b00:	46bd      	mov	sp, r7
 8000b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b06:	bf00      	nop
 8000b08:	3ff00000 	.word	0x3ff00000
 8000b0c:	2000000e 	.word	0x2000000e
 8000b10:	20000008 	.word	0x20000008
 8000b14:	2000000a 	.word	0x2000000a
 8000b18:	2000000c 	.word	0x2000000c
 8000b1c:	20000010 	.word	0x20000010

08000b20 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b24:	b091      	sub	sp, #68	; 0x44
 8000b26:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000b28:	201a      	movs	r0, #26
 8000b2a:	f7ff fec9 	bl	80008c0 <bno055_getVector>
 8000b2e:	eeb0 4b40 	vmov.f64	d4, d0
 8000b32:	eeb0 5b41 	vmov.f64	d5, d1
 8000b36:	eeb0 6b42 	vmov.f64	d6, d2
 8000b3a:	eeb0 7b43 	vmov.f64	d7, d3
 8000b3e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000b42:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000b46:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000b4a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000b4e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000b52:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000b56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000b5a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000b5e:	ec49 8b14 	vmov	d4, r8, r9
 8000b62:	ec46 5b15 	vmov	d5, r5, r6
 8000b66:	ec42 1b16 	vmov	d6, r1, r2
 8000b6a:	ec44 3b17 	vmov	d7, r3, r4
}
 8000b6e:	eeb0 0b44 	vmov.f64	d0, d4
 8000b72:	eeb0 1b45 	vmov.f64	d1, d5
 8000b76:	eeb0 2b46 	vmov.f64	d2, d6
 8000b7a:	eeb0 3b47 	vmov.f64	d3, d7
 8000b7e:	3744      	adds	r7, #68	; 0x44
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000b88 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <bno055_assignI2C+0x1c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200002ec 	.word	0x200002ec

08000ba8 <bno055_delay>:

void bno055_delay(int time) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fdfa 	bl	80017ac <HAL_Delay>
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	733b      	strb	r3, [r7, #12]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <bno055_writeData+0x184>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	230a      	movs	r3, #10
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2302      	movs	r3, #2
 8000be6:	2150      	movs	r1, #80	; 0x50
 8000be8:	f001 f960 	bl	8001eac <HAL_I2C_Master_Transmit>
 8000bec:	4603      	mov	r3, r0
 8000bee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80a0 	beq.w	8000d38 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d103      	bne.n	8000c06 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000bfe:	4852      	ldr	r0, [pc, #328]	; (8000d48 <bno055_writeData+0x188>)
 8000c00:	f005 fec6 	bl	8006990 <puts>
 8000c04:	e012      	b.n	8000c2c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d103      	bne.n	8000c14 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000c0c:	484f      	ldr	r0, [pc, #316]	; (8000d4c <bno055_writeData+0x18c>)
 8000c0e:	f005 febf 	bl	8006990 <puts>
 8000c12:	e00b      	b.n	8000c2c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000c1a:	484d      	ldr	r0, [pc, #308]	; (8000d50 <bno055_writeData+0x190>)
 8000c1c:	f005 feb8 	bl	8006990 <puts>
 8000c20:	e004      	b.n	8000c2c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	4619      	mov	r1, r3
 8000c26:	484b      	ldr	r0, [pc, #300]	; (8000d54 <bno055_writeData+0x194>)
 8000c28:	f005 fe3e 	bl	80068a8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <bno055_writeData+0x184>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fb33 	bl	800229c <HAL_I2C_GetError>
 8000c36:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d07e      	beq.n	8000d3c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d103      	bne.n	8000c4c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000c44:	4844      	ldr	r0, [pc, #272]	; (8000d58 <bno055_writeData+0x198>)
 8000c46:	f005 fea3 	bl	8006990 <puts>
 8000c4a:	e021      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d103      	bne.n	8000c5a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000c52:	4842      	ldr	r0, [pc, #264]	; (8000d5c <bno055_writeData+0x19c>)
 8000c54:	f005 fe9c 	bl	8006990 <puts>
 8000c58:	e01a      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d103      	bne.n	8000c68 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000c60:	483f      	ldr	r0, [pc, #252]	; (8000d60 <bno055_writeData+0x1a0>)
 8000c62:	f005 fe95 	bl	8006990 <puts>
 8000c66:	e013      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d103      	bne.n	8000c76 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000c6e:	483d      	ldr	r0, [pc, #244]	; (8000d64 <bno055_writeData+0x1a4>)
 8000c70:	f005 fe8e 	bl	8006990 <puts>
 8000c74:	e00c      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b10      	cmp	r3, #16
 8000c7a:	d103      	bne.n	8000c84 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <bno055_writeData+0x1a8>)
 8000c7e:	f005 fe87 	bl	8006990 <puts>
 8000c82:	e005      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b20      	cmp	r3, #32
 8000c88:	d102      	bne.n	8000c90 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000c8a:	4838      	ldr	r0, [pc, #224]	; (8000d6c <bno055_writeData+0x1ac>)
 8000c8c:	f005 fe80 	bl	8006990 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <bno055_writeData+0x184>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 faf3 	bl	8002280 <HAL_I2C_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d103      	bne.n	8000cac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <bno055_writeData+0x1b0>)
 8000ca6:	f005 fe73 	bl	8006990 <puts>
 8000caa:	e048      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d103      	bne.n	8000cba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000cb2:	482f      	ldr	r0, [pc, #188]	; (8000d70 <bno055_writeData+0x1b0>)
 8000cb4:	f005 fe6c 	bl	8006990 <puts>
 8000cb8:	e041      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2b24      	cmp	r3, #36	; 0x24
 8000cbe:	d103      	bne.n	8000cc8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000cc0:	482c      	ldr	r0, [pc, #176]	; (8000d74 <bno055_writeData+0x1b4>)
 8000cc2:	f005 fe65 	bl	8006990 <puts>
 8000cc6:	e03a      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b21      	cmp	r3, #33	; 0x21
 8000ccc:	d103      	bne.n	8000cd6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000cce:	482a      	ldr	r0, [pc, #168]	; (8000d78 <bno055_writeData+0x1b8>)
 8000cd0:	f005 fe5e 	bl	8006990 <puts>
 8000cd4:	e033      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b22      	cmp	r3, #34	; 0x22
 8000cda:	d103      	bne.n	8000ce4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000cdc:	4827      	ldr	r0, [pc, #156]	; (8000d7c <bno055_writeData+0x1bc>)
 8000cde:	f005 fe57 	bl	8006990 <puts>
 8000ce2:	e02c      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b28      	cmp	r3, #40	; 0x28
 8000ce8:	d103      	bne.n	8000cf2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <bno055_writeData+0x1c0>)
 8000cec:	f005 fe50 	bl	8006990 <puts>
 8000cf0:	e025      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b29      	cmp	r3, #41	; 0x29
 8000cf6:	d103      	bne.n	8000d00 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000cf8:	4822      	ldr	r0, [pc, #136]	; (8000d84 <bno055_writeData+0x1c4>)
 8000cfa:	f005 fe49 	bl	8006990 <puts>
 8000cfe:	e01e      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b2a      	cmp	r3, #42	; 0x2a
 8000d04:	d103      	bne.n	8000d0e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <bno055_writeData+0x1c8>)
 8000d08:	f005 fe42 	bl	8006990 <puts>
 8000d0c:	e017      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b60      	cmp	r3, #96	; 0x60
 8000d12:	d103      	bne.n	8000d1c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000d14:	481d      	ldr	r0, [pc, #116]	; (8000d8c <bno055_writeData+0x1cc>)
 8000d16:	f005 fe3b 	bl	8006990 <puts>
 8000d1a:	e010      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8000d20:	d103      	bne.n	8000d2a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000d22:	481b      	ldr	r0, [pc, #108]	; (8000d90 <bno055_writeData+0x1d0>)
 8000d24:	f005 fe34 	bl	8006990 <puts>
 8000d28:	e009      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2be0      	cmp	r3, #224	; 0xe0
 8000d2e:	d106      	bne.n	8000d3e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <bno055_writeData+0x1d4>)
 8000d32:	f005 fe2d 	bl	8006990 <puts>
 8000d36:	e002      	b.n	8000d3e <bno055_writeData+0x17e>
    return;
 8000d38:	bf00      	nop
 8000d3a:	e000      	b.n	8000d3e <bno055_writeData+0x17e>
    return;
 8000d3c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200002ec 	.word	0x200002ec
 8000d48:	080089e4 	.word	0x080089e4
 8000d4c:	08008a08 	.word	0x08008a08
 8000d50:	08008a30 	.word	0x08008a30
 8000d54:	08008a54 	.word	0x08008a54
 8000d58:	08008a6c 	.word	0x08008a6c
 8000d5c:	08008a80 	.word	0x08008a80
 8000d60:	08008a94 	.word	0x08008a94
 8000d64:	08008aa8 	.word	0x08008aa8
 8000d68:	08008abc 	.word	0x08008abc
 8000d6c:	08008ad0 	.word	0x08008ad0
 8000d70:	08008ae8 	.word	0x08008ae8
 8000d74:	08008b00 	.word	0x08008b00
 8000d78:	08008b14 	.word	0x08008b14
 8000d7c:	08008b2c 	.word	0x08008b2c
 8000d80:	08008b44 	.word	0x08008b44
 8000d84:	08008b5c 	.word	0x08008b5c
 8000d88:	08008b7c 	.word	0x08008b7c
 8000d8c:	08008b9c 	.word	0x08008b9c
 8000d90:	08008bb4 	.word	0x08008bb4
 8000d94:	08008bcc 	.word	0x08008bcc

08000d98 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <bno055_readData+0x40>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	1dfa      	adds	r2, r7, #7
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2150      	movs	r1, #80	; 0x50
 8000db6:	f001 f879 	bl	8001eac <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <bno055_readData+0x40>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	2150      	movs	r1, #80	; 0x50
 8000dcc:	f001 f962 	bl	8002094 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002ec 	.word	0x200002ec

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	b0d1      	sub	sp, #324	; 0x144
 8000de0:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000dea:	bf00      	nop
 8000dec:	4b51      	ldr	r3, [pc, #324]	; (8000f34 <main+0x158>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <main+0x2a>
 8000df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dcf2      	bgt.n	8000dec <main+0x10>
  if ( timeout < 0 )
 8000e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da01      	bge.n	8000e12 <main+0x36>
  {
  Error_Handler();
 8000e0e:	f000 fa89 	bl	8001324 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fc39 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f897 	bl	8000f48 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <main+0x158>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <main+0x158>)
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b42      	ldr	r3, [pc, #264]	; (8000f34 <main+0x158>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 ff75 	bl	8001d30 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 ff8b 	bl	8001d64 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e56:	bf00      	nop
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <main+0x158>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <main+0x96>
 8000e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dcf2      	bgt.n	8000e58 <main+0x7c>
if ( timeout < 0 )
 8000e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da01      	bge.n	8000e7e <main+0xa2>
{
Error_Handler();
 8000e7a:	f000 fa53 	bl	8001324 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 f98b 	bl	8001198 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e82:	f000 f8fd 	bl	8001080 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e86:	f000 f93b 	bl	8001100 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8000e8a:	482b      	ldr	r0, [pc, #172]	; (8000f38 <main+0x15c>)
 8000e8c:	f7ff fe7c 	bl	8000b88 <bno055_assignI2C>
  bno055_setup(&huart3);
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <main+0x160>)
 8000e92:	f7ff fcd7 	bl	8000844 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000e96:	f7ff fcc2 	bl	800081e <bno055_setOperationModeNDOF>
  uint16_t size;
  char data[256];
  size = sprintf(data,"Roll,Pitch,Yaw\r\n");
 8000e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9e:	4a28      	ldr	r2, [pc, #160]	; (8000f40 <main+0x164>)
 8000ea0:	461c      	mov	r4, r3
 8000ea2:	4615      	mov	r5, r2
 8000ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	7023      	strb	r3, [r4, #0]
 8000eac:	2310      	movs	r3, #16
 8000eae:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
  HAL_UART_Transmit(&huart3, data, size, 1000);
 8000eb2:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8000eb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	481f      	ldr	r0, [pc, #124]	; (8000f3c <main+0x160>)
 8000ec0:	f003 ffae 	bl	8004e20 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bno055_vector_t v = bno055_getVectorEuler();
 8000ec4:	f7ff fe2c 	bl	8000b20 <bno055_getVectorEuler>
 8000ec8:	eeb0 4b40 	vmov.f64	d4, d0
 8000ecc:	eeb0 5b41 	vmov.f64	d5, d1
 8000ed0:	eeb0 6b42 	vmov.f64	d6, d2
 8000ed4:	eeb0 7b43 	vmov.f64	d7, d3
 8000ed8:	463b      	mov	r3, r7
 8000eda:	ed83 4b00 	vstr	d4, [r3]
 8000ede:	ed83 5b02 	vstr	d5, [r3, #8]
 8000ee2:	ed83 6b04 	vstr	d6, [r3, #16]
 8000ee6:	ed83 7b06 	vstr	d7, [r3, #24]
	  size = sprintf(data,"%.2f,%.2f,%.2f\r\n", v.x, v.y, v.z);
 8000eea:	463b      	mov	r3, r7
 8000eec:	e9d3 5602 	ldrd	r5, r6, [r3, #8]
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000ef6:	463a      	mov	r2, r7
 8000ef8:	e9d2 1206 	ldrd	r1, r2, [r2, #24]
 8000efc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f00:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8000f04:	e9cd 3400 	strd	r3, r4, [sp]
 8000f08:	462a      	mov	r2, r5
 8000f0a:	4633      	mov	r3, r6
 8000f0c:	490d      	ldr	r1, [pc, #52]	; (8000f44 <main+0x168>)
 8000f0e:	f005 fd47 	bl	80069a0 <siprintf>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	  HAL_UART_Transmit(&huart3, data, size, 1000);
 8000f18:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8000f1c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <main+0x160>)
 8000f26:	f003 ff7b 	bl	8004e20 <HAL_UART_Transmit>
	  //v = bno055_getVectorQuaternion();
	  //printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	  HAL_Delay(100);
 8000f2a:	2064      	movs	r0, #100	; 0x64
 8000f2c:	f000 fc3e 	bl	80017ac <HAL_Delay>
  {
 8000f30:	e7c8      	b.n	8000ec4 <main+0xe8>
 8000f32:	bf00      	nop
 8000f34:	58024400 	.word	0x58024400
 8000f38:	200002a0 	.word	0x200002a0
 8000f3c:	20000214 	.word	0x20000214
 8000f40:	08008be4 	.word	0x08008be4
 8000f44:	08008bf8 	.word	0x08008bf8

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0cc      	sub	sp, #304	; 0x130
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f52:	224c      	movs	r2, #76	; 0x4c
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f865 	bl	8006026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 f85e 	bl	8006026 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4618      	mov	r0, r3
 8000f70:	23bc      	movs	r3, #188	; 0xbc
 8000f72:	461a      	mov	r2, r3
 8000f74:	2100      	movs	r1, #0
 8000f76:	f005 f856 	bl	8006026 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f001 fc12 	bl	80027a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <SystemClock_Config+0x130>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	; (8001078 <SystemClock_Config+0x130>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f92:	4b39      	ldr	r3, [pc, #228]	; (8001078 <SystemClock_Config+0x130>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <SystemClock_Config+0x134>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa6:	4a35      	ldr	r2, [pc, #212]	; (800107c <SystemClock_Config+0x134>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <SystemClock_Config+0x134>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fbe:	bf00      	nop
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <SystemClock_Config+0x134>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fcc:	d1f8      	bne.n	8000fc0 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2340      	movs	r3, #64	; 0x40
 8000fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fc34 	bl	8002858 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 f995 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	233f      	movs	r3, #63	; 0x3f
 8000ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f002 f821 	bl	8003078 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800103c:	f000 f972 	bl	8001324 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	220a      	movs	r2, #10
 8001046:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2200      	movs	r2, #0
 8001056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fb8e 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800106a:	f000 f95b 	bl	8001324 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58000400 	.word	0x58000400
 800107c:	58024800 	.word	0x58024800

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_I2C1_Init+0x74>)
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <MX_I2C1_Init+0x78>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_I2C1_Init+0x74>)
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MX_I2C1_Init+0x7c>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_I2C1_Init+0x74>)
 8001098:	2201      	movs	r2, #1
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010bc:	f000 fe66 	bl	8001d8c <HAL_I2C_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c6:	f000 f92d 	bl	8001324 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010ce:	f001 fad1 	bl	8002674 <HAL_I2CEx_ConfigAnalogFilter>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d8:	f000 f924 	bl	8001324 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_I2C1_Init+0x74>)
 80010e0:	f001 fb13 	bl	800270a <HAL_I2CEx_ConfigDigitalFilter>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f000 f91b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002a0 	.word	0x200002a0
 80010f8:	40005400 	.word	0x40005400
 80010fc:	10707dbc 	.word	0x10707dbc

08001100 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_USART3_UART_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800114a:	f003 fe19 	bl	8004d80 <HAL_UART_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 f8e6 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800115c:	f004 fe49 	bl	8005df2 <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001166:	f000 f8dd 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800116e:	f004 fe7e 	bl	8005e6e <HAL_UARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001178:	f000 f8d4 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800117e:	f004 fdff 	bl	8005d80 <HAL_UARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001188:	f000 f8cc 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000214 	.word	0x20000214
 8001194:	40004800 	.word	0x40004800

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b58      	ldr	r3, [pc, #352]	; (8001310 <MX_GPIO_Init+0x178>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a56      	ldr	r2, [pc, #344]	; (8001310 <MX_GPIO_Init+0x178>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b54      	ldr	r3, [pc, #336]	; (8001310 <MX_GPIO_Init+0x178>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011cc:	4b50      	ldr	r3, [pc, #320]	; (8001310 <MX_GPIO_Init+0x178>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <MX_GPIO_Init+0x178>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <MX_GPIO_Init+0x178>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b49      	ldr	r3, [pc, #292]	; (8001310 <MX_GPIO_Init+0x178>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	4a47      	ldr	r2, [pc, #284]	; (8001310 <MX_GPIO_Init+0x178>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_GPIO_Init+0x178>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <MX_GPIO_Init+0x178>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a40      	ldr	r2, [pc, #256]	; (8001310 <MX_GPIO_Init+0x178>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <MX_GPIO_Init+0x178>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <MX_GPIO_Init+0x178>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a38      	ldr	r2, [pc, #224]	; (8001310 <MX_GPIO_Init+0x178>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_GPIO_Init+0x178>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_GPIO_Init+0x178>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <MX_GPIO_Init+0x178>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_GPIO_Init+0x178>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001262:	2332      	movs	r3, #50	; 0x32
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <MX_GPIO_Init+0x17c>)
 800127e:	f000 fba7 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001282:	2386      	movs	r3, #134	; 0x86
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001292:	230b      	movs	r3, #11
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	481e      	ldr	r0, [pc, #120]	; (8001318 <MX_GPIO_Init+0x180>)
 800129e:	f000 fb97 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b4:	230b      	movs	r3, #11
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <MX_GPIO_Init+0x184>)
 80012c0:	f000 fb86 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012c4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012d6:	230a      	movs	r3, #10
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_GPIO_Init+0x180>)
 80012e2:	f000 fb75 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80012e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012f8:	230b      	movs	r3, #11
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <MX_GPIO_Init+0x188>)
 8001304:	f000 fb64 	bl	80019d0 <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400
 8001314:	58020800 	.word	0x58020800
 8001318:	58020000 	.word	0x58020000
 800131c:	58020400 	.word	0x58020400
 8001320:	58021800 	.word	0x58021800

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_MspInit+0x30>)
 800133c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x30>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x30>)
 800134c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	58024400 	.word	0x58024400

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_I2C_MspInit+0x88>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12d      	bne.n	80013e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a8:	23c0      	movs	r3, #192	; 0xc0
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <HAL_I2C_MspInit+0x90>)
 80013c4:	f000 fb04 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005400 	.word	0x40005400
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020400 	.word	0x58020400

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_UART_MspInit+0x88>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12e      	bne.n	800147c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_UART_MspInit+0x8c>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_UART_MspInit+0x8c>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800145a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146c:	2307      	movs	r3, #7
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_UART_MspInit+0x90>)
 8001478:	f000 faaa 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40004800 	.word	0x40004800
 8001488:	58024400 	.word	0x58024400
 800148c:	58020c00 	.word	0x58020c00

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f942 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
	}

return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e009      	b.n	800154c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <_write+0x12>
	}
	return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_close>:

int _close(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	605a      	str	r2, [r3, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f004 fce0 	bl	8005fbc <__errno>
 80015fc:	4602      	mov	r2, r0
 80015fe:	230c      	movs	r3, #12
 8001600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20020000 	.word	0x20020000
 8001628:	00000400 	.word	0x00000400
 800162c:	20000208 	.word	0x20000208
 8001630:	200002f8 	.word	0x200002f8

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001638:	f7ff f82a 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800163c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800163e:	e003      	b.n	8001648 <LoopCopyDataInit>

08001640 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001642:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001644:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001646:	3104      	adds	r1, #4

08001648 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800164c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800164e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001650:	d3f6      	bcc.n	8001640 <CopyDataInit>
  ldr  r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001654:	e002      	b.n	800165c <LoopFillZerobss>

08001656 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001656:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001658:	f842 3b04 	str.w	r3, [r2], #4

0800165c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800165e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001660:	d3f9      	bcc.n	8001656 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001662:	f004 fcb1 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fbb9 	bl	8000ddc <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001670:	08008f18 	.word	0x08008f18
  ldr  r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001678:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800167c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001680:	200002f8 	.word	0x200002f8

08001684 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC3_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168e:	2003      	movs	r0, #3
 8001690:	f000 f96c 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001694:	f001 fea6 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8001698:	4601      	mov	r1, r0
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_Init+0x68>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_Init+0x6c>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa21 f303 	lsr.w	r3, r1, r3
 80016b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_Init+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_Init+0x6c>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_Init+0x70>)
 80016ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_Init+0x74>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f814 	bl	8001700 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e002      	b.n	80016e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016e2:	f7ff fe27 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	58024400 	.word	0x58024400
 80016f4:	08008c1c 	.word	0x08008c1c
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_InitTick+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e021      	b.n	8001758 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_InitTick+0x64>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_InitTick+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f943 	bl	80019b6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f91b 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x68>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000018 	.word	0x20000018
 8001764:	20000000 	.word	0x20000000
 8001768:	20000014 	.word	0x20000014

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000018 	.word	0x20000018
 8001790:	200002f0 	.word	0x200002f0

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200002f0 	.word	0x200002f0

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff ffee 	bl	8001794 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_Delay+0x40>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff ffde 	bl	8001794 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000018 	.word	0x20000018

080017f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetREVID+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0c1b      	lsrs	r3, r3, #16
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	5c001000 	.word	0x5c001000

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	4313      	orrs	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	05fa0000 	.word	0x05fa0000

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff47 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff5e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff90 	bl	80018c0 <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5f 	bl	800186c <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffb2 	bl	8001928 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_GPIO_Init+0x234>)
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019e2:	e194      	b.n	8001d0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8186 	beq.w	8001d08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00b      	beq.n	8001a1c <HAL_GPIO_Init+0x4c>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0xee>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80e0 	beq.w	8001d08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <HAL_GPIO_Init+0x238>)
 8001b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_GPIO_Init+0x238>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_GPIO_Init+0x238>)
 8001b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <HAL_GPIO_Init+0x23c>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a20      	ldr	r2, [pc, #128]	; (8001c10 <HAL_GPIO_Init+0x240>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d052      	beq.n	8001c38 <HAL_GPIO_Init+0x268>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_GPIO_Init+0x244>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_GPIO_Init+0x248>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02b      	beq.n	8001bfa <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_GPIO_Init+0x24c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_GPIO_Init+0x250>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_GPIO_Init+0x254>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_GPIO_Init+0x258>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_GPIO_Init+0x25c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <HAL_GPIO_Init+0x260>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_GPIO_Init+0x264>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bda:	2309      	movs	r3, #9
 8001bdc:	e02d      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bde:	230a      	movs	r3, #10
 8001be0:	e02b      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001be2:	2308      	movs	r3, #8
 8001be4:	e029      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e027      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bea:	2306      	movs	r3, #6
 8001bec:	e025      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e023      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e021      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e01f      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e01d      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01b      	b.n	8001c3a <HAL_GPIO_Init+0x26a>
 8001c02:	bf00      	nop
 8001c04:	58000080 	.word	0x58000080
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	58000400 	.word	0x58000400
 8001c10:	58020000 	.word	0x58020000
 8001c14:	58020400 	.word	0x58020400
 8001c18:	58020800 	.word	0x58020800
 8001c1c:	58020c00 	.word	0x58020c00
 8001c20:	58021000 	.word	0x58021000
 8001c24:	58021400 	.word	0x58021400
 8001c28:	58021800 	.word	0x58021800
 8001c2c:	58021c00 	.word	0x58021c00
 8001c30:	58022000 	.word	0x58022000
 8001c34:	58022400 	.word	0x58022400
 8001c38:	2300      	movs	r3, #0
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f002 0203 	and.w	r2, r2, #3
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	4093      	lsls	r3, r2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4a:	4938      	ldr	r1, [pc, #224]	; (8001d2c <HAL_GPIO_Init+0x35c>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f ae63 	bne.w	80019e4 <HAL_GPIO_Init+0x14>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	58000400 	.word	0x58000400

08001d30 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_HSEM_FastTake+0x2c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_HSEM_FastTake+0x30>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	58026400 	.word	0x58026400
 8001d60:	80000300 	.word	0x80000300

08001d64 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d6e:	4906      	ldr	r1, [pc, #24]	; (8001d88 <HAL_HSEM_Release+0x24>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	58026400 	.word	0x58026400

08001d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fad8 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e006      	b.n	8001e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d104      	bne.n	8001e26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_I2C_Init+0x11c>)
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69d9      	ldr	r1, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	02008000 	.word	0x02008000

08001eac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	f040 80da 	bne.w	8002082 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_I2C_Master_Transmit+0x30>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0d3      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee4:	f7ff fc56 	bl	8001794 <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2319      	movs	r3, #25
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fa00 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0be      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2210      	movs	r2, #16
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	893a      	ldrh	r2, [r7, #8]
 8001f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d90e      	bls.n	8001f56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <HAL_I2C_Master_Transmit+0x1e0>)
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fb62 	bl	8002618 <I2C_TransferConfig>
 8001f54:	e06c      	b.n	8002030 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_I2C_Master_Transmit+0x1e0>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fb51 	bl	8002618 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f76:	e05b      	b.n	8002030 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f9fd 	bl	800237c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e07b      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d034      	beq.n	8002030 <HAL_I2C_Master_Transmit+0x184>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d130      	bne.n	8002030 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f98f 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e04d      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2bff      	cmp	r3, #255	; 0xff
 8001ff0:	d90e      	bls.n	8002010 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	8979      	ldrh	r1, [r7, #10]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fb05 	bl	8002618 <I2C_TransferConfig>
 800200e:	e00f      	b.n	8002030 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 faf4 	bl	8002618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d19e      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f9dc 	bl	80023fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e01a      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2220      	movs	r2, #32
 8002054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_I2C_Master_Transmit+0x1e4>)
 8002062:	400b      	ands	r3, r1
 8002064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	80002000 	.word	0x80002000
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
 80020a4:	4613      	mov	r3, r2
 80020a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	f040 80db 	bne.w	800226c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_Master_Receive+0x30>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0d4      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020cc:	f7ff fb62 	bl	8001794 <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2319      	movs	r3, #25
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f90c 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0bf      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2222      	movs	r2, #34	; 0x22
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2210      	movs	r2, #16
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	893a      	ldrh	r2, [r7, #8]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d90e      	bls.n	800213e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_I2C_Master_Receive+0x1e4>)
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa6e 	bl	8002618 <I2C_TransferConfig>
 800213c:	e06d      	b.n	800221a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_I2C_Master_Receive+0x1e4>)
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fa5d 	bl	8002618 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800215e:	e05c      	b.n	800221a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6a39      	ldr	r1, [r7, #32]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f985 	bl	8002474 <I2C_WaitOnRXNEFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e07c      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d034      	beq.n	800221a <HAL_I2C_Master_Receive+0x186>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d130      	bne.n	800221a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2200      	movs	r2, #0
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f89a 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e04d      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d90e      	bls.n	80021fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fa10 	bl	8002618 <I2C_TransferConfig>
 80021f8:	e00f      	b.n	800221a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	b2da      	uxtb	r2, r3
 800220a:	8979      	ldrh	r1, [r7, #10]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f9ff 	bl	8002618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d19d      	bne.n	8002160 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	6a39      	ldr	r1, [r7, #32]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f8e7 	bl	80023fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e01a      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2220      	movs	r2, #32
 800223e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_I2C_Master_Receive+0x1e8>)
 800224c:	400b      	ands	r3, r1
 800224e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	80002400 	.word	0x80002400
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d103      	bne.n	80022d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d007      	beq.n	80022f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	619a      	str	r2, [r3, #24]
  }
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230c:	e022      	b.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d01e      	beq.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7ff fa3d 	bl	8001794 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d113      	bne.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00f      	b.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	429a      	cmp	r2, r3
 8002370:	d0cd      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002388:	e02c      	b.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8dc 	bl	800254c <I2C_IsAcknowledgeFailed>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e02a      	b.n	80023f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d01e      	beq.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7ff f9f5 	bl	8001794 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d113      	bne.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e007      	b.n	80023f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d1cb      	bne.n	800238a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002408:	e028      	b.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f89c 	bl	800254c <I2C_IsAcknowledgeFailed>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e026      	b.n	800246c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241e:	f7ff f9b9 	bl	8001794 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d113      	bne.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b20      	cmp	r3, #32
 8002468:	d1cf      	bne.n	800240a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002480:	e055      	b.n	800252e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f860 	bl	800254c <I2C_IsAcknowledgeFailed>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e053      	b.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d129      	bne.n	80024f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d105      	bne.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e03f      	b.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e022      	b.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f8:	f7ff f94c 	bl	8001794 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d302      	bcc.n	800250e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d1a2      	bne.n	8002482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	fe00e800 	.word	0xfe00e800

0800254c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b10      	cmp	r3, #16
 8002564:	d151      	bne.n	800260a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002566:	e022      	b.n	80025ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d01e      	beq.n	80025ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002570:	f7ff f910 	bl	8001794 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <I2C_IsAcknowledgeFailed+0x3a>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d113      	bne.n	80025ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e02e      	b.n	800260c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d1d5      	bne.n	8002568 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2210      	movs	r2, #16
 80025c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff fe71 	bl	80022b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <I2C_IsAcknowledgeFailed+0xc8>)
 80025de:	400b      	ands	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	fe00e800 	.word	0xfe00e800

08002618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	4613      	mov	r3, r2
 8002628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	0d5b      	lsrs	r3, r3, #21
 8002634:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <I2C_TransferConfig+0x58>)
 800263a:	430b      	orrs	r3, r1
 800263c:	43db      	mvns	r3, r3
 800263e:	ea02 0103 	and.w	r1, r2, r3
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002648:	7a7b      	ldrb	r3, [r7, #9]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	431a      	orrs	r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	03ff63ff 	.word	0x03ff63ff

08002674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	d138      	bne.n	80026fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002694:	2302      	movs	r3, #2
 8002696:	e032      	b.n	80026fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b20      	cmp	r3, #32
 800271e:	d139      	bne.n	8002794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800272a:	2302      	movs	r3, #2
 800272c:	e033      	b.n	8002796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2224      	movs	r2, #36	; 0x24
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e000      	b.n	8002796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d00a      	beq.n	80027ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e040      	b.n	800284c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e03e      	b.n	800284c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80027d6:	491f      	ldr	r1, [pc, #124]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027de:	f7fe ffd9 	bl	8001794 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027e4:	e009      	b.n	80027fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027e6:	f7fe ffd5 	bl	8001794 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f4:	d901      	bls.n	80027fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e028      	b.n	800284c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	d1ee      	bne.n	80027e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b1e      	cmp	r3, #30
 800280c:	d008      	beq.n	8002820 <HAL_PWREx_ConfigSupply+0x7c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b2e      	cmp	r3, #46	; 0x2e
 8002812:	d005      	beq.n	8002820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b1d      	cmp	r3, #29
 8002818:	d002      	beq.n	8002820 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b2d      	cmp	r3, #45	; 0x2d
 800281e:	d114      	bne.n	800284a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002820:	f7fe ffb8 	bl	8001794 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002826:	e009      	b.n	800283c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002828:	f7fe ffb4 	bl	8001794 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002836:	d901      	bls.n	800283c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e007      	b.n	800284c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_PWREx_ConfigSupply+0xb0>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d1ee      	bne.n	8002828 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	58024800 	.word	0x58024800

08002858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e3ff      	b.n	800306a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8087 	beq.w	8002986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002878:	4b99      	ldr	r3, [pc, #612]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002882:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2b10      	cmp	r3, #16
 800288c:	d007      	beq.n	800289e <HAL_RCC_OscConfig+0x46>
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b18      	cmp	r3, #24
 8002892:	d110      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d10b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	4b90      	ldr	r3, [pc, #576]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d06c      	beq.n	8002984 <HAL_RCC_OscConfig+0x12c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d168      	bne.n	8002984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e3d9      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x76>
 80028c0:	4b87      	ldr	r3, [pc, #540]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x98>
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xbc>
 80028fa:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 8002914:	4b72      	ldr	r3, [pc, #456]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe ff2e 	bl	8001794 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe ff2a 	bl	8001794 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e38d      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800294e:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xe4>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe ff1a 	bl	8001794 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe ff16 	bl	8001794 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e379      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002976:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x10c>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ae 	beq.w	8002af0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800299e:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_RCC_OscConfig+0x162>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b18      	cmp	r3, #24
 80029ae:	d13a      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1ce>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d135      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e34b      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	f7fe ff0d 	bl	80017f0 <HAL_GetREVID>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80029dc:	429a      	cmp	r2, r3
 80029de:	d817      	bhi.n	8002a10 <HAL_RCC_OscConfig+0x1b8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d108      	bne.n	80029fa <HAL_RCC_OscConfig+0x1a2>
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029f0:	4a3b      	ldr	r2, [pc, #236]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f8:	e07a      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0e:	e06f      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	4930      	ldr	r1, [pc, #192]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a24:	e064      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d045      	beq.n	8002aba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0219 	bic.w	r2, r3, #25
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4929      	ldr	r1, [pc, #164]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fea8 	bl	8001794 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe fea4 	bl	8001794 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e307      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	f7fe fec3 	bl	80017f0 <HAL_GetREVID>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d817      	bhi.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d108      	bne.n	8002a8e <HAL_RCC_OscConfig+0x236>
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8a:	6053      	str	r3, [r2, #4]
 8002a8c:	e030      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e025      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e01a      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fe65 	bl	8001794 <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe fe61 	bl	8001794 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d903      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2c4      	b.n	800306a <HAL_RCC_OscConfig+0x812>
 8002ae0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ae4:	4ba4      	ldr	r3, [pc, #656]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a9 	beq.w	8002c50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b08:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d007      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2cc>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b18      	cmp	r3, #24
 8002b18:	d13a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x338>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d135      	bne.n	8002b90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b24:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2e4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e296      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b3c:	f7fe fe58 	bl	80017f0 <HAL_GetREVID>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d817      	bhi.n	8002b7a <HAL_RCC_OscConfig+0x322>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x30c>
 8002b52:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b62:	e075      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	4981      	ldr	r1, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b78:	e06a      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	061b      	lsls	r3, r3, #24
 8002b88:	497b      	ldr	r1, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b8e:	e05f      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d042      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b98:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a76      	ldr	r2, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fdf6 	bl	8001794 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bac:	f7fe fdf2 	bl	8001794 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e255      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bca:	f7fe fe11 	bl	80017f0 <HAL_GetREVID>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d817      	bhi.n	8002c08 <HAL_RCC_OscConfig+0x3b0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d108      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x39a>
 8002be0:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bee:	6053      	str	r3, [r2, #4]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	495d      	ldr	r1, [pc, #372]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	e023      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4958      	ldr	r1, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c1e:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fdb3 	bl	8001794 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c32:	f7fe fdaf 	bl	8001794 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e212      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d036      	beq.n	8002cca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d019      	beq.n	8002c98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe fd90 	bl	8001794 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe fd8c 	bl	8001794 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1ef      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x420>
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fd76 	bl	8001794 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe fd72 	bl	8001794 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1d5      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d036      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fd53 	bl	8001794 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cf2:	f7fe fd4f 	bl	8001794 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1b2      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x49a>
 8002d10:	e018      	b.n	8002d44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fd39 	bl	8001794 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d26:	f7fe fd35 	bl	8001794 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e198      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8085 	beq.w	8002e5c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RCC_OscConfig+0x524>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x524>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fd19 	bl	8001794 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d64:	e00c      	b.n	8002d80 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe fd15 	bl	8001794 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d905      	bls.n	8002d80 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e178      	b.n	800306a <HAL_RCC_OscConfig+0x812>
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCC_OscConfig+0x784>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ec      	beq.n	8002d66 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x54a>
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a91      	ldr	r2, [pc, #580]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	e02d      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x56c>
 8002daa:	4b8d      	ldr	r3, [pc, #564]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a8c      	ldr	r2, [pc, #560]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a89      	ldr	r2, [pc, #548]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	e01c      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x58e>
 8002dcc:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a83      	ldr	r2, [pc, #524]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	e00b      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002de6:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a7d      	ldr	r2, [pc, #500]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a7a      	ldr	r2, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d015      	beq.n	8002e32 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fcc5 	bl	8001794 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fcc1 	bl	8001794 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e122      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e24:	4b6e      	ldr	r3, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ee      	beq.n	8002e0e <HAL_RCC_OscConfig+0x5b6>
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fcaf 	bl	8001794 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fcab 	bl	8001794 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10c      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e50:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8101 	beq.w	8003068 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e66:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	f000 80bc 	beq.w	8002fec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	f040 8095 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fc83 	bl	8001794 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fc7f 	bl	8001794 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0e2      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x78c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	4946      	ldr	r1, [pc, #280]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	628b      	str	r3, [r1, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002efa:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a36      	ldr	r2, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0x790>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f18:	00d2      	lsls	r2, r2, #3
 8002f1a:	4931      	ldr	r1, [pc, #196]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	f023 020c 	bic.w	r2, r3, #12
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	492c      	ldr	r1, [pc, #176]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f023 0202 	bic.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4928      	ldr	r1, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fc08 	bl	8001794 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fc04 	bl	8001794 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e067      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x730>
 8002fa6:	e05f      	b.n	8003068 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fbee 	bl	8001794 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fbea 	bl	8001794 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04d      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x764>
 8002fda:	e045      	b.n	8003068 <HAL_RCC_OscConfig+0x810>
 8002fdc:	58024800 	.word	0x58024800
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	fffffc0c 	.word	0xfffffc0c
 8002fe8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x81c>)
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_OscConfig+0x81c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d031      	beq.n	8003064 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d12a      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d122      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0a5b      	lsrs	r3, r3, #9
 8003032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d111      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400

08003078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e19c      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b8a      	ldr	r3, [pc, #552]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b87      	ldr	r3, [pc, #540]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 020f 	bic.w	r2, r3, #15
 80030a2:	4985      	ldr	r1, [pc, #532]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e184      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030d8:	4b78      	ldr	r3, [pc, #480]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4975      	ldr	r1, [pc, #468]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d908      	bls.n	8003118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	496a      	ldr	r1, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	495e      	ldr	r1, [pc, #376]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315e:	429a      	cmp	r2, r3
 8003160:	d908      	bls.n	8003174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4953      	ldr	r1, [pc, #332]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	429a      	cmp	r2, r3
 800318e:	d908      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4947      	ldr	r1, [pc, #284]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d055      	beq.n	800325a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4940      	ldr	r1, [pc, #256]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031c8:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0f6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0ea      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0de      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003208:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 0207 	bic.w	r2, r3, #7
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4925      	ldr	r1, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fab3 	bl	8001794 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	e00a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fe faaf 	bl	8001794 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0be      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	429a      	cmp	r2, r3
 8003258:	d1eb      	bne.n	8003232 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	429a      	cmp	r2, r3
 8003274:	d208      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f023 020f 	bic.w	r2, r3, #15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	490e      	ldr	r1, [pc, #56]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d214      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 020f 	bic.w	r2, r3, #15
 800329e:	4906      	ldr	r1, [pc, #24]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e086      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
 80032b8:	52002000 	.word	0x52002000
 80032bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d8:	429a      	cmp	r2, r3
 80032da:	d208      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4939      	ldr	r1, [pc, #228]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d208      	bcs.n	800331c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	492e      	ldr	r1, [pc, #184]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003334:	429a      	cmp	r2, r3
 8003336:	d208      	bcs.n	800334a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4922      	ldr	r1, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003346:	4313      	orrs	r3, r2
 8003348:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4917      	ldr	r1, [pc, #92]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003374:	4313      	orrs	r3, r2
 8003376:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003378:	f000 f834 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 800337c:	4601      	mov	r1, r0
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa21 f303 	lsr.w	r3, r1, r3
 8003394:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x360>)
 80033ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x364>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x368>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe f9a0 	bl	8001700 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	08008c1c 	.word	0x08008c1c
 80033d8:	20000004 	.word	0x20000004
 80033dc:	20000000 	.word	0x20000000
 80033e0:	20000014 	.word	0x20000014

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ea:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f2:	2b18      	cmp	r3, #24
 80033f4:	f200 814e 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x2b0>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003465 	.word	0x08003465
 8003404:	08003695 	.word	0x08003695
 8003408:	08003695 	.word	0x08003695
 800340c:	08003695 	.word	0x08003695
 8003410:	08003695 	.word	0x08003695
 8003414:	08003695 	.word	0x08003695
 8003418:	08003695 	.word	0x08003695
 800341c:	08003695 	.word	0x08003695
 8003420:	0800348b 	.word	0x0800348b
 8003424:	08003695 	.word	0x08003695
 8003428:	08003695 	.word	0x08003695
 800342c:	08003695 	.word	0x08003695
 8003430:	08003695 	.word	0x08003695
 8003434:	08003695 	.word	0x08003695
 8003438:	08003695 	.word	0x08003695
 800343c:	08003695 	.word	0x08003695
 8003440:	08003491 	.word	0x08003491
 8003444:	08003695 	.word	0x08003695
 8003448:	08003695 	.word	0x08003695
 800344c:	08003695 	.word	0x08003695
 8003450:	08003695 	.word	0x08003695
 8003454:	08003695 	.word	0x08003695
 8003458:	08003695 	.word	0x08003695
 800345c:	08003695 	.word	0x08003695
 8003460:	08003497 	.word	0x08003497
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003464:	4b90      	ldr	r3, [pc, #576]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003470:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	4a8c      	ldr	r2, [pc, #560]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003482:	e10a      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003484:	4b89      	ldr	r3, [pc, #548]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003486:	61bb      	str	r3, [r7, #24]
    break;
 8003488:	e107      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800348c:	61bb      	str	r3, [r7, #24]
    break;
 800348e:	e104      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003492:	61bb      	str	r3, [r7, #24]
    break;
 8003494:	e101      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034a0:	4b81      	ldr	r3, [pc, #516]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80da 	beq.w	800368e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d05a      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x1b2>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d302      	bcc.n	80034ea <HAL_RCC_GetSysClockFreq+0x106>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d078      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x1f6>
 80034e8:	e099      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02d      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	ed97 6a02 	vldr	s12, [r7, #8]
 8003534:	eddf 5a60 	vldr	s11, [pc, #384]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003550:	e087      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80036bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8003560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003574:	ed97 6a02 	vldr	s12, [r7, #8]
 8003578:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800357c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003594:	e065      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d8:	e043      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80035e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003600:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800361c:	e021      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003628:	eddf 6a25 	vldr	s13, [pc, #148]	; 80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800362c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003640:	ed97 6a02 	vldr	s12, [r7, #8]
 8003644:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003660:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	0a5b      	lsrs	r3, r3, #9
 8003668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366c:	3301      	adds	r3, #1
 800366e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800367a:	edd7 6a07 	vldr	s13, [r7, #28]
 800367e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003686:	ee17 3a90 	vmov	r3, s15
 800368a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800368c:	e005      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
    break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003696:	61bb      	str	r3, [r7, #24]
    break;
 8003698:	bf00      	nop
  }

  return sysclockfreq;
 800369a:	69bb      	ldr	r3, [r7, #24]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3724      	adds	r7, #36	; 0x24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58024400 	.word	0x58024400
 80036ac:	03d09000 	.word	0x03d09000
 80036b0:	003d0900 	.word	0x003d0900
 80036b4:	017d7840 	.word	0x017d7840
 80036b8:	46000000 	.word	0x46000000
 80036bc:	4c742400 	.word	0x4c742400
 80036c0:	4a742400 	.word	0x4a742400
 80036c4:	4bbebc20 	.word	0x4bbebc20

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ce:	f7ff fe89 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80036d2:	4601      	mov	r1, r0
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_GetHCLKFreq+0x50>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a0f      	ldr	r2, [pc, #60]	; (800371c <HAL_RCC_GetHCLKFreq+0x54>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_GetHCLKFreq+0x54>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_RCC_GetHCLKFreq+0x58>)
 8003704:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_GetHCLKFreq+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	58024400 	.word	0x58024400
 800371c:	08008c1c 	.word	0x08008c1c
 8003720:	20000004 	.word	0x20000004
 8003724:	20000000 	.word	0x20000000

08003728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800372c:	f7ff ffcc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003730:	4601      	mov	r1, r0
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	58024400 	.word	0x58024400
 8003750:	08008c1c 	.word	0x08008c1c

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003758:	f7ff ffb6 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 800375c:	4601      	mov	r1, r0
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_RCC_GetPCLK2Freq+0x28>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024400 	.word	0x58024400
 800377c:	08008c1c 	.word	0x08008c1c

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2300      	movs	r3, #0
 800378e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03d      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a4:	d013      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037aa:	d802      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037b0:	e01f      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b6:	d013      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80037b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037bc:	d01c      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80037be:	e018      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4baf      	ldr	r3, [pc, #700]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4aae      	ldr	r2, [pc, #696]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f96f 	bl	8004ab8 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fa18 	bl	8004c1c <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003800:	4b9f      	ldr	r3, [pc, #636]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380c:	499c      	ldr	r1, [pc, #624]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380e:	4313      	orrs	r3, r2
 8003810:	650b      	str	r3, [r1, #80]	; 0x50
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	2b04      	cmp	r3, #4
 800382a:	d826      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003849 	.word	0x08003849
 8003838:	08003857 	.word	0x08003857
 800383c:	08003869 	.word	0x08003869
 8003840:	08003881 	.word	0x08003881
 8003844:	08003881 	.word	0x08003881
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4a8c      	ldr	r2, [pc, #560]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003854:	e015      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 f92b 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003866:	e00c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3324      	adds	r3, #36	; 0x24
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f9d4 	bl	8004c1c <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
      break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b7d      	ldr	r3, [pc, #500]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	497a      	ldr	r1, [pc, #488]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003896:	4313      	orrs	r3, r2
 8003898:	650b      	str	r3, [r1, #80]	; 0x50
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d01c      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d804      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d00d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80038c0:	e01e      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80038c2:	2bc0      	cmp	r3, #192	; 0xc0
 80038c4:	d01f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d01e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038cc:	e018      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ce:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038da:	e017      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f8e8 	bl	8004ab8 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ec:	e00e      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3324      	adds	r3, #36	; 0x24
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f991 	bl	8004c1c <RCCEx_PLL3_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038fe:	e005      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	e002      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800390a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4958      	ldr	r1, [pc, #352]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003920:	4313      	orrs	r3, r2
 8003922:	650b      	str	r3, [r1, #80]	; 0x50
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800393c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003940:	d01f      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003946:	d805      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800394c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003950:	d00e      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003952:	e01f      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003958:	d01f      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800395a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395e:	d01e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003960:	e018      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a46      	ldr	r2, [pc, #280]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800396e:	e017      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f89e 	bl	8004ab8 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 f947 	bl	8004c1c <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800399e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039b4:	4932      	ldr	r1, [pc, #200]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	658b      	str	r3, [r1, #88]	; 0x58
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d044      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d6:	d01f      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039dc:	d805      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80039e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039e8:	e01f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ee:	d01f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f4:	d01e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e017      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f853 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a16:	e00e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f8fc 	bl	8004c1c <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a4a:	490d      	ldr	r1, [pc, #52]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a50:	e001      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d035      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d00c      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d802      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01b      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003a72:	e017      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d018      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003a7c:	e012      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4baf      	ldr	r3, [pc, #700]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4aae      	ldr	r2, [pc, #696]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f80d 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ab6:	4ba3      	ldr	r3, [pc, #652]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	49a0      	ldr	r1, [pc, #640]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ac8:	e001      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d042      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d01f      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d805      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d00e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003af4:	e01f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003af6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003afa:	d01f      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b00:	d01e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003b02:	e018      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a8e      	ldr	r2, [pc, #568]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b10:	e017      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ffcd 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b22:	e00e      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f876 	bl	8004c1c <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b34:	e005      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b48:	4b7e      	ldr	r3, [pc, #504]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	497b      	ldr	r1, [pc, #492]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	650b      	str	r3, [r1, #80]	; 0x50
 8003b5a:	e001      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d042      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b74:	d01b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7a:	d805      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b8c:	d01d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b92:	d01c      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b98:	d01b      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b9a:	e011      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ff88 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bac:	e012      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3324      	adds	r3, #36	; 0x24
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f831 	bl	8004c1c <RCCEx_PLL3_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bda:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	4957      	ldr	r1, [pc, #348]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	650b      	str	r3, [r1, #80]	; 0x50
 8003bec:	e001      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d044      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d01b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0e:	d805      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d022      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c1a:	e01b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d01d      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c26:	d01c      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c2c:	d01b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c2e:	e011      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 ff3e 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c40:	e012      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 ffe7 	bl	8004c1c <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c7c:	4931      	ldr	r1, [pc, #196]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	658b      	str	r3, [r1, #88]	; 0x58
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d005      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003ca8:	e00f      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fefa 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	4917      	ldr	r1, [pc, #92]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d035      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d81b      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d1d 	.word	0x08003d1d
 8003d14:	08003d2b 	.word	0x08003d2b
 8003d18:	08003d49 	.word	0x08003d49
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d28:	e00f      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fec1 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d3a:	e006      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d50:	4bba      	ldr	r3, [pc, #744]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	f023 0203 	bic.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	49b7      	ldr	r1, [pc, #732]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d62:	e001      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8086 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d76:	4bb2      	ldr	r3, [pc, #712]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4ab1      	ldr	r2, [pc, #708]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d82:	f7fd fd07 	bl	8001794 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d88:	e009      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fd03 	bl	8001794 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	; 0x64
 8003d96:	d902      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9e:	4ba8      	ldr	r3, [pc, #672]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ef      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d166      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003db0:	4ba2      	ldr	r3, [pc, #648]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dba:	4053      	eors	r3, r2
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dce:	4b9b      	ldr	r3, [pc, #620]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a9a      	ldr	r2, [pc, #616]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dda:	4b98      	ldr	r3, [pc, #608]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4a97      	ldr	r2, [pc, #604]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de6:	4a95      	ldr	r2, [pc, #596]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d115      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fccc 	bl	8001794 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fd fcc8 	bl	8001794 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
            break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d126      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d10d      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e3a:	4b80      	ldr	r3, [pc, #512]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e48:	0919      	lsrs	r1, r3, #4
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e4c:	400b      	ands	r3, r1
 8003e4e:	497b      	ldr	r1, [pc, #492]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003e56:	4b79      	ldr	r3, [pc, #484]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e60:	6113      	str	r3, [r2, #16]
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	4972      	ldr	r1, [pc, #456]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	670b      	str	r3, [r1, #112]	; 0x70
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e92:	2b28      	cmp	r3, #40	; 0x28
 8003e94:	d866      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003f6b 	.word	0x08003f6b
 8003ea0:	08003f65 	.word	0x08003f65
 8003ea4:	08003f65 	.word	0x08003f65
 8003ea8:	08003f65 	.word	0x08003f65
 8003eac:	08003f65 	.word	0x08003f65
 8003eb0:	08003f65 	.word	0x08003f65
 8003eb4:	08003f65 	.word	0x08003f65
 8003eb8:	08003f65 	.word	0x08003f65
 8003ebc:	08003f41 	.word	0x08003f41
 8003ec0:	08003f65 	.word	0x08003f65
 8003ec4:	08003f65 	.word	0x08003f65
 8003ec8:	08003f65 	.word	0x08003f65
 8003ecc:	08003f65 	.word	0x08003f65
 8003ed0:	08003f65 	.word	0x08003f65
 8003ed4:	08003f65 	.word	0x08003f65
 8003ed8:	08003f65 	.word	0x08003f65
 8003edc:	08003f53 	.word	0x08003f53
 8003ee0:	08003f65 	.word	0x08003f65
 8003ee4:	08003f65 	.word	0x08003f65
 8003ee8:	08003f65 	.word	0x08003f65
 8003eec:	08003f65 	.word	0x08003f65
 8003ef0:	08003f65 	.word	0x08003f65
 8003ef4:	08003f65 	.word	0x08003f65
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08003f6b 	.word	0x08003f6b
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08003f65 	.word	0x08003f65
 8003f08:	08003f65 	.word	0x08003f65
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	08003f65 	.word	0x08003f65
 8003f1c:	08003f6b 	.word	0x08003f6b
 8003f20:	08003f65 	.word	0x08003f65
 8003f24:	08003f65 	.word	0x08003f65
 8003f28:	08003f65 	.word	0x08003f65
 8003f2c:	08003f65 	.word	0x08003f65
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003f65 	.word	0x08003f65
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f6b 	.word	0x08003f6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fdb6 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe5f 	bl	8004c1c <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	492f      	ldr	r1, [pc, #188]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	654b      	str	r3, [r1, #84]	; 0x54
 8003f84:	e001      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d037      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d820      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fe7 	.word	0x08003fe7
 8003fa8:	08003fbd 	.word	0x08003fbd
 8003fac:	08003fcf 	.word	0x08003fcf
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fd78 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe21 	bl	8004c1c <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4910      	ldr	r1, [pc, #64]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d040      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	2b05      	cmp	r3, #5
 800401a:	d827      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004073 	.word	0x08004073
 8004028:	08004049 	.word	0x08004049
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004073 	.word	0x08004073
 8004034:	08004073 	.word	0x08004073
 8004038:	08004073 	.word	0x08004073
 800403c:	58024400 	.word	0x58024400
 8004040:	58024800 	.word	0x58024800
 8004044:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fd32 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004058:	e00c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fddb 	bl	8004c1c <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800406a:	e003      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407a:	4bb2      	ldr	r3, [pc, #712]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f023 0207 	bic.w	r2, r3, #7
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	49ae      	ldr	r1, [pc, #696]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	658b      	str	r3, [r1, #88]	; 0x58
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d044      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040aa:	d01b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d805      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d022      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80040b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d01d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80040c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c8:	d01c      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80040ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ce:	d01b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80040d0:	e011      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fced 	bl	8004ab8 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040e2:	e012      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fd96 	bl	8004c1c <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e009      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
      break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004110:	4b8c      	ldr	r3, [pc, #560]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411e:	4989      	ldr	r1, [pc, #548]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	654b      	str	r3, [r1, #84]	; 0x54
 8004124:	e001      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d01b      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d805      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d022      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004152:	e01b      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d01d      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800415a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800415e:	d01c      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004164:	d01b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004166:	e011      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fca2 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004178:	e012      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd4b 	bl	8004c1c <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800418a:	e009      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004192:	bf00      	nop
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800419e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a6:	4b67      	ldr	r3, [pc, #412]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b4:	4963      	ldr	r1, [pc, #396]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d044      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d6:	d01b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80041d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041dc:	d805      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041e8:	e01b      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d01d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041f4:	d01c      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80041f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041fa:	d01b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80041fc:	e011      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fc57 	bl	8004ab8 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800420e:	e012      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3324      	adds	r3, #36	; 0x24
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd00 	bl	8004c1c <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004220:	e009      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
      break;
 8004226:	e006      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004228:	bf00      	nop
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424a:	493e      	ldr	r1, [pc, #248]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	658b      	str	r3, [r1, #88]	; 0x58
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d10a      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fcd1 	bl	8004c1c <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004284:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004292:	492c      	ldr	r1, [pc, #176]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fcb0 	bl	8004c1c <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	491b      	ldr	r1, [pc, #108]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d032      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d00d      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80042f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fbd8 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800430c:	e00c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fc81 	bl	8004c1c <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800433c:	4901      	ldr	r1, [pc, #4]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	658b      	str	r3, [r1, #88]	; 0x58
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004362:	d00c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004368:	d015      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436e:	d10f      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b79      	ldr	r3, [pc, #484]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a78      	ldr	r2, [pc, #480]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fc49 	bl	8004c1c <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	496a      	ldr	r1, [pc, #424]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	654b      	str	r3, [r1, #84]	; 0x54
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d029      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d007      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80043d2:	e00f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4a5f      	ldr	r2, [pc, #380]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043e0:	e00b      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb65 	bl	8004ab8 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004400:	4b55      	ldr	r3, [pc, #340]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	4952      	ldr	r1, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fbf6 	bl	8004c1c <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02f      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d00c      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d802      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800445a:	e00d      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d00f      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004466:	d00e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004476:	e007      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449a:	492f      	ldr	r1, [pc, #188]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	654b      	str	r3, [r1, #84]	; 0x54
 80044a0:	e001      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4926      	ldr	r1, [pc, #152]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044de:	491e      	ldr	r1, [pc, #120]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044fc:	4916      	ldr	r1, [pc, #88]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004518:	6113      	str	r3, [r2, #16]
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da08      	bge.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	4906      	ldr	r1, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004544:	7dbb      	ldrb	r3, [r7, #22]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400

0800455c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004560:	f7ff f8b2 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8004564:	4601      	mov	r1, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58024400 	.word	0x58024400
 8004584:	08008c1c 	.word	0x08008c1c

08004588 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004590:	4b9d      	ldr	r3, [pc, #628]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800459a:	4b9b      	ldr	r3, [pc, #620]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	0b1b      	lsrs	r3, r3, #12
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045a6:	4b98      	ldr	r3, [pc, #608]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045b2:	4b95      	ldr	r3, [pc, #596]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	08db      	lsrs	r3, r3, #3
 80045b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 810a 	beq.w	80047ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d05a      	beq.n	8004692 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d302      	bcc.n	80045e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d078      	beq.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80045e4:	e099      	b.n	800471a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e6:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02d      	beq.n	800464e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	4a83      	ldr	r2, [pc, #524]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461c:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800464c:	e087      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800465c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004660:	4b69      	ldr	r3, [pc, #420]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004670:	ed97 6a03 	vldr	s12, [r7, #12]
 8004674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004690:	e065      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a4:	4b58      	ldr	r3, [pc, #352]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d4:	e043      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800481c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80046e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e8:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004714:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004718:	e021      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004724:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	0a5b      	lsrs	r3, r3, #9
 8004764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004778:	edd7 6a07 	vldr	s13, [r7, #28]
 800477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	ee17 2a90 	vmov	r2, s15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 2a90 	vmov	r2, s15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	3724      	adds	r7, #36	; 0x24
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	58024400 	.word	0x58024400
 800480c:	03d09000 	.word	0x03d09000
 8004810:	46000000 	.word	0x46000000
 8004814:	4c742400 	.word	0x4c742400
 8004818:	4a742400 	.word	0x4a742400
 800481c:	4bbebc20 	.word	0x4bbebc20

08004820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	; 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004828:	4b9d      	ldr	r3, [pc, #628]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004832:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	0d1b      	lsrs	r3, r3, #20
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800483e:	4b98      	ldr	r3, [pc, #608]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800484a:	4b95      	ldr	r3, [pc, #596]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 810a 	beq.w	8004a82 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d05a      	beq.n	800492a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d302      	bcc.n	800487e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d078      	beq.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800487c:	e099      	b.n	80049b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02d      	beq.n	80048e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800488a:	4b85      	ldr	r3, [pc, #532]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b4:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048e4:	e087      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80048f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f8:	4b69      	ldr	r3, [pc, #420]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004908:	ed97 6a03 	vldr	s12, [r7, #12]
 800490c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004928:	e065      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004934:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004950:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496c:	e043      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800497c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	ed97 6a03 	vldr	s12, [r7, #12]
 8004994:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b0:	e021      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1c:	ee17 2a90 	vmov	r2, s15
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4a:	ee17 2a90 	vmov	r2, s15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a78:	ee17 2a90 	vmov	r2, s15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3724      	adds	r7, #36	; 0x24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4bbebc20 	.word	0x4bbebc20

08004ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e099      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4e      	ldr	r2, [pc, #312]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fe57 	bl	8001794 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aea:	f7fc fe53 	bl	8001794 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b08:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	493f      	ldr	r1, [pc, #252]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b4c:	4931      	ldr	r1, [pc, #196]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b52:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	492d      	ldr	r1, [pc, #180]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f023 0220 	bic.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4928      	ldr	r1, [pc, #160]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <RCCEx_PLL2_Config+0x160>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69d2      	ldr	r2, [r2, #28]
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4920      	ldr	r1, [pc, #128]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bb4:	e00f      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc8:	e005      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc fdd7 	bl	8001794 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bea:	f7fc fdd3 	bl	8001794 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	ffff0007 	.word	0xffff0007

08004c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2a:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d101      	bne.n	8004c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e099      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc fda5 	bl	8001794 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc fda1 	bl	8001794 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e086      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	493f      	ldr	r1, [pc, #252]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cb0:	4931      	ldr	r1, [pc, #196]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492d      	ldr	r1, [pc, #180]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4928      	ldr	r1, [pc, #160]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <RCCEx_PLL3_Config+0x160>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69d2      	ldr	r2, [r2, #28]
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d18:	e00f      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d2c:	e005      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc fd25 	bl	8001794 <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d4e:	f7fc fd21 	bl	8001794 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	ffff0007 	.word	0xffff0007

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e042      	b.n	8004e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fb29 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8c2 	bl	8004f4c <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fe66 	bl	8005aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 feed 	bl	8005bf0 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	f040 8083 	bne.w	8004f42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Transmit+0x28>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e07b      	b.n	8004f44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit+0x3a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e074      	b.n	8004f44 <HAL_UART_Transmit+0x124>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2221      	movs	r2, #33	; 0x21
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e72:	f7fc fc8f 	bl	8001794 <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d108      	bne.n	8004ea4 <HAL_UART_Transmit+0x84>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e003      	b.n	8004eac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004eb4:	e02c      	b.n	8004f10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fedd 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e039      	b.n	8004f44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e007      	b.n	8004efe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1cc      	bne.n	8004eb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 feaa 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e006      	b.n	8004f44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f50:	b08e      	sub	sp, #56	; 0x38
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4bc1      	ldr	r3, [pc, #772]	; (800528c <UART_SetConfig+0x340>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4ab7      	ldr	r2, [pc, #732]	; (8005290 <UART_SetConfig+0x344>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	4bb2      	ldr	r3, [pc, #712]	; (8005294 <UART_SetConfig+0x348>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	f023 010f 	bic.w	r1, r3, #15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4aa9      	ldr	r2, [pc, #676]	; (8005298 <UART_SetConfig+0x34c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d177      	bne.n	80050e6 <UART_SetConfig+0x19a>
 8004ff6:	4ba9      	ldr	r3, [pc, #676]	; (800529c <UART_SetConfig+0x350>)
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ffe:	2b28      	cmp	r3, #40	; 0x28
 8005000:	d86c      	bhi.n	80050dc <UART_SetConfig+0x190>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0xbc>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050dd 	.word	0x080050dd
 8005010:	080050dd 	.word	0x080050dd
 8005014:	080050dd 	.word	0x080050dd
 8005018:	080050dd 	.word	0x080050dd
 800501c:	080050dd 	.word	0x080050dd
 8005020:	080050dd 	.word	0x080050dd
 8005024:	080050dd 	.word	0x080050dd
 8005028:	080050b5 	.word	0x080050b5
 800502c:	080050dd 	.word	0x080050dd
 8005030:	080050dd 	.word	0x080050dd
 8005034:	080050dd 	.word	0x080050dd
 8005038:	080050dd 	.word	0x080050dd
 800503c:	080050dd 	.word	0x080050dd
 8005040:	080050dd 	.word	0x080050dd
 8005044:	080050dd 	.word	0x080050dd
 8005048:	080050bd 	.word	0x080050bd
 800504c:	080050dd 	.word	0x080050dd
 8005050:	080050dd 	.word	0x080050dd
 8005054:	080050dd 	.word	0x080050dd
 8005058:	080050dd 	.word	0x080050dd
 800505c:	080050dd 	.word	0x080050dd
 8005060:	080050dd 	.word	0x080050dd
 8005064:	080050dd 	.word	0x080050dd
 8005068:	080050c5 	.word	0x080050c5
 800506c:	080050dd 	.word	0x080050dd
 8005070:	080050dd 	.word	0x080050dd
 8005074:	080050dd 	.word	0x080050dd
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080050dd 	.word	0x080050dd
 8005080:	080050dd 	.word	0x080050dd
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050cd 	.word	0x080050cd
 800508c:	080050dd 	.word	0x080050dd
 8005090:	080050dd 	.word	0x080050dd
 8005094:	080050dd 	.word	0x080050dd
 8005098:	080050dd 	.word	0x080050dd
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	080050dd 	.word	0x080050dd
 80050a4:	080050dd 	.word	0x080050dd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b2:	e233      	b.n	800551c <UART_SetConfig+0x5d0>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e22f      	b.n	800551c <UART_SetConfig+0x5d0>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e22b      	b.n	800551c <UART_SetConfig+0x5d0>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e227      	b.n	800551c <UART_SetConfig+0x5d0>
 80050cc:	2320      	movs	r3, #32
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e223      	b.n	800551c <UART_SetConfig+0x5d0>
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e21f      	b.n	800551c <UART_SetConfig+0x5d0>
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	bf00      	nop
 80050e4:	e21a      	b.n	800551c <UART_SetConfig+0x5d0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <UART_SetConfig+0x354>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d132      	bne.n	8005156 <UART_SetConfig+0x20a>
 80050f0:	4b6a      	ldr	r3, [pc, #424]	; (800529c <UART_SetConfig+0x350>)
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d827      	bhi.n	800514c <UART_SetConfig+0x200>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x1b8>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005125 	.word	0x08005125
 800510c:	0800512d 	.word	0x0800512d
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005122:	e1fb      	b.n	800551c <UART_SetConfig+0x5d0>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512a:	e1f7      	b.n	800551c <UART_SetConfig+0x5d0>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005132:	e1f3      	b.n	800551c <UART_SetConfig+0x5d0>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513a:	e1ef      	b.n	800551c <UART_SetConfig+0x5d0>
 800513c:	2320      	movs	r3, #32
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005142:	e1eb      	b.n	800551c <UART_SetConfig+0x5d0>
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	e1e7      	b.n	800551c <UART_SetConfig+0x5d0>
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005152:	bf00      	nop
 8005154:	e1e2      	b.n	800551c <UART_SetConfig+0x5d0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a52      	ldr	r2, [pc, #328]	; (80052a4 <UART_SetConfig+0x358>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d132      	bne.n	80051c6 <UART_SetConfig+0x27a>
 8005160:	4b4e      	ldr	r3, [pc, #312]	; (800529c <UART_SetConfig+0x350>)
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	2b05      	cmp	r3, #5
 800516a:	d827      	bhi.n	80051bc <UART_SetConfig+0x270>
 800516c:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x228>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e1c3      	b.n	800551c <UART_SetConfig+0x5d0>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e1bf      	b.n	800551c <UART_SetConfig+0x5d0>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e1bb      	b.n	800551c <UART_SetConfig+0x5d0>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051aa:	e1b7      	b.n	800551c <UART_SetConfig+0x5d0>
 80051ac:	2320      	movs	r3, #32
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b2:	e1b3      	b.n	800551c <UART_SetConfig+0x5d0>
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ba:	e1af      	b.n	800551c <UART_SetConfig+0x5d0>
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	bf00      	nop
 80051c4:	e1aa      	b.n	800551c <UART_SetConfig+0x5d0>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <UART_SetConfig+0x35c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d132      	bne.n	8005236 <UART_SetConfig+0x2ea>
 80051d0:	4b32      	ldr	r3, [pc, #200]	; (800529c <UART_SetConfig+0x350>)
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d827      	bhi.n	800522c <UART_SetConfig+0x2e0>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x298>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800520d 	.word	0x0800520d
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005202:	e18b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520a:	e187      	b.n	800551c <UART_SetConfig+0x5d0>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005212:	e183      	b.n	800551c <UART_SetConfig+0x5d0>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521a:	e17f      	b.n	800551c <UART_SetConfig+0x5d0>
 800521c:	2320      	movs	r3, #32
 800521e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005222:	e17b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	e177      	b.n	800551c <UART_SetConfig+0x5d0>
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005232:	bf00      	nop
 8005234:	e172      	b.n	800551c <UART_SetConfig+0x5d0>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <UART_SetConfig+0x360>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d144      	bne.n	80052ca <UART_SetConfig+0x37e>
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <UART_SetConfig+0x350>)
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	2b05      	cmp	r3, #5
 800524a:	d839      	bhi.n	80052c0 <UART_SetConfig+0x374>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x308>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	0800526d 	.word	0x0800526d
 8005258:	08005275 	.word	0x08005275
 800525c:	0800527d 	.word	0x0800527d
 8005260:	08005285 	.word	0x08005285
 8005264:	080052b1 	.word	0x080052b1
 8005268:	080052b9 	.word	0x080052b9
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e153      	b.n	800551c <UART_SetConfig+0x5d0>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	e14f      	b.n	800551c <UART_SetConfig+0x5d0>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e14b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e147      	b.n	800551c <UART_SetConfig+0x5d0>
 800528c:	cfff69f3 	.word	0xcfff69f3
 8005290:	58000c00 	.word	0x58000c00
 8005294:	11fff4ff 	.word	0x11fff4ff
 8005298:	40011000 	.word	0x40011000
 800529c:	58024400 	.word	0x58024400
 80052a0:	40004400 	.word	0x40004400
 80052a4:	40004800 	.word	0x40004800
 80052a8:	40004c00 	.word	0x40004c00
 80052ac:	40005000 	.word	0x40005000
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b6:	e131      	b.n	800551c <UART_SetConfig+0x5d0>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052be:	e12d      	b.n	800551c <UART_SetConfig+0x5d0>
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c6:	bf00      	nop
 80052c8:	e128      	b.n	800551c <UART_SetConfig+0x5d0>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4ab6      	ldr	r2, [pc, #728]	; (80055a8 <UART_SetConfig+0x65c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d178      	bne.n	80053c6 <UART_SetConfig+0x47a>
 80052d4:	4bb5      	ldr	r3, [pc, #724]	; (80055ac <UART_SetConfig+0x660>)
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d86d      	bhi.n	80053bc <UART_SetConfig+0x470>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x39c>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800538d 	.word	0x0800538d
 80052ec:	080053bd 	.word	0x080053bd
 80052f0:	080053bd 	.word	0x080053bd
 80052f4:	080053bd 	.word	0x080053bd
 80052f8:	080053bd 	.word	0x080053bd
 80052fc:	080053bd 	.word	0x080053bd
 8005300:	080053bd 	.word	0x080053bd
 8005304:	080053bd 	.word	0x080053bd
 8005308:	08005395 	.word	0x08005395
 800530c:	080053bd 	.word	0x080053bd
 8005310:	080053bd 	.word	0x080053bd
 8005314:	080053bd 	.word	0x080053bd
 8005318:	080053bd 	.word	0x080053bd
 800531c:	080053bd 	.word	0x080053bd
 8005320:	080053bd 	.word	0x080053bd
 8005324:	080053bd 	.word	0x080053bd
 8005328:	0800539d 	.word	0x0800539d
 800532c:	080053bd 	.word	0x080053bd
 8005330:	080053bd 	.word	0x080053bd
 8005334:	080053bd 	.word	0x080053bd
 8005338:	080053bd 	.word	0x080053bd
 800533c:	080053bd 	.word	0x080053bd
 8005340:	080053bd 	.word	0x080053bd
 8005344:	080053bd 	.word	0x080053bd
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053bd 	.word	0x080053bd
 8005350:	080053bd 	.word	0x080053bd
 8005354:	080053bd 	.word	0x080053bd
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	080053bd 	.word	0x080053bd
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053ad 	.word	0x080053ad
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080053bd 	.word	0x080053bd
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053bd 	.word	0x080053bd
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053bd 	.word	0x080053bd
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053b5 	.word	0x080053b5
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e0c3      	b.n	800551c <UART_SetConfig+0x5d0>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e0bf      	b.n	800551c <UART_SetConfig+0x5d0>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e0bb      	b.n	800551c <UART_SetConfig+0x5d0>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e0b7      	b.n	800551c <UART_SetConfig+0x5d0>
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e0b3      	b.n	800551c <UART_SetConfig+0x5d0>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e0af      	b.n	800551c <UART_SetConfig+0x5d0>
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	bf00      	nop
 80053c4:	e0aa      	b.n	800551c <UART_SetConfig+0x5d0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a79      	ldr	r2, [pc, #484]	; (80055b0 <UART_SetConfig+0x664>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d132      	bne.n	8005436 <UART_SetConfig+0x4ea>
 80053d0:	4b76      	ldr	r3, [pc, #472]	; (80055ac <UART_SetConfig+0x660>)
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d827      	bhi.n	800542c <UART_SetConfig+0x4e0>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x498>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e08b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e087      	b.n	800551c <UART_SetConfig+0x5d0>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e083      	b.n	800551c <UART_SetConfig+0x5d0>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e07f      	b.n	800551c <UART_SetConfig+0x5d0>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e07b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e077      	b.n	800551c <UART_SetConfig+0x5d0>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	bf00      	nop
 8005434:	e072      	b.n	800551c <UART_SetConfig+0x5d0>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5e      	ldr	r2, [pc, #376]	; (80055b4 <UART_SetConfig+0x668>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d132      	bne.n	80054a6 <UART_SetConfig+0x55a>
 8005440:	4b5a      	ldr	r3, [pc, #360]	; (80055ac <UART_SetConfig+0x660>)
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	2b05      	cmp	r3, #5
 800544a:	d827      	bhi.n	800549c <UART_SetConfig+0x550>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <UART_SetConfig+0x508>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005475 	.word	0x08005475
 800545c:	0800547d 	.word	0x0800547d
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005472:	e053      	b.n	800551c <UART_SetConfig+0x5d0>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547a:	e04f      	b.n	800551c <UART_SetConfig+0x5d0>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005482:	e04b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548a:	e047      	b.n	800551c <UART_SetConfig+0x5d0>
 800548c:	2320      	movs	r3, #32
 800548e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005492:	e043      	b.n	800551c <UART_SetConfig+0x5d0>
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549a:	e03f      	b.n	800551c <UART_SetConfig+0x5d0>
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a2:	bf00      	nop
 80054a4:	e03a      	b.n	800551c <UART_SetConfig+0x5d0>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a43      	ldr	r2, [pc, #268]	; (80055b8 <UART_SetConfig+0x66c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d132      	bne.n	8005516 <UART_SetConfig+0x5ca>
 80054b0:	4b3e      	ldr	r3, [pc, #248]	; (80055ac <UART_SetConfig+0x660>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d827      	bhi.n	800550c <UART_SetConfig+0x5c0>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x578>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054dd 	.word	0x080054dd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054ed 	.word	0x080054ed
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	08005505 	.word	0x08005505
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e2:	e01b      	b.n	800551c <UART_SetConfig+0x5d0>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ea:	e017      	b.n	800551c <UART_SetConfig+0x5d0>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f2:	e013      	b.n	800551c <UART_SetConfig+0x5d0>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e00f      	b.n	800551c <UART_SetConfig+0x5d0>
 80054fc:	2320      	movs	r3, #32
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x5d0>
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e007      	b.n	800551c <UART_SetConfig+0x5d0>
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <UART_SetConfig+0x5d0>
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <UART_SetConfig+0x66c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f040 80b8 	bne.w	8005698 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800552c:	2b08      	cmp	r3, #8
 800552e:	d019      	beq.n	8005564 <UART_SetConfig+0x618>
 8005530:	2b08      	cmp	r3, #8
 8005532:	dc04      	bgt.n	800553e <UART_SetConfig+0x5f2>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d009      	beq.n	800554c <UART_SetConfig+0x600>
 8005538:	2b04      	cmp	r3, #4
 800553a:	d00b      	beq.n	8005554 <UART_SetConfig+0x608>
 800553c:	e042      	b.n	80055c4 <UART_SetConfig+0x678>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d02b      	beq.n	800559a <UART_SetConfig+0x64e>
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d02c      	beq.n	80055a0 <UART_SetConfig+0x654>
 8005546:	2b10      	cmp	r3, #16
 8005548:	d014      	beq.n	8005574 <UART_SetConfig+0x628>
 800554a:	e03b      	b.n	80055c4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800554c:	f7ff f806 	bl	800455c <HAL_RCCEx_GetD3PCLK1Freq>
 8005550:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005552:	e03d      	b.n	80055d0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff f815 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005562:	e035      	b.n	80055d0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff f959 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005572:	e02d      	b.n	80055d0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005574:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <UART_SetConfig+0x660>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <UART_SetConfig+0x660>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	4a0c      	ldr	r2, [pc, #48]	; (80055bc <UART_SetConfig+0x670>)
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005592:	e01d      	b.n	80055d0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <UART_SetConfig+0x670>)
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005598:	e01a      	b.n	80055d0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <UART_SetConfig+0x674>)
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800559e:	e017      	b.n	80055d0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a6:	e013      	b.n	80055d0 <UART_SetConfig+0x684>
 80055a8:	40011400 	.word	0x40011400
 80055ac:	58024400 	.word	0x58024400
 80055b0:	40007800 	.word	0x40007800
 80055b4:	40007c00 	.word	0x40007c00
 80055b8:	58000c00 	.word	0x58000c00
 80055bc:	03d09000 	.word	0x03d09000
 80055c0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80055ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 824d 	beq.w	8005a72 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	4aad      	ldr	r2, [pc, #692]	; (8005894 <UART_SetConfig+0x948>)
 80055de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ea:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d305      	bcc.n	8005608 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800560e:	e230      	b.n	8005a72 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	4618      	mov	r0, r3
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	4a9d      	ldr	r2, [pc, #628]	; (8005894 <UART_SetConfig+0x948>)
 800561e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	461a      	mov	r2, r3
 800562a:	4623      	mov	r3, r4
 800562c:	f7fa feb0 	bl	8000390 <__aeabi_uldivmod>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	4619      	mov	r1, r3
 8005636:	4622      	mov	r2, r4
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	f04f 0400 	mov.w	r4, #0
 8005640:	0214      	lsls	r4, r2, #8
 8005642:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005646:	020b      	lsls	r3, r1, #8
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6852      	ldr	r2, [r2, #4]
 800564c:	0852      	lsrs	r2, r2, #1
 800564e:	4611      	mov	r1, r2
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	eb13 0b01 	adds.w	fp, r3, r1
 8005658:	eb44 0c02 	adc.w	ip, r4, r2
 800565c:	4658      	mov	r0, fp
 800565e:	4661      	mov	r1, ip
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	f7fa fe90 	bl	8000390 <__aeabi_uldivmod>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567c:	d308      	bcc.n	8005690 <UART_SetConfig+0x744>
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005684:	d204      	bcs.n	8005690 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	e1f0      	b.n	8005a72 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005696:	e1ec      	b.n	8005a72 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	f040 8100 	bne.w	80058a4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80056a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	f200 80b7 	bhi.w	800581c <UART_SetConfig+0x8d0>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x768>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080057b9 	.word	0x080057b9
 80056b8:	080057c1 	.word	0x080057c1
 80056bc:	0800581d 	.word	0x0800581d
 80056c0:	0800581d 	.word	0x0800581d
 80056c4:	080057c9 	.word	0x080057c9
 80056c8:	0800581d 	.word	0x0800581d
 80056cc:	0800581d 	.word	0x0800581d
 80056d0:	0800581d 	.word	0x0800581d
 80056d4:	080057d9 	.word	0x080057d9
 80056d8:	0800581d 	.word	0x0800581d
 80056dc:	0800581d 	.word	0x0800581d
 80056e0:	0800581d 	.word	0x0800581d
 80056e4:	0800581d 	.word	0x0800581d
 80056e8:	0800581d 	.word	0x0800581d
 80056ec:	0800581d 	.word	0x0800581d
 80056f0:	0800581d 	.word	0x0800581d
 80056f4:	080057e9 	.word	0x080057e9
 80056f8:	0800581d 	.word	0x0800581d
 80056fc:	0800581d 	.word	0x0800581d
 8005700:	0800581d 	.word	0x0800581d
 8005704:	0800581d 	.word	0x0800581d
 8005708:	0800581d 	.word	0x0800581d
 800570c:	0800581d 	.word	0x0800581d
 8005710:	0800581d 	.word	0x0800581d
 8005714:	0800581d 	.word	0x0800581d
 8005718:	0800581d 	.word	0x0800581d
 800571c:	0800581d 	.word	0x0800581d
 8005720:	0800581d 	.word	0x0800581d
 8005724:	0800581d 	.word	0x0800581d
 8005728:	0800581d 	.word	0x0800581d
 800572c:	0800581d 	.word	0x0800581d
 8005730:	0800581d 	.word	0x0800581d
 8005734:	0800580f 	.word	0x0800580f
 8005738:	0800581d 	.word	0x0800581d
 800573c:	0800581d 	.word	0x0800581d
 8005740:	0800581d 	.word	0x0800581d
 8005744:	0800581d 	.word	0x0800581d
 8005748:	0800581d 	.word	0x0800581d
 800574c:	0800581d 	.word	0x0800581d
 8005750:	0800581d 	.word	0x0800581d
 8005754:	0800581d 	.word	0x0800581d
 8005758:	0800581d 	.word	0x0800581d
 800575c:	0800581d 	.word	0x0800581d
 8005760:	0800581d 	.word	0x0800581d
 8005764:	0800581d 	.word	0x0800581d
 8005768:	0800581d 	.word	0x0800581d
 800576c:	0800581d 	.word	0x0800581d
 8005770:	0800581d 	.word	0x0800581d
 8005774:	0800581d 	.word	0x0800581d
 8005778:	0800581d 	.word	0x0800581d
 800577c:	0800581d 	.word	0x0800581d
 8005780:	0800581d 	.word	0x0800581d
 8005784:	0800581d 	.word	0x0800581d
 8005788:	0800581d 	.word	0x0800581d
 800578c:	0800581d 	.word	0x0800581d
 8005790:	0800581d 	.word	0x0800581d
 8005794:	0800581d 	.word	0x0800581d
 8005798:	0800581d 	.word	0x0800581d
 800579c:	0800581d 	.word	0x0800581d
 80057a0:	0800581d 	.word	0x0800581d
 80057a4:	0800581d 	.word	0x0800581d
 80057a8:	0800581d 	.word	0x0800581d
 80057ac:	0800581d 	.word	0x0800581d
 80057b0:	0800581d 	.word	0x0800581d
 80057b4:	08005815 	.word	0x08005815
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fd ffb6 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 80057bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057be:	e033      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fd ffc8 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 80057c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057c6:	e02f      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fedb 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057d6:	e027      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff f81f 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e6:	e01f      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e8:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <UART_SetConfig+0x94c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057f4:	4b28      	ldr	r3, [pc, #160]	; (8005898 <UART_SetConfig+0x94c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	4a27      	ldr	r2, [pc, #156]	; (800589c <UART_SetConfig+0x950>)
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005808:	4b24      	ldr	r3, [pc, #144]	; (800589c <UART_SetConfig+0x950>)
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800580c:	e00c      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <UART_SetConfig+0x954>)
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005812:	e009      	b.n	8005828 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800581a:	e005      	b.n	8005828 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8121 	beq.w	8005a72 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	4a17      	ldr	r2, [pc, #92]	; (8005894 <UART_SetConfig+0x948>)
 8005836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800583a:	461a      	mov	r2, r3
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005842:	005a      	lsls	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	441a      	add	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	b29b      	uxth	r3, r3
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	2b0f      	cmp	r3, #15
 800585c:	d916      	bls.n	800588c <UART_SetConfig+0x940>
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d212      	bcs.n	800588c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	b29b      	uxth	r3, r3
 800586a:	f023 030f 	bic.w	r3, r3, #15
 800586e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	b29a      	uxth	r2, r3
 800587c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800587e:	4313      	orrs	r3, r2
 8005880:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005888:	60da      	str	r2, [r3, #12]
 800588a:	e0f2      	b.n	8005a72 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005892:	e0ee      	b.n	8005a72 <UART_SetConfig+0xb26>
 8005894:	08008c2c 	.word	0x08008c2c
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	f200 80b7 	bhi.w	8005a1c <UART_SetConfig+0xad0>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x968>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080059b9 	.word	0x080059b9
 80058b8:	080059c1 	.word	0x080059c1
 80058bc:	08005a1d 	.word	0x08005a1d
 80058c0:	08005a1d 	.word	0x08005a1d
 80058c4:	080059c9 	.word	0x080059c9
 80058c8:	08005a1d 	.word	0x08005a1d
 80058cc:	08005a1d 	.word	0x08005a1d
 80058d0:	08005a1d 	.word	0x08005a1d
 80058d4:	080059d9 	.word	0x080059d9
 80058d8:	08005a1d 	.word	0x08005a1d
 80058dc:	08005a1d 	.word	0x08005a1d
 80058e0:	08005a1d 	.word	0x08005a1d
 80058e4:	08005a1d 	.word	0x08005a1d
 80058e8:	08005a1d 	.word	0x08005a1d
 80058ec:	08005a1d 	.word	0x08005a1d
 80058f0:	08005a1d 	.word	0x08005a1d
 80058f4:	080059e9 	.word	0x080059e9
 80058f8:	08005a1d 	.word	0x08005a1d
 80058fc:	08005a1d 	.word	0x08005a1d
 8005900:	08005a1d 	.word	0x08005a1d
 8005904:	08005a1d 	.word	0x08005a1d
 8005908:	08005a1d 	.word	0x08005a1d
 800590c:	08005a1d 	.word	0x08005a1d
 8005910:	08005a1d 	.word	0x08005a1d
 8005914:	08005a1d 	.word	0x08005a1d
 8005918:	08005a1d 	.word	0x08005a1d
 800591c:	08005a1d 	.word	0x08005a1d
 8005920:	08005a1d 	.word	0x08005a1d
 8005924:	08005a1d 	.word	0x08005a1d
 8005928:	08005a1d 	.word	0x08005a1d
 800592c:	08005a1d 	.word	0x08005a1d
 8005930:	08005a1d 	.word	0x08005a1d
 8005934:	08005a0f 	.word	0x08005a0f
 8005938:	08005a1d 	.word	0x08005a1d
 800593c:	08005a1d 	.word	0x08005a1d
 8005940:	08005a1d 	.word	0x08005a1d
 8005944:	08005a1d 	.word	0x08005a1d
 8005948:	08005a1d 	.word	0x08005a1d
 800594c:	08005a1d 	.word	0x08005a1d
 8005950:	08005a1d 	.word	0x08005a1d
 8005954:	08005a1d 	.word	0x08005a1d
 8005958:	08005a1d 	.word	0x08005a1d
 800595c:	08005a1d 	.word	0x08005a1d
 8005960:	08005a1d 	.word	0x08005a1d
 8005964:	08005a1d 	.word	0x08005a1d
 8005968:	08005a1d 	.word	0x08005a1d
 800596c:	08005a1d 	.word	0x08005a1d
 8005970:	08005a1d 	.word	0x08005a1d
 8005974:	08005a1d 	.word	0x08005a1d
 8005978:	08005a1d 	.word	0x08005a1d
 800597c:	08005a1d 	.word	0x08005a1d
 8005980:	08005a1d 	.word	0x08005a1d
 8005984:	08005a1d 	.word	0x08005a1d
 8005988:	08005a1d 	.word	0x08005a1d
 800598c:	08005a1d 	.word	0x08005a1d
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a1d 	.word	0x08005a1d
 8005998:	08005a1d 	.word	0x08005a1d
 800599c:	08005a1d 	.word	0x08005a1d
 80059a0:	08005a1d 	.word	0x08005a1d
 80059a4:	08005a1d 	.word	0x08005a1d
 80059a8:	08005a1d 	.word	0x08005a1d
 80059ac:	08005a1d 	.word	0x08005a1d
 80059b0:	08005a1d 	.word	0x08005a1d
 80059b4:	08005a15 	.word	0x08005a15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b8:	f7fd feb6 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 80059bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059be:	e033      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c0:	f7fd fec8 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 80059c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059c6:	e02f      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fddb 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d6:	e027      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe ff1f 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e6:	e01f      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <UART_SetConfig+0xb50>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f4:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <UART_SetConfig+0xb50>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	08db      	lsrs	r3, r3, #3
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <UART_SetConfig+0xb54>)
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a06:	e00f      	b.n	8005a28 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <UART_SetConfig+0xb54>)
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a0c:	e00c      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a0e:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <UART_SetConfig+0xb58>)
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a12:	e009      	b.n	8005a28 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a1a:	e005      	b.n	8005a28 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a26:	bf00      	nop
    }

    if (pclk != 0U)
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d021      	beq.n	8005a72 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <UART_SetConfig+0xb5c>)
 8005a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	441a      	add	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d908      	bls.n	8005a6c <UART_SetConfig+0xb20>
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d204      	bcs.n	8005a6c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	e002      	b.n	8005a72 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005a8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3738      	adds	r7, #56	; 0x38
 8005a96:	46bd      	mov	sp, r7
 8005a98:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	03d09000 	.word	0x03d09000
 8005aa4:	003d0900 	.word	0x003d0900
 8005aa8:	08008c2c 	.word	0x08008c2c

08005aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01a      	beq.n	8005bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d10a      	bne.n	8005bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c00:	f7fb fdc8 	bl	8001794 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d10e      	bne.n	8005c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82c 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e022      	b.n	8005c78 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d10e      	bne.n	8005c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f816 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00c      	b.n	8005c78 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	e062      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d05e      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fb fd7b 	bl	8001794 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11d      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cbe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e045      	b.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02e      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d126      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d22:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e00f      	b.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d08d      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e027      	b.n	8005de6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2224      	movs	r2, #36	; 0x24
 8005da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e02d      	b.n	8005e66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2224      	movs	r2, #36	; 0x24
 8005e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f850 	bl	8005eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e02d      	b.n	8005ee2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	; 0x24
 8005e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f812 	bl	8005eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005ef4:	4a2f      	ldr	r2, [pc, #188]	; (8005fb4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005ef6:	f107 0314 	add.w	r3, r7, #20
 8005efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005efe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005f02:	4a2d      	ldr	r2, [pc, #180]	; (8005fb8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005f04:	f107 030c 	add.w	r3, r7, #12
 8005f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f28:	e03d      	b.n	8005fa6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f2e:	2310      	movs	r3, #16
 8005f30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	0e5b      	lsrs	r3, r3, #25
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0f5b      	lsrs	r3, r3, #29
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005f52:	7fbb      	ldrb	r3, [r7, #30]
 8005f54:	7f3a      	ldrb	r2, [r7, #28]
 8005f56:	f107 0120 	add.w	r1, r7, #32
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	7f3a      	ldrb	r2, [r7, #28]
 8005f66:	f107 0120 	add.w	r1, r7, #32
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005f7c:	7ffb      	ldrb	r3, [r7, #31]
 8005f7e:	7f7a      	ldrb	r2, [r7, #29]
 8005f80:	f107 0120 	add.w	r1, r7, #32
 8005f84:	440a      	add	r2, r1
 8005f86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	7f7a      	ldrb	r2, [r7, #29]
 8005f90:	f107 0120 	add.w	r1, r7, #32
 8005f94:	440a      	add	r2, r1
 8005f96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fa6:	bf00      	nop
 8005fa8:	3724      	adds	r7, #36	; 0x24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08008c0c 	.word	0x08008c0c
 8005fb8:	08008c14 	.word	0x08008c14

08005fbc <__errno>:
 8005fbc:	4b01      	ldr	r3, [pc, #4]	; (8005fc4 <__errno+0x8>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	2000001c 	.word	0x2000001c

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0d      	ldr	r6, [pc, #52]	; (8006000 <__libc_init_array+0x38>)
 8005fcc:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fce:	1ba4      	subs	r4, r4, r6
 8005fd0:	10a4      	asrs	r4, r4, #2
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	42a5      	cmp	r5, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	4e0b      	ldr	r6, [pc, #44]	; (8006008 <__libc_init_array+0x40>)
 8005fda:	4c0c      	ldr	r4, [pc, #48]	; (800600c <__libc_init_array+0x44>)
 8005fdc:	f002 fcd6 	bl	800898c <_init>
 8005fe0:	1ba4      	subs	r4, r4, r6
 8005fe2:	10a4      	asrs	r4, r4, #2
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	42a5      	cmp	r5, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ff0:	4798      	blx	r3
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ffa:	4798      	blx	r3
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	08008f10 	.word	0x08008f10
 8006004:	08008f10 	.word	0x08008f10
 8006008:	08008f10 	.word	0x08008f10
 800600c:	08008f14 	.word	0x08008f14

08006010 <memcpy>:
 8006010:	b510      	push	{r4, lr}
 8006012:	1e43      	subs	r3, r0, #1
 8006014:	440a      	add	r2, r1
 8006016:	4291      	cmp	r1, r2
 8006018:	d100      	bne.n	800601c <memcpy+0xc>
 800601a:	bd10      	pop	{r4, pc}
 800601c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006024:	e7f7      	b.n	8006016 <memcpy+0x6>

08006026 <memset>:
 8006026:	4402      	add	r2, r0
 8006028:	4603      	mov	r3, r0
 800602a:	4293      	cmp	r3, r2
 800602c:	d100      	bne.n	8006030 <memset+0xa>
 800602e:	4770      	bx	lr
 8006030:	f803 1b01 	strb.w	r1, [r3], #1
 8006034:	e7f9      	b.n	800602a <memset+0x4>

08006036 <__cvt>:
 8006036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006038:	ed2d 8b02 	vpush	{d8}
 800603c:	eeb0 8b40 	vmov.f64	d8, d0
 8006040:	b085      	sub	sp, #20
 8006042:	4617      	mov	r7, r2
 8006044:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006046:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006048:	ee18 2a90 	vmov	r2, s17
 800604c:	f025 0520 	bic.w	r5, r5, #32
 8006050:	2a00      	cmp	r2, #0
 8006052:	bfb6      	itet	lt
 8006054:	222d      	movlt	r2, #45	; 0x2d
 8006056:	2200      	movge	r2, #0
 8006058:	eeb1 8b40 	vneglt.f64	d8, d0
 800605c:	2d46      	cmp	r5, #70	; 0x46
 800605e:	460c      	mov	r4, r1
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	d004      	beq.n	800606e <__cvt+0x38>
 8006064:	2d45      	cmp	r5, #69	; 0x45
 8006066:	d100      	bne.n	800606a <__cvt+0x34>
 8006068:	3401      	adds	r4, #1
 800606a:	2102      	movs	r1, #2
 800606c:	e000      	b.n	8006070 <__cvt+0x3a>
 800606e:	2103      	movs	r1, #3
 8006070:	ab03      	add	r3, sp, #12
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	ab02      	add	r3, sp, #8
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4622      	mov	r2, r4
 800607a:	4633      	mov	r3, r6
 800607c:	eeb0 0b48 	vmov.f64	d0, d8
 8006080:	f000 fdfa 	bl	8006c78 <_dtoa_r>
 8006084:	2d47      	cmp	r5, #71	; 0x47
 8006086:	d101      	bne.n	800608c <__cvt+0x56>
 8006088:	07fb      	lsls	r3, r7, #31
 800608a:	d51e      	bpl.n	80060ca <__cvt+0x94>
 800608c:	2d46      	cmp	r5, #70	; 0x46
 800608e:	eb00 0304 	add.w	r3, r0, r4
 8006092:	d10c      	bne.n	80060ae <__cvt+0x78>
 8006094:	7802      	ldrb	r2, [r0, #0]
 8006096:	2a30      	cmp	r2, #48	; 0x30
 8006098:	d107      	bne.n	80060aa <__cvt+0x74>
 800609a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800609e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a2:	bf1c      	itt	ne
 80060a4:	f1c4 0401 	rsbne	r4, r4, #1
 80060a8:	6034      	strne	r4, [r6, #0]
 80060aa:	6832      	ldr	r2, [r6, #0]
 80060ac:	4413      	add	r3, r2
 80060ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b6:	d007      	beq.n	80060c8 <__cvt+0x92>
 80060b8:	2130      	movs	r1, #48	; 0x30
 80060ba:	9a03      	ldr	r2, [sp, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d204      	bcs.n	80060ca <__cvt+0x94>
 80060c0:	1c54      	adds	r4, r2, #1
 80060c2:	9403      	str	r4, [sp, #12]
 80060c4:	7011      	strb	r1, [r2, #0]
 80060c6:	e7f8      	b.n	80060ba <__cvt+0x84>
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ce:	1a1b      	subs	r3, r3, r0
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	b005      	add	sp, #20
 80060d4:	ecbd 8b02 	vpop	{d8}
 80060d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060da <__exponent>:
 80060da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060dc:	2900      	cmp	r1, #0
 80060de:	4604      	mov	r4, r0
 80060e0:	bfba      	itte	lt
 80060e2:	4249      	neglt	r1, r1
 80060e4:	232d      	movlt	r3, #45	; 0x2d
 80060e6:	232b      	movge	r3, #43	; 0x2b
 80060e8:	2909      	cmp	r1, #9
 80060ea:	f804 2b02 	strb.w	r2, [r4], #2
 80060ee:	7043      	strb	r3, [r0, #1]
 80060f0:	dd20      	ble.n	8006134 <__exponent+0x5a>
 80060f2:	f10d 0307 	add.w	r3, sp, #7
 80060f6:	461f      	mov	r7, r3
 80060f8:	260a      	movs	r6, #10
 80060fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80060fe:	fb06 1115 	mls	r1, r6, r5, r1
 8006102:	3130      	adds	r1, #48	; 0x30
 8006104:	2d09      	cmp	r5, #9
 8006106:	f803 1c01 	strb.w	r1, [r3, #-1]
 800610a:	f103 32ff 	add.w	r2, r3, #4294967295
 800610e:	4629      	mov	r1, r5
 8006110:	dc09      	bgt.n	8006126 <__exponent+0x4c>
 8006112:	3130      	adds	r1, #48	; 0x30
 8006114:	3b02      	subs	r3, #2
 8006116:	f802 1c01 	strb.w	r1, [r2, #-1]
 800611a:	42bb      	cmp	r3, r7
 800611c:	4622      	mov	r2, r4
 800611e:	d304      	bcc.n	800612a <__exponent+0x50>
 8006120:	1a10      	subs	r0, r2, r0
 8006122:	b003      	add	sp, #12
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006126:	4613      	mov	r3, r2
 8006128:	e7e7      	b.n	80060fa <__exponent+0x20>
 800612a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612e:	f804 2b01 	strb.w	r2, [r4], #1
 8006132:	e7f2      	b.n	800611a <__exponent+0x40>
 8006134:	2330      	movs	r3, #48	; 0x30
 8006136:	4419      	add	r1, r3
 8006138:	7083      	strb	r3, [r0, #2]
 800613a:	1d02      	adds	r2, r0, #4
 800613c:	70c1      	strb	r1, [r0, #3]
 800613e:	e7ef      	b.n	8006120 <__exponent+0x46>

08006140 <_printf_float>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	b08d      	sub	sp, #52	; 0x34
 8006146:	460c      	mov	r4, r1
 8006148:	4616      	mov	r6, r2
 800614a:	461f      	mov	r7, r3
 800614c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006150:	4605      	mov	r5, r0
 8006152:	f001 fc57 	bl	8007a04 <_localeconv_r>
 8006156:	f8d0 b000 	ldr.w	fp, [r0]
 800615a:	4658      	mov	r0, fp
 800615c:	f7fa f8c0 	bl	80002e0 <strlen>
 8006160:	2300      	movs	r3, #0
 8006162:	930a      	str	r3, [sp, #40]	; 0x28
 8006164:	f8d8 3000 	ldr.w	r3, [r8]
 8006168:	9005      	str	r0, [sp, #20]
 800616a:	3307      	adds	r3, #7
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	f103 0108 	add.w	r1, r3, #8
 8006174:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	f8c8 1000 	str.w	r1, [r8]
 800617e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006182:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006186:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006410 <_printf_float+0x2d0>
 800618a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800618e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006192:	eeb4 6b47 	vcmp.f64	d6, d7
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	dd24      	ble.n	80061e6 <_printf_float+0xa6>
 800619c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80061a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a4:	d502      	bpl.n	80061ac <_printf_float+0x6c>
 80061a6:	232d      	movs	r3, #45	; 0x2d
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	499a      	ldr	r1, [pc, #616]	; (8006418 <_printf_float+0x2d8>)
 80061ae:	4b9b      	ldr	r3, [pc, #620]	; (800641c <_printf_float+0x2dc>)
 80061b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80061b4:	bf8c      	ite	hi
 80061b6:	4688      	movhi	r8, r1
 80061b8:	4698      	movls	r8, r3
 80061ba:	f022 0204 	bic.w	r2, r2, #4
 80061be:	2303      	movs	r3, #3
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	f04f 0a00 	mov.w	sl, #0
 80061c8:	9700      	str	r7, [sp, #0]
 80061ca:	4633      	mov	r3, r6
 80061cc:	aa0b      	add	r2, sp, #44	; 0x2c
 80061ce:	4621      	mov	r1, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f9e1 	bl	8006598 <_printf_common>
 80061d6:	3001      	adds	r0, #1
 80061d8:	f040 8089 	bne.w	80062ee <_printf_float+0x1ae>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	b00d      	add	sp, #52	; 0x34
 80061e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80061ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ee:	d702      	bvc.n	80061f6 <_printf_float+0xb6>
 80061f0:	498b      	ldr	r1, [pc, #556]	; (8006420 <_printf_float+0x2e0>)
 80061f2:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <_printf_float+0x2e4>)
 80061f4:	e7dc      	b.n	80061b0 <_printf_float+0x70>
 80061f6:	6861      	ldr	r1, [r4, #4]
 80061f8:	1c4b      	adds	r3, r1, #1
 80061fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061fe:	ab0a      	add	r3, sp, #40	; 0x28
 8006200:	a809      	add	r0, sp, #36	; 0x24
 8006202:	d13b      	bne.n	800627c <_printf_float+0x13c>
 8006204:	2106      	movs	r1, #6
 8006206:	6061      	str	r1, [r4, #4]
 8006208:	f04f 0c00 	mov.w	ip, #0
 800620c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006210:	e9cd 0900 	strd	r0, r9, [sp]
 8006214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	6861      	ldr	r1, [r4, #4]
 800621c:	4628      	mov	r0, r5
 800621e:	f7ff ff0a 	bl	8006036 <__cvt>
 8006222:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8006226:	2b47      	cmp	r3, #71	; 0x47
 8006228:	4680      	mov	r8, r0
 800622a:	d109      	bne.n	8006240 <_printf_float+0x100>
 800622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622e:	1cd8      	adds	r0, r3, #3
 8006230:	db02      	blt.n	8006238 <_printf_float+0xf8>
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	4293      	cmp	r3, r2
 8006236:	dd47      	ble.n	80062c8 <_printf_float+0x188>
 8006238:	f1a9 0902 	sub.w	r9, r9, #2
 800623c:	fa5f f989 	uxtb.w	r9, r9
 8006240:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006246:	d824      	bhi.n	8006292 <_printf_float+0x152>
 8006248:	3901      	subs	r1, #1
 800624a:	464a      	mov	r2, r9
 800624c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006250:	9109      	str	r1, [sp, #36]	; 0x24
 8006252:	f7ff ff42 	bl	80060da <__exponent>
 8006256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006258:	1813      	adds	r3, r2, r0
 800625a:	2a01      	cmp	r2, #1
 800625c:	4682      	mov	sl, r0
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	dc02      	bgt.n	8006268 <_printf_float+0x128>
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	07d1      	lsls	r1, r2, #31
 8006266:	d501      	bpl.n	800626c <_printf_float+0x12c>
 8006268:	3301      	adds	r3, #1
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0a9      	beq.n	80061c8 <_printf_float+0x88>
 8006274:	232d      	movs	r3, #45	; 0x2d
 8006276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627a:	e7a5      	b.n	80061c8 <_printf_float+0x88>
 800627c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006280:	f000 8178 	beq.w	8006574 <_printf_float+0x434>
 8006284:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006288:	d1be      	bne.n	8006208 <_printf_float+0xc8>
 800628a:	2900      	cmp	r1, #0
 800628c:	d1bc      	bne.n	8006208 <_printf_float+0xc8>
 800628e:	2101      	movs	r1, #1
 8006290:	e7b9      	b.n	8006206 <_printf_float+0xc6>
 8006292:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006296:	d119      	bne.n	80062cc <_printf_float+0x18c>
 8006298:	2900      	cmp	r1, #0
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	dd0c      	ble.n	80062b8 <_printf_float+0x178>
 800629e:	6121      	str	r1, [r4, #16]
 80062a0:	b913      	cbnz	r3, 80062a8 <_printf_float+0x168>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	07d2      	lsls	r2, r2, #31
 80062a6:	d502      	bpl.n	80062ae <_printf_float+0x16e>
 80062a8:	3301      	adds	r3, #1
 80062aa:	440b      	add	r3, r1
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80062b2:	f04f 0a00 	mov.w	sl, #0
 80062b6:	e7d9      	b.n	800626c <_printf_float+0x12c>
 80062b8:	b913      	cbnz	r3, 80062c0 <_printf_float+0x180>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	07d0      	lsls	r0, r2, #31
 80062be:	d501      	bpl.n	80062c4 <_printf_float+0x184>
 80062c0:	3302      	adds	r3, #2
 80062c2:	e7f3      	b.n	80062ac <_printf_float+0x16c>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e7f1      	b.n	80062ac <_printf_float+0x16c>
 80062c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80062cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062d0:	4293      	cmp	r3, r2
 80062d2:	db05      	blt.n	80062e0 <_printf_float+0x1a0>
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	07d1      	lsls	r1, r2, #31
 80062da:	d5e8      	bpl.n	80062ae <_printf_float+0x16e>
 80062dc:	3301      	adds	r3, #1
 80062de:	e7e5      	b.n	80062ac <_printf_float+0x16c>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bfd4      	ite	le
 80062e4:	f1c3 0302 	rsble	r3, r3, #2
 80062e8:	2301      	movgt	r3, #1
 80062ea:	4413      	add	r3, r2
 80062ec:	e7de      	b.n	80062ac <_printf_float+0x16c>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	055a      	lsls	r2, r3, #21
 80062f2:	d407      	bmi.n	8006304 <_printf_float+0x1c4>
 80062f4:	6923      	ldr	r3, [r4, #16]
 80062f6:	4642      	mov	r2, r8
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	d12a      	bne.n	8006358 <_printf_float+0x218>
 8006302:	e76b      	b.n	80061dc <_printf_float+0x9c>
 8006304:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006308:	f240 80de 	bls.w	80064c8 <_printf_float+0x388>
 800630c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006310:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006318:	d133      	bne.n	8006382 <_printf_float+0x242>
 800631a:	2301      	movs	r3, #1
 800631c:	4a42      	ldr	r2, [pc, #264]	; (8006428 <_printf_float+0x2e8>)
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	f43f af59 	beq.w	80061dc <_printf_float+0x9c>
 800632a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632e:	429a      	cmp	r2, r3
 8006330:	db02      	blt.n	8006338 <_printf_float+0x1f8>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07d8      	lsls	r0, r3, #31
 8006336:	d50f      	bpl.n	8006358 <_printf_float+0x218>
 8006338:	9b05      	ldr	r3, [sp, #20]
 800633a:	465a      	mov	r2, fp
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af4a 	beq.w	80061dc <_printf_float+0x9c>
 8006348:	f04f 0800 	mov.w	r8, #0
 800634c:	f104 091a 	add.w	r9, r4, #26
 8006350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	4543      	cmp	r3, r8
 8006356:	dc09      	bgt.n	800636c <_printf_float+0x22c>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	079b      	lsls	r3, r3, #30
 800635c:	f100 8105 	bmi.w	800656a <_printf_float+0x42a>
 8006360:	68e0      	ldr	r0, [r4, #12]
 8006362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006364:	4298      	cmp	r0, r3
 8006366:	bfb8      	it	lt
 8006368:	4618      	movlt	r0, r3
 800636a:	e739      	b.n	80061e0 <_printf_float+0xa0>
 800636c:	2301      	movs	r3, #1
 800636e:	464a      	mov	r2, r9
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f af30 	beq.w	80061dc <_printf_float+0x9c>
 800637c:	f108 0801 	add.w	r8, r8, #1
 8006380:	e7e6      	b.n	8006350 <_printf_float+0x210>
 8006382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc2b      	bgt.n	80063e0 <_printf_float+0x2a0>
 8006388:	2301      	movs	r3, #1
 800638a:	4a27      	ldr	r2, [pc, #156]	; (8006428 <_printf_float+0x2e8>)
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af22 	beq.w	80061dc <_printf_float+0x9c>
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	b923      	cbnz	r3, 80063a6 <_printf_float+0x266>
 800639c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639e:	b913      	cbnz	r3, 80063a6 <_printf_float+0x266>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07d9      	lsls	r1, r3, #31
 80063a4:	d5d8      	bpl.n	8006358 <_printf_float+0x218>
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	465a      	mov	r2, fp
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f af13 	beq.w	80061dc <_printf_float+0x9c>
 80063b6:	f04f 0900 	mov.w	r9, #0
 80063ba:	f104 0a1a 	add.w	sl, r4, #26
 80063be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c0:	425b      	negs	r3, r3
 80063c2:	454b      	cmp	r3, r9
 80063c4:	dc01      	bgt.n	80063ca <_printf_float+0x28a>
 80063c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c8:	e795      	b.n	80062f6 <_printf_float+0x1b6>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4652      	mov	r2, sl
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f af01 	beq.w	80061dc <_printf_float+0x9c>
 80063da:	f109 0901 	add.w	r9, r9, #1
 80063de:	e7ee      	b.n	80063be <_printf_float+0x27e>
 80063e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063e4:	429a      	cmp	r2, r3
 80063e6:	bfa8      	it	ge
 80063e8:	461a      	movge	r2, r3
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	4691      	mov	r9, r2
 80063ee:	dd07      	ble.n	8006400 <_printf_float+0x2c0>
 80063f0:	4613      	mov	r3, r2
 80063f2:	4631      	mov	r1, r6
 80063f4:	4642      	mov	r2, r8
 80063f6:	4628      	mov	r0, r5
 80063f8:	47b8      	blx	r7
 80063fa:	3001      	adds	r0, #1
 80063fc:	f43f aeee 	beq.w	80061dc <_printf_float+0x9c>
 8006400:	f104 031a 	add.w	r3, r4, #26
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640c:	9307      	str	r3, [sp, #28]
 800640e:	e017      	b.n	8006440 <_printf_float+0x300>
 8006410:	ffffffff 	.word	0xffffffff
 8006414:	7fefffff 	.word	0x7fefffff
 8006418:	08008c4c 	.word	0x08008c4c
 800641c:	08008c48 	.word	0x08008c48
 8006420:	08008c54 	.word	0x08008c54
 8006424:	08008c50 	.word	0x08008c50
 8006428:	08008c58 	.word	0x08008c58
 800642c:	2301      	movs	r3, #1
 800642e:	9a07      	ldr	r2, [sp, #28]
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	f43f aed0 	beq.w	80061dc <_printf_float+0x9c>
 800643c:	f10a 0a01 	add.w	sl, sl, #1
 8006440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	eba3 0309 	sub.w	r3, r3, r9
 8006448:	4553      	cmp	r3, sl
 800644a:	dcef      	bgt.n	800642c <_printf_float+0x2ec>
 800644c:	9b06      	ldr	r3, [sp, #24]
 800644e:	4498      	add	r8, r3
 8006450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006454:	429a      	cmp	r2, r3
 8006456:	db15      	blt.n	8006484 <_printf_float+0x344>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	07da      	lsls	r2, r3, #31
 800645c:	d412      	bmi.n	8006484 <_printf_float+0x344>
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	9a06      	ldr	r2, [sp, #24]
 8006462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006464:	1a9a      	subs	r2, r3, r2
 8006466:	eba3 0a01 	sub.w	sl, r3, r1
 800646a:	4592      	cmp	sl, r2
 800646c:	bfa8      	it	ge
 800646e:	4692      	movge	sl, r2
 8006470:	f1ba 0f00 	cmp.w	sl, #0
 8006474:	dc0e      	bgt.n	8006494 <_printf_float+0x354>
 8006476:	f04f 0800 	mov.w	r8, #0
 800647a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800647e:	f104 091a 	add.w	r9, r4, #26
 8006482:	e019      	b.n	80064b8 <_printf_float+0x378>
 8006484:	9b05      	ldr	r3, [sp, #20]
 8006486:	465a      	mov	r2, fp
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	d1e5      	bne.n	800645e <_printf_float+0x31e>
 8006492:	e6a3      	b.n	80061dc <_printf_float+0x9c>
 8006494:	4653      	mov	r3, sl
 8006496:	4642      	mov	r2, r8
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	d1e9      	bne.n	8006476 <_printf_float+0x336>
 80064a2:	e69b      	b.n	80061dc <_printf_float+0x9c>
 80064a4:	2301      	movs	r3, #1
 80064a6:	464a      	mov	r2, r9
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f ae94 	beq.w	80061dc <_printf_float+0x9c>
 80064b4:	f108 0801 	add.w	r8, r8, #1
 80064b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	eba3 030a 	sub.w	r3, r3, sl
 80064c2:	4543      	cmp	r3, r8
 80064c4:	dcee      	bgt.n	80064a4 <_printf_float+0x364>
 80064c6:	e747      	b.n	8006358 <_printf_float+0x218>
 80064c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ca:	2a01      	cmp	r2, #1
 80064cc:	dc01      	bgt.n	80064d2 <_printf_float+0x392>
 80064ce:	07db      	lsls	r3, r3, #31
 80064d0:	d539      	bpl.n	8006546 <_printf_float+0x406>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4642      	mov	r2, r8
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae7d 	beq.w	80061dc <_printf_float+0x9c>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	465a      	mov	r2, fp
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	f108 0801 	add.w	r8, r8, #1
 80064f2:	f43f ae73 	beq.w	80061dc <_printf_float+0x9c>
 80064f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80064fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	f103 33ff 	add.w	r3, r3, #4294967295
 8006508:	d018      	beq.n	800653c <_printf_float+0x3fc>
 800650a:	4642      	mov	r2, r8
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	d10e      	bne.n	8006534 <_printf_float+0x3f4>
 8006516:	e661      	b.n	80061dc <_printf_float+0x9c>
 8006518:	2301      	movs	r3, #1
 800651a:	464a      	mov	r2, r9
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f ae5a 	beq.w	80061dc <_printf_float+0x9c>
 8006528:	f108 0801 	add.w	r8, r8, #1
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	4543      	cmp	r3, r8
 8006532:	dcf1      	bgt.n	8006518 <_printf_float+0x3d8>
 8006534:	4653      	mov	r3, sl
 8006536:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800653a:	e6dd      	b.n	80062f8 <_printf_float+0x1b8>
 800653c:	f04f 0800 	mov.w	r8, #0
 8006540:	f104 091a 	add.w	r9, r4, #26
 8006544:	e7f2      	b.n	800652c <_printf_float+0x3ec>
 8006546:	2301      	movs	r3, #1
 8006548:	e7df      	b.n	800650a <_printf_float+0x3ca>
 800654a:	2301      	movs	r3, #1
 800654c:	464a      	mov	r2, r9
 800654e:	4631      	mov	r1, r6
 8006550:	4628      	mov	r0, r5
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	f43f ae41 	beq.w	80061dc <_printf_float+0x9c>
 800655a:	f108 0801 	add.w	r8, r8, #1
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	4543      	cmp	r3, r8
 8006566:	dcf0      	bgt.n	800654a <_printf_float+0x40a>
 8006568:	e6fa      	b.n	8006360 <_printf_float+0x220>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	f104 0919 	add.w	r9, r4, #25
 8006572:	e7f4      	b.n	800655e <_printf_float+0x41e>
 8006574:	2900      	cmp	r1, #0
 8006576:	f43f ae8a 	beq.w	800628e <_printf_float+0x14e>
 800657a:	f04f 0c00 	mov.w	ip, #0
 800657e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006582:	e9cd 0900 	strd	r0, r9, [sp]
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800658c:	4628      	mov	r0, r5
 800658e:	f7ff fd52 	bl	8006036 <__cvt>
 8006592:	4680      	mov	r8, r0
 8006594:	e64a      	b.n	800622c <_printf_float+0xec>
 8006596:	bf00      	nop

08006598 <_printf_common>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	4691      	mov	r9, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	688a      	ldr	r2, [r1, #8]
 80065a2:	690b      	ldr	r3, [r1, #16]
 80065a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	bfb8      	it	lt
 80065ac:	4613      	movlt	r3, r2
 80065ae:	f8c9 3000 	str.w	r3, [r9]
 80065b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b6:	4606      	mov	r6, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	b112      	cbz	r2, 80065c2 <_printf_common+0x2a>
 80065bc:	3301      	adds	r3, #1
 80065be:	f8c9 3000 	str.w	r3, [r9]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	0699      	lsls	r1, r3, #26
 80065c6:	bf42      	ittt	mi
 80065c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065cc:	3302      	addmi	r3, #2
 80065ce:	f8c9 3000 	strmi.w	r3, [r9]
 80065d2:	6825      	ldr	r5, [r4, #0]
 80065d4:	f015 0506 	ands.w	r5, r5, #6
 80065d8:	d107      	bne.n	80065ea <_printf_common+0x52>
 80065da:	f104 0a19 	add.w	sl, r4, #25
 80065de:	68e3      	ldr	r3, [r4, #12]
 80065e0:	f8d9 2000 	ldr.w	r2, [r9]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	42ab      	cmp	r3, r5
 80065e8:	dc28      	bgt.n	800663c <_printf_common+0xa4>
 80065ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	3300      	adds	r3, #0
 80065f2:	bf18      	it	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	0692      	lsls	r2, r2, #26
 80065f8:	d42d      	bmi.n	8006656 <_printf_common+0xbe>
 80065fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065fe:	4639      	mov	r1, r7
 8006600:	4630      	mov	r0, r6
 8006602:	47c0      	blx	r8
 8006604:	3001      	adds	r0, #1
 8006606:	d020      	beq.n	800664a <_printf_common+0xb2>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	68e5      	ldr	r5, [r4, #12]
 800660c:	f8d9 2000 	ldr.w	r2, [r9]
 8006610:	f003 0306 	and.w	r3, r3, #6
 8006614:	2b04      	cmp	r3, #4
 8006616:	bf08      	it	eq
 8006618:	1aad      	subeq	r5, r5, r2
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	6922      	ldr	r2, [r4, #16]
 800661e:	bf0c      	ite	eq
 8006620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006624:	2500      	movne	r5, #0
 8006626:	4293      	cmp	r3, r2
 8006628:	bfc4      	itt	gt
 800662a:	1a9b      	subgt	r3, r3, r2
 800662c:	18ed      	addgt	r5, r5, r3
 800662e:	f04f 0900 	mov.w	r9, #0
 8006632:	341a      	adds	r4, #26
 8006634:	454d      	cmp	r5, r9
 8006636:	d11a      	bne.n	800666e <_printf_common+0xd6>
 8006638:	2000      	movs	r0, #0
 800663a:	e008      	b.n	800664e <_printf_common+0xb6>
 800663c:	2301      	movs	r3, #1
 800663e:	4652      	mov	r2, sl
 8006640:	4639      	mov	r1, r7
 8006642:	4630      	mov	r0, r6
 8006644:	47c0      	blx	r8
 8006646:	3001      	adds	r0, #1
 8006648:	d103      	bne.n	8006652 <_printf_common+0xba>
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	3501      	adds	r5, #1
 8006654:	e7c3      	b.n	80065de <_printf_common+0x46>
 8006656:	18e1      	adds	r1, r4, r3
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	2030      	movs	r0, #48	; 0x30
 800665c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006660:	4422      	add	r2, r4
 8006662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800666a:	3302      	adds	r3, #2
 800666c:	e7c5      	b.n	80065fa <_printf_common+0x62>
 800666e:	2301      	movs	r3, #1
 8006670:	4622      	mov	r2, r4
 8006672:	4639      	mov	r1, r7
 8006674:	4630      	mov	r0, r6
 8006676:	47c0      	blx	r8
 8006678:	3001      	adds	r0, #1
 800667a:	d0e6      	beq.n	800664a <_printf_common+0xb2>
 800667c:	f109 0901 	add.w	r9, r9, #1
 8006680:	e7d8      	b.n	8006634 <_printf_common+0x9c>
	...

08006684 <_printf_i>:
 8006684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006688:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800668c:	460c      	mov	r4, r1
 800668e:	7e09      	ldrb	r1, [r1, #24]
 8006690:	b085      	sub	sp, #20
 8006692:	296e      	cmp	r1, #110	; 0x6e
 8006694:	4617      	mov	r7, r2
 8006696:	4606      	mov	r6, r0
 8006698:	4698      	mov	r8, r3
 800669a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800669c:	f000 80b3 	beq.w	8006806 <_printf_i+0x182>
 80066a0:	d822      	bhi.n	80066e8 <_printf_i+0x64>
 80066a2:	2963      	cmp	r1, #99	; 0x63
 80066a4:	d036      	beq.n	8006714 <_printf_i+0x90>
 80066a6:	d80a      	bhi.n	80066be <_printf_i+0x3a>
 80066a8:	2900      	cmp	r1, #0
 80066aa:	f000 80b9 	beq.w	8006820 <_printf_i+0x19c>
 80066ae:	2958      	cmp	r1, #88	; 0x58
 80066b0:	f000 8083 	beq.w	80067ba <_printf_i+0x136>
 80066b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066bc:	e032      	b.n	8006724 <_printf_i+0xa0>
 80066be:	2964      	cmp	r1, #100	; 0x64
 80066c0:	d001      	beq.n	80066c6 <_printf_i+0x42>
 80066c2:	2969      	cmp	r1, #105	; 0x69
 80066c4:	d1f6      	bne.n	80066b4 <_printf_i+0x30>
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	0605      	lsls	r5, r0, #24
 80066cc:	f103 0104 	add.w	r1, r3, #4
 80066d0:	d52a      	bpl.n	8006728 <_printf_i+0xa4>
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da03      	bge.n	80066e2 <_printf_i+0x5e>
 80066da:	222d      	movs	r2, #45	; 0x2d
 80066dc:	425b      	negs	r3, r3
 80066de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066e2:	486f      	ldr	r0, [pc, #444]	; (80068a0 <_printf_i+0x21c>)
 80066e4:	220a      	movs	r2, #10
 80066e6:	e039      	b.n	800675c <_printf_i+0xd8>
 80066e8:	2973      	cmp	r1, #115	; 0x73
 80066ea:	f000 809d 	beq.w	8006828 <_printf_i+0x1a4>
 80066ee:	d808      	bhi.n	8006702 <_printf_i+0x7e>
 80066f0:	296f      	cmp	r1, #111	; 0x6f
 80066f2:	d020      	beq.n	8006736 <_printf_i+0xb2>
 80066f4:	2970      	cmp	r1, #112	; 0x70
 80066f6:	d1dd      	bne.n	80066b4 <_printf_i+0x30>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	f043 0320 	orr.w	r3, r3, #32
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	e003      	b.n	800670a <_printf_i+0x86>
 8006702:	2975      	cmp	r1, #117	; 0x75
 8006704:	d017      	beq.n	8006736 <_printf_i+0xb2>
 8006706:	2978      	cmp	r1, #120	; 0x78
 8006708:	d1d4      	bne.n	80066b4 <_printf_i+0x30>
 800670a:	2378      	movs	r3, #120	; 0x78
 800670c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006710:	4864      	ldr	r0, [pc, #400]	; (80068a4 <_printf_i+0x220>)
 8006712:	e055      	b.n	80067c0 <_printf_i+0x13c>
 8006714:	6813      	ldr	r3, [r2, #0]
 8006716:	1d19      	adds	r1, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6011      	str	r1, [r2, #0]
 800671c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006724:	2301      	movs	r3, #1
 8006726:	e08c      	b.n	8006842 <_printf_i+0x1be>
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6011      	str	r1, [r2, #0]
 800672c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006730:	bf18      	it	ne
 8006732:	b21b      	sxthne	r3, r3
 8006734:	e7cf      	b.n	80066d6 <_printf_i+0x52>
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	6825      	ldr	r5, [r4, #0]
 800673a:	1d18      	adds	r0, r3, #4
 800673c:	6010      	str	r0, [r2, #0]
 800673e:	0628      	lsls	r0, r5, #24
 8006740:	d501      	bpl.n	8006746 <_printf_i+0xc2>
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	e002      	b.n	800674c <_printf_i+0xc8>
 8006746:	0668      	lsls	r0, r5, #25
 8006748:	d5fb      	bpl.n	8006742 <_printf_i+0xbe>
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	4854      	ldr	r0, [pc, #336]	; (80068a0 <_printf_i+0x21c>)
 800674e:	296f      	cmp	r1, #111	; 0x6f
 8006750:	bf14      	ite	ne
 8006752:	220a      	movne	r2, #10
 8006754:	2208      	moveq	r2, #8
 8006756:	2100      	movs	r1, #0
 8006758:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800675c:	6865      	ldr	r5, [r4, #4]
 800675e:	60a5      	str	r5, [r4, #8]
 8006760:	2d00      	cmp	r5, #0
 8006762:	f2c0 8095 	blt.w	8006890 <_printf_i+0x20c>
 8006766:	6821      	ldr	r1, [r4, #0]
 8006768:	f021 0104 	bic.w	r1, r1, #4
 800676c:	6021      	str	r1, [r4, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d13d      	bne.n	80067ee <_printf_i+0x16a>
 8006772:	2d00      	cmp	r5, #0
 8006774:	f040 808e 	bne.w	8006894 <_printf_i+0x210>
 8006778:	4665      	mov	r5, ip
 800677a:	2a08      	cmp	r2, #8
 800677c:	d10b      	bne.n	8006796 <_printf_i+0x112>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	07db      	lsls	r3, r3, #31
 8006782:	d508      	bpl.n	8006796 <_printf_i+0x112>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	6862      	ldr	r2, [r4, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	bfde      	ittt	le
 800678c:	2330      	movle	r3, #48	; 0x30
 800678e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006796:	ebac 0305 	sub.w	r3, ip, r5
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	f8cd 8000 	str.w	r8, [sp]
 80067a0:	463b      	mov	r3, r7
 80067a2:	aa03      	add	r2, sp, #12
 80067a4:	4621      	mov	r1, r4
 80067a6:	4630      	mov	r0, r6
 80067a8:	f7ff fef6 	bl	8006598 <_printf_common>
 80067ac:	3001      	adds	r0, #1
 80067ae:	d14d      	bne.n	800684c <_printf_i+0x1c8>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	b005      	add	sp, #20
 80067b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067ba:	4839      	ldr	r0, [pc, #228]	; (80068a0 <_printf_i+0x21c>)
 80067bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	1d1d      	adds	r5, r3, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6015      	str	r5, [r2, #0]
 80067ca:	060a      	lsls	r2, r1, #24
 80067cc:	d50b      	bpl.n	80067e6 <_printf_i+0x162>
 80067ce:	07ca      	lsls	r2, r1, #31
 80067d0:	bf44      	itt	mi
 80067d2:	f041 0120 	orrmi.w	r1, r1, #32
 80067d6:	6021      	strmi	r1, [r4, #0]
 80067d8:	b91b      	cbnz	r3, 80067e2 <_printf_i+0x15e>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	f022 0220 	bic.w	r2, r2, #32
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	2210      	movs	r2, #16
 80067e4:	e7b7      	b.n	8006756 <_printf_i+0xd2>
 80067e6:	064d      	lsls	r5, r1, #25
 80067e8:	bf48      	it	mi
 80067ea:	b29b      	uxthmi	r3, r3
 80067ec:	e7ef      	b.n	80067ce <_printf_i+0x14a>
 80067ee:	4665      	mov	r5, ip
 80067f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f4:	fb02 3311 	mls	r3, r2, r1, r3
 80067f8:	5cc3      	ldrb	r3, [r0, r3]
 80067fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067fe:	460b      	mov	r3, r1
 8006800:	2900      	cmp	r1, #0
 8006802:	d1f5      	bne.n	80067f0 <_printf_i+0x16c>
 8006804:	e7b9      	b.n	800677a <_printf_i+0xf6>
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	6961      	ldr	r1, [r4, #20]
 800680c:	1d18      	adds	r0, r3, #4
 800680e:	6010      	str	r0, [r2, #0]
 8006810:	0628      	lsls	r0, r5, #24
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	d501      	bpl.n	800681a <_printf_i+0x196>
 8006816:	6019      	str	r1, [r3, #0]
 8006818:	e002      	b.n	8006820 <_printf_i+0x19c>
 800681a:	066a      	lsls	r2, r5, #25
 800681c:	d5fb      	bpl.n	8006816 <_printf_i+0x192>
 800681e:	8019      	strh	r1, [r3, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	4665      	mov	r5, ip
 8006826:	e7b9      	b.n	800679c <_printf_i+0x118>
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	1d19      	adds	r1, r3, #4
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	681d      	ldr	r5, [r3, #0]
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	2100      	movs	r1, #0
 8006834:	4628      	mov	r0, r5
 8006836:	f7f9 fd5b 	bl	80002f0 <memchr>
 800683a:	b108      	cbz	r0, 8006840 <_printf_i+0x1bc>
 800683c:	1b40      	subs	r0, r0, r5
 800683e:	6060      	str	r0, [r4, #4]
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	2300      	movs	r3, #0
 8006846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684a:	e7a7      	b.n	800679c <_printf_i+0x118>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	462a      	mov	r2, r5
 8006850:	4639      	mov	r1, r7
 8006852:	4630      	mov	r0, r6
 8006854:	47c0      	blx	r8
 8006856:	3001      	adds	r0, #1
 8006858:	d0aa      	beq.n	80067b0 <_printf_i+0x12c>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	079b      	lsls	r3, r3, #30
 800685e:	d413      	bmi.n	8006888 <_printf_i+0x204>
 8006860:	68e0      	ldr	r0, [r4, #12]
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	4298      	cmp	r0, r3
 8006866:	bfb8      	it	lt
 8006868:	4618      	movlt	r0, r3
 800686a:	e7a3      	b.n	80067b4 <_printf_i+0x130>
 800686c:	2301      	movs	r3, #1
 800686e:	464a      	mov	r2, r9
 8006870:	4639      	mov	r1, r7
 8006872:	4630      	mov	r0, r6
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d09a      	beq.n	80067b0 <_printf_i+0x12c>
 800687a:	3501      	adds	r5, #1
 800687c:	68e3      	ldr	r3, [r4, #12]
 800687e:	9a03      	ldr	r2, [sp, #12]
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	42ab      	cmp	r3, r5
 8006884:	dcf2      	bgt.n	800686c <_printf_i+0x1e8>
 8006886:	e7eb      	b.n	8006860 <_printf_i+0x1dc>
 8006888:	2500      	movs	r5, #0
 800688a:	f104 0919 	add.w	r9, r4, #25
 800688e:	e7f5      	b.n	800687c <_printf_i+0x1f8>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ac      	bne.n	80067ee <_printf_i+0x16a>
 8006894:	7803      	ldrb	r3, [r0, #0]
 8006896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800689a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800689e:	e76c      	b.n	800677a <_printf_i+0xf6>
 80068a0:	08008c5a 	.word	0x08008c5a
 80068a4:	08008c6b 	.word	0x08008c6b

080068a8 <iprintf>:
 80068a8:	b40f      	push	{r0, r1, r2, r3}
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <iprintf+0x2c>)
 80068ac:	b513      	push	{r0, r1, r4, lr}
 80068ae:	681c      	ldr	r4, [r3, #0]
 80068b0:	b124      	cbz	r4, 80068bc <iprintf+0x14>
 80068b2:	69a3      	ldr	r3, [r4, #24]
 80068b4:	b913      	cbnz	r3, 80068bc <iprintf+0x14>
 80068b6:	4620      	mov	r0, r4
 80068b8:	f001 f81a 	bl	80078f0 <__sinit>
 80068bc:	ab05      	add	r3, sp, #20
 80068be:	9a04      	ldr	r2, [sp, #16]
 80068c0:	68a1      	ldr	r1, [r4, #8]
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	4620      	mov	r0, r4
 80068c6:	f001 fe25 	bl	8008514 <_vfiprintf_r>
 80068ca:	b002      	add	sp, #8
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	b004      	add	sp, #16
 80068d2:	4770      	bx	lr
 80068d4:	2000001c 	.word	0x2000001c

080068d8 <_puts_r>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	460e      	mov	r6, r1
 80068dc:	4605      	mov	r5, r0
 80068de:	b118      	cbz	r0, 80068e8 <_puts_r+0x10>
 80068e0:	6983      	ldr	r3, [r0, #24]
 80068e2:	b90b      	cbnz	r3, 80068e8 <_puts_r+0x10>
 80068e4:	f001 f804 	bl	80078f0 <__sinit>
 80068e8:	69ab      	ldr	r3, [r5, #24]
 80068ea:	68ac      	ldr	r4, [r5, #8]
 80068ec:	b913      	cbnz	r3, 80068f4 <_puts_r+0x1c>
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fffe 	bl	80078f0 <__sinit>
 80068f4:	4b23      	ldr	r3, [pc, #140]	; (8006984 <_puts_r+0xac>)
 80068f6:	429c      	cmp	r4, r3
 80068f8:	d117      	bne.n	800692a <_puts_r+0x52>
 80068fa:	686c      	ldr	r4, [r5, #4]
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	071b      	lsls	r3, r3, #28
 8006900:	d51d      	bpl.n	800693e <_puts_r+0x66>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	b1db      	cbz	r3, 800693e <_puts_r+0x66>
 8006906:	3e01      	subs	r6, #1
 8006908:	68a3      	ldr	r3, [r4, #8]
 800690a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800690e:	3b01      	subs	r3, #1
 8006910:	60a3      	str	r3, [r4, #8]
 8006912:	b9e9      	cbnz	r1, 8006950 <_puts_r+0x78>
 8006914:	2b00      	cmp	r3, #0
 8006916:	da2e      	bge.n	8006976 <_puts_r+0x9e>
 8006918:	4622      	mov	r2, r4
 800691a:	210a      	movs	r1, #10
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f85f 	bl	80069e0 <__swbuf_r>
 8006922:	3001      	adds	r0, #1
 8006924:	d011      	beq.n	800694a <_puts_r+0x72>
 8006926:	200a      	movs	r0, #10
 8006928:	e011      	b.n	800694e <_puts_r+0x76>
 800692a:	4b17      	ldr	r3, [pc, #92]	; (8006988 <_puts_r+0xb0>)
 800692c:	429c      	cmp	r4, r3
 800692e:	d101      	bne.n	8006934 <_puts_r+0x5c>
 8006930:	68ac      	ldr	r4, [r5, #8]
 8006932:	e7e3      	b.n	80068fc <_puts_r+0x24>
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <_puts_r+0xb4>)
 8006936:	429c      	cmp	r4, r3
 8006938:	bf08      	it	eq
 800693a:	68ec      	ldreq	r4, [r5, #12]
 800693c:	e7de      	b.n	80068fc <_puts_r+0x24>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f89f 	bl	8006a84 <__swsetup_r>
 8006946:	2800      	cmp	r0, #0
 8006948:	d0dd      	beq.n	8006906 <_puts_r+0x2e>
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	2b00      	cmp	r3, #0
 8006952:	da04      	bge.n	800695e <_puts_r+0x86>
 8006954:	69a2      	ldr	r2, [r4, #24]
 8006956:	429a      	cmp	r2, r3
 8006958:	dc06      	bgt.n	8006968 <_puts_r+0x90>
 800695a:	290a      	cmp	r1, #10
 800695c:	d004      	beq.n	8006968 <_puts_r+0x90>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	e7cf      	b.n	8006908 <_puts_r+0x30>
 8006968:	4622      	mov	r2, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f838 	bl	80069e0 <__swbuf_r>
 8006970:	3001      	adds	r0, #1
 8006972:	d1c9      	bne.n	8006908 <_puts_r+0x30>
 8006974:	e7e9      	b.n	800694a <_puts_r+0x72>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	200a      	movs	r0, #10
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	7018      	strb	r0, [r3, #0]
 8006980:	e7e5      	b.n	800694e <_puts_r+0x76>
 8006982:	bf00      	nop
 8006984:	08008cac 	.word	0x08008cac
 8006988:	08008ccc 	.word	0x08008ccc
 800698c:	08008c8c 	.word	0x08008c8c

08006990 <puts>:
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <puts+0xc>)
 8006992:	4601      	mov	r1, r0
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f7ff bf9f 	b.w	80068d8 <_puts_r>
 800699a:	bf00      	nop
 800699c:	2000001c 	.word	0x2000001c

080069a0 <siprintf>:
 80069a0:	b40e      	push	{r1, r2, r3}
 80069a2:	b500      	push	{lr}
 80069a4:	b09c      	sub	sp, #112	; 0x70
 80069a6:	ab1d      	add	r3, sp, #116	; 0x74
 80069a8:	9002      	str	r0, [sp, #8]
 80069aa:	9006      	str	r0, [sp, #24]
 80069ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b0:	4809      	ldr	r0, [pc, #36]	; (80069d8 <siprintf+0x38>)
 80069b2:	9107      	str	r1, [sp, #28]
 80069b4:	9104      	str	r1, [sp, #16]
 80069b6:	4909      	ldr	r1, [pc, #36]	; (80069dc <siprintf+0x3c>)
 80069b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069bc:	9105      	str	r1, [sp, #20]
 80069be:	6800      	ldr	r0, [r0, #0]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	a902      	add	r1, sp, #8
 80069c4:	f001 fc84 	bl	80082d0 <_svfiprintf_r>
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	b01c      	add	sp, #112	; 0x70
 80069d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d4:	b003      	add	sp, #12
 80069d6:	4770      	bx	lr
 80069d8:	2000001c 	.word	0x2000001c
 80069dc:	ffff0208 	.word	0xffff0208

080069e0 <__swbuf_r>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	460e      	mov	r6, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	4605      	mov	r5, r0
 80069e8:	b118      	cbz	r0, 80069f2 <__swbuf_r+0x12>
 80069ea:	6983      	ldr	r3, [r0, #24]
 80069ec:	b90b      	cbnz	r3, 80069f2 <__swbuf_r+0x12>
 80069ee:	f000 ff7f 	bl	80078f0 <__sinit>
 80069f2:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <__swbuf_r+0x98>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d12a      	bne.n	8006a4e <__swbuf_r+0x6e>
 80069f8:	686c      	ldr	r4, [r5, #4]
 80069fa:	69a3      	ldr	r3, [r4, #24]
 80069fc:	60a3      	str	r3, [r4, #8]
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	071a      	lsls	r2, r3, #28
 8006a02:	d52e      	bpl.n	8006a62 <__swbuf_r+0x82>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	b363      	cbz	r3, 8006a62 <__swbuf_r+0x82>
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	1ac0      	subs	r0, r0, r3
 8006a0e:	6963      	ldr	r3, [r4, #20]
 8006a10:	b2f6      	uxtb	r6, r6
 8006a12:	4283      	cmp	r3, r0
 8006a14:	4637      	mov	r7, r6
 8006a16:	dc04      	bgt.n	8006a22 <__swbuf_r+0x42>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fefe 	bl	800781c <_fflush_r>
 8006a20:	bb28      	cbnz	r0, 8006a6e <__swbuf_r+0x8e>
 8006a22:	68a3      	ldr	r3, [r4, #8]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	60a3      	str	r3, [r4, #8]
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	6022      	str	r2, [r4, #0]
 8006a2e:	701e      	strb	r6, [r3, #0]
 8006a30:	6963      	ldr	r3, [r4, #20]
 8006a32:	3001      	adds	r0, #1
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d004      	beq.n	8006a42 <__swbuf_r+0x62>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	07db      	lsls	r3, r3, #31
 8006a3c:	d519      	bpl.n	8006a72 <__swbuf_r+0x92>
 8006a3e:	2e0a      	cmp	r6, #10
 8006a40:	d117      	bne.n	8006a72 <__swbuf_r+0x92>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 fee9 	bl	800781c <_fflush_r>
 8006a4a:	b190      	cbz	r0, 8006a72 <__swbuf_r+0x92>
 8006a4c:	e00f      	b.n	8006a6e <__swbuf_r+0x8e>
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <__swbuf_r+0x9c>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	d101      	bne.n	8006a58 <__swbuf_r+0x78>
 8006a54:	68ac      	ldr	r4, [r5, #8]
 8006a56:	e7d0      	b.n	80069fa <__swbuf_r+0x1a>
 8006a58:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <__swbuf_r+0xa0>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	bf08      	it	eq
 8006a5e:	68ec      	ldreq	r4, [r5, #12]
 8006a60:	e7cb      	b.n	80069fa <__swbuf_r+0x1a>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f80d 	bl	8006a84 <__swsetup_r>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d0cc      	beq.n	8006a08 <__swbuf_r+0x28>
 8006a6e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a72:	4638      	mov	r0, r7
 8006a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a76:	bf00      	nop
 8006a78:	08008cac 	.word	0x08008cac
 8006a7c:	08008ccc 	.word	0x08008ccc
 8006a80:	08008c8c 	.word	0x08008c8c

08006a84 <__swsetup_r>:
 8006a84:	4b32      	ldr	r3, [pc, #200]	; (8006b50 <__swsetup_r+0xcc>)
 8006a86:	b570      	push	{r4, r5, r6, lr}
 8006a88:	681d      	ldr	r5, [r3, #0]
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	b125      	cbz	r5, 8006a9a <__swsetup_r+0x16>
 8006a90:	69ab      	ldr	r3, [r5, #24]
 8006a92:	b913      	cbnz	r3, 8006a9a <__swsetup_r+0x16>
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 ff2b 	bl	80078f0 <__sinit>
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <__swsetup_r+0xd0>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	d10f      	bne.n	8006ac0 <__swsetup_r+0x3c>
 8006aa0:	686c      	ldr	r4, [r5, #4]
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	0715      	lsls	r5, r2, #28
 8006aaa:	d42c      	bmi.n	8006b06 <__swsetup_r+0x82>
 8006aac:	06d0      	lsls	r0, r2, #27
 8006aae:	d411      	bmi.n	8006ad4 <__swsetup_r+0x50>
 8006ab0:	2209      	movs	r2, #9
 8006ab2:	6032      	str	r2, [r6, #0]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e03e      	b.n	8006b3e <__swsetup_r+0xba>
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <__swsetup_r+0xd4>)
 8006ac2:	429c      	cmp	r4, r3
 8006ac4:	d101      	bne.n	8006aca <__swsetup_r+0x46>
 8006ac6:	68ac      	ldr	r4, [r5, #8]
 8006ac8:	e7eb      	b.n	8006aa2 <__swsetup_r+0x1e>
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <__swsetup_r+0xd8>)
 8006acc:	429c      	cmp	r4, r3
 8006ace:	bf08      	it	eq
 8006ad0:	68ec      	ldreq	r4, [r5, #12]
 8006ad2:	e7e6      	b.n	8006aa2 <__swsetup_r+0x1e>
 8006ad4:	0751      	lsls	r1, r2, #29
 8006ad6:	d512      	bpl.n	8006afe <__swsetup_r+0x7a>
 8006ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ada:	b141      	cbz	r1, 8006aee <__swsetup_r+0x6a>
 8006adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <__swsetup_r+0x66>
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f001 faf1 	bl	80080cc <_free_r>
 8006aea:	2300      	movs	r3, #0
 8006aec:	6363      	str	r3, [r4, #52]	; 0x34
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	2300      	movs	r3, #0
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f043 0308 	orr.w	r3, r3, #8
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	b94b      	cbnz	r3, 8006b1e <__swsetup_r+0x9a>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b14:	d003      	beq.n	8006b1e <__swsetup_r+0x9a>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 ffa5 	bl	8007a68 <__smakebuf_r>
 8006b1e:	89a2      	ldrh	r2, [r4, #12]
 8006b20:	f012 0301 	ands.w	r3, r2, #1
 8006b24:	d00c      	beq.n	8006b40 <__swsetup_r+0xbc>
 8006b26:	2300      	movs	r3, #0
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6963      	ldr	r3, [r4, #20]
 8006b2c:	425b      	negs	r3, r3
 8006b2e:	61a3      	str	r3, [r4, #24]
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	b953      	cbnz	r3, 8006b4a <__swsetup_r+0xc6>
 8006b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006b3c:	d1ba      	bne.n	8006ab4 <__swsetup_r+0x30>
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	0792      	lsls	r2, r2, #30
 8006b42:	bf58      	it	pl
 8006b44:	6963      	ldrpl	r3, [r4, #20]
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	e7f2      	b.n	8006b30 <__swsetup_r+0xac>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e7f7      	b.n	8006b3e <__swsetup_r+0xba>
 8006b4e:	bf00      	nop
 8006b50:	2000001c 	.word	0x2000001c
 8006b54:	08008cac 	.word	0x08008cac
 8006b58:	08008ccc 	.word	0x08008ccc
 8006b5c:	08008c8c 	.word	0x08008c8c

08006b60 <quorem>:
 8006b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	6903      	ldr	r3, [r0, #16]
 8006b66:	690c      	ldr	r4, [r1, #16]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	f2c0 8082 	blt.w	8006c74 <quorem+0x114>
 8006b70:	3c01      	subs	r4, #1
 8006b72:	f101 0714 	add.w	r7, r1, #20
 8006b76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b7a:	f100 0614 	add.w	r6, r0, #20
 8006b7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b86:	eb06 030c 	add.w	r3, r6, ip
 8006b8a:	3501      	adds	r5, #1
 8006b8c:	eb07 090c 	add.w	r9, r7, ip
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	fbb0 f5f5 	udiv	r5, r0, r5
 8006b96:	b395      	cbz	r5, 8006bfe <quorem+0x9e>
 8006b98:	f04f 0a00 	mov.w	sl, #0
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	46b6      	mov	lr, r6
 8006ba0:	46d3      	mov	fp, sl
 8006ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ba6:	b293      	uxth	r3, r2
 8006ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8006bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	ebab 0303 	sub.w	r3, fp, r3
 8006bb6:	0c12      	lsrs	r2, r2, #16
 8006bb8:	f8de b000 	ldr.w	fp, [lr]
 8006bbc:	fb05 a202 	mla	r2, r5, r2, sl
 8006bc0:	fa13 f38b 	uxtah	r3, r3, fp
 8006bc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006bc8:	fa1f fb82 	uxth.w	fp, r2
 8006bcc:	f8de 2000 	ldr.w	r2, [lr]
 8006bd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bde:	4581      	cmp	r9, r0
 8006be0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006be4:	f84e 3b04 	str.w	r3, [lr], #4
 8006be8:	d2db      	bcs.n	8006ba2 <quorem+0x42>
 8006bea:	f856 300c 	ldr.w	r3, [r6, ip]
 8006bee:	b933      	cbnz	r3, 8006bfe <quorem+0x9e>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	3b04      	subs	r3, #4
 8006bf4:	429e      	cmp	r6, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	d330      	bcc.n	8006c5c <quorem+0xfc>
 8006bfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f001 f990 	bl	8007f24 <__mcmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	db25      	blt.n	8006c54 <quorem+0xf4>
 8006c08:	3501      	adds	r5, #1
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f04f 0c00 	mov.w	ip, #0
 8006c10:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c14:	f8d0 e000 	ldr.w	lr, [r0]
 8006c18:	b293      	uxth	r3, r2
 8006c1a:	ebac 0303 	sub.w	r3, ip, r3
 8006c1e:	0c12      	lsrs	r2, r2, #16
 8006c20:	fa13 f38e 	uxtah	r3, r3, lr
 8006c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c32:	45b9      	cmp	r9, r7
 8006c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c38:	f840 3b04 	str.w	r3, [r0], #4
 8006c3c:	d2e8      	bcs.n	8006c10 <quorem+0xb0>
 8006c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c46:	b92a      	cbnz	r2, 8006c54 <quorem+0xf4>
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	429e      	cmp	r6, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	d30b      	bcc.n	8006c68 <quorem+0x108>
 8006c50:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c54:	4628      	mov	r0, r5
 8006c56:	b003      	add	sp, #12
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	d1ca      	bne.n	8006bfa <quorem+0x9a>
 8006c64:	3c01      	subs	r4, #1
 8006c66:	e7c5      	b.n	8006bf4 <quorem+0x94>
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	d1ef      	bne.n	8006c50 <quorem+0xf0>
 8006c70:	3c01      	subs	r4, #1
 8006c72:	e7ea      	b.n	8006c4a <quorem+0xea>
 8006c74:	2000      	movs	r0, #0
 8006c76:	e7ee      	b.n	8006c56 <quorem+0xf6>

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	ec57 6b10 	vmov	r6, r7, d0
 8006c80:	b095      	sub	sp, #84	; 0x54
 8006c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c84:	9108      	str	r1, [sp, #32]
 8006c86:	4604      	mov	r4, r0
 8006c88:	920a      	str	r2, [sp, #40]	; 0x28
 8006c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006c8c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006c90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006c94:	b93d      	cbnz	r5, 8006ca6 <_dtoa_r+0x2e>
 8006c96:	2010      	movs	r0, #16
 8006c98:	f000 ff26 	bl	8007ae8 <malloc>
 8006c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ca2:	6005      	str	r5, [r0, #0]
 8006ca4:	60c5      	str	r5, [r0, #12]
 8006ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	b151      	cbz	r1, 8006cc2 <_dtoa_r+0x4a>
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	604a      	str	r2, [r1, #4]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4093      	lsls	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 ff52 	bl	8007b60 <_Bfree>
 8006cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	1e3b      	subs	r3, r7, #0
 8006cc4:	bfb9      	ittee	lt
 8006cc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	9303      	strlt	r3, [sp, #12]
 8006ccc:	2300      	movge	r3, #0
 8006cce:	f8c8 3000 	strge.w	r3, [r8]
 8006cd2:	9d03      	ldr	r5, [sp, #12]
 8006cd4:	4bac      	ldr	r3, [pc, #688]	; (8006f88 <_dtoa_r+0x310>)
 8006cd6:	bfbc      	itt	lt
 8006cd8:	2201      	movlt	r2, #1
 8006cda:	f8c8 2000 	strlt.w	r2, [r8]
 8006cde:	43ab      	bics	r3, r5
 8006ce0:	d11b      	bne.n	8006d1a <_dtoa_r+0xa2>
 8006ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ce4:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	b923      	cbnz	r3, 8006cf8 <_dtoa_r+0x80>
 8006cee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	f000 84dd 	beq.w	80076b2 <_dtoa_r+0xa3a>
 8006cf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cfa:	b953      	cbnz	r3, 8006d12 <_dtoa_r+0x9a>
 8006cfc:	4ba3      	ldr	r3, [pc, #652]	; (8006f8c <_dtoa_r+0x314>)
 8006cfe:	e020      	b.n	8006d42 <_dtoa_r+0xca>
 8006d00:	4ba3      	ldr	r3, [pc, #652]	; (8006f90 <_dtoa_r+0x318>)
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	3308      	adds	r3, #8
 8006d06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	9804      	ldr	r0, [sp, #16]
 8006d0c:	b015      	add	sp, #84	; 0x54
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	4b9e      	ldr	r3, [pc, #632]	; (8006f8c <_dtoa_r+0x314>)
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	3303      	adds	r3, #3
 8006d18:	e7f5      	b.n	8006d06 <_dtoa_r+0x8e>
 8006d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d2a:	d10c      	bne.n	8006d46 <_dtoa_r+0xce>
 8006d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d2e:	2301      	movs	r3, #1
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 84b9 	beq.w	80076ac <_dtoa_r+0xa34>
 8006d3a:	4b96      	ldr	r3, [pc, #600]	; (8006f94 <_dtoa_r+0x31c>)
 8006d3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	e7e1      	b.n	8006d0a <_dtoa_r+0x92>
 8006d46:	a913      	add	r1, sp, #76	; 0x4c
 8006d48:	aa12      	add	r2, sp, #72	; 0x48
 8006d4a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 f95f 	bl	8008012 <__d2b>
 8006d54:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8006d58:	9001      	str	r0, [sp, #4]
 8006d5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d5c:	2e00      	cmp	r6, #0
 8006d5e:	d046      	beq.n	8006dee <_dtoa_r+0x176>
 8006d60:	9805      	ldr	r0, [sp, #20]
 8006d62:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8006d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8006d6e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d72:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8006d76:	2700      	movs	r7, #0
 8006d78:	ee07 aa90 	vmov	s15, sl
 8006d7c:	ec43 2b16 	vmov	d6, r2, r3
 8006d80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006d84:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8006f70 <_dtoa_r+0x2f8>
 8006d88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d90:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8006f78 <_dtoa_r+0x300>
 8006d94:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006d98:	eeb0 7b46 	vmov.f64	d7, d6
 8006d9c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006f80 <_dtoa_r+0x308>
 8006da0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006da4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006da8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	ee16 ba90 	vmov	fp, s13
 8006db4:	d508      	bpl.n	8006dc8 <_dtoa_r+0x150>
 8006db6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006dba:	eeb4 6b47 	vcmp.f64	d6, d7
 8006dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc2:	bf18      	it	ne
 8006dc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006dc8:	f1bb 0f16 	cmp.w	fp, #22
 8006dcc:	d834      	bhi.n	8006e38 <_dtoa_r+0x1c0>
 8006dce:	4b72      	ldr	r3, [pc, #456]	; (8006f98 <_dtoa_r+0x320>)
 8006dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dd4:	ed93 7b00 	vldr	d7, [r3]
 8006dd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006ddc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	dd01      	ble.n	8006dea <_dtoa_r+0x172>
 8006de6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dea:	2300      	movs	r3, #0
 8006dec:	e025      	b.n	8006e3a <_dtoa_r+0x1c2>
 8006dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df0:	eb01 0a03 	add.w	sl, r1, r3
 8006df4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	dd17      	ble.n	8006e2c <_dtoa_r+0x1b4>
 8006dfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006e00:	9a02      	ldr	r2, [sp, #8]
 8006e02:	409d      	lsls	r5, r3
 8006e04:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	432b      	orrs	r3, r5
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e1e:	9805      	ldr	r0, [sp, #20]
 8006e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e24:	2701      	movs	r7, #1
 8006e26:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8006e2a:	e7a5      	b.n	8006d78 <_dtoa_r+0x100>
 8006e2c:	9a02      	ldr	r2, [sp, #8]
 8006e2e:	f1c3 0320 	rsb	r3, r3, #32
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	e7ea      	b.n	8006e0e <_dtoa_r+0x196>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	eba1 0a0a 	sub.w	sl, r1, sl
 8006e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e40:	f1ba 0301 	subs.w	r3, sl, #1
 8006e44:	9307      	str	r3, [sp, #28]
 8006e46:	bf43      	ittte	mi
 8006e48:	2300      	movmi	r3, #0
 8006e4a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8006e4e:	9307      	strmi	r3, [sp, #28]
 8006e50:	f04f 0a00 	movpl.w	sl, #0
 8006e54:	f1bb 0f00 	cmp.w	fp, #0
 8006e58:	db19      	blt.n	8006e8e <_dtoa_r+0x216>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006e60:	445b      	add	r3, fp
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d866      	bhi.n	8006f3c <_dtoa_r+0x2c4>
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	bfc4      	itt	gt
 8006e72:	3b04      	subgt	r3, #4
 8006e74:	9308      	strgt	r3, [sp, #32]
 8006e76:	9b08      	ldr	r3, [sp, #32]
 8006e78:	f1a3 0302 	sub.w	r3, r3, #2
 8006e7c:	bfcc      	ite	gt
 8006e7e:	2500      	movgt	r5, #0
 8006e80:	2501      	movle	r5, #1
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d866      	bhi.n	8006f54 <_dtoa_r+0x2dc>
 8006e86:	e8df f003 	tbb	[pc, r3]
 8006e8a:	5755      	.short	0x5755
 8006e8c:	4909      	.short	0x4909
 8006e8e:	2300      	movs	r3, #0
 8006e90:	ebaa 0a0b 	sub.w	sl, sl, fp
 8006e94:	f1cb 0800 	rsb	r8, fp, #0
 8006e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e9a:	e7e5      	b.n	8006e68 <_dtoa_r+0x1f0>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dd59      	ble.n	8006f5a <_dtoa_r+0x2e2>
 8006ea6:	9306      	str	r3, [sp, #24]
 8006ea8:	4699      	mov	r9, r3
 8006eaa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006eac:	2200      	movs	r2, #0
 8006eae:	6072      	str	r2, [r6, #4]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	f102 0014 	add.w	r0, r2, #20
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	6871      	ldr	r1, [r6, #4]
 8006eba:	d953      	bls.n	8006f64 <_dtoa_r+0x2ec>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fe1b 	bl	8007af8 <_Balloc>
 8006ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec4:	6030      	str	r0, [r6, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f1b9 0f0e 	cmp.w	r9, #14
 8006ece:	f200 80c2 	bhi.w	8007056 <_dtoa_r+0x3de>
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f000 80bf 	beq.w	8007056 <_dtoa_r+0x3de>
 8006ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006edc:	f1bb 0f00 	cmp.w	fp, #0
 8006ee0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006ee4:	f340 80e6 	ble.w	80070b4 <_dtoa_r+0x43c>
 8006ee8:	4a2b      	ldr	r2, [pc, #172]	; (8006f98 <_dtoa_r+0x320>)
 8006eea:	f00b 030f 	and.w	r3, fp, #15
 8006eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ef2:	ed93 7b00 	vldr	d7, [r3]
 8006ef6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8006efa:	06da      	lsls	r2, r3, #27
 8006efc:	f140 80d8 	bpl.w	80070b0 <_dtoa_r+0x438>
 8006f00:	4a26      	ldr	r2, [pc, #152]	; (8006f9c <_dtoa_r+0x324>)
 8006f02:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8006f06:	ed92 6b08 	vldr	d6, [r2, #32]
 8006f0a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8006f0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	2203      	movs	r2, #3
 8006f18:	4920      	ldr	r1, [pc, #128]	; (8006f9c <_dtoa_r+0x324>)
 8006f1a:	e04a      	b.n	8006fb2 <_dtoa_r+0x33a>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f22:	445b      	add	r3, fp
 8006f24:	f103 0901 	add.w	r9, r3, #1
 8006f28:	9306      	str	r3, [sp, #24]
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	bfb8      	it	lt
 8006f30:	2301      	movlt	r3, #1
 8006f32:	e7ba      	b.n	8006eaa <_dtoa_r+0x232>
 8006f34:	2300      	movs	r3, #0
 8006f36:	e7b2      	b.n	8006e9e <_dtoa_r+0x226>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e7f0      	b.n	8006f1e <_dtoa_r+0x2a6>
 8006f3c:	2501      	movs	r5, #1
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295
 8006f48:	9306      	str	r3, [sp, #24]
 8006f4a:	4699      	mov	r9, r3
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2312      	movs	r3, #18
 8006f50:	920a      	str	r2, [sp, #40]	; 0x28
 8006f52:	e7aa      	b.n	8006eaa <_dtoa_r+0x232>
 8006f54:	2301      	movs	r3, #1
 8006f56:	9309      	str	r3, [sp, #36]	; 0x24
 8006f58:	e7f4      	b.n	8006f44 <_dtoa_r+0x2cc>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	9306      	str	r3, [sp, #24]
 8006f5e:	4699      	mov	r9, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	e7f5      	b.n	8006f50 <_dtoa_r+0x2d8>
 8006f64:	3101      	adds	r1, #1
 8006f66:	6071      	str	r1, [r6, #4]
 8006f68:	0052      	lsls	r2, r2, #1
 8006f6a:	e7a2      	b.n	8006eb2 <_dtoa_r+0x23a>
 8006f6c:	f3af 8000 	nop.w
 8006f70:	636f4361 	.word	0x636f4361
 8006f74:	3fd287a7 	.word	0x3fd287a7
 8006f78:	8b60c8b3 	.word	0x8b60c8b3
 8006f7c:	3fc68a28 	.word	0x3fc68a28
 8006f80:	509f79fb 	.word	0x509f79fb
 8006f84:	3fd34413 	.word	0x3fd34413
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	08008c85 	.word	0x08008c85
 8006f90:	08008c7c 	.word	0x08008c7c
 8006f94:	08008c59 	.word	0x08008c59
 8006f98:	08008d18 	.word	0x08008d18
 8006f9c:	08008cf0 	.word	0x08008cf0
 8006fa0:	07de      	lsls	r6, r3, #31
 8006fa2:	d504      	bpl.n	8006fae <_dtoa_r+0x336>
 8006fa4:	ed91 6b00 	vldr	d6, [r1]
 8006fa8:	3201      	adds	r2, #1
 8006faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fae:	105b      	asrs	r3, r3, #1
 8006fb0:	3108      	adds	r1, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f4      	bne.n	8006fa0 <_dtoa_r+0x328>
 8006fb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006fba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006fbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a7 	beq.w	8007118 <_dtoa_r+0x4a0>
 8006fca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fda:	f140 809d 	bpl.w	8007118 <_dtoa_r+0x4a0>
 8006fde:	f1b9 0f00 	cmp.w	r9, #0
 8006fe2:	f000 8099 	beq.w	8007118 <_dtoa_r+0x4a0>
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dd30      	ble.n	800704e <_dtoa_r+0x3d6>
 8006fec:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ff8:	9d06      	ldr	r5, [sp, #24]
 8006ffa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006ffe:	3201      	adds	r2, #1
 8007000:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007004:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007008:	ee07 2a90 	vmov	s15, r2
 800700c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007010:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007014:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007018:	9a03      	ldr	r2, [sp, #12]
 800701a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800701e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8007022:	2d00      	cmp	r5, #0
 8007024:	d17b      	bne.n	800711e <_dtoa_r+0x4a6>
 8007026:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800702a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800702e:	ec41 0b17 	vmov	d7, r0, r1
 8007032:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703a:	f300 8253 	bgt.w	80074e4 <_dtoa_r+0x86c>
 800703e:	eeb1 7b47 	vneg.f64	d7, d7
 8007042:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	f100 8249 	bmi.w	80074e0 <_dtoa_r+0x868>
 800704e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007052:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007058:	2b00      	cmp	r3, #0
 800705a:	f2c0 8119 	blt.w	8007290 <_dtoa_r+0x618>
 800705e:	f1bb 0f0e 	cmp.w	fp, #14
 8007062:	f300 8115 	bgt.w	8007290 <_dtoa_r+0x618>
 8007066:	4bc3      	ldr	r3, [pc, #780]	; (8007374 <_dtoa_r+0x6fc>)
 8007068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800706c:	ed93 6b00 	vldr	d6, [r3]
 8007070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	f280 80ba 	bge.w	80071ec <_dtoa_r+0x574>
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	f300 80b6 	bgt.w	80071ec <_dtoa_r+0x574>
 8007080:	f040 822d 	bne.w	80074de <_dtoa_r+0x866>
 8007084:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007088:	ee26 6b07 	vmul.f64	d6, d6, d7
 800708c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	464d      	mov	r5, r9
 800709a:	464f      	mov	r7, r9
 800709c:	f280 8204 	bge.w	80074a8 <_dtoa_r+0x830>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	1c5e      	adds	r6, r3, #1
 80070a6:	2331      	movs	r3, #49	; 0x31
 80070a8:	7013      	strb	r3, [r2, #0]
 80070aa:	f10b 0b01 	add.w	fp, fp, #1
 80070ae:	e1ff      	b.n	80074b0 <_dtoa_r+0x838>
 80070b0:	2202      	movs	r2, #2
 80070b2:	e731      	b.n	8006f18 <_dtoa_r+0x2a0>
 80070b4:	d02e      	beq.n	8007114 <_dtoa_r+0x49c>
 80070b6:	f1cb 0300 	rsb	r3, fp, #0
 80070ba:	4aae      	ldr	r2, [pc, #696]	; (8007374 <_dtoa_r+0x6fc>)
 80070bc:	f003 010f 	and.w	r1, r3, #15
 80070c0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80070c4:	ed92 7b00 	vldr	d7, [r2]
 80070c8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80070cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80070d0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80070d4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80070d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80070dc:	49a6      	ldr	r1, [pc, #664]	; (8007378 <_dtoa_r+0x700>)
 80070de:	111b      	asrs	r3, r3, #4
 80070e0:	2000      	movs	r0, #0
 80070e2:	2202      	movs	r2, #2
 80070e4:	b93b      	cbnz	r3, 80070f6 <_dtoa_r+0x47e>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f43f af6b 	beq.w	8006fc2 <_dtoa_r+0x34a>
 80070ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f4:	e765      	b.n	8006fc2 <_dtoa_r+0x34a>
 80070f6:	07dd      	lsls	r5, r3, #31
 80070f8:	d509      	bpl.n	800710e <_dtoa_r+0x496>
 80070fa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80070fe:	ed91 7b00 	vldr	d7, [r1]
 8007102:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007106:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800710a:	3201      	adds	r2, #1
 800710c:	2001      	movs	r0, #1
 800710e:	105b      	asrs	r3, r3, #1
 8007110:	3108      	adds	r1, #8
 8007112:	e7e7      	b.n	80070e4 <_dtoa_r+0x46c>
 8007114:	2202      	movs	r2, #2
 8007116:	e754      	b.n	8006fc2 <_dtoa_r+0x34a>
 8007118:	465b      	mov	r3, fp
 800711a:	464d      	mov	r5, r9
 800711c:	e770      	b.n	8007000 <_dtoa_r+0x388>
 800711e:	4a95      	ldr	r2, [pc, #596]	; (8007374 <_dtoa_r+0x6fc>)
 8007120:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007124:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800712a:	ec41 0b17 	vmov	d7, r0, r1
 800712e:	b35a      	cbz	r2, 8007188 <_dtoa_r+0x510>
 8007130:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007134:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007138:	9e04      	ldr	r6, [sp, #16]
 800713a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800713e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007142:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007146:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800714a:	ee14 2a90 	vmov	r2, s9
 800714e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007152:	3230      	adds	r2, #48	; 0x30
 8007154:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007160:	f806 2b01 	strb.w	r2, [r6], #1
 8007164:	d43b      	bmi.n	80071de <_dtoa_r+0x566>
 8007166:	ee32 5b46 	vsub.f64	d5, d2, d6
 800716a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007172:	d472      	bmi.n	800725a <_dtoa_r+0x5e2>
 8007174:	9a04      	ldr	r2, [sp, #16]
 8007176:	1ab2      	subs	r2, r6, r2
 8007178:	4295      	cmp	r5, r2
 800717a:	f77f af68 	ble.w	800704e <_dtoa_r+0x3d6>
 800717e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007182:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007186:	e7de      	b.n	8007146 <_dtoa_r+0x4ce>
 8007188:	9a04      	ldr	r2, [sp, #16]
 800718a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800718e:	1956      	adds	r6, r2, r5
 8007190:	4611      	mov	r1, r2
 8007192:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007196:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800719a:	ee14 2a90 	vmov	r2, s9
 800719e:	3230      	adds	r2, #48	; 0x30
 80071a0:	f801 2b01 	strb.w	r2, [r1], #1
 80071a4:	42b1      	cmp	r1, r6
 80071a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80071aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80071ae:	d11a      	bne.n	80071e6 <_dtoa_r+0x56e>
 80071b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80071b4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80071b8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	dc4b      	bgt.n	800725a <_dtoa_r+0x5e2>
 80071c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80071c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ce:	f57f af3e 	bpl.w	800704e <_dtoa_r+0x3d6>
 80071d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071d6:	2a30      	cmp	r2, #48	; 0x30
 80071d8:	f106 31ff 	add.w	r1, r6, #4294967295
 80071dc:	d001      	beq.n	80071e2 <_dtoa_r+0x56a>
 80071de:	469b      	mov	fp, r3
 80071e0:	e02a      	b.n	8007238 <_dtoa_r+0x5c0>
 80071e2:	460e      	mov	r6, r1
 80071e4:	e7f5      	b.n	80071d2 <_dtoa_r+0x55a>
 80071e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80071ea:	e7d4      	b.n	8007196 <_dtoa_r+0x51e>
 80071ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80071f4:	9e04      	ldr	r6, [sp, #16]
 80071f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80071fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80071fe:	ee15 3a10 	vmov	r3, s10
 8007202:	3330      	adds	r3, #48	; 0x30
 8007204:	f806 3b01 	strb.w	r3, [r6], #1
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	1af3      	subs	r3, r6, r3
 800720c:	4599      	cmp	r9, r3
 800720e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007212:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007216:	d133      	bne.n	8007280 <_dtoa_r+0x608>
 8007218:	ee37 7b07 	vadd.f64	d7, d7, d7
 800721c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	dc18      	bgt.n	8007258 <_dtoa_r+0x5e0>
 8007226:	eeb4 7b46 	vcmp.f64	d7, d6
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	d103      	bne.n	8007238 <_dtoa_r+0x5c0>
 8007230:	ee15 3a10 	vmov	r3, s10
 8007234:	07db      	lsls	r3, r3, #31
 8007236:	d40f      	bmi.n	8007258 <_dtoa_r+0x5e0>
 8007238:	9901      	ldr	r1, [sp, #4]
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fc90 	bl	8007b60 <_Bfree>
 8007240:	2300      	movs	r3, #0
 8007242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007244:	7033      	strb	r3, [r6, #0]
 8007246:	f10b 0301 	add.w	r3, fp, #1
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800724e:	2b00      	cmp	r3, #0
 8007250:	f43f ad5b 	beq.w	8006d0a <_dtoa_r+0x92>
 8007254:	601e      	str	r6, [r3, #0]
 8007256:	e558      	b.n	8006d0a <_dtoa_r+0x92>
 8007258:	465b      	mov	r3, fp
 800725a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800725e:	2939      	cmp	r1, #57	; 0x39
 8007260:	f106 32ff 	add.w	r2, r6, #4294967295
 8007264:	d106      	bne.n	8007274 <_dtoa_r+0x5fc>
 8007266:	9904      	ldr	r1, [sp, #16]
 8007268:	4291      	cmp	r1, r2
 800726a:	d107      	bne.n	800727c <_dtoa_r+0x604>
 800726c:	2230      	movs	r2, #48	; 0x30
 800726e:	700a      	strb	r2, [r1, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	460a      	mov	r2, r1
 8007274:	7811      	ldrb	r1, [r2, #0]
 8007276:	3101      	adds	r1, #1
 8007278:	7011      	strb	r1, [r2, #0]
 800727a:	e7b0      	b.n	80071de <_dtoa_r+0x566>
 800727c:	4616      	mov	r6, r2
 800727e:	e7ec      	b.n	800725a <_dtoa_r+0x5e2>
 8007280:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	d1b3      	bne.n	80071f6 <_dtoa_r+0x57e>
 800728e:	e7d3      	b.n	8007238 <_dtoa_r+0x5c0>
 8007290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 808d 	beq.w	80073b2 <_dtoa_r+0x73a>
 8007298:	9a08      	ldr	r2, [sp, #32]
 800729a:	2a01      	cmp	r2, #1
 800729c:	dc72      	bgt.n	8007384 <_dtoa_r+0x70c>
 800729e:	2f00      	cmp	r7, #0
 80072a0:	d06c      	beq.n	800737c <_dtoa_r+0x704>
 80072a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072a6:	4645      	mov	r5, r8
 80072a8:	4656      	mov	r6, sl
 80072aa:	9a07      	ldr	r2, [sp, #28]
 80072ac:	2101      	movs	r1, #1
 80072ae:	441a      	add	r2, r3
 80072b0:	4620      	mov	r0, r4
 80072b2:	449a      	add	sl, r3
 80072b4:	9207      	str	r2, [sp, #28]
 80072b6:	f000 fcf3 	bl	8007ca0 <__i2b>
 80072ba:	4607      	mov	r7, r0
 80072bc:	2e00      	cmp	r6, #0
 80072be:	dd0b      	ble.n	80072d8 <_dtoa_r+0x660>
 80072c0:	9b07      	ldr	r3, [sp, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd08      	ble.n	80072d8 <_dtoa_r+0x660>
 80072c6:	42b3      	cmp	r3, r6
 80072c8:	9a07      	ldr	r2, [sp, #28]
 80072ca:	bfa8      	it	ge
 80072cc:	4633      	movge	r3, r6
 80072ce:	ebaa 0a03 	sub.w	sl, sl, r3
 80072d2:	1af6      	subs	r6, r6, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	d01d      	beq.n	800731a <_dtoa_r+0x6a2>
 80072de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d06a      	beq.n	80073ba <_dtoa_r+0x742>
 80072e4:	b18d      	cbz	r5, 800730a <_dtoa_r+0x692>
 80072e6:	4639      	mov	r1, r7
 80072e8:	462a      	mov	r2, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fd78 	bl	8007de0 <__pow5mult>
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	4601      	mov	r1, r0
 80072f4:	4607      	mov	r7, r0
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 fcdb 	bl	8007cb2 <__multiply>
 80072fc:	9901      	ldr	r1, [sp, #4]
 80072fe:	900c      	str	r0, [sp, #48]	; 0x30
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fc2d 	bl	8007b60 <_Bfree>
 8007306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	ebb8 0205 	subs.w	r2, r8, r5
 800730e:	d004      	beq.n	800731a <_dtoa_r+0x6a2>
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fd64 	bl	8007de0 <__pow5mult>
 8007318:	9001      	str	r0, [sp, #4]
 800731a:	2101      	movs	r1, #1
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fcbf 	bl	8007ca0 <__i2b>
 8007322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007324:	4605      	mov	r5, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 81ca 	beq.w	80076c0 <_dtoa_r+0xa48>
 800732c:	461a      	mov	r2, r3
 800732e:	4601      	mov	r1, r0
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fd55 	bl	8007de0 <__pow5mult>
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	2b01      	cmp	r3, #1
 800733a:	4605      	mov	r5, r0
 800733c:	dc44      	bgt.n	80073c8 <_dtoa_r+0x750>
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d13c      	bne.n	80073be <_dtoa_r+0x746>
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800734a:	2b00      	cmp	r3, #0
 800734c:	d137      	bne.n	80073be <_dtoa_r+0x746>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007354:	0d1b      	lsrs	r3, r3, #20
 8007356:	051b      	lsls	r3, r3, #20
 8007358:	2b00      	cmp	r3, #0
 800735a:	d033      	beq.n	80073c4 <_dtoa_r+0x74c>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	3301      	adds	r3, #1
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	9307      	str	r3, [sp, #28]
 8007366:	f04f 0801 	mov.w	r8, #1
 800736a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800736c:	bb73      	cbnz	r3, 80073cc <_dtoa_r+0x754>
 800736e:	2001      	movs	r0, #1
 8007370:	e034      	b.n	80073dc <_dtoa_r+0x764>
 8007372:	bf00      	nop
 8007374:	08008d18 	.word	0x08008d18
 8007378:	08008cf0 	.word	0x08008cf0
 800737c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800737e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007382:	e790      	b.n	80072a6 <_dtoa_r+0x62e>
 8007384:	f109 35ff 	add.w	r5, r9, #4294967295
 8007388:	45a8      	cmp	r8, r5
 800738a:	bfbf      	itttt	lt
 800738c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800738e:	eba5 0808 	sublt.w	r8, r5, r8
 8007392:	4443      	addlt	r3, r8
 8007394:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007396:	bfb6      	itet	lt
 8007398:	46a8      	movlt	r8, r5
 800739a:	eba8 0505 	subge.w	r5, r8, r5
 800739e:	2500      	movlt	r5, #0
 80073a0:	f1b9 0f00 	cmp.w	r9, #0
 80073a4:	bfb9      	ittee	lt
 80073a6:	ebaa 0609 	sublt.w	r6, sl, r9
 80073aa:	2300      	movlt	r3, #0
 80073ac:	4656      	movge	r6, sl
 80073ae:	464b      	movge	r3, r9
 80073b0:	e77b      	b.n	80072aa <_dtoa_r+0x632>
 80073b2:	4645      	mov	r5, r8
 80073b4:	4656      	mov	r6, sl
 80073b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073b8:	e780      	b.n	80072bc <_dtoa_r+0x644>
 80073ba:	4642      	mov	r2, r8
 80073bc:	e7a8      	b.n	8007310 <_dtoa_r+0x698>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	e7d2      	b.n	800736a <_dtoa_r+0x6f2>
 80073c4:	4698      	mov	r8, r3
 80073c6:	e7d0      	b.n	800736a <_dtoa_r+0x6f2>
 80073c8:	f04f 0800 	mov.w	r8, #0
 80073cc:	692b      	ldr	r3, [r5, #16]
 80073ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80073d2:	6918      	ldr	r0, [r3, #16]
 80073d4:	f000 fc16 	bl	8007c04 <__hi0bits>
 80073d8:	f1c0 0020 	rsb	r0, r0, #32
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	4418      	add	r0, r3
 80073e0:	f010 001f 	ands.w	r0, r0, #31
 80073e4:	d047      	beq.n	8007476 <_dtoa_r+0x7fe>
 80073e6:	f1c0 0320 	rsb	r3, r0, #32
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	dd3b      	ble.n	8007466 <_dtoa_r+0x7ee>
 80073ee:	9b07      	ldr	r3, [sp, #28]
 80073f0:	f1c0 001c 	rsb	r0, r0, #28
 80073f4:	4482      	add	sl, r0
 80073f6:	4406      	add	r6, r0
 80073f8:	4403      	add	r3, r0
 80073fa:	9307      	str	r3, [sp, #28]
 80073fc:	f1ba 0f00 	cmp.w	sl, #0
 8007400:	dd05      	ble.n	800740e <_dtoa_r+0x796>
 8007402:	4652      	mov	r2, sl
 8007404:	9901      	ldr	r1, [sp, #4]
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fd38 	bl	8007e7c <__lshift>
 800740c:	9001      	str	r0, [sp, #4]
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	dd05      	ble.n	8007420 <_dtoa_r+0x7a8>
 8007414:	4629      	mov	r1, r5
 8007416:	461a      	mov	r2, r3
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fd2f 	bl	8007e7c <__lshift>
 800741e:	4605      	mov	r5, r0
 8007420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007422:	b353      	cbz	r3, 800747a <_dtoa_r+0x802>
 8007424:	4629      	mov	r1, r5
 8007426:	9801      	ldr	r0, [sp, #4]
 8007428:	f000 fd7c 	bl	8007f24 <__mcmp>
 800742c:	2800      	cmp	r0, #0
 800742e:	da24      	bge.n	800747a <_dtoa_r+0x802>
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	9901      	ldr	r1, [sp, #4]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 fba9 	bl	8007b8e <__multadd>
 800743c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743e:	9001      	str	r0, [sp, #4]
 8007440:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8142 	beq.w	80076ce <_dtoa_r+0xa56>
 800744a:	2300      	movs	r3, #0
 800744c:	4639      	mov	r1, r7
 800744e:	220a      	movs	r2, #10
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fb9c 	bl	8007b8e <__multadd>
 8007456:	9b06      	ldr	r3, [sp, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	4607      	mov	r7, r0
 800745c:	dc4b      	bgt.n	80074f6 <_dtoa_r+0x87e>
 800745e:	9b08      	ldr	r3, [sp, #32]
 8007460:	2b02      	cmp	r3, #2
 8007462:	dd48      	ble.n	80074f6 <_dtoa_r+0x87e>
 8007464:	e011      	b.n	800748a <_dtoa_r+0x812>
 8007466:	d0c9      	beq.n	80073fc <_dtoa_r+0x784>
 8007468:	9a07      	ldr	r2, [sp, #28]
 800746a:	331c      	adds	r3, #28
 800746c:	441a      	add	r2, r3
 800746e:	449a      	add	sl, r3
 8007470:	441e      	add	r6, r3
 8007472:	4613      	mov	r3, r2
 8007474:	e7c1      	b.n	80073fa <_dtoa_r+0x782>
 8007476:	4603      	mov	r3, r0
 8007478:	e7f6      	b.n	8007468 <_dtoa_r+0x7f0>
 800747a:	f1b9 0f00 	cmp.w	r9, #0
 800747e:	dc34      	bgt.n	80074ea <_dtoa_r+0x872>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	2b02      	cmp	r3, #2
 8007484:	dd31      	ble.n	80074ea <_dtoa_r+0x872>
 8007486:	f8cd 9018 	str.w	r9, [sp, #24]
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	b963      	cbnz	r3, 80074a8 <_dtoa_r+0x830>
 800748e:	4629      	mov	r1, r5
 8007490:	2205      	movs	r2, #5
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fb7b 	bl	8007b8e <__multadd>
 8007498:	4601      	mov	r1, r0
 800749a:	4605      	mov	r5, r0
 800749c:	9801      	ldr	r0, [sp, #4]
 800749e:	f000 fd41 	bl	8007f24 <__mcmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f73f adfc 	bgt.w	80070a0 <_dtoa_r+0x428>
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	9e04      	ldr	r6, [sp, #16]
 80074ac:	ea6f 0b03 	mvn.w	fp, r3
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	4629      	mov	r1, r5
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 fb52 	bl	8007b60 <_Bfree>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	f43f aebb 	beq.w	8007238 <_dtoa_r+0x5c0>
 80074c2:	f1b9 0f00 	cmp.w	r9, #0
 80074c6:	d005      	beq.n	80074d4 <_dtoa_r+0x85c>
 80074c8:	45b9      	cmp	r9, r7
 80074ca:	d003      	beq.n	80074d4 <_dtoa_r+0x85c>
 80074cc:	4649      	mov	r1, r9
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fb46 	bl	8007b60 <_Bfree>
 80074d4:	4639      	mov	r1, r7
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 fb42 	bl	8007b60 <_Bfree>
 80074dc:	e6ac      	b.n	8007238 <_dtoa_r+0x5c0>
 80074de:	2500      	movs	r5, #0
 80074e0:	462f      	mov	r7, r5
 80074e2:	e7e1      	b.n	80074a8 <_dtoa_r+0x830>
 80074e4:	469b      	mov	fp, r3
 80074e6:	462f      	mov	r7, r5
 80074e8:	e5da      	b.n	80070a0 <_dtoa_r+0x428>
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	f8cd 9018 	str.w	r9, [sp, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80f3 	beq.w	80076dc <_dtoa_r+0xa64>
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	dd05      	ble.n	8007506 <_dtoa_r+0x88e>
 80074fa:	4639      	mov	r1, r7
 80074fc:	4632      	mov	r2, r6
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 fcbc 	bl	8007e7c <__lshift>
 8007504:	4607      	mov	r7, r0
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	d04c      	beq.n	80075a6 <_dtoa_r+0x92e>
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4620      	mov	r0, r4
 8007510:	f000 faf2 	bl	8007af8 <_Balloc>
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	3202      	adds	r2, #2
 8007518:	4606      	mov	r6, r0
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	f107 010c 	add.w	r1, r7, #12
 8007520:	300c      	adds	r0, #12
 8007522:	f7fe fd75 	bl	8006010 <memcpy>
 8007526:	2201      	movs	r2, #1
 8007528:	4631      	mov	r1, r6
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fca6 	bl	8007e7c <__lshift>
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	46b9      	mov	r9, r7
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	4607      	mov	r7, r0
 8007540:	4629      	mov	r1, r5
 8007542:	9801      	ldr	r0, [sp, #4]
 8007544:	f7ff fb0c 	bl	8006b60 <quorem>
 8007548:	4649      	mov	r1, r9
 800754a:	4606      	mov	r6, r0
 800754c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007550:	9801      	ldr	r0, [sp, #4]
 8007552:	f000 fce7 	bl	8007f24 <__mcmp>
 8007556:	463a      	mov	r2, r7
 8007558:	9002      	str	r0, [sp, #8]
 800755a:	4629      	mov	r1, r5
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fcfb 	bl	8007f58 <__mdiff>
 8007562:	68c3      	ldr	r3, [r0, #12]
 8007564:	4602      	mov	r2, r0
 8007566:	bb03      	cbnz	r3, 80075aa <_dtoa_r+0x932>
 8007568:	4601      	mov	r1, r0
 800756a:	9009      	str	r0, [sp, #36]	; 0x24
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	f000 fcd9 	bl	8007f24 <__mcmp>
 8007572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007574:	4603      	mov	r3, r0
 8007576:	4611      	mov	r1, r2
 8007578:	4620      	mov	r0, r4
 800757a:	9309      	str	r3, [sp, #36]	; 0x24
 800757c:	f000 faf0 	bl	8007b60 <_Bfree>
 8007580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007582:	b9a3      	cbnz	r3, 80075ae <_dtoa_r+0x936>
 8007584:	9a08      	ldr	r2, [sp, #32]
 8007586:	b992      	cbnz	r2, 80075ae <_dtoa_r+0x936>
 8007588:	9a07      	ldr	r2, [sp, #28]
 800758a:	b982      	cbnz	r2, 80075ae <_dtoa_r+0x936>
 800758c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007590:	d029      	beq.n	80075e6 <_dtoa_r+0x96e>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd01      	ble.n	800759c <_dtoa_r+0x924>
 8007598:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800759c:	f10a 0601 	add.w	r6, sl, #1
 80075a0:	f88a 8000 	strb.w	r8, [sl]
 80075a4:	e786      	b.n	80074b4 <_dtoa_r+0x83c>
 80075a6:	4638      	mov	r0, r7
 80075a8:	e7c2      	b.n	8007530 <_dtoa_r+0x8b8>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e7e3      	b.n	8007576 <_dtoa_r+0x8fe>
 80075ae:	9a02      	ldr	r2, [sp, #8]
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	db04      	blt.n	80075be <_dtoa_r+0x946>
 80075b4:	d124      	bne.n	8007600 <_dtoa_r+0x988>
 80075b6:	9a08      	ldr	r2, [sp, #32]
 80075b8:	bb12      	cbnz	r2, 8007600 <_dtoa_r+0x988>
 80075ba:	9a07      	ldr	r2, [sp, #28]
 80075bc:	bb02      	cbnz	r2, 8007600 <_dtoa_r+0x988>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	ddec      	ble.n	800759c <_dtoa_r+0x924>
 80075c2:	2201      	movs	r2, #1
 80075c4:	9901      	ldr	r1, [sp, #4]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fc58 	bl	8007e7c <__lshift>
 80075cc:	4629      	mov	r1, r5
 80075ce:	9001      	str	r0, [sp, #4]
 80075d0:	f000 fca8 	bl	8007f24 <__mcmp>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	dc03      	bgt.n	80075e0 <_dtoa_r+0x968>
 80075d8:	d1e0      	bne.n	800759c <_dtoa_r+0x924>
 80075da:	f018 0f01 	tst.w	r8, #1
 80075de:	d0dd      	beq.n	800759c <_dtoa_r+0x924>
 80075e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80075e4:	d1d8      	bne.n	8007598 <_dtoa_r+0x920>
 80075e6:	2339      	movs	r3, #57	; 0x39
 80075e8:	f10a 0601 	add.w	r6, sl, #1
 80075ec:	f88a 3000 	strb.w	r3, [sl]
 80075f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075f4:	2b39      	cmp	r3, #57	; 0x39
 80075f6:	f106 32ff 	add.w	r2, r6, #4294967295
 80075fa:	d04c      	beq.n	8007696 <_dtoa_r+0xa1e>
 80075fc:	3301      	adds	r3, #1
 80075fe:	e051      	b.n	80076a4 <_dtoa_r+0xa2c>
 8007600:	2b00      	cmp	r3, #0
 8007602:	f10a 0601 	add.w	r6, sl, #1
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x99c>
 8007608:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800760c:	d0eb      	beq.n	80075e6 <_dtoa_r+0x96e>
 800760e:	f108 0801 	add.w	r8, r8, #1
 8007612:	e7c5      	b.n	80075a0 <_dtoa_r+0x928>
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	9a06      	ldr	r2, [sp, #24]
 8007618:	f806 8c01 	strb.w	r8, [r6, #-1]
 800761c:	1af3      	subs	r3, r6, r3
 800761e:	4293      	cmp	r3, r2
 8007620:	d021      	beq.n	8007666 <_dtoa_r+0x9ee>
 8007622:	2300      	movs	r3, #0
 8007624:	220a      	movs	r2, #10
 8007626:	9901      	ldr	r1, [sp, #4]
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fab0 	bl	8007b8e <__multadd>
 800762e:	45b9      	cmp	r9, r7
 8007630:	9001      	str	r0, [sp, #4]
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	f04f 020a 	mov.w	r2, #10
 800763a:	4649      	mov	r1, r9
 800763c:	4620      	mov	r0, r4
 800763e:	d105      	bne.n	800764c <_dtoa_r+0x9d4>
 8007640:	f000 faa5 	bl	8007b8e <__multadd>
 8007644:	4681      	mov	r9, r0
 8007646:	4607      	mov	r7, r0
 8007648:	46b2      	mov	sl, r6
 800764a:	e779      	b.n	8007540 <_dtoa_r+0x8c8>
 800764c:	f000 fa9f 	bl	8007b8e <__multadd>
 8007650:	4639      	mov	r1, r7
 8007652:	4681      	mov	r9, r0
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fa98 	bl	8007b8e <__multadd>
 800765e:	4607      	mov	r7, r0
 8007660:	e7f2      	b.n	8007648 <_dtoa_r+0x9d0>
 8007662:	f04f 0900 	mov.w	r9, #0
 8007666:	2201      	movs	r2, #1
 8007668:	9901      	ldr	r1, [sp, #4]
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fc06 	bl	8007e7c <__lshift>
 8007670:	4629      	mov	r1, r5
 8007672:	9001      	str	r0, [sp, #4]
 8007674:	f000 fc56 	bl	8007f24 <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	dcb9      	bgt.n	80075f0 <_dtoa_r+0x978>
 800767c:	d102      	bne.n	8007684 <_dtoa_r+0xa0c>
 800767e:	f018 0f01 	tst.w	r8, #1
 8007682:	d1b5      	bne.n	80075f0 <_dtoa_r+0x978>
 8007684:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	f106 32ff 	add.w	r2, r6, #4294967295
 800768e:	f47f af11 	bne.w	80074b4 <_dtoa_r+0x83c>
 8007692:	4616      	mov	r6, r2
 8007694:	e7f6      	b.n	8007684 <_dtoa_r+0xa0c>
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	4293      	cmp	r3, r2
 800769a:	d105      	bne.n	80076a8 <_dtoa_r+0xa30>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	f10b 0b01 	add.w	fp, fp, #1
 80076a2:	2331      	movs	r3, #49	; 0x31
 80076a4:	7013      	strb	r3, [r2, #0]
 80076a6:	e705      	b.n	80074b4 <_dtoa_r+0x83c>
 80076a8:	4616      	mov	r6, r2
 80076aa:	e7a1      	b.n	80075f0 <_dtoa_r+0x978>
 80076ac:	4b16      	ldr	r3, [pc, #88]	; (8007708 <_dtoa_r+0xa90>)
 80076ae:	f7ff bb48 	b.w	8006d42 <_dtoa_r+0xca>
 80076b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f ab23 	bne.w	8006d00 <_dtoa_r+0x88>
 80076ba:	4b14      	ldr	r3, [pc, #80]	; (800770c <_dtoa_r+0xa94>)
 80076bc:	f7ff bb41 	b.w	8006d42 <_dtoa_r+0xca>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	f77f ae3b 	ble.w	800733e <_dtoa_r+0x6c6>
 80076c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80076cc:	e64f      	b.n	800736e <_dtoa_r+0x6f6>
 80076ce:	9b06      	ldr	r3, [sp, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dc03      	bgt.n	80076dc <_dtoa_r+0xa64>
 80076d4:	9b08      	ldr	r3, [sp, #32]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	f73f aed7 	bgt.w	800748a <_dtoa_r+0x812>
 80076dc:	9e04      	ldr	r6, [sp, #16]
 80076de:	9801      	ldr	r0, [sp, #4]
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7ff fa3d 	bl	8006b60 <quorem>
 80076e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076ea:	f806 8b01 	strb.w	r8, [r6], #1
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	9a06      	ldr	r2, [sp, #24]
 80076f2:	1af3      	subs	r3, r6, r3
 80076f4:	429a      	cmp	r2, r3
 80076f6:	ddb4      	ble.n	8007662 <_dtoa_r+0x9ea>
 80076f8:	2300      	movs	r3, #0
 80076fa:	220a      	movs	r2, #10
 80076fc:	9901      	ldr	r1, [sp, #4]
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fa45 	bl	8007b8e <__multadd>
 8007704:	9001      	str	r0, [sp, #4]
 8007706:	e7ea      	b.n	80076de <_dtoa_r+0xa66>
 8007708:	08008c58 	.word	0x08008c58
 800770c:	08008c7c 	.word	0x08008c7c

08007710 <__sflush_r>:
 8007710:	898a      	ldrh	r2, [r1, #12]
 8007712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	4605      	mov	r5, r0
 8007718:	0710      	lsls	r0, r2, #28
 800771a:	460c      	mov	r4, r1
 800771c:	d458      	bmi.n	80077d0 <__sflush_r+0xc0>
 800771e:	684b      	ldr	r3, [r1, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dc05      	bgt.n	8007730 <__sflush_r+0x20>
 8007724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc02      	bgt.n	8007730 <__sflush_r+0x20>
 800772a:	2000      	movs	r0, #0
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007732:	2e00      	cmp	r6, #0
 8007734:	d0f9      	beq.n	800772a <__sflush_r+0x1a>
 8007736:	2300      	movs	r3, #0
 8007738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800773c:	682f      	ldr	r7, [r5, #0]
 800773e:	6a21      	ldr	r1, [r4, #32]
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	d032      	beq.n	80077aa <__sflush_r+0x9a>
 8007744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	075a      	lsls	r2, r3, #29
 800774a:	d505      	bpl.n	8007758 <__sflush_r+0x48>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	1ac0      	subs	r0, r0, r3
 8007750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007752:	b10b      	cbz	r3, 8007758 <__sflush_r+0x48>
 8007754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007756:	1ac0      	subs	r0, r0, r3
 8007758:	2300      	movs	r3, #0
 800775a:	4602      	mov	r2, r0
 800775c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800775e:	6a21      	ldr	r1, [r4, #32]
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	d106      	bne.n	8007778 <__sflush_r+0x68>
 800776a:	6829      	ldr	r1, [r5, #0]
 800776c:	291d      	cmp	r1, #29
 800776e:	d848      	bhi.n	8007802 <__sflush_r+0xf2>
 8007770:	4a29      	ldr	r2, [pc, #164]	; (8007818 <__sflush_r+0x108>)
 8007772:	40ca      	lsrs	r2, r1
 8007774:	07d6      	lsls	r6, r2, #31
 8007776:	d544      	bpl.n	8007802 <__sflush_r+0xf2>
 8007778:	2200      	movs	r2, #0
 800777a:	6062      	str	r2, [r4, #4]
 800777c:	04d9      	lsls	r1, r3, #19
 800777e:	6922      	ldr	r2, [r4, #16]
 8007780:	6022      	str	r2, [r4, #0]
 8007782:	d504      	bpl.n	800778e <__sflush_r+0x7e>
 8007784:	1c42      	adds	r2, r0, #1
 8007786:	d101      	bne.n	800778c <__sflush_r+0x7c>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b903      	cbnz	r3, 800778e <__sflush_r+0x7e>
 800778c:	6560      	str	r0, [r4, #84]	; 0x54
 800778e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007790:	602f      	str	r7, [r5, #0]
 8007792:	2900      	cmp	r1, #0
 8007794:	d0c9      	beq.n	800772a <__sflush_r+0x1a>
 8007796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800779a:	4299      	cmp	r1, r3
 800779c:	d002      	beq.n	80077a4 <__sflush_r+0x94>
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 fc94 	bl	80080cc <_free_r>
 80077a4:	2000      	movs	r0, #0
 80077a6:	6360      	str	r0, [r4, #52]	; 0x34
 80077a8:	e7c0      	b.n	800772c <__sflush_r+0x1c>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b0      	blx	r6
 80077b0:	1c41      	adds	r1, r0, #1
 80077b2:	d1c8      	bne.n	8007746 <__sflush_r+0x36>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0c5      	beq.n	8007746 <__sflush_r+0x36>
 80077ba:	2b1d      	cmp	r3, #29
 80077bc:	d001      	beq.n	80077c2 <__sflush_r+0xb2>
 80077be:	2b16      	cmp	r3, #22
 80077c0:	d101      	bne.n	80077c6 <__sflush_r+0xb6>
 80077c2:	602f      	str	r7, [r5, #0]
 80077c4:	e7b1      	b.n	800772a <__sflush_r+0x1a>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	e7ad      	b.n	800772c <__sflush_r+0x1c>
 80077d0:	690f      	ldr	r7, [r1, #16]
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	d0a9      	beq.n	800772a <__sflush_r+0x1a>
 80077d6:	0793      	lsls	r3, r2, #30
 80077d8:	680e      	ldr	r6, [r1, #0]
 80077da:	bf08      	it	eq
 80077dc:	694b      	ldreq	r3, [r1, #20]
 80077de:	600f      	str	r7, [r1, #0]
 80077e0:	bf18      	it	ne
 80077e2:	2300      	movne	r3, #0
 80077e4:	eba6 0807 	sub.w	r8, r6, r7
 80077e8:	608b      	str	r3, [r1, #8]
 80077ea:	f1b8 0f00 	cmp.w	r8, #0
 80077ee:	dd9c      	ble.n	800772a <__sflush_r+0x1a>
 80077f0:	4643      	mov	r3, r8
 80077f2:	463a      	mov	r2, r7
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b0      	blx	r6
 80077fc:	2800      	cmp	r0, #0
 80077fe:	dc06      	bgt.n	800780e <__sflush_r+0xfe>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e78e      	b.n	800772c <__sflush_r+0x1c>
 800780e:	4407      	add	r7, r0
 8007810:	eba8 0800 	sub.w	r8, r8, r0
 8007814:	e7e9      	b.n	80077ea <__sflush_r+0xda>
 8007816:	bf00      	nop
 8007818:	20400001 	.word	0x20400001

0800781c <_fflush_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	690b      	ldr	r3, [r1, #16]
 8007820:	4605      	mov	r5, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b1db      	cbz	r3, 800785e <_fflush_r+0x42>
 8007826:	b118      	cbz	r0, 8007830 <_fflush_r+0x14>
 8007828:	6983      	ldr	r3, [r0, #24]
 800782a:	b90b      	cbnz	r3, 8007830 <_fflush_r+0x14>
 800782c:	f000 f860 	bl	80078f0 <__sinit>
 8007830:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <_fflush_r+0x48>)
 8007832:	429c      	cmp	r4, r3
 8007834:	d109      	bne.n	800784a <_fflush_r+0x2e>
 8007836:	686c      	ldr	r4, [r5, #4]
 8007838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783c:	b17b      	cbz	r3, 800785e <_fflush_r+0x42>
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007846:	f7ff bf63 	b.w	8007710 <__sflush_r>
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <_fflush_r+0x4c>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d101      	bne.n	8007854 <_fflush_r+0x38>
 8007850:	68ac      	ldr	r4, [r5, #8]
 8007852:	e7f1      	b.n	8007838 <_fflush_r+0x1c>
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <_fflush_r+0x50>)
 8007856:	429c      	cmp	r4, r3
 8007858:	bf08      	it	eq
 800785a:	68ec      	ldreq	r4, [r5, #12]
 800785c:	e7ec      	b.n	8007838 <_fflush_r+0x1c>
 800785e:	2000      	movs	r0, #0
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	08008cac 	.word	0x08008cac
 8007868:	08008ccc 	.word	0x08008ccc
 800786c:	08008c8c 	.word	0x08008c8c

08007870 <std>:
 8007870:	2300      	movs	r3, #0
 8007872:	b510      	push	{r4, lr}
 8007874:	4604      	mov	r4, r0
 8007876:	e9c0 3300 	strd	r3, r3, [r0]
 800787a:	6083      	str	r3, [r0, #8]
 800787c:	8181      	strh	r1, [r0, #12]
 800787e:	6643      	str	r3, [r0, #100]	; 0x64
 8007880:	81c2      	strh	r2, [r0, #14]
 8007882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007886:	6183      	str	r3, [r0, #24]
 8007888:	4619      	mov	r1, r3
 800788a:	2208      	movs	r2, #8
 800788c:	305c      	adds	r0, #92	; 0x5c
 800788e:	f7fe fbca 	bl	8006026 <memset>
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <std+0x38>)
 8007894:	6263      	str	r3, [r4, #36]	; 0x24
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <std+0x3c>)
 8007898:	62a3      	str	r3, [r4, #40]	; 0x28
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <std+0x40>)
 800789c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800789e:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <std+0x44>)
 80078a0:	6224      	str	r4, [r4, #32]
 80078a2:	6323      	str	r3, [r4, #48]	; 0x30
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08008761 	.word	0x08008761
 80078ac:	08008783 	.word	0x08008783
 80078b0:	080087bb 	.word	0x080087bb
 80078b4:	080087df 	.word	0x080087df

080078b8 <_cleanup_r>:
 80078b8:	4901      	ldr	r1, [pc, #4]	; (80078c0 <_cleanup_r+0x8>)
 80078ba:	f000 b885 	b.w	80079c8 <_fwalk_reent>
 80078be:	bf00      	nop
 80078c0:	0800781d 	.word	0x0800781d

080078c4 <__sfmoreglue>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	1e4a      	subs	r2, r1, #1
 80078c8:	2568      	movs	r5, #104	; 0x68
 80078ca:	4355      	muls	r5, r2
 80078cc:	460e      	mov	r6, r1
 80078ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078d2:	f000 fc49 	bl	8008168 <_malloc_r>
 80078d6:	4604      	mov	r4, r0
 80078d8:	b140      	cbz	r0, 80078ec <__sfmoreglue+0x28>
 80078da:	2100      	movs	r1, #0
 80078dc:	e9c0 1600 	strd	r1, r6, [r0]
 80078e0:	300c      	adds	r0, #12
 80078e2:	60a0      	str	r0, [r4, #8]
 80078e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078e8:	f7fe fb9d 	bl	8006026 <memset>
 80078ec:	4620      	mov	r0, r4
 80078ee:	bd70      	pop	{r4, r5, r6, pc}

080078f0 <__sinit>:
 80078f0:	6983      	ldr	r3, [r0, #24]
 80078f2:	b510      	push	{r4, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	bb33      	cbnz	r3, 8007946 <__sinit+0x56>
 80078f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80078fc:	6503      	str	r3, [r0, #80]	; 0x50
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <__sinit+0x58>)
 8007900:	4a12      	ldr	r2, [pc, #72]	; (800794c <__sinit+0x5c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6282      	str	r2, [r0, #40]	; 0x28
 8007906:	4298      	cmp	r0, r3
 8007908:	bf04      	itt	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	6183      	streq	r3, [r0, #24]
 800790e:	f000 f81f 	bl	8007950 <__sfp>
 8007912:	6060      	str	r0, [r4, #4]
 8007914:	4620      	mov	r0, r4
 8007916:	f000 f81b 	bl	8007950 <__sfp>
 800791a:	60a0      	str	r0, [r4, #8]
 800791c:	4620      	mov	r0, r4
 800791e:	f000 f817 	bl	8007950 <__sfp>
 8007922:	2200      	movs	r2, #0
 8007924:	60e0      	str	r0, [r4, #12]
 8007926:	2104      	movs	r1, #4
 8007928:	6860      	ldr	r0, [r4, #4]
 800792a:	f7ff ffa1 	bl	8007870 <std>
 800792e:	2201      	movs	r2, #1
 8007930:	2109      	movs	r1, #9
 8007932:	68a0      	ldr	r0, [r4, #8]
 8007934:	f7ff ff9c 	bl	8007870 <std>
 8007938:	2202      	movs	r2, #2
 800793a:	2112      	movs	r1, #18
 800793c:	68e0      	ldr	r0, [r4, #12]
 800793e:	f7ff ff97 	bl	8007870 <std>
 8007942:	2301      	movs	r3, #1
 8007944:	61a3      	str	r3, [r4, #24]
 8007946:	bd10      	pop	{r4, pc}
 8007948:	08008c44 	.word	0x08008c44
 800794c:	080078b9 	.word	0x080078b9

08007950 <__sfp>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <__sfp+0x70>)
 8007954:	681e      	ldr	r6, [r3, #0]
 8007956:	69b3      	ldr	r3, [r6, #24]
 8007958:	4607      	mov	r7, r0
 800795a:	b913      	cbnz	r3, 8007962 <__sfp+0x12>
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ffc7 	bl	80078f0 <__sinit>
 8007962:	3648      	adds	r6, #72	; 0x48
 8007964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007968:	3b01      	subs	r3, #1
 800796a:	d503      	bpl.n	8007974 <__sfp+0x24>
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	b133      	cbz	r3, 800797e <__sfp+0x2e>
 8007970:	6836      	ldr	r6, [r6, #0]
 8007972:	e7f7      	b.n	8007964 <__sfp+0x14>
 8007974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007978:	b16d      	cbz	r5, 8007996 <__sfp+0x46>
 800797a:	3468      	adds	r4, #104	; 0x68
 800797c:	e7f4      	b.n	8007968 <__sfp+0x18>
 800797e:	2104      	movs	r1, #4
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff9f 	bl	80078c4 <__sfmoreglue>
 8007986:	6030      	str	r0, [r6, #0]
 8007988:	2800      	cmp	r0, #0
 800798a:	d1f1      	bne.n	8007970 <__sfp+0x20>
 800798c:	230c      	movs	r3, #12
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4604      	mov	r4, r0
 8007992:	4620      	mov	r0, r4
 8007994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <__sfp+0x74>)
 8007998:	6665      	str	r5, [r4, #100]	; 0x64
 800799a:	e9c4 5500 	strd	r5, r5, [r4]
 800799e:	60a5      	str	r5, [r4, #8]
 80079a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80079a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80079a8:	2208      	movs	r2, #8
 80079aa:	4629      	mov	r1, r5
 80079ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b0:	f7fe fb39 	bl	8006026 <memset>
 80079b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079bc:	e7e9      	b.n	8007992 <__sfp+0x42>
 80079be:	bf00      	nop
 80079c0:	08008c44 	.word	0x08008c44
 80079c4:	ffff0001 	.word	0xffff0001

080079c8 <_fwalk_reent>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4680      	mov	r8, r0
 80079ce:	4689      	mov	r9, r1
 80079d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d4:	2600      	movs	r6, #0
 80079d6:	b914      	cbnz	r4, 80079de <_fwalk_reent+0x16>
 80079d8:	4630      	mov	r0, r6
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80079e2:	3f01      	subs	r7, #1
 80079e4:	d501      	bpl.n	80079ea <_fwalk_reent+0x22>
 80079e6:	6824      	ldr	r4, [r4, #0]
 80079e8:	e7f5      	b.n	80079d6 <_fwalk_reent+0xe>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d907      	bls.n	8007a00 <_fwalk_reent+0x38>
 80079f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f4:	3301      	adds	r3, #1
 80079f6:	d003      	beq.n	8007a00 <_fwalk_reent+0x38>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4640      	mov	r0, r8
 80079fc:	47c8      	blx	r9
 80079fe:	4306      	orrs	r6, r0
 8007a00:	3568      	adds	r5, #104	; 0x68
 8007a02:	e7ee      	b.n	80079e2 <_fwalk_reent+0x1a>

08007a04 <_localeconv_r>:
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <_localeconv_r+0x14>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a18      	ldr	r0, [r3, #32]
 8007a0a:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <_localeconv_r+0x18>)
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	bf08      	it	eq
 8007a10:	4618      	moveq	r0, r3
 8007a12:	30f0      	adds	r0, #240	; 0xf0
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	2000001c 	.word	0x2000001c
 8007a1c:	20000080 	.word	0x20000080

08007a20 <__swhatbuf_r>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	b096      	sub	sp, #88	; 0x58
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	461d      	mov	r5, r3
 8007a30:	da07      	bge.n	8007a42 <__swhatbuf_r+0x22>
 8007a32:	2300      	movs	r3, #0
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	89b3      	ldrh	r3, [r6, #12]
 8007a38:	061a      	lsls	r2, r3, #24
 8007a3a:	d410      	bmi.n	8007a5e <__swhatbuf_r+0x3e>
 8007a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a40:	e00e      	b.n	8007a60 <__swhatbuf_r+0x40>
 8007a42:	466a      	mov	r2, sp
 8007a44:	f000 fef2 	bl	800882c <_fstat_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	dbf2      	blt.n	8007a32 <__swhatbuf_r+0x12>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a56:	425a      	negs	r2, r3
 8007a58:	415a      	adcs	r2, r3
 8007a5a:	602a      	str	r2, [r5, #0]
 8007a5c:	e7ee      	b.n	8007a3c <__swhatbuf_r+0x1c>
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	2000      	movs	r0, #0
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	b016      	add	sp, #88	; 0x58
 8007a66:	bd70      	pop	{r4, r5, r6, pc}

08007a68 <__smakebuf_r>:
 8007a68:	898b      	ldrh	r3, [r1, #12]
 8007a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a6c:	079d      	lsls	r5, r3, #30
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	d507      	bpl.n	8007a84 <__smakebuf_r+0x1c>
 8007a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	6163      	str	r3, [r4, #20]
 8007a80:	b002      	add	sp, #8
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	ab01      	add	r3, sp, #4
 8007a86:	466a      	mov	r2, sp
 8007a88:	f7ff ffca 	bl	8007a20 <__swhatbuf_r>
 8007a8c:	9900      	ldr	r1, [sp, #0]
 8007a8e:	4605      	mov	r5, r0
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 fb69 	bl	8008168 <_malloc_r>
 8007a96:	b948      	cbnz	r0, 8007aac <__smakebuf_r+0x44>
 8007a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d4ef      	bmi.n	8007a80 <__smakebuf_r+0x18>
 8007aa0:	f023 0303 	bic.w	r3, r3, #3
 8007aa4:	f043 0302 	orr.w	r3, r3, #2
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e7e3      	b.n	8007a74 <__smakebuf_r+0xc>
 8007aac:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <__smakebuf_r+0x7c>)
 8007aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	6020      	str	r0, [r4, #0]
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	6163      	str	r3, [r4, #20]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	b15b      	cbz	r3, 8007adc <__smakebuf_r+0x74>
 8007ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 fec1 	bl	8008850 <_isatty_r>
 8007ace:	b128      	cbz	r0, 8007adc <__smakebuf_r+0x74>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	431d      	orrs	r5, r3
 8007ae0:	81a5      	strh	r5, [r4, #12]
 8007ae2:	e7cd      	b.n	8007a80 <__smakebuf_r+0x18>
 8007ae4:	080078b9 	.word	0x080078b9

08007ae8 <malloc>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <malloc+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f000 bb3b 	b.w	8008168 <_malloc_r>
 8007af2:	bf00      	nop
 8007af4:	2000001c 	.word	0x2000001c

08007af8 <_Balloc>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007afc:	4604      	mov	r4, r0
 8007afe:	460e      	mov	r6, r1
 8007b00:	b93d      	cbnz	r5, 8007b12 <_Balloc+0x1a>
 8007b02:	2010      	movs	r0, #16
 8007b04:	f7ff fff0 	bl	8007ae8 <malloc>
 8007b08:	6260      	str	r0, [r4, #36]	; 0x24
 8007b0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b0e:	6005      	str	r5, [r0, #0]
 8007b10:	60c5      	str	r5, [r0, #12]
 8007b12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b14:	68eb      	ldr	r3, [r5, #12]
 8007b16:	b183      	cbz	r3, 8007b3a <_Balloc+0x42>
 8007b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b20:	b9b8      	cbnz	r0, 8007b52 <_Balloc+0x5a>
 8007b22:	2101      	movs	r1, #1
 8007b24:	fa01 f506 	lsl.w	r5, r1, r6
 8007b28:	1d6a      	adds	r2, r5, #5
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fabf 	bl	80080b0 <_calloc_r>
 8007b32:	b160      	cbz	r0, 8007b4e <_Balloc+0x56>
 8007b34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b38:	e00e      	b.n	8007b58 <_Balloc+0x60>
 8007b3a:	2221      	movs	r2, #33	; 0x21
 8007b3c:	2104      	movs	r1, #4
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fab6 	bl	80080b0 <_calloc_r>
 8007b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b46:	60e8      	str	r0, [r5, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e4      	bne.n	8007b18 <_Balloc+0x20>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	6802      	ldr	r2, [r0, #0]
 8007b54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b5e:	e7f7      	b.n	8007b50 <_Balloc+0x58>

08007b60 <_Bfree>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b64:	4606      	mov	r6, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	b93c      	cbnz	r4, 8007b7a <_Bfree+0x1a>
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f7ff ffbc 	bl	8007ae8 <malloc>
 8007b70:	6270      	str	r0, [r6, #36]	; 0x24
 8007b72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b76:	6004      	str	r4, [r0, #0]
 8007b78:	60c4      	str	r4, [r0, #12]
 8007b7a:	b13d      	cbz	r5, 8007b8c <_Bfree+0x2c>
 8007b7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b7e:	686a      	ldr	r2, [r5, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b86:	6029      	str	r1, [r5, #0]
 8007b88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}

08007b8e <__multadd>:
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	690d      	ldr	r5, [r1, #16]
 8007b94:	461f      	mov	r7, r3
 8007b96:	4606      	mov	r6, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	f101 0c14 	add.w	ip, r1, #20
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8dc 0000 	ldr.w	r0, [ip]
 8007ba4:	b281      	uxth	r1, r0
 8007ba6:	fb02 7101 	mla	r1, r2, r1, r7
 8007baa:	0c0f      	lsrs	r7, r1, #16
 8007bac:	0c00      	lsrs	r0, r0, #16
 8007bae:	fb02 7000 	mla	r0, r2, r0, r7
 8007bb2:	b289      	uxth	r1, r1
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bba:	429d      	cmp	r5, r3
 8007bbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bc0:	f84c 1b04 	str.w	r1, [ip], #4
 8007bc4:	dcec      	bgt.n	8007ba0 <__multadd+0x12>
 8007bc6:	b1d7      	cbz	r7, 8007bfe <__multadd+0x70>
 8007bc8:	68a3      	ldr	r3, [r4, #8]
 8007bca:	42ab      	cmp	r3, r5
 8007bcc:	dc12      	bgt.n	8007bf4 <__multadd+0x66>
 8007bce:	6861      	ldr	r1, [r4, #4]
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	3101      	adds	r1, #1
 8007bd4:	f7ff ff90 	bl	8007af8 <_Balloc>
 8007bd8:	6922      	ldr	r2, [r4, #16]
 8007bda:	3202      	adds	r2, #2
 8007bdc:	f104 010c 	add.w	r1, r4, #12
 8007be0:	4680      	mov	r8, r0
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	300c      	adds	r0, #12
 8007be6:	f7fe fa13 	bl	8006010 <memcpy>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7ff ffb7 	bl	8007b60 <_Bfree>
 8007bf2:	4644      	mov	r4, r8
 8007bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	615f      	str	r7, [r3, #20]
 8007bfc:	6125      	str	r5, [r4, #16]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c04 <__hi0bits>:
 8007c04:	0c02      	lsrs	r2, r0, #16
 8007c06:	0412      	lsls	r2, r2, #16
 8007c08:	4603      	mov	r3, r0
 8007c0a:	b9b2      	cbnz	r2, 8007c3a <__hi0bits+0x36>
 8007c0c:	0403      	lsls	r3, r0, #16
 8007c0e:	2010      	movs	r0, #16
 8007c10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c14:	bf04      	itt	eq
 8007c16:	021b      	lsleq	r3, r3, #8
 8007c18:	3008      	addeq	r0, #8
 8007c1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c1e:	bf04      	itt	eq
 8007c20:	011b      	lsleq	r3, r3, #4
 8007c22:	3004      	addeq	r0, #4
 8007c24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c28:	bf04      	itt	eq
 8007c2a:	009b      	lsleq	r3, r3, #2
 8007c2c:	3002      	addeq	r0, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db06      	blt.n	8007c40 <__hi0bits+0x3c>
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	d503      	bpl.n	8007c3e <__hi0bits+0x3a>
 8007c36:	3001      	adds	r0, #1
 8007c38:	4770      	bx	lr
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e7e8      	b.n	8007c10 <__hi0bits+0xc>
 8007c3e:	2020      	movs	r0, #32
 8007c40:	4770      	bx	lr

08007c42 <__lo0bits>:
 8007c42:	6803      	ldr	r3, [r0, #0]
 8007c44:	f013 0207 	ands.w	r2, r3, #7
 8007c48:	4601      	mov	r1, r0
 8007c4a:	d00b      	beq.n	8007c64 <__lo0bits+0x22>
 8007c4c:	07da      	lsls	r2, r3, #31
 8007c4e:	d423      	bmi.n	8007c98 <__lo0bits+0x56>
 8007c50:	0798      	lsls	r0, r3, #30
 8007c52:	bf49      	itett	mi
 8007c54:	085b      	lsrmi	r3, r3, #1
 8007c56:	089b      	lsrpl	r3, r3, #2
 8007c58:	2001      	movmi	r0, #1
 8007c5a:	600b      	strmi	r3, [r1, #0]
 8007c5c:	bf5c      	itt	pl
 8007c5e:	600b      	strpl	r3, [r1, #0]
 8007c60:	2002      	movpl	r0, #2
 8007c62:	4770      	bx	lr
 8007c64:	b298      	uxth	r0, r3
 8007c66:	b9a8      	cbnz	r0, 8007c94 <__lo0bits+0x52>
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	2010      	movs	r0, #16
 8007c6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c70:	bf04      	itt	eq
 8007c72:	0a1b      	lsreq	r3, r3, #8
 8007c74:	3008      	addeq	r0, #8
 8007c76:	071a      	lsls	r2, r3, #28
 8007c78:	bf04      	itt	eq
 8007c7a:	091b      	lsreq	r3, r3, #4
 8007c7c:	3004      	addeq	r0, #4
 8007c7e:	079a      	lsls	r2, r3, #30
 8007c80:	bf04      	itt	eq
 8007c82:	089b      	lsreq	r3, r3, #2
 8007c84:	3002      	addeq	r0, #2
 8007c86:	07da      	lsls	r2, r3, #31
 8007c88:	d402      	bmi.n	8007c90 <__lo0bits+0x4e>
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	d006      	beq.n	8007c9c <__lo0bits+0x5a>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	600b      	str	r3, [r1, #0]
 8007c92:	4770      	bx	lr
 8007c94:	4610      	mov	r0, r2
 8007c96:	e7e9      	b.n	8007c6c <__lo0bits+0x2a>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	4770      	bx	lr
 8007c9c:	2020      	movs	r0, #32
 8007c9e:	4770      	bx	lr

08007ca0 <__i2b>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	f7ff ff27 	bl	8007af8 <_Balloc>
 8007caa:	2201      	movs	r2, #1
 8007cac:	6144      	str	r4, [r0, #20]
 8007cae:	6102      	str	r2, [r0, #16]
 8007cb0:	bd10      	pop	{r4, pc}

08007cb2 <__multiply>:
 8007cb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	690a      	ldr	r2, [r1, #16]
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	bfb8      	it	lt
 8007cc0:	460b      	movlt	r3, r1
 8007cc2:	4688      	mov	r8, r1
 8007cc4:	bfbc      	itt	lt
 8007cc6:	46a0      	movlt	r8, r4
 8007cc8:	461c      	movlt	r4, r3
 8007cca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cda:	eb07 0609 	add.w	r6, r7, r9
 8007cde:	42b3      	cmp	r3, r6
 8007ce0:	bfb8      	it	lt
 8007ce2:	3101      	addlt	r1, #1
 8007ce4:	f7ff ff08 	bl	8007af8 <_Balloc>
 8007ce8:	f100 0514 	add.w	r5, r0, #20
 8007cec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4573      	cmp	r3, lr
 8007cf6:	d316      	bcc.n	8007d26 <__multiply+0x74>
 8007cf8:	f104 0214 	add.w	r2, r4, #20
 8007cfc:	f108 0114 	add.w	r1, r8, #20
 8007d00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d80c      	bhi.n	8007d2c <__multiply+0x7a>
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	dd03      	ble.n	8007d1e <__multiply+0x6c>
 8007d16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d05d      	beq.n	8007dda <__multiply+0x128>
 8007d1e:	6106      	str	r6, [r0, #16]
 8007d20:	b003      	add	sp, #12
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	f843 2b04 	str.w	r2, [r3], #4
 8007d2a:	e7e3      	b.n	8007cf4 <__multiply+0x42>
 8007d2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d30:	f1bb 0f00 	cmp.w	fp, #0
 8007d34:	d023      	beq.n	8007d7e <__multiply+0xcc>
 8007d36:	4689      	mov	r9, r1
 8007d38:	46ac      	mov	ip, r5
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d42:	f8dc a000 	ldr.w	sl, [ip]
 8007d46:	b2a3      	uxth	r3, r4
 8007d48:	fa1f fa8a 	uxth.w	sl, sl
 8007d4c:	fb0b a303 	mla	r3, fp, r3, sl
 8007d50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d54:	f8dc 4000 	ldr.w	r4, [ip]
 8007d58:	4443      	add	r3, r8
 8007d5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d66:	46e2      	mov	sl, ip
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d6e:	454f      	cmp	r7, r9
 8007d70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d74:	f84a 3b04 	str.w	r3, [sl], #4
 8007d78:	d82b      	bhi.n	8007dd2 <__multiply+0x120>
 8007d7a:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d84:	3204      	adds	r2, #4
 8007d86:	f1ba 0f00 	cmp.w	sl, #0
 8007d8a:	d020      	beq.n	8007dce <__multiply+0x11c>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	4689      	mov	r9, r1
 8007d90:	46a8      	mov	r8, r5
 8007d92:	f04f 0b00 	mov.w	fp, #0
 8007d96:	f8b9 c000 	ldrh.w	ip, [r9]
 8007d9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007d9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007da2:	445c      	add	r4, fp
 8007da4:	46c4      	mov	ip, r8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007dac:	f84c 3b04 	str.w	r3, [ip], #4
 8007db0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007db4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007db8:	0c1b      	lsrs	r3, r3, #16
 8007dba:	fb0a b303 	mla	r3, sl, r3, fp
 8007dbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007dc2:	454f      	cmp	r7, r9
 8007dc4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007dc8:	d805      	bhi.n	8007dd6 <__multiply+0x124>
 8007dca:	f8c8 3004 	str.w	r3, [r8, #4]
 8007dce:	3504      	adds	r5, #4
 8007dd0:	e79b      	b.n	8007d0a <__multiply+0x58>
 8007dd2:	46d4      	mov	ip, sl
 8007dd4:	e7b3      	b.n	8007d3e <__multiply+0x8c>
 8007dd6:	46e0      	mov	r8, ip
 8007dd8:	e7dd      	b.n	8007d96 <__multiply+0xe4>
 8007dda:	3e01      	subs	r6, #1
 8007ddc:	e799      	b.n	8007d12 <__multiply+0x60>
	...

08007de0 <__pow5mult>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4615      	mov	r5, r2
 8007de6:	f012 0203 	ands.w	r2, r2, #3
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	d007      	beq.n	8007e00 <__pow5mult+0x20>
 8007df0:	3a01      	subs	r2, #1
 8007df2:	4c21      	ldr	r4, [pc, #132]	; (8007e78 <__pow5mult+0x98>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dfa:	f7ff fec8 	bl	8007b8e <__multadd>
 8007dfe:	4607      	mov	r7, r0
 8007e00:	10ad      	asrs	r5, r5, #2
 8007e02:	d035      	beq.n	8007e70 <__pow5mult+0x90>
 8007e04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e06:	b93c      	cbnz	r4, 8007e18 <__pow5mult+0x38>
 8007e08:	2010      	movs	r0, #16
 8007e0a:	f7ff fe6d 	bl	8007ae8 <malloc>
 8007e0e:	6270      	str	r0, [r6, #36]	; 0x24
 8007e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e14:	6004      	str	r4, [r0, #0]
 8007e16:	60c4      	str	r4, [r0, #12]
 8007e18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e20:	b94c      	cbnz	r4, 8007e36 <__pow5mult+0x56>
 8007e22:	f240 2171 	movw	r1, #625	; 0x271
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ff3a 	bl	8007ca0 <__i2b>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e32:	4604      	mov	r4, r0
 8007e34:	6003      	str	r3, [r0, #0]
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	07eb      	lsls	r3, r5, #31
 8007e3c:	d50a      	bpl.n	8007e54 <__pow5mult+0x74>
 8007e3e:	4639      	mov	r1, r7
 8007e40:	4622      	mov	r2, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ff35 	bl	8007cb2 <__multiply>
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7ff fe87 	bl	8007b60 <_Bfree>
 8007e52:	464f      	mov	r7, r9
 8007e54:	106d      	asrs	r5, r5, #1
 8007e56:	d00b      	beq.n	8007e70 <__pow5mult+0x90>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	b938      	cbnz	r0, 8007e6c <__pow5mult+0x8c>
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7ff ff26 	bl	8007cb2 <__multiply>
 8007e66:	6020      	str	r0, [r4, #0]
 8007e68:	f8c0 8000 	str.w	r8, [r0]
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e7e4      	b.n	8007e3a <__pow5mult+0x5a>
 8007e70:	4638      	mov	r0, r7
 8007e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e76:	bf00      	nop
 8007e78:	08008de0 	.word	0x08008de0

08007e7c <__lshift>:
 8007e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	6849      	ldr	r1, [r1, #4]
 8007e8a:	eb0a 0903 	add.w	r9, sl, r3
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	4607      	mov	r7, r0
 8007e92:	4616      	mov	r6, r2
 8007e94:	f109 0501 	add.w	r5, r9, #1
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	db32      	blt.n	8007f02 <__lshift+0x86>
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff fe2b 	bl	8007af8 <_Balloc>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	f100 0114 	add.w	r1, r0, #20
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4553      	cmp	r3, sl
 8007eae:	db2b      	blt.n	8007f08 <__lshift+0x8c>
 8007eb0:	6920      	ldr	r0, [r4, #16]
 8007eb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eb6:	f104 0314 	add.w	r3, r4, #20
 8007eba:	f016 021f 	ands.w	r2, r6, #31
 8007ebe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ec2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ec6:	d025      	beq.n	8007f14 <__lshift+0x98>
 8007ec8:	f1c2 0e20 	rsb	lr, r2, #32
 8007ecc:	2000      	movs	r0, #0
 8007ece:	681e      	ldr	r6, [r3, #0]
 8007ed0:	468a      	mov	sl, r1
 8007ed2:	4096      	lsls	r6, r2
 8007ed4:	4330      	orrs	r0, r6
 8007ed6:	f84a 0b04 	str.w	r0, [sl], #4
 8007eda:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ede:	459c      	cmp	ip, r3
 8007ee0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ee4:	d814      	bhi.n	8007f10 <__lshift+0x94>
 8007ee6:	6048      	str	r0, [r1, #4]
 8007ee8:	b108      	cbz	r0, 8007eee <__lshift+0x72>
 8007eea:	f109 0502 	add.w	r5, r9, #2
 8007eee:	3d01      	subs	r5, #1
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	f7ff fe32 	bl	8007b60 <_Bfree>
 8007efc:	4640      	mov	r0, r8
 8007efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f02:	3101      	adds	r1, #1
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	e7c7      	b.n	8007e98 <__lshift+0x1c>
 8007f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	e7cd      	b.n	8007eac <__lshift+0x30>
 8007f10:	4651      	mov	r1, sl
 8007f12:	e7dc      	b.n	8007ece <__lshift+0x52>
 8007f14:	3904      	subs	r1, #4
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f1e:	459c      	cmp	ip, r3
 8007f20:	d8f9      	bhi.n	8007f16 <__lshift+0x9a>
 8007f22:	e7e4      	b.n	8007eee <__lshift+0x72>

08007f24 <__mcmp>:
 8007f24:	6903      	ldr	r3, [r0, #16]
 8007f26:	690a      	ldr	r2, [r1, #16]
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	b530      	push	{r4, r5, lr}
 8007f2c:	d10c      	bne.n	8007f48 <__mcmp+0x24>
 8007f2e:	0092      	lsls	r2, r2, #2
 8007f30:	3014      	adds	r0, #20
 8007f32:	3114      	adds	r1, #20
 8007f34:	1884      	adds	r4, r0, r2
 8007f36:	4411      	add	r1, r2
 8007f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f40:	4295      	cmp	r5, r2
 8007f42:	d003      	beq.n	8007f4c <__mcmp+0x28>
 8007f44:	d305      	bcc.n	8007f52 <__mcmp+0x2e>
 8007f46:	2301      	movs	r3, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	bd30      	pop	{r4, r5, pc}
 8007f4c:	42a0      	cmp	r0, r4
 8007f4e:	d3f3      	bcc.n	8007f38 <__mcmp+0x14>
 8007f50:	e7fa      	b.n	8007f48 <__mcmp+0x24>
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	e7f7      	b.n	8007f48 <__mcmp+0x24>

08007f58 <__mdiff>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	4607      	mov	r7, r0
 8007f60:	4611      	mov	r1, r2
 8007f62:	4628      	mov	r0, r5
 8007f64:	4614      	mov	r4, r2
 8007f66:	f7ff ffdd 	bl	8007f24 <__mcmp>
 8007f6a:	1e06      	subs	r6, r0, #0
 8007f6c:	d108      	bne.n	8007f80 <__mdiff+0x28>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff fdc1 	bl	8007af8 <_Balloc>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f80:	bfa4      	itt	ge
 8007f82:	4623      	movge	r3, r4
 8007f84:	462c      	movge	r4, r5
 8007f86:	4638      	mov	r0, r7
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	bfa6      	itte	ge
 8007f8c:	461d      	movge	r5, r3
 8007f8e:	2600      	movge	r6, #0
 8007f90:	2601      	movlt	r6, #1
 8007f92:	f7ff fdb1 	bl	8007af8 <_Balloc>
 8007f96:	692b      	ldr	r3, [r5, #16]
 8007f98:	60c6      	str	r6, [r0, #12]
 8007f9a:	6926      	ldr	r6, [r4, #16]
 8007f9c:	f105 0914 	add.w	r9, r5, #20
 8007fa0:	f104 0214 	add.w	r2, r4, #20
 8007fa4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fa8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fac:	f100 0514 	add.w	r5, r0, #20
 8007fb0:	f04f 0e00 	mov.w	lr, #0
 8007fb4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007fb8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fbc:	fa1e f18a 	uxtah	r1, lr, sl
 8007fc0:	b2a3      	uxth	r3, r4
 8007fc2:	1ac9      	subs	r1, r1, r3
 8007fc4:	0c23      	lsrs	r3, r4, #16
 8007fc6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007fca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fce:	b289      	uxth	r1, r1
 8007fd0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007fd4:	45c8      	cmp	r8, r9
 8007fd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fda:	4694      	mov	ip, r2
 8007fdc:	f845 3b04 	str.w	r3, [r5], #4
 8007fe0:	d8e8      	bhi.n	8007fb4 <__mdiff+0x5c>
 8007fe2:	45bc      	cmp	ip, r7
 8007fe4:	d304      	bcc.n	8007ff0 <__mdiff+0x98>
 8007fe6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007fea:	b183      	cbz	r3, 800800e <__mdiff+0xb6>
 8007fec:	6106      	str	r6, [r0, #16]
 8007fee:	e7c5      	b.n	8007f7c <__mdiff+0x24>
 8007ff0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ff4:	fa1e f381 	uxtah	r3, lr, r1
 8007ff8:	141a      	asrs	r2, r3, #16
 8007ffa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008004:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008008:	f845 3b04 	str.w	r3, [r5], #4
 800800c:	e7e9      	b.n	8007fe2 <__mdiff+0x8a>
 800800e:	3e01      	subs	r6, #1
 8008010:	e7e9      	b.n	8007fe6 <__mdiff+0x8e>

08008012 <__d2b>:
 8008012:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008016:	460e      	mov	r6, r1
 8008018:	2101      	movs	r1, #1
 800801a:	ec59 8b10 	vmov	r8, r9, d0
 800801e:	4615      	mov	r5, r2
 8008020:	f7ff fd6a 	bl	8007af8 <_Balloc>
 8008024:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008028:	4607      	mov	r7, r0
 800802a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800802e:	bb34      	cbnz	r4, 800807e <__d2b+0x6c>
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	f1b8 0300 	subs.w	r3, r8, #0
 8008036:	d027      	beq.n	8008088 <__d2b+0x76>
 8008038:	a802      	add	r0, sp, #8
 800803a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800803e:	f7ff fe00 	bl	8007c42 <__lo0bits>
 8008042:	9900      	ldr	r1, [sp, #0]
 8008044:	b1f0      	cbz	r0, 8008084 <__d2b+0x72>
 8008046:	9a01      	ldr	r2, [sp, #4]
 8008048:	f1c0 0320 	rsb	r3, r0, #32
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	430b      	orrs	r3, r1
 8008052:	40c2      	lsrs	r2, r0
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	9201      	str	r2, [sp, #4]
 8008058:	9b01      	ldr	r3, [sp, #4]
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf14      	ite	ne
 8008060:	2102      	movne	r1, #2
 8008062:	2101      	moveq	r1, #1
 8008064:	6139      	str	r1, [r7, #16]
 8008066:	b1c4      	cbz	r4, 800809a <__d2b+0x88>
 8008068:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800806c:	4404      	add	r4, r0
 800806e:	6034      	str	r4, [r6, #0]
 8008070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008074:	6028      	str	r0, [r5, #0]
 8008076:	4638      	mov	r0, r7
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800807e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008082:	e7d5      	b.n	8008030 <__d2b+0x1e>
 8008084:	6179      	str	r1, [r7, #20]
 8008086:	e7e7      	b.n	8008058 <__d2b+0x46>
 8008088:	a801      	add	r0, sp, #4
 800808a:	f7ff fdda 	bl	8007c42 <__lo0bits>
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	2101      	movs	r1, #1
 8008094:	6139      	str	r1, [r7, #16]
 8008096:	3020      	adds	r0, #32
 8008098:	e7e5      	b.n	8008066 <__d2b+0x54>
 800809a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800809e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080a2:	6030      	str	r0, [r6, #0]
 80080a4:	6918      	ldr	r0, [r3, #16]
 80080a6:	f7ff fdad 	bl	8007c04 <__hi0bits>
 80080aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080ae:	e7e1      	b.n	8008074 <__d2b+0x62>

080080b0 <_calloc_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	fb02 f401 	mul.w	r4, r2, r1
 80080b6:	4621      	mov	r1, r4
 80080b8:	f000 f856 	bl	8008168 <_malloc_r>
 80080bc:	4605      	mov	r5, r0
 80080be:	b118      	cbz	r0, 80080c8 <_calloc_r+0x18>
 80080c0:	4622      	mov	r2, r4
 80080c2:	2100      	movs	r1, #0
 80080c4:	f7fd ffaf 	bl	8006026 <memset>
 80080c8:	4628      	mov	r0, r5
 80080ca:	bd38      	pop	{r3, r4, r5, pc}

080080cc <_free_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4605      	mov	r5, r0
 80080d0:	2900      	cmp	r1, #0
 80080d2:	d045      	beq.n	8008160 <_free_r+0x94>
 80080d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d8:	1f0c      	subs	r4, r1, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfb8      	it	lt
 80080de:	18e4      	addlt	r4, r4, r3
 80080e0:	f000 fc03 	bl	80088ea <__malloc_lock>
 80080e4:	4a1f      	ldr	r2, [pc, #124]	; (8008164 <_free_r+0x98>)
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	4610      	mov	r0, r2
 80080ea:	b933      	cbnz	r3, 80080fa <_free_r+0x2e>
 80080ec:	6063      	str	r3, [r4, #4]
 80080ee:	6014      	str	r4, [r2, #0]
 80080f0:	4628      	mov	r0, r5
 80080f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f6:	f000 bbf9 	b.w	80088ec <__malloc_unlock>
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	d90c      	bls.n	8008118 <_free_r+0x4c>
 80080fe:	6821      	ldr	r1, [r4, #0]
 8008100:	1862      	adds	r2, r4, r1
 8008102:	4293      	cmp	r3, r2
 8008104:	bf04      	itt	eq
 8008106:	681a      	ldreq	r2, [r3, #0]
 8008108:	685b      	ldreq	r3, [r3, #4]
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	bf04      	itt	eq
 800810e:	1852      	addeq	r2, r2, r1
 8008110:	6022      	streq	r2, [r4, #0]
 8008112:	6004      	str	r4, [r0, #0]
 8008114:	e7ec      	b.n	80080f0 <_free_r+0x24>
 8008116:	4613      	mov	r3, r2
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	b10a      	cbz	r2, 8008120 <_free_r+0x54>
 800811c:	42a2      	cmp	r2, r4
 800811e:	d9fa      	bls.n	8008116 <_free_r+0x4a>
 8008120:	6819      	ldr	r1, [r3, #0]
 8008122:	1858      	adds	r0, r3, r1
 8008124:	42a0      	cmp	r0, r4
 8008126:	d10b      	bne.n	8008140 <_free_r+0x74>
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	4401      	add	r1, r0
 800812c:	1858      	adds	r0, r3, r1
 800812e:	4282      	cmp	r2, r0
 8008130:	6019      	str	r1, [r3, #0]
 8008132:	d1dd      	bne.n	80080f0 <_free_r+0x24>
 8008134:	6810      	ldr	r0, [r2, #0]
 8008136:	6852      	ldr	r2, [r2, #4]
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	4401      	add	r1, r0
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	e7d7      	b.n	80080f0 <_free_r+0x24>
 8008140:	d902      	bls.n	8008148 <_free_r+0x7c>
 8008142:	230c      	movs	r3, #12
 8008144:	602b      	str	r3, [r5, #0]
 8008146:	e7d3      	b.n	80080f0 <_free_r+0x24>
 8008148:	6820      	ldr	r0, [r4, #0]
 800814a:	1821      	adds	r1, r4, r0
 800814c:	428a      	cmp	r2, r1
 800814e:	bf04      	itt	eq
 8008150:	6811      	ldreq	r1, [r2, #0]
 8008152:	6852      	ldreq	r2, [r2, #4]
 8008154:	6062      	str	r2, [r4, #4]
 8008156:	bf04      	itt	eq
 8008158:	1809      	addeq	r1, r1, r0
 800815a:	6021      	streq	r1, [r4, #0]
 800815c:	605c      	str	r4, [r3, #4]
 800815e:	e7c7      	b.n	80080f0 <_free_r+0x24>
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	2000020c 	.word	0x2000020c

08008168 <_malloc_r>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	1ccd      	adds	r5, r1, #3
 800816c:	f025 0503 	bic.w	r5, r5, #3
 8008170:	3508      	adds	r5, #8
 8008172:	2d0c      	cmp	r5, #12
 8008174:	bf38      	it	cc
 8008176:	250c      	movcc	r5, #12
 8008178:	2d00      	cmp	r5, #0
 800817a:	4606      	mov	r6, r0
 800817c:	db01      	blt.n	8008182 <_malloc_r+0x1a>
 800817e:	42a9      	cmp	r1, r5
 8008180:	d903      	bls.n	800818a <_malloc_r+0x22>
 8008182:	230c      	movs	r3, #12
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	2000      	movs	r0, #0
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	f000 fbae 	bl	80088ea <__malloc_lock>
 800818e:	4a21      	ldr	r2, [pc, #132]	; (8008214 <_malloc_r+0xac>)
 8008190:	6814      	ldr	r4, [r2, #0]
 8008192:	4621      	mov	r1, r4
 8008194:	b991      	cbnz	r1, 80081bc <_malloc_r+0x54>
 8008196:	4c20      	ldr	r4, [pc, #128]	; (8008218 <_malloc_r+0xb0>)
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	b91b      	cbnz	r3, 80081a4 <_malloc_r+0x3c>
 800819c:	4630      	mov	r0, r6
 800819e:	f000 facf 	bl	8008740 <_sbrk_r>
 80081a2:	6020      	str	r0, [r4, #0]
 80081a4:	4629      	mov	r1, r5
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 faca 	bl	8008740 <_sbrk_r>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d124      	bne.n	80081fa <_malloc_r+0x92>
 80081b0:	230c      	movs	r3, #12
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	4630      	mov	r0, r6
 80081b6:	f000 fb99 	bl	80088ec <__malloc_unlock>
 80081ba:	e7e4      	b.n	8008186 <_malloc_r+0x1e>
 80081bc:	680b      	ldr	r3, [r1, #0]
 80081be:	1b5b      	subs	r3, r3, r5
 80081c0:	d418      	bmi.n	80081f4 <_malloc_r+0x8c>
 80081c2:	2b0b      	cmp	r3, #11
 80081c4:	d90f      	bls.n	80081e6 <_malloc_r+0x7e>
 80081c6:	600b      	str	r3, [r1, #0]
 80081c8:	50cd      	str	r5, [r1, r3]
 80081ca:	18cc      	adds	r4, r1, r3
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 fb8d 	bl	80088ec <__malloc_unlock>
 80081d2:	f104 000b 	add.w	r0, r4, #11
 80081d6:	1d23      	adds	r3, r4, #4
 80081d8:	f020 0007 	bic.w	r0, r0, #7
 80081dc:	1ac3      	subs	r3, r0, r3
 80081de:	d0d3      	beq.n	8008188 <_malloc_r+0x20>
 80081e0:	425a      	negs	r2, r3
 80081e2:	50e2      	str	r2, [r4, r3]
 80081e4:	e7d0      	b.n	8008188 <_malloc_r+0x20>
 80081e6:	428c      	cmp	r4, r1
 80081e8:	684b      	ldr	r3, [r1, #4]
 80081ea:	bf16      	itet	ne
 80081ec:	6063      	strne	r3, [r4, #4]
 80081ee:	6013      	streq	r3, [r2, #0]
 80081f0:	460c      	movne	r4, r1
 80081f2:	e7eb      	b.n	80081cc <_malloc_r+0x64>
 80081f4:	460c      	mov	r4, r1
 80081f6:	6849      	ldr	r1, [r1, #4]
 80081f8:	e7cc      	b.n	8008194 <_malloc_r+0x2c>
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d005      	beq.n	8008210 <_malloc_r+0xa8>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4630      	mov	r0, r6
 8008208:	f000 fa9a 	bl	8008740 <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d0cf      	beq.n	80081b0 <_malloc_r+0x48>
 8008210:	6025      	str	r5, [r4, #0]
 8008212:	e7db      	b.n	80081cc <_malloc_r+0x64>
 8008214:	2000020c 	.word	0x2000020c
 8008218:	20000210 	.word	0x20000210

0800821c <__ssputs_r>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	688e      	ldr	r6, [r1, #8]
 8008222:	429e      	cmp	r6, r3
 8008224:	4682      	mov	sl, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4690      	mov	r8, r2
 800822a:	4699      	mov	r9, r3
 800822c:	d837      	bhi.n	800829e <__ssputs_r+0x82>
 800822e:	898a      	ldrh	r2, [r1, #12]
 8008230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008234:	d031      	beq.n	800829a <__ssputs_r+0x7e>
 8008236:	6825      	ldr	r5, [r4, #0]
 8008238:	6909      	ldr	r1, [r1, #16]
 800823a:	1a6f      	subs	r7, r5, r1
 800823c:	6965      	ldr	r5, [r4, #20]
 800823e:	2302      	movs	r3, #2
 8008240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008244:	fb95 f5f3 	sdiv	r5, r5, r3
 8008248:	f109 0301 	add.w	r3, r9, #1
 800824c:	443b      	add	r3, r7
 800824e:	429d      	cmp	r5, r3
 8008250:	bf38      	it	cc
 8008252:	461d      	movcc	r5, r3
 8008254:	0553      	lsls	r3, r2, #21
 8008256:	d530      	bpl.n	80082ba <__ssputs_r+0x9e>
 8008258:	4629      	mov	r1, r5
 800825a:	f7ff ff85 	bl	8008168 <_malloc_r>
 800825e:	4606      	mov	r6, r0
 8008260:	b950      	cbnz	r0, 8008278 <__ssputs_r+0x5c>
 8008262:	230c      	movs	r3, #12
 8008264:	f8ca 3000 	str.w	r3, [sl]
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	463a      	mov	r2, r7
 800827a:	6921      	ldr	r1, [r4, #16]
 800827c:	f7fd fec8 	bl	8006010 <memcpy>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	6126      	str	r6, [r4, #16]
 800828e:	6165      	str	r5, [r4, #20]
 8008290:	443e      	add	r6, r7
 8008292:	1bed      	subs	r5, r5, r7
 8008294:	6026      	str	r6, [r4, #0]
 8008296:	60a5      	str	r5, [r4, #8]
 8008298:	464e      	mov	r6, r9
 800829a:	454e      	cmp	r6, r9
 800829c:	d900      	bls.n	80082a0 <__ssputs_r+0x84>
 800829e:	464e      	mov	r6, r9
 80082a0:	4632      	mov	r2, r6
 80082a2:	4641      	mov	r1, r8
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	f000 fb07 	bl	80088b8 <memmove>
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	1b9b      	subs	r3, r3, r6
 80082ae:	60a3      	str	r3, [r4, #8]
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	441e      	add	r6, r3
 80082b4:	6026      	str	r6, [r4, #0]
 80082b6:	2000      	movs	r0, #0
 80082b8:	e7dc      	b.n	8008274 <__ssputs_r+0x58>
 80082ba:	462a      	mov	r2, r5
 80082bc:	f000 fb17 	bl	80088ee <_realloc_r>
 80082c0:	4606      	mov	r6, r0
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1e2      	bne.n	800828c <__ssputs_r+0x70>
 80082c6:	6921      	ldr	r1, [r4, #16]
 80082c8:	4650      	mov	r0, sl
 80082ca:	f7ff feff 	bl	80080cc <_free_r>
 80082ce:	e7c8      	b.n	8008262 <__ssputs_r+0x46>

080082d0 <_svfiprintf_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	461d      	mov	r5, r3
 80082d6:	898b      	ldrh	r3, [r1, #12]
 80082d8:	061f      	lsls	r7, r3, #24
 80082da:	b09d      	sub	sp, #116	; 0x74
 80082dc:	4680      	mov	r8, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4616      	mov	r6, r2
 80082e2:	d50f      	bpl.n	8008304 <_svfiprintf_r+0x34>
 80082e4:	690b      	ldr	r3, [r1, #16]
 80082e6:	b96b      	cbnz	r3, 8008304 <_svfiprintf_r+0x34>
 80082e8:	2140      	movs	r1, #64	; 0x40
 80082ea:	f7ff ff3d 	bl	8008168 <_malloc_r>
 80082ee:	6020      	str	r0, [r4, #0]
 80082f0:	6120      	str	r0, [r4, #16]
 80082f2:	b928      	cbnz	r0, 8008300 <_svfiprintf_r+0x30>
 80082f4:	230c      	movs	r3, #12
 80082f6:	f8c8 3000 	str.w	r3, [r8]
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	e0c8      	b.n	8008492 <_svfiprintf_r+0x1c2>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	2300      	movs	r3, #0
 8008306:	9309      	str	r3, [sp, #36]	; 0x24
 8008308:	2320      	movs	r3, #32
 800830a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830e:	2330      	movs	r3, #48	; 0x30
 8008310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008314:	9503      	str	r5, [sp, #12]
 8008316:	f04f 0b01 	mov.w	fp, #1
 800831a:	4637      	mov	r7, r6
 800831c:	463d      	mov	r5, r7
 800831e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008322:	b10b      	cbz	r3, 8008328 <_svfiprintf_r+0x58>
 8008324:	2b25      	cmp	r3, #37	; 0x25
 8008326:	d13e      	bne.n	80083a6 <_svfiprintf_r+0xd6>
 8008328:	ebb7 0a06 	subs.w	sl, r7, r6
 800832c:	d00b      	beq.n	8008346 <_svfiprintf_r+0x76>
 800832e:	4653      	mov	r3, sl
 8008330:	4632      	mov	r2, r6
 8008332:	4621      	mov	r1, r4
 8008334:	4640      	mov	r0, r8
 8008336:	f7ff ff71 	bl	800821c <__ssputs_r>
 800833a:	3001      	adds	r0, #1
 800833c:	f000 80a4 	beq.w	8008488 <_svfiprintf_r+0x1b8>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	4453      	add	r3, sl
 8008344:	9309      	str	r3, [sp, #36]	; 0x24
 8008346:	783b      	ldrb	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 809d 	beq.w	8008488 <_svfiprintf_r+0x1b8>
 800834e:	2300      	movs	r3, #0
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008360:	931a      	str	r3, [sp, #104]	; 0x68
 8008362:	462f      	mov	r7, r5
 8008364:	2205      	movs	r2, #5
 8008366:	f817 1b01 	ldrb.w	r1, [r7], #1
 800836a:	4850      	ldr	r0, [pc, #320]	; (80084ac <_svfiprintf_r+0x1dc>)
 800836c:	f7f7 ffc0 	bl	80002f0 <memchr>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	b9d0      	cbnz	r0, 80083aa <_svfiprintf_r+0xda>
 8008374:	06d9      	lsls	r1, r3, #27
 8008376:	bf44      	itt	mi
 8008378:	2220      	movmi	r2, #32
 800837a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800837e:	071a      	lsls	r2, r3, #28
 8008380:	bf44      	itt	mi
 8008382:	222b      	movmi	r2, #43	; 0x2b
 8008384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008388:	782a      	ldrb	r2, [r5, #0]
 800838a:	2a2a      	cmp	r2, #42	; 0x2a
 800838c:	d015      	beq.n	80083ba <_svfiprintf_r+0xea>
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	462f      	mov	r7, r5
 8008392:	2000      	movs	r0, #0
 8008394:	250a      	movs	r5, #10
 8008396:	4639      	mov	r1, r7
 8008398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839c:	3b30      	subs	r3, #48	; 0x30
 800839e:	2b09      	cmp	r3, #9
 80083a0:	d94d      	bls.n	800843e <_svfiprintf_r+0x16e>
 80083a2:	b1b8      	cbz	r0, 80083d4 <_svfiprintf_r+0x104>
 80083a4:	e00f      	b.n	80083c6 <_svfiprintf_r+0xf6>
 80083a6:	462f      	mov	r7, r5
 80083a8:	e7b8      	b.n	800831c <_svfiprintf_r+0x4c>
 80083aa:	4a40      	ldr	r2, [pc, #256]	; (80084ac <_svfiprintf_r+0x1dc>)
 80083ac:	1a80      	subs	r0, r0, r2
 80083ae:	fa0b f000 	lsl.w	r0, fp, r0
 80083b2:	4318      	orrs	r0, r3
 80083b4:	9004      	str	r0, [sp, #16]
 80083b6:	463d      	mov	r5, r7
 80083b8:	e7d3      	b.n	8008362 <_svfiprintf_r+0x92>
 80083ba:	9a03      	ldr	r2, [sp, #12]
 80083bc:	1d11      	adds	r1, r2, #4
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	db01      	blt.n	80083ca <_svfiprintf_r+0xfa>
 80083c6:	9207      	str	r2, [sp, #28]
 80083c8:	e004      	b.n	80083d4 <_svfiprintf_r+0x104>
 80083ca:	4252      	negs	r2, r2
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	9207      	str	r2, [sp, #28]
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	783b      	ldrb	r3, [r7, #0]
 80083d6:	2b2e      	cmp	r3, #46	; 0x2e
 80083d8:	d10c      	bne.n	80083f4 <_svfiprintf_r+0x124>
 80083da:	787b      	ldrb	r3, [r7, #1]
 80083dc:	2b2a      	cmp	r3, #42	; 0x2a
 80083de:	d133      	bne.n	8008448 <_svfiprintf_r+0x178>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d1a      	adds	r2, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9203      	str	r2, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfb8      	it	lt
 80083ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80083f0:	3702      	adds	r7, #2
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	4d2e      	ldr	r5, [pc, #184]	; (80084b0 <_svfiprintf_r+0x1e0>)
 80083f6:	7839      	ldrb	r1, [r7, #0]
 80083f8:	2203      	movs	r2, #3
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7f7 ff78 	bl	80002f0 <memchr>
 8008400:	b138      	cbz	r0, 8008412 <_svfiprintf_r+0x142>
 8008402:	2340      	movs	r3, #64	; 0x40
 8008404:	1b40      	subs	r0, r0, r5
 8008406:	fa03 f000 	lsl.w	r0, r3, r0
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	4303      	orrs	r3, r0
 800840e:	3701      	adds	r7, #1
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	7839      	ldrb	r1, [r7, #0]
 8008414:	4827      	ldr	r0, [pc, #156]	; (80084b4 <_svfiprintf_r+0x1e4>)
 8008416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800841a:	2206      	movs	r2, #6
 800841c:	1c7e      	adds	r6, r7, #1
 800841e:	f7f7 ff67 	bl	80002f0 <memchr>
 8008422:	2800      	cmp	r0, #0
 8008424:	d038      	beq.n	8008498 <_svfiprintf_r+0x1c8>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <_svfiprintf_r+0x1e8>)
 8008428:	bb13      	cbnz	r3, 8008470 <_svfiprintf_r+0x1a0>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	3307      	adds	r3, #7
 800842e:	f023 0307 	bic.w	r3, r3, #7
 8008432:	3308      	adds	r3, #8
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008438:	444b      	add	r3, r9
 800843a:	9309      	str	r3, [sp, #36]	; 0x24
 800843c:	e76d      	b.n	800831a <_svfiprintf_r+0x4a>
 800843e:	fb05 3202 	mla	r2, r5, r2, r3
 8008442:	2001      	movs	r0, #1
 8008444:	460f      	mov	r7, r1
 8008446:	e7a6      	b.n	8008396 <_svfiprintf_r+0xc6>
 8008448:	2300      	movs	r3, #0
 800844a:	3701      	adds	r7, #1
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	4619      	mov	r1, r3
 8008450:	250a      	movs	r5, #10
 8008452:	4638      	mov	r0, r7
 8008454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008458:	3a30      	subs	r2, #48	; 0x30
 800845a:	2a09      	cmp	r2, #9
 800845c:	d903      	bls.n	8008466 <_svfiprintf_r+0x196>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0c8      	beq.n	80083f4 <_svfiprintf_r+0x124>
 8008462:	9105      	str	r1, [sp, #20]
 8008464:	e7c6      	b.n	80083f4 <_svfiprintf_r+0x124>
 8008466:	fb05 2101 	mla	r1, r5, r1, r2
 800846a:	2301      	movs	r3, #1
 800846c:	4607      	mov	r7, r0
 800846e:	e7f0      	b.n	8008452 <_svfiprintf_r+0x182>
 8008470:	ab03      	add	r3, sp, #12
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4622      	mov	r2, r4
 8008476:	4b11      	ldr	r3, [pc, #68]	; (80084bc <_svfiprintf_r+0x1ec>)
 8008478:	a904      	add	r1, sp, #16
 800847a:	4640      	mov	r0, r8
 800847c:	f7fd fe60 	bl	8006140 <_printf_float>
 8008480:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008484:	4681      	mov	r9, r0
 8008486:	d1d6      	bne.n	8008436 <_svfiprintf_r+0x166>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	065b      	lsls	r3, r3, #25
 800848c:	f53f af35 	bmi.w	80082fa <_svfiprintf_r+0x2a>
 8008490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008492:	b01d      	add	sp, #116	; 0x74
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4622      	mov	r2, r4
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <_svfiprintf_r+0x1ec>)
 80084a0:	a904      	add	r1, sp, #16
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7fe f8ee 	bl	8006684 <_printf_i>
 80084a8:	e7ea      	b.n	8008480 <_svfiprintf_r+0x1b0>
 80084aa:	bf00      	nop
 80084ac:	08008dec 	.word	0x08008dec
 80084b0:	08008df2 	.word	0x08008df2
 80084b4:	08008df6 	.word	0x08008df6
 80084b8:	08006141 	.word	0x08006141
 80084bc:	0800821d 	.word	0x0800821d

080084c0 <__sfputc_r>:
 80084c0:	6893      	ldr	r3, [r2, #8]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	b410      	push	{r4}
 80084c8:	6093      	str	r3, [r2, #8]
 80084ca:	da08      	bge.n	80084de <__sfputc_r+0x1e>
 80084cc:	6994      	ldr	r4, [r2, #24]
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	db01      	blt.n	80084d6 <__sfputc_r+0x16>
 80084d2:	290a      	cmp	r1, #10
 80084d4:	d103      	bne.n	80084de <__sfputc_r+0x1e>
 80084d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084da:	f7fe ba81 	b.w	80069e0 <__swbuf_r>
 80084de:	6813      	ldr	r3, [r2, #0]
 80084e0:	1c58      	adds	r0, r3, #1
 80084e2:	6010      	str	r0, [r2, #0]
 80084e4:	7019      	strb	r1, [r3, #0]
 80084e6:	4608      	mov	r0, r1
 80084e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <__sfputs_r>:
 80084ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f0:	4606      	mov	r6, r0
 80084f2:	460f      	mov	r7, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	18d5      	adds	r5, r2, r3
 80084f8:	42ac      	cmp	r4, r5
 80084fa:	d101      	bne.n	8008500 <__sfputs_r+0x12>
 80084fc:	2000      	movs	r0, #0
 80084fe:	e007      	b.n	8008510 <__sfputs_r+0x22>
 8008500:	463a      	mov	r2, r7
 8008502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ffda 	bl	80084c0 <__sfputc_r>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d1f3      	bne.n	80084f8 <__sfputs_r+0xa>
 8008510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008514 <_vfiprintf_r>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	460c      	mov	r4, r1
 800851a:	b09d      	sub	sp, #116	; 0x74
 800851c:	4617      	mov	r7, r2
 800851e:	461d      	mov	r5, r3
 8008520:	4606      	mov	r6, r0
 8008522:	b118      	cbz	r0, 800852c <_vfiprintf_r+0x18>
 8008524:	6983      	ldr	r3, [r0, #24]
 8008526:	b90b      	cbnz	r3, 800852c <_vfiprintf_r+0x18>
 8008528:	f7ff f9e2 	bl	80078f0 <__sinit>
 800852c:	4b7c      	ldr	r3, [pc, #496]	; (8008720 <_vfiprintf_r+0x20c>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d158      	bne.n	80085e4 <_vfiprintf_r+0xd0>
 8008532:	6874      	ldr	r4, [r6, #4]
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	0718      	lsls	r0, r3, #28
 8008538:	d55e      	bpl.n	80085f8 <_vfiprintf_r+0xe4>
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d05b      	beq.n	80085f8 <_vfiprintf_r+0xe4>
 8008540:	2300      	movs	r3, #0
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	2320      	movs	r3, #32
 8008546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008550:	9503      	str	r5, [sp, #12]
 8008552:	f04f 0b01 	mov.w	fp, #1
 8008556:	46b8      	mov	r8, r7
 8008558:	4645      	mov	r5, r8
 800855a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800855e:	b10b      	cbz	r3, 8008564 <_vfiprintf_r+0x50>
 8008560:	2b25      	cmp	r3, #37	; 0x25
 8008562:	d154      	bne.n	800860e <_vfiprintf_r+0xfa>
 8008564:	ebb8 0a07 	subs.w	sl, r8, r7
 8008568:	d00b      	beq.n	8008582 <_vfiprintf_r+0x6e>
 800856a:	4653      	mov	r3, sl
 800856c:	463a      	mov	r2, r7
 800856e:	4621      	mov	r1, r4
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ffbc 	bl	80084ee <__sfputs_r>
 8008576:	3001      	adds	r0, #1
 8008578:	f000 80c2 	beq.w	8008700 <_vfiprintf_r+0x1ec>
 800857c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857e:	4453      	add	r3, sl
 8008580:	9309      	str	r3, [sp, #36]	; 0x24
 8008582:	f898 3000 	ldrb.w	r3, [r8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80ba 	beq.w	8008700 <_vfiprintf_r+0x1ec>
 800858c:	2300      	movs	r3, #0
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859e:	931a      	str	r3, [sp, #104]	; 0x68
 80085a0:	46a8      	mov	r8, r5
 80085a2:	2205      	movs	r2, #5
 80085a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80085a8:	485e      	ldr	r0, [pc, #376]	; (8008724 <_vfiprintf_r+0x210>)
 80085aa:	f7f7 fea1 	bl	80002f0 <memchr>
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	bb78      	cbnz	r0, 8008612 <_vfiprintf_r+0xfe>
 80085b2:	06d9      	lsls	r1, r3, #27
 80085b4:	bf44      	itt	mi
 80085b6:	2220      	movmi	r2, #32
 80085b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085bc:	071a      	lsls	r2, r3, #28
 80085be:	bf44      	itt	mi
 80085c0:	222b      	movmi	r2, #43	; 0x2b
 80085c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085c6:	782a      	ldrb	r2, [r5, #0]
 80085c8:	2a2a      	cmp	r2, #42	; 0x2a
 80085ca:	d02a      	beq.n	8008622 <_vfiprintf_r+0x10e>
 80085cc:	9a07      	ldr	r2, [sp, #28]
 80085ce:	46a8      	mov	r8, r5
 80085d0:	2000      	movs	r0, #0
 80085d2:	250a      	movs	r5, #10
 80085d4:	4641      	mov	r1, r8
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	; 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d969      	bls.n	80086b4 <_vfiprintf_r+0x1a0>
 80085e0:	b360      	cbz	r0, 800863c <_vfiprintf_r+0x128>
 80085e2:	e024      	b.n	800862e <_vfiprintf_r+0x11a>
 80085e4:	4b50      	ldr	r3, [pc, #320]	; (8008728 <_vfiprintf_r+0x214>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d101      	bne.n	80085ee <_vfiprintf_r+0xda>
 80085ea:	68b4      	ldr	r4, [r6, #8]
 80085ec:	e7a2      	b.n	8008534 <_vfiprintf_r+0x20>
 80085ee:	4b4f      	ldr	r3, [pc, #316]	; (800872c <_vfiprintf_r+0x218>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	bf08      	it	eq
 80085f4:	68f4      	ldreq	r4, [r6, #12]
 80085f6:	e79d      	b.n	8008534 <_vfiprintf_r+0x20>
 80085f8:	4621      	mov	r1, r4
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7fe fa42 	bl	8006a84 <__swsetup_r>
 8008600:	2800      	cmp	r0, #0
 8008602:	d09d      	beq.n	8008540 <_vfiprintf_r+0x2c>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b01d      	add	sp, #116	; 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	46a8      	mov	r8, r5
 8008610:	e7a2      	b.n	8008558 <_vfiprintf_r+0x44>
 8008612:	4a44      	ldr	r2, [pc, #272]	; (8008724 <_vfiprintf_r+0x210>)
 8008614:	1a80      	subs	r0, r0, r2
 8008616:	fa0b f000 	lsl.w	r0, fp, r0
 800861a:	4318      	orrs	r0, r3
 800861c:	9004      	str	r0, [sp, #16]
 800861e:	4645      	mov	r5, r8
 8008620:	e7be      	b.n	80085a0 <_vfiprintf_r+0x8c>
 8008622:	9a03      	ldr	r2, [sp, #12]
 8008624:	1d11      	adds	r1, r2, #4
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	9103      	str	r1, [sp, #12]
 800862a:	2a00      	cmp	r2, #0
 800862c:	db01      	blt.n	8008632 <_vfiprintf_r+0x11e>
 800862e:	9207      	str	r2, [sp, #28]
 8008630:	e004      	b.n	800863c <_vfiprintf_r+0x128>
 8008632:	4252      	negs	r2, r2
 8008634:	f043 0302 	orr.w	r3, r3, #2
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	f898 3000 	ldrb.w	r3, [r8]
 8008640:	2b2e      	cmp	r3, #46	; 0x2e
 8008642:	d10e      	bne.n	8008662 <_vfiprintf_r+0x14e>
 8008644:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008648:	2b2a      	cmp	r3, #42	; 0x2a
 800864a:	d138      	bne.n	80086be <_vfiprintf_r+0x1aa>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d1a      	adds	r2, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9203      	str	r2, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfb8      	it	lt
 8008658:	f04f 33ff 	movlt.w	r3, #4294967295
 800865c:	f108 0802 	add.w	r8, r8, #2
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	4d33      	ldr	r5, [pc, #204]	; (8008730 <_vfiprintf_r+0x21c>)
 8008664:	f898 1000 	ldrb.w	r1, [r8]
 8008668:	2203      	movs	r2, #3
 800866a:	4628      	mov	r0, r5
 800866c:	f7f7 fe40 	bl	80002f0 <memchr>
 8008670:	b140      	cbz	r0, 8008684 <_vfiprintf_r+0x170>
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	1b40      	subs	r0, r0, r5
 8008676:	fa03 f000 	lsl.w	r0, r3, r0
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	4303      	orrs	r3, r0
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	f898 1000 	ldrb.w	r1, [r8]
 8008688:	482a      	ldr	r0, [pc, #168]	; (8008734 <_vfiprintf_r+0x220>)
 800868a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800868e:	2206      	movs	r2, #6
 8008690:	f108 0701 	add.w	r7, r8, #1
 8008694:	f7f7 fe2c 	bl	80002f0 <memchr>
 8008698:	2800      	cmp	r0, #0
 800869a:	d037      	beq.n	800870c <_vfiprintf_r+0x1f8>
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <_vfiprintf_r+0x224>)
 800869e:	bb1b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x1d4>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3307      	adds	r3, #7
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	3308      	adds	r3, #8
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ae:	444b      	add	r3, r9
 80086b0:	9309      	str	r3, [sp, #36]	; 0x24
 80086b2:	e750      	b.n	8008556 <_vfiprintf_r+0x42>
 80086b4:	fb05 3202 	mla	r2, r5, r2, r3
 80086b8:	2001      	movs	r0, #1
 80086ba:	4688      	mov	r8, r1
 80086bc:	e78a      	b.n	80085d4 <_vfiprintf_r+0xc0>
 80086be:	2300      	movs	r3, #0
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	4619      	mov	r1, r3
 80086c8:	250a      	movs	r5, #10
 80086ca:	4640      	mov	r0, r8
 80086cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d0:	3a30      	subs	r2, #48	; 0x30
 80086d2:	2a09      	cmp	r2, #9
 80086d4:	d903      	bls.n	80086de <_vfiprintf_r+0x1ca>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0c3      	beq.n	8008662 <_vfiprintf_r+0x14e>
 80086da:	9105      	str	r1, [sp, #20]
 80086dc:	e7c1      	b.n	8008662 <_vfiprintf_r+0x14e>
 80086de:	fb05 2101 	mla	r1, r5, r1, r2
 80086e2:	2301      	movs	r3, #1
 80086e4:	4680      	mov	r8, r0
 80086e6:	e7f0      	b.n	80086ca <_vfiprintf_r+0x1b6>
 80086e8:	ab03      	add	r3, sp, #12
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4622      	mov	r2, r4
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <_vfiprintf_r+0x228>)
 80086f0:	a904      	add	r1, sp, #16
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7fd fd24 	bl	8006140 <_printf_float>
 80086f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086fc:	4681      	mov	r9, r0
 80086fe:	d1d5      	bne.n	80086ac <_vfiprintf_r+0x198>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	065b      	lsls	r3, r3, #25
 8008704:	f53f af7e 	bmi.w	8008604 <_vfiprintf_r+0xf0>
 8008708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800870a:	e77d      	b.n	8008608 <_vfiprintf_r+0xf4>
 800870c:	ab03      	add	r3, sp, #12
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4622      	mov	r2, r4
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <_vfiprintf_r+0x228>)
 8008714:	a904      	add	r1, sp, #16
 8008716:	4630      	mov	r0, r6
 8008718:	f7fd ffb4 	bl	8006684 <_printf_i>
 800871c:	e7ec      	b.n	80086f8 <_vfiprintf_r+0x1e4>
 800871e:	bf00      	nop
 8008720:	08008cac 	.word	0x08008cac
 8008724:	08008dec 	.word	0x08008dec
 8008728:	08008ccc 	.word	0x08008ccc
 800872c:	08008c8c 	.word	0x08008c8c
 8008730:	08008df2 	.word	0x08008df2
 8008734:	08008df6 	.word	0x08008df6
 8008738:	08006141 	.word	0x08006141
 800873c:	080084ef 	.word	0x080084ef

08008740 <_sbrk_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4c06      	ldr	r4, [pc, #24]	; (800875c <_sbrk_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4605      	mov	r5, r0
 8008748:	4608      	mov	r0, r1
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	f7f8 ff3c 	bl	80015c8 <_sbrk>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_sbrk_r+0x1a>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	b103      	cbz	r3, 800875a <_sbrk_r+0x1a>
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	200002f4 	.word	0x200002f4

08008760 <__sread>:
 8008760:	b510      	push	{r4, lr}
 8008762:	460c      	mov	r4, r1
 8008764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008768:	f000 f8e8 	bl	800893c <_read_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	bfab      	itete	ge
 8008770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008772:	89a3      	ldrhlt	r3, [r4, #12]
 8008774:	181b      	addge	r3, r3, r0
 8008776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800877a:	bfac      	ite	ge
 800877c:	6563      	strge	r3, [r4, #84]	; 0x54
 800877e:	81a3      	strhlt	r3, [r4, #12]
 8008780:	bd10      	pop	{r4, pc}

08008782 <__swrite>:
 8008782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008786:	461f      	mov	r7, r3
 8008788:	898b      	ldrh	r3, [r1, #12]
 800878a:	05db      	lsls	r3, r3, #23
 800878c:	4605      	mov	r5, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4616      	mov	r6, r2
 8008792:	d505      	bpl.n	80087a0 <__swrite+0x1e>
 8008794:	2302      	movs	r3, #2
 8008796:	2200      	movs	r2, #0
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	f000 f868 	bl	8008870 <_lseek_r>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	4632      	mov	r2, r6
 80087ae:	463b      	mov	r3, r7
 80087b0:	4628      	mov	r0, r5
 80087b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	f000 b817 	b.w	80087e8 <_write_r>

080087ba <__sseek>:
 80087ba:	b510      	push	{r4, lr}
 80087bc:	460c      	mov	r4, r1
 80087be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c2:	f000 f855 	bl	8008870 <_lseek_r>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	bf15      	itete	ne
 80087cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087d6:	81a3      	strheq	r3, [r4, #12]
 80087d8:	bf18      	it	ne
 80087da:	81a3      	strhne	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__sclose>:
 80087de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e2:	f000 b813 	b.w	800880c <_close_r>
	...

080087e8 <_write_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4c07      	ldr	r4, [pc, #28]	; (8008808 <_write_r+0x20>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	6022      	str	r2, [r4, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f8 fe95 	bl	8001526 <_write>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_write_r+0x1e>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	b103      	cbz	r3, 8008806 <_write_r+0x1e>
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	200002f4 	.word	0x200002f4

0800880c <_close_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4c06      	ldr	r4, [pc, #24]	; (8008828 <_close_r+0x1c>)
 8008810:	2300      	movs	r3, #0
 8008812:	4605      	mov	r5, r0
 8008814:	4608      	mov	r0, r1
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	f7f8 fea1 	bl	800155e <_close>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_close_r+0x1a>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	b103      	cbz	r3, 8008826 <_close_r+0x1a>
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	200002f4 	.word	0x200002f4

0800882c <_fstat_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4c07      	ldr	r4, [pc, #28]	; (800884c <_fstat_r+0x20>)
 8008830:	2300      	movs	r3, #0
 8008832:	4605      	mov	r5, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	f7f8 fe9c 	bl	8001576 <_fstat>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d102      	bne.n	8008848 <_fstat_r+0x1c>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	b103      	cbz	r3, 8008848 <_fstat_r+0x1c>
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	200002f4 	.word	0x200002f4

08008850 <_isatty_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4c06      	ldr	r4, [pc, #24]	; (800886c <_isatty_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4605      	mov	r5, r0
 8008858:	4608      	mov	r0, r1
 800885a:	6023      	str	r3, [r4, #0]
 800885c:	f7f8 fe9b 	bl	8001596 <_isatty>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_isatty_r+0x1a>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	b103      	cbz	r3, 800886a <_isatty_r+0x1a>
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	200002f4 	.word	0x200002f4

08008870 <_lseek_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4c07      	ldr	r4, [pc, #28]	; (8008890 <_lseek_r+0x20>)
 8008874:	4605      	mov	r5, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	6022      	str	r2, [r4, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7f8 fe94 	bl	80015ac <_lseek>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_lseek_r+0x1e>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	b103      	cbz	r3, 800888e <_lseek_r+0x1e>
 800888c:	602b      	str	r3, [r5, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	200002f4 	.word	0x200002f4

08008894 <__ascii_mbtowc>:
 8008894:	b082      	sub	sp, #8
 8008896:	b901      	cbnz	r1, 800889a <__ascii_mbtowc+0x6>
 8008898:	a901      	add	r1, sp, #4
 800889a:	b142      	cbz	r2, 80088ae <__ascii_mbtowc+0x1a>
 800889c:	b14b      	cbz	r3, 80088b2 <__ascii_mbtowc+0x1e>
 800889e:	7813      	ldrb	r3, [r2, #0]
 80088a0:	600b      	str	r3, [r1, #0]
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	1c10      	adds	r0, r2, #0
 80088a6:	bf18      	it	ne
 80088a8:	2001      	movne	r0, #1
 80088aa:	b002      	add	sp, #8
 80088ac:	4770      	bx	lr
 80088ae:	4610      	mov	r0, r2
 80088b0:	e7fb      	b.n	80088aa <__ascii_mbtowc+0x16>
 80088b2:	f06f 0001 	mvn.w	r0, #1
 80088b6:	e7f8      	b.n	80088aa <__ascii_mbtowc+0x16>

080088b8 <memmove>:
 80088b8:	4288      	cmp	r0, r1
 80088ba:	b510      	push	{r4, lr}
 80088bc:	eb01 0302 	add.w	r3, r1, r2
 80088c0:	d807      	bhi.n	80088d2 <memmove+0x1a>
 80088c2:	1e42      	subs	r2, r0, #1
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d00a      	beq.n	80088de <memmove+0x26>
 80088c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088d0:	e7f8      	b.n	80088c4 <memmove+0xc>
 80088d2:	4283      	cmp	r3, r0
 80088d4:	d9f5      	bls.n	80088c2 <memmove+0xa>
 80088d6:	1881      	adds	r1, r0, r2
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	42d3      	cmn	r3, r2
 80088dc:	d100      	bne.n	80088e0 <memmove+0x28>
 80088de:	bd10      	pop	{r4, pc}
 80088e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088e8:	e7f7      	b.n	80088da <memmove+0x22>

080088ea <__malloc_lock>:
 80088ea:	4770      	bx	lr

080088ec <__malloc_unlock>:
 80088ec:	4770      	bx	lr

080088ee <_realloc_r>:
 80088ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f0:	4607      	mov	r7, r0
 80088f2:	4614      	mov	r4, r2
 80088f4:	460e      	mov	r6, r1
 80088f6:	b921      	cbnz	r1, 8008902 <_realloc_r+0x14>
 80088f8:	4611      	mov	r1, r2
 80088fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088fe:	f7ff bc33 	b.w	8008168 <_malloc_r>
 8008902:	b922      	cbnz	r2, 800890e <_realloc_r+0x20>
 8008904:	f7ff fbe2 	bl	80080cc <_free_r>
 8008908:	4625      	mov	r5, r4
 800890a:	4628      	mov	r0, r5
 800890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890e:	f000 f834 	bl	800897a <_malloc_usable_size_r>
 8008912:	42a0      	cmp	r0, r4
 8008914:	d20f      	bcs.n	8008936 <_realloc_r+0x48>
 8008916:	4621      	mov	r1, r4
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fc25 	bl	8008168 <_malloc_r>
 800891e:	4605      	mov	r5, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	d0f2      	beq.n	800890a <_realloc_r+0x1c>
 8008924:	4631      	mov	r1, r6
 8008926:	4622      	mov	r2, r4
 8008928:	f7fd fb72 	bl	8006010 <memcpy>
 800892c:	4631      	mov	r1, r6
 800892e:	4638      	mov	r0, r7
 8008930:	f7ff fbcc 	bl	80080cc <_free_r>
 8008934:	e7e9      	b.n	800890a <_realloc_r+0x1c>
 8008936:	4635      	mov	r5, r6
 8008938:	e7e7      	b.n	800890a <_realloc_r+0x1c>
	...

0800893c <_read_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4c07      	ldr	r4, [pc, #28]	; (800895c <_read_r+0x20>)
 8008940:	4605      	mov	r5, r0
 8008942:	4608      	mov	r0, r1
 8008944:	4611      	mov	r1, r2
 8008946:	2200      	movs	r2, #0
 8008948:	6022      	str	r2, [r4, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	f7f8 fdce 	bl	80014ec <_read>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_read_r+0x1e>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	b103      	cbz	r3, 800895a <_read_r+0x1e>
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	200002f4 	.word	0x200002f4

08008960 <__ascii_wctomb>:
 8008960:	b149      	cbz	r1, 8008976 <__ascii_wctomb+0x16>
 8008962:	2aff      	cmp	r2, #255	; 0xff
 8008964:	bf85      	ittet	hi
 8008966:	238a      	movhi	r3, #138	; 0x8a
 8008968:	6003      	strhi	r3, [r0, #0]
 800896a:	700a      	strbls	r2, [r1, #0]
 800896c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008970:	bf98      	it	ls
 8008972:	2001      	movls	r0, #1
 8008974:	4770      	bx	lr
 8008976:	4608      	mov	r0, r1
 8008978:	4770      	bx	lr

0800897a <_malloc_usable_size_r>:
 800897a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897e:	1f18      	subs	r0, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	bfbc      	itt	lt
 8008984:	580b      	ldrlt	r3, [r1, r0]
 8008986:	18c0      	addlt	r0, r0, r3
 8008988:	4770      	bx	lr
	...

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
