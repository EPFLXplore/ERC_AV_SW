
bnoTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08008978  08008978  00018978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ec8  08008ec8  00018ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ecc  08008ecc  00018ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  08008ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  200001ec  080090bc  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f8  080090bc  000202f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b8e4  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002eac  00000000  00000000  0003bafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fa8  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e80  00000000  00000000  0003f958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a24d  00000000  00000000  000407d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e719  00000000  00000000  0007aa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00179174  00000000  00000000  0008913e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002022b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004eb0  00000000  00000000  00202330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001ec 	.word	0x200001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800895c 	.word	0x0800895c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001f0 	.word	0x200001f0
 80002dc:	0800895c 	.word	0x0800895c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <bno055_setPage>:
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 f9f4 	bl	8000bc0 <bno055_writeData>
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <bno055_setOperationMode>:
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4619      	mov	r1, r3
 80007ee:	203d      	movs	r0, #61	; 0x3d
 80007f0:	f000 f9e6 	bl	8000bc0 <bno055_writeData>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <bno055_setOperationMode+0x22>
 80007fa:	2013      	movs	r0, #19
 80007fc:	f000 f9d4 	bl	8000ba8 <bno055_delay>
 8000800:	e002      	b.n	8000808 <bno055_setOperationMode+0x28>
 8000802:	2007      	movs	r0, #7
 8000804:	f000 f9d0 	bl	8000ba8 <bno055_delay>
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <bno055_setOperationModeConfig>:
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffe3 	bl	80007e0 <bno055_setOperationMode>
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}

0800081e <bno055_setOperationModeNDOF>:
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
 8000822:	200c      	movs	r0, #12
 8000824:	f7ff ffdc 	bl	80007e0 <bno055_setOperationMode>
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <bno055_reset>:
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
 8000830:	2120      	movs	r1, #32
 8000832:	203f      	movs	r0, #63	; 0x3f
 8000834:	f000 f9c4 	bl	8000bc0 <bno055_writeData>
 8000838:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800083c:	f000 f9b4 	bl	8000ba8 <bno055_delay>
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <bno055_setup>:
 8000844:	b580      	push	{r7, lr}
 8000846:	b0c4      	sub	sp, #272	; 0x110
 8000848:	af00      	add	r7, sp, #0
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	f7ff ffed 	bl	800082c <bno055_reset>
 8000852:	2300      	movs	r3, #0
 8000854:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8000858:	f207 130d 	addw	r3, r7, #269	; 0x10d
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fa99 	bl	8000d98 <bno055_readData>
 8000866:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800086a:	2ba0      	cmp	r3, #160	; 0xa0
 800086c:	d015      	beq.n	800089a <bno055_setup+0x56>
 800086e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8000872:	461a      	mov	r2, r3
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4910      	ldr	r1, [pc, #64]	; (80008bc <bno055_setup+0x78>)
 800087a:	4618      	mov	r0, r3
 800087c:	f006 f878 	bl	8006970 <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000886:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800088a:	f107 010c 	add.w	r1, r7, #12
 800088e:	1d38      	adds	r0, r7, #4
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	6800      	ldr	r0, [r0, #0]
 8000896:	f004 faa9 	bl	8004dec <HAL_UART_Transmit>
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff92 	bl	80007c4 <bno055_setPage>
 80008a0:	2100      	movs	r1, #0
 80008a2:	203f      	movs	r0, #63	; 0x3f
 80008a4:	f000 f98c 	bl	8000bc0 <bno055_writeData>
 80008a8:	f7ff ffb2 	bl	8000810 <bno055_setOperationModeConfig>
 80008ac:	200a      	movs	r0, #10
 80008ae:	f000 f97b 	bl	8000ba8 <bno055_delay>
 80008b2:	bf00      	nop
 80008b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08008978 	.word	0x08008978

080008c0 <bno055_getVector>:
 80008c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008c4:	b09f      	sub	sp, #124	; 0x7c
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff78 	bl	80007c4 <bno055_setPage>
 80008d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008d8:	2b20      	cmp	r3, #32
 80008da:	d108      	bne.n	80008ee <bno055_getVector+0x2e>
 80008dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e4:	2208      	movs	r2, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa56 	bl	8000d98 <bno055_readData>
 80008ec:	e007      	b.n	80008fe <bno055_getVector+0x3e>
 80008ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80008f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f6:	2206      	movs	r2, #6
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fa4d 	bl	8000d98 <bno055_readData>
 80008fe:	f04f 0300 	mov.w	r3, #0
 8000902:	4c81      	ldr	r4, [pc, #516]	; (8000b08 <bno055_getVector+0x248>)
 8000904:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800090c:	2b0e      	cmp	r3, #14
 800090e:	d108      	bne.n	8000922 <bno055_getVector+0x62>
 8000910:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <bno055_getVector+0x24c>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800091c:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000920:	e03a      	b.n	8000998 <bno055_getVector+0xd8>
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	2b08      	cmp	r3, #8
 8000928:	d007      	beq.n	800093a <bno055_getVector+0x7a>
 800092a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800092e:	2b28      	cmp	r3, #40	; 0x28
 8000930:	d003      	beq.n	800093a <bno055_getVector+0x7a>
 8000932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000936:	2b2e      	cmp	r3, #46	; 0x2e
 8000938:	d108      	bne.n	800094c <bno055_getVector+0x8c>
 800093a:	4b75      	ldr	r3, [pc, #468]	; (8000b10 <bno055_getVector+0x250>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000946:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800094a:	e025      	b.n	8000998 <bno055_getVector+0xd8>
 800094c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000950:	2b14      	cmp	r3, #20
 8000952:	d108      	bne.n	8000966 <bno055_getVector+0xa6>
 8000954:	4b6f      	ldr	r3, [pc, #444]	; (8000b14 <bno055_getVector+0x254>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000960:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000964:	e018      	b.n	8000998 <bno055_getVector+0xd8>
 8000966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800096a:	2b1a      	cmp	r3, #26
 800096c:	d108      	bne.n	8000980 <bno055_getVector+0xc0>
 800096e:	4b6a      	ldr	r3, [pc, #424]	; (8000b18 <bno055_getVector+0x258>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800097a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800097e:	e00b      	b.n	8000998 <bno055_getVector+0xd8>
 8000980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000984:	2b20      	cmp	r3, #32
 8000986:	d107      	bne.n	8000998 <bno055_getVector+0xd8>
 8000988:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <bno055_getVector+0x25c>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000994:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	2220      	movs	r2, #32
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 fb26 	bl	8005ff2 <memset>
 80009a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d14c      	bne.n	8000a48 <bno055_getVector+0x188>
 80009ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21b      	sxth	r3, r3
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80009c8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80009cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80009d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 80009d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b21a      	sxth	r2, r3
 80009dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	ee07 3a90 	vmov	s15, r3
 80009ea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80009ee:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80009f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80009f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 80009fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a14:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a1c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a3a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a42:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000a46:	e038      	b.n	8000aba <bno055_getVector+0x1fa>
 8000a48:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a62:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a66:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a6a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 8000a6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000a88:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000a8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a90:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000a94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000aae:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8000ab2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ab6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8000aba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000abe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ace:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000ad2:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000ad6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8000ada:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8000ade:	ec49 8b14 	vmov	d4, r8, r9
 8000ae2:	ec46 5b15 	vmov	d5, r5, r6
 8000ae6:	ec42 1b16 	vmov	d6, r1, r2
 8000aea:	ec44 3b17 	vmov	d7, r3, r4
 8000aee:	eeb0 0b44 	vmov.f64	d0, d4
 8000af2:	eeb0 1b45 	vmov.f64	d1, d5
 8000af6:	eeb0 2b46 	vmov.f64	d2, d6
 8000afa:	eeb0 3b47 	vmov.f64	d3, d7
 8000afe:	377c      	adds	r7, #124	; 0x7c
 8000b00:	46bd      	mov	sp, r7
 8000b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b06:	bf00      	nop
 8000b08:	3ff00000 	.word	0x3ff00000
 8000b0c:	2000000e 	.word	0x2000000e
 8000b10:	20000008 	.word	0x20000008
 8000b14:	2000000a 	.word	0x2000000a
 8000b18:	2000000c 	.word	0x2000000c
 8000b1c:	20000010 	.word	0x20000010

08000b20 <bno055_getVectorQuaternion>:
 8000b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b24:	b091      	sub	sp, #68	; 0x44
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f7ff fec9 	bl	80008c0 <bno055_getVector>
 8000b2e:	eeb0 4b40 	vmov.f64	d4, d0
 8000b32:	eeb0 5b41 	vmov.f64	d5, d1
 8000b36:	eeb0 6b42 	vmov.f64	d6, d2
 8000b3a:	eeb0 7b43 	vmov.f64	d7, d3
 8000b3e:	ed87 4b08 	vstr	d4, [r7, #32]
 8000b42:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000b46:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000b4a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000b4e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000b52:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000b56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000b5a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000b5e:	ec49 8b14 	vmov	d4, r8, r9
 8000b62:	ec46 5b15 	vmov	d5, r5, r6
 8000b66:	ec42 1b16 	vmov	d6, r1, r2
 8000b6a:	ec44 3b17 	vmov	d7, r3, r4
 8000b6e:	eeb0 0b44 	vmov.f64	d0, d4
 8000b72:	eeb0 1b45 	vmov.f64	d1, d5
 8000b76:	eeb0 2b46 	vmov.f64	d2, d6
 8000b7a:	eeb0 3b47 	vmov.f64	d3, d7
 8000b7e:	3744      	adds	r7, #68	; 0x44
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000b88 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <bno055_assignI2C+0x1c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200002ec 	.word	0x200002ec

08000ba8 <bno055_delay>:

void bno055_delay(int time) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fde0 	bl	8001778 <HAL_Delay>
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	733b      	strb	r3, [r7, #12]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <bno055_writeData+0x184>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	230a      	movs	r3, #10
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2302      	movs	r3, #2
 8000be6:	2150      	movs	r1, #80	; 0x50
 8000be8:	f001 f946 	bl	8001e78 <HAL_I2C_Master_Transmit>
 8000bec:	4603      	mov	r3, r0
 8000bee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80a0 	beq.w	8000d38 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d103      	bne.n	8000c06 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000bfe:	4852      	ldr	r0, [pc, #328]	; (8000d48 <bno055_writeData+0x188>)
 8000c00:	f005 feae 	bl	8006960 <puts>
 8000c04:	e012      	b.n	8000c2c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d103      	bne.n	8000c14 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000c0c:	484f      	ldr	r0, [pc, #316]	; (8000d4c <bno055_writeData+0x18c>)
 8000c0e:	f005 fea7 	bl	8006960 <puts>
 8000c12:	e00b      	b.n	8000c2c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000c1a:	484d      	ldr	r0, [pc, #308]	; (8000d50 <bno055_writeData+0x190>)
 8000c1c:	f005 fea0 	bl	8006960 <puts>
 8000c20:	e004      	b.n	8000c2c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	4619      	mov	r1, r3
 8000c26:	484b      	ldr	r0, [pc, #300]	; (8000d54 <bno055_writeData+0x194>)
 8000c28:	f005 fe26 	bl	8006878 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <bno055_writeData+0x184>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fb19 	bl	8002268 <HAL_I2C_GetError>
 8000c36:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d07e      	beq.n	8000d3c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d103      	bne.n	8000c4c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000c44:	4844      	ldr	r0, [pc, #272]	; (8000d58 <bno055_writeData+0x198>)
 8000c46:	f005 fe8b 	bl	8006960 <puts>
 8000c4a:	e021      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d103      	bne.n	8000c5a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000c52:	4842      	ldr	r0, [pc, #264]	; (8000d5c <bno055_writeData+0x19c>)
 8000c54:	f005 fe84 	bl	8006960 <puts>
 8000c58:	e01a      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d103      	bne.n	8000c68 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000c60:	483f      	ldr	r0, [pc, #252]	; (8000d60 <bno055_writeData+0x1a0>)
 8000c62:	f005 fe7d 	bl	8006960 <puts>
 8000c66:	e013      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d103      	bne.n	8000c76 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000c6e:	483d      	ldr	r0, [pc, #244]	; (8000d64 <bno055_writeData+0x1a4>)
 8000c70:	f005 fe76 	bl	8006960 <puts>
 8000c74:	e00c      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b10      	cmp	r3, #16
 8000c7a:	d103      	bne.n	8000c84 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <bno055_writeData+0x1a8>)
 8000c7e:	f005 fe6f 	bl	8006960 <puts>
 8000c82:	e005      	b.n	8000c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b20      	cmp	r3, #32
 8000c88:	d102      	bne.n	8000c90 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000c8a:	4838      	ldr	r0, [pc, #224]	; (8000d6c <bno055_writeData+0x1ac>)
 8000c8c:	f005 fe68 	bl	8006960 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <bno055_writeData+0x184>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fad9 	bl	800224c <HAL_I2C_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d103      	bne.n	8000cac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <bno055_writeData+0x1b0>)
 8000ca6:	f005 fe5b 	bl	8006960 <puts>
 8000caa:	e048      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d103      	bne.n	8000cba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000cb2:	482f      	ldr	r0, [pc, #188]	; (8000d70 <bno055_writeData+0x1b0>)
 8000cb4:	f005 fe54 	bl	8006960 <puts>
 8000cb8:	e041      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2b24      	cmp	r3, #36	; 0x24
 8000cbe:	d103      	bne.n	8000cc8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000cc0:	482c      	ldr	r0, [pc, #176]	; (8000d74 <bno055_writeData+0x1b4>)
 8000cc2:	f005 fe4d 	bl	8006960 <puts>
 8000cc6:	e03a      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b21      	cmp	r3, #33	; 0x21
 8000ccc:	d103      	bne.n	8000cd6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000cce:	482a      	ldr	r0, [pc, #168]	; (8000d78 <bno055_writeData+0x1b8>)
 8000cd0:	f005 fe46 	bl	8006960 <puts>
 8000cd4:	e033      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b22      	cmp	r3, #34	; 0x22
 8000cda:	d103      	bne.n	8000ce4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000cdc:	4827      	ldr	r0, [pc, #156]	; (8000d7c <bno055_writeData+0x1bc>)
 8000cde:	f005 fe3f 	bl	8006960 <puts>
 8000ce2:	e02c      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b28      	cmp	r3, #40	; 0x28
 8000ce8:	d103      	bne.n	8000cf2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <bno055_writeData+0x1c0>)
 8000cec:	f005 fe38 	bl	8006960 <puts>
 8000cf0:	e025      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b29      	cmp	r3, #41	; 0x29
 8000cf6:	d103      	bne.n	8000d00 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000cf8:	4822      	ldr	r0, [pc, #136]	; (8000d84 <bno055_writeData+0x1c4>)
 8000cfa:	f005 fe31 	bl	8006960 <puts>
 8000cfe:	e01e      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b2a      	cmp	r3, #42	; 0x2a
 8000d04:	d103      	bne.n	8000d0e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <bno055_writeData+0x1c8>)
 8000d08:	f005 fe2a 	bl	8006960 <puts>
 8000d0c:	e017      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b60      	cmp	r3, #96	; 0x60
 8000d12:	d103      	bne.n	8000d1c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000d14:	481d      	ldr	r0, [pc, #116]	; (8000d8c <bno055_writeData+0x1cc>)
 8000d16:	f005 fe23 	bl	8006960 <puts>
 8000d1a:	e010      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8000d20:	d103      	bne.n	8000d2a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000d22:	481b      	ldr	r0, [pc, #108]	; (8000d90 <bno055_writeData+0x1d0>)
 8000d24:	f005 fe1c 	bl	8006960 <puts>
 8000d28:	e009      	b.n	8000d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2be0      	cmp	r3, #224	; 0xe0
 8000d2e:	d106      	bne.n	8000d3e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <bno055_writeData+0x1d4>)
 8000d32:	f005 fe15 	bl	8006960 <puts>
 8000d36:	e002      	b.n	8000d3e <bno055_writeData+0x17e>
    return;
 8000d38:	bf00      	nop
 8000d3a:	e000      	b.n	8000d3e <bno055_writeData+0x17e>
    return;
 8000d3c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200002ec 	.word	0x200002ec
 8000d48:	080089b4 	.word	0x080089b4
 8000d4c:	080089d8 	.word	0x080089d8
 8000d50:	08008a00 	.word	0x08008a00
 8000d54:	08008a24 	.word	0x08008a24
 8000d58:	08008a3c 	.word	0x08008a3c
 8000d5c:	08008a50 	.word	0x08008a50
 8000d60:	08008a64 	.word	0x08008a64
 8000d64:	08008a78 	.word	0x08008a78
 8000d68:	08008a8c 	.word	0x08008a8c
 8000d6c:	08008aa0 	.word	0x08008aa0
 8000d70:	08008ab8 	.word	0x08008ab8
 8000d74:	08008ad0 	.word	0x08008ad0
 8000d78:	08008ae4 	.word	0x08008ae4
 8000d7c:	08008afc 	.word	0x08008afc
 8000d80:	08008b14 	.word	0x08008b14
 8000d84:	08008b2c 	.word	0x08008b2c
 8000d88:	08008b4c 	.word	0x08008b4c
 8000d8c:	08008b6c 	.word	0x08008b6c
 8000d90:	08008b84 	.word	0x08008b84
 8000d94:	08008b9c 	.word	0x08008b9c

08000d98 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <bno055_readData+0x40>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	1dfa      	adds	r2, r7, #7
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2150      	movs	r1, #80	; 0x50
 8000db6:	f001 f85f 	bl	8001e78 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <bno055_readData+0x40>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	2150      	movs	r1, #80	; 0x50
 8000dcc:	f001 f948 	bl	8002060 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002ec 	.word	0x200002ec

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b0cc      	sub	sp, #304	; 0x130
 8000de0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000dea:	bf00      	nop
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <main+0x128>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <main+0x2a>
 8000df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dcf2      	bgt.n	8000dec <main+0x10>
  if ( timeout < 0 )
 8000e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da01      	bge.n	8000e12 <main+0x36>
  {
  Error_Handler();
 8000e0e:	f000 fa6f 	bl	80012f0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fc1f 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f87d 	bl	8000f14 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <main+0x128>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a38      	ldr	r2, [pc, #224]	; (8000f04 <main+0x128>)
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <main+0x128>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 ff5b 	bl	8001cfc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 ff71 	bl	8001d30 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e56:	bf00      	nop
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <main+0x128>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <main+0x96>
 8000e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dcf2      	bgt.n	8000e58 <main+0x7c>
if ( timeout < 0 )
 8000e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da01      	bge.n	8000e7e <main+0xa2>
{
Error_Handler();
 8000e7a:	f000 fa39 	bl	80012f0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 f971 	bl	8001164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e82:	f000 f8e3 	bl	800104c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e86:	f000 f921 	bl	80010cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <main+0x12c>)
 8000e8c:	f7ff fe7c 	bl	8000b88 <bno055_assignI2C>
  bno055_setup();
 8000e90:	f7ff fcd8 	bl	8000844 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000e94:	f7ff fcc3 	bl	800081e <bno055_setOperationModeNDOF>
  uint16_t size;
  char data[256];
  size = sprintf(data,"Roll,Pitch,Yaw\r\n");
 8000e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <main+0x130>)
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	4615      	mov	r5, r2
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	7023      	strb	r3, [r4, #0]
 8000eaa:	2310      	movs	r3, #16
 8000eac:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
  HAL_UART_Transmit(&huart3, data, size, 1000);
 8000eb0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8000eb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <main+0x134>)
 8000ebe:	f003 ff95 	bl	8004dec <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, data, size, 1000);
 8000ec2:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8000ec6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <main+0x134>)
 8000ed0:	f003 ff8c 	bl	8004dec <HAL_UART_Transmit>
	  bno055_vector_t v = bno055_getVectorQuaternion();
 8000ed4:	f7ff fe24 	bl	8000b20 <bno055_getVectorQuaternion>
 8000ed8:	eeb0 4b40 	vmov.f64	d4, d0
 8000edc:	eeb0 5b41 	vmov.f64	d5, d1
 8000ee0:	eeb0 6b42 	vmov.f64	d6, d2
 8000ee4:	eeb0 7b43 	vmov.f64	d7, d3
 8000ee8:	463b      	mov	r3, r7
 8000eea:	ed83 4b00 	vstr	d4, [r3]
 8000eee:	ed83 5b02 	vstr	d5, [r3, #8]
 8000ef2:	ed83 6b04 	vstr	d6, [r3, #16]
 8000ef6:	ed83 7b06 	vstr	d7, [r3, #24]
	  //printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	  HAL_Delay(100);
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f000 fc3c 	bl	8001778 <HAL_Delay>
  {
 8000f00:	e7df      	b.n	8000ec2 <main+0xe6>
 8000f02:	bf00      	nop
 8000f04:	58024400 	.word	0x58024400
 8000f08:	200002a0 	.word	0x200002a0
 8000f0c:	08008bb4 	.word	0x08008bb4
 8000f10:	20000214 	.word	0x20000214

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0cc      	sub	sp, #304	; 0x130
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f1e:	224c      	movs	r2, #76	; 0x4c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 f865 	bl	8005ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 f85e 	bl	8005ff2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	23bc      	movs	r3, #188	; 0xbc
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	f005 f856 	bl	8005ff2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f46:	2004      	movs	r0, #4
 8000f48:	f001 fc12 	bl	8002770 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <SystemClock_Config+0x130>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <SystemClock_Config+0x130>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <SystemClock_Config+0x130>)
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <SystemClock_Config+0x134>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f72:	4a35      	ldr	r2, [pc, #212]	; (8001048 <SystemClock_Config+0x134>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <SystemClock_Config+0x134>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8a:	bf00      	nop
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <SystemClock_Config+0x134>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f98:	d1f8      	bne.n	8000f8c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2340      	movs	r3, #64	; 0x40
 8000fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fc34 	bl	8002824 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000fc2:	f000 f995 	bl	80012f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	233f      	movs	r3, #63	; 0x3f
 8000fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 f821 	bl	8003044 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001008:	f000 f972 	bl	80012f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	220a      	movs	r2, #10
 8001012:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fb8e 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8001036:	f000 f95b 	bl	80012f0 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58000400 	.word	0x58000400
 8001048:	58024800 	.word	0x58024800

0800104c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_I2C1_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <MX_I2C1_Init+0x7c>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001088:	f000 fe66 	bl	8001d58 <HAL_I2C_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001092:	f000 f92d 	bl	80012f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x74>)
 800109a:	f001 fad1 	bl	8002640 <HAL_I2CEx_ConfigAnalogFilter>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f000 f924 	bl	80012f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_I2C1_Init+0x74>)
 80010ac:	f001 fb13 	bl	80026d6 <HAL_I2CEx_ConfigDigitalFilter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 f91b 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200002a0 	.word	0x200002a0
 80010c4:	40005400 	.word	0x40005400
 80010c8:	10707dbc 	.word	0x10707dbc

080010cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <MX_USART3_UART_Init+0x94>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_USART3_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_USART3_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_USART3_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_USART3_UART_Init+0x90>)
 8001116:	f003 fe19 	bl	8004d4c <HAL_UART_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 f8e6 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_USART3_UART_Init+0x90>)
 8001128:	f004 fe49 	bl	8005dbe <HAL_UARTEx_SetTxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001132:	f000 f8dd 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_USART3_UART_Init+0x90>)
 800113a:	f004 fe7e 	bl	8005e3a <HAL_UARTEx_SetRxFifoThreshold>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 f8d4 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_USART3_UART_Init+0x90>)
 800114a:	f004 fdff 	bl	8005d4c <HAL_UARTEx_DisableFifoMode>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f8cc 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000214 	.word	0x20000214
 8001160:	40004800 	.word	0x40004800

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b58      	ldr	r3, [pc, #352]	; (80012dc <MX_GPIO_Init+0x178>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a56      	ldr	r2, [pc, #344]	; (80012dc <MX_GPIO_Init+0x178>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <MX_GPIO_Init+0x178>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <MX_GPIO_Init+0x178>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <MX_GPIO_Init+0x178>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <MX_GPIO_Init+0x178>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <MX_GPIO_Init+0x178>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <MX_GPIO_Init+0x178>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <MX_GPIO_Init+0x178>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <MX_GPIO_Init+0x178>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a40      	ldr	r2, [pc, #256]	; (80012dc <MX_GPIO_Init+0x178>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <MX_GPIO_Init+0x178>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <MX_GPIO_Init+0x178>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a38      	ldr	r2, [pc, #224]	; (80012dc <MX_GPIO_Init+0x178>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <MX_GPIO_Init+0x178>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <MX_GPIO_Init+0x178>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a31      	ldr	r2, [pc, #196]	; (80012dc <MX_GPIO_Init+0x178>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MX_GPIO_Init+0x178>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800122e:	2332      	movs	r3, #50	; 0x32
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123e:	230b      	movs	r3, #11
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	; (80012e0 <MX_GPIO_Init+0x17c>)
 800124a:	f000 fba7 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800124e:	2386      	movs	r3, #134	; 0x86
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125e:	230b      	movs	r3, #11
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	; (80012e4 <MX_GPIO_Init+0x180>)
 800126a:	f000 fb97 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001280:	230b      	movs	r3, #11
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_GPIO_Init+0x184>)
 800128c:	f000 fb86 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001290:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012a2:	230a      	movs	r3, #10
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_GPIO_Init+0x180>)
 80012ae:	f000 fb75 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80012b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c4:	230b      	movs	r3, #11
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <MX_GPIO_Init+0x188>)
 80012d0:	f000 fb64 	bl	800199c <HAL_GPIO_Init>

}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020800 	.word	0x58020800
 80012e4:	58020000 	.word	0x58020000
 80012e8:	58020400 	.word	0x58020400
 80012ec:	58021800 	.word	0x58021800

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_MspInit>:
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x30>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x30>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x30>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_I2C_MspInit>:
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_I2C_MspInit+0x88>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12d      	bne.n	80013b2 <HAL_I2C_MspInit+0x7e>
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	23c0      	movs	r3, #192	; 0xc0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	2312      	movs	r3, #18
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	2304      	movs	r3, #4
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <HAL_I2C_MspInit+0x90>)
 8001390:	f000 fb04 	bl	800199c <HAL_GPIO_Init>
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 8001396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 800139c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 80013a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40005400 	.word	0x40005400
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58020400 	.word	0x58020400

080013c8 <HAL_UART_MspInit>:
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_UART_MspInit+0x88>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12e      	bne.n	8001448 <HAL_UART_MspInit+0x80>
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_UART_MspInit+0x8c>)
 80013ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_UART_MspInit+0x8c>)
 80013f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_UART_MspInit+0x8c>)
 80013fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_UART_MspInit+0x8c>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_UART_MspInit+0x8c>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_UART_MspInit+0x8c>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	2307      	movs	r3, #7
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_UART_MspInit+0x90>)
 8001444:	f000 faaa 	bl	800199c <HAL_GPIO_Init>
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40004800 	.word	0x40004800
 8001454:	58024400 	.word	0x58024400
 8001458:	58020c00 	.word	0x58020c00

0800145c <NMI_Handler>:
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HardFault_Handler>:
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	f000 f942 	bl	8001738 <HAL_IncTick>
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_read>:
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e00a      	b.n	80014e0 <_read+0x28>
 80014ca:	f3af 8000 	nop.w
 80014ce:	4601      	mov	r1, r0
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	b2ca      	uxtb	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf0      	blt.n	80014ca <_read+0x12>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_write>:
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e009      	b.n	8001518 <_write+0x26>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f3af 8000 	nop.w
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf1      	blt.n	8001504 <_write+0x12>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_close>:
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_fstat>:
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	2300      	movs	r3, #0
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_isatty>:
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	2301      	movs	r3, #1
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_lseek>:
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	2300      	movs	r3, #0
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <_sbrk>:
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
 80015c4:	f004 fce0 	bl	8005f88 <__errno>
 80015c8:	4602      	mov	r2, r0
 80015ca:	230c      	movs	r3, #12
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20020000 	.word	0x20020000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	20000208 	.word	0x20000208
 80015fc:	200002f8 	.word	0x200002f8

08001600 <Reset_Handler>:
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0x10>
 8001604:	f7ff f844 	bl	8000690 <SystemInit>
 8001608:	2100      	movs	r1, #0
 800160a:	e003      	b.n	8001614 <LoopCopyDataInit>

0800160c <CopyDataInit>:
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <LoopFillZerobss+0x14>)
 800160e:	585b      	ldr	r3, [r3, r1]
 8001610:	5043      	str	r3, [r0, r1]
 8001612:	3104      	adds	r1, #4

08001614 <LoopCopyDataInit>:
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <LoopFillZerobss+0x18>)
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <LoopFillZerobss+0x1c>)
 8001618:	1842      	adds	r2, r0, r1
 800161a:	429a      	cmp	r2, r3
 800161c:	d3f6      	bcc.n	800160c <CopyDataInit>
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <LoopFillZerobss+0x20>)
 8001620:	e002      	b.n	8001628 <LoopFillZerobss>

08001622 <FillZerobss>:
 8001622:	2300      	movs	r3, #0
 8001624:	f842 3b04 	str.w	r3, [r2], #4

08001628 <LoopFillZerobss>:
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <LoopFillZerobss+0x24>)
 800162a:	429a      	cmp	r2, r3
 800162c:	d3f9      	bcc.n	8001622 <FillZerobss>
 800162e:	f004 fcb1 	bl	8005f94 <__libc_init_array>
 8001632:	f7ff fbd3 	bl	8000ddc <main>
 8001636:	4770      	bx	lr
 8001638:	20020000 	.word	0x20020000
 800163c:	08008ed0 	.word	0x08008ed0
 8001640:	20000000 	.word	0x20000000
 8001644:	200001ec 	.word	0x200001ec
 8001648:	200001ec 	.word	0x200001ec
 800164c:	200002f8 	.word	0x200002f8

08001650 <ADC3_IRQHandler>:
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f96c 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001660:	f001 fea6 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8001664:	4601      	mov	r1, r0
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_Init+0x6c>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa21 f303 	lsr.w	r3, r1, r3
 800167c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_Init+0x6c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x70>)
 8001696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f814 	bl	80016cc <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e002      	b.n	80016b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ae:	f7ff fe27 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	08008bd8 	.word	0x08008bd8
 80016c4:	20000004 	.word	0x20000004
 80016c8:	20000000 	.word	0x20000000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_InitTick+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e021      	b.n	8001724 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_InitTick+0x64>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_InitTick+0x60>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f943 	bl	8001982 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f91b 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x68>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000018 	.word	0x20000018
 8001730:	20000000 	.word	0x20000000
 8001734:	20000014 	.word	0x20000014

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000018 	.word	0x20000018
 800175c:	200002f0 	.word	0x200002f0

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200002f0 	.word	0x200002f0

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffee 	bl	8001760 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_Delay+0x40>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffde 	bl	8001760 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000018 	.word	0x20000018

080017bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetREVID+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0c1b      	lsrs	r3, r3, #16
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	5c001000 	.word	0x5c001000

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	05fa0000 	.word	0x05fa0000

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff47 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff5e 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff90 	bl	800188c <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5f 	bl	8001838 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffb2 	bl	80018f4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_GPIO_Init+0x234>)
 80019ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ae:	e194      	b.n	8001cda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8186 	beq.w	8001cd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d00b      	beq.n	80019e8 <HAL_GPIO_Init+0x4c>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019dc:	2b11      	cmp	r3, #17
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0xee>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d123      	bne.n	8001ad2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	69b9      	ldr	r1, [r7, #24]
 8001ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0203 	and.w	r2, r3, #3
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80e0 	beq.w	8001cd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_GPIO_Init+0x238>)
 8001b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b1a:	4a2e      	ldr	r2, [pc, #184]	; (8001bd4 <HAL_GPIO_Init+0x238>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_GPIO_Init+0x238>)
 8001b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x23c>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a20      	ldr	r2, [pc, #128]	; (8001bdc <HAL_GPIO_Init+0x240>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d052      	beq.n	8001c04 <HAL_GPIO_Init+0x268>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x244>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d031      	beq.n	8001bca <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_GPIO_Init+0x248>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02b      	beq.n	8001bc6 <HAL_GPIO_Init+0x22a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_GPIO_Init+0x24c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d025      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_GPIO_Init+0x250>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_GPIO_Init+0x254>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_GPIO_Init+0x258>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_GPIO_Init+0x25c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_GPIO_Init+0x260>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_GPIO_Init+0x264>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x20e>
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	e02d      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001baa:	230a      	movs	r3, #10
 8001bac:	e02b      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bae:	2308      	movs	r3, #8
 8001bb0:	e029      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e027      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e025      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e023      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e021      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e01f      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e01d      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e01b      	b.n	8001c06 <HAL_GPIO_Init+0x26a>
 8001bce:	bf00      	nop
 8001bd0:	58000080 	.word	0x58000080
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	58000400 	.word	0x58000400
 8001bdc:	58020000 	.word	0x58020000
 8001be0:	58020400 	.word	0x58020400
 8001be4:	58020800 	.word	0x58020800
 8001be8:	58020c00 	.word	0x58020c00
 8001bec:	58021000 	.word	0x58021000
 8001bf0:	58021400 	.word	0x58021400
 8001bf4:	58021800 	.word	0x58021800
 8001bf8:	58021c00 	.word	0x58021c00
 8001bfc:	58022000 	.word	0x58022000
 8001c00:	58022400 	.word	0x58022400
 8001c04:	2300      	movs	r3, #0
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c16:	4938      	ldr	r1, [pc, #224]	; (8001cf8 <HAL_GPIO_Init+0x35c>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f47f ae63 	bne.w	80019b0 <HAL_GPIO_Init+0x14>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	58000400 	.word	0x58000400

08001cfc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_HSEM_FastTake+0x2c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_HSEM_FastTake+0x30>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	58026400 	.word	0x58026400
 8001d2c:	80000300 	.word	0x80000300

08001d30 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d3a:	4906      	ldr	r1, [pc, #24]	; (8001d54 <HAL_HSEM_Release+0x24>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	58026400 	.word	0x58026400

08001d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e07f      	b.n	8001e6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fad8 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	e006      	b.n	8001de0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d104      	bne.n	8001df2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_I2C_Init+0x11c>)
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	ea42 0103 	orr.w	r1, r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	021a      	lsls	r2, r3, #8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69d9      	ldr	r1, [r3, #28]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	02008000 	.word	0x02008000

08001e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	f040 80da 	bne.w	800204e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Transmit+0x30>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0d3      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fc56 	bl	8001760 <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2319      	movs	r3, #25
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa00 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0be      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2210      	movs	r2, #16
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	893a      	ldrh	r2, [r7, #8]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d90e      	bls.n	8001f22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fb62 	bl	80025e4 <I2C_TransferConfig>
 8001f20:	e06c      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fb51 	bl	80025e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f42:	e05b      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f9fd 	bl	8002348 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e07b      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f98f 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04d      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb05 	bl	80025e4 <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 faf4 	bl	80025e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d19e      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f9dc 	bl	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01a      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_I2C_Master_Transmit+0x1e4>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	80002000 	.word	0x80002000
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	f040 80db 	bne.w	8002238 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x30>
 800208c:	2302      	movs	r3, #2
 800208e:	e0d4      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002098:	f7ff fb62 	bl	8001760 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2319      	movs	r3, #25
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f90c 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0bf      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2222      	movs	r2, #34	; 0x22
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2210      	movs	r2, #16
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2bff      	cmp	r3, #255	; 0xff
 80020ea:	d90e      	bls.n	800210a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_I2C_Master_Receive+0x1e4>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa6e 	bl	80025e4 <I2C_TransferConfig>
 8002108:	e06d      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_I2C_Master_Receive+0x1e4>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa5d 	bl	80025e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800212a:	e05c      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f985 	bl	8002440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07c      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d034      	beq.n	80021e6 <HAL_I2C_Master_Receive+0x186>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d130      	bne.n	80021e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2200      	movs	r2, #0
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f89a 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e04d      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	d90e      	bls.n	80021c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa10 	bl	80025e4 <I2C_TransferConfig>
 80021c4:	e00f      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	2300      	movs	r3, #0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f9ff 	bl	80025e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d19d      	bne.n	800212c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6a39      	ldr	r1, [r7, #32]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f8e7 	bl	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e01a      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2220      	movs	r2, #32
 800220a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_I2C_Master_Receive+0x1e8>)
 8002218:	400b      	ands	r3, r1
 800221a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	80002400 	.word	0x80002400
 8002248:	fe00e800 	.word	0xfe00e800

0800224c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225a:	b2db      	uxtb	r3, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d103      	bne.n	800229e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	619a      	str	r2, [r3, #24]
  }
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d8:	e022      	b.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d01e      	beq.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff fa3d 	bl	8001760 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d113      	bne.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e00f      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d0cd      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002354:	e02c      	b.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f8dc 	bl	8002518 <I2C_IsAcknowledgeFailed>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e02a      	b.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d01e      	beq.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7ff f9f5 	bl	8001760 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d113      	bne.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d1cb      	bne.n	8002356 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d4:	e028      	b.n	8002428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f89c 	bl	8002518 <I2C_IsAcknowledgeFailed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e026      	b.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7ff f9b9 	bl	8001760 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d113      	bne.n	8002428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b20      	cmp	r3, #32
 8002434:	d1cf      	bne.n	80023d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800244c:	e055      	b.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f860 	bl	8002518 <I2C_IsAcknowledgeFailed>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e053      	b.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d129      	bne.n	80024c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d105      	bne.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e03f      	b.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2220      	movs	r2, #32
 8002490:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800249e:	400b      	ands	r3, r1
 80024a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e022      	b.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c4:	f7ff f94c 	bl	8001760 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d1a2      	bne.n	800244e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	fe00e800 	.word	0xfe00e800

08002518 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b10      	cmp	r3, #16
 8002530:	d151      	bne.n	80025d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002532:	e022      	b.n	800257a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d01e      	beq.n	800257a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7ff f910 	bl	8001760 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <I2C_IsAcknowledgeFailed+0x3a>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d113      	bne.n	800257a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e02e      	b.n	80025d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b20      	cmp	r3, #32
 8002586:	d1d5      	bne.n	8002534 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2220      	movs	r2, #32
 8002596:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe71 	bl	8002280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	fe00e800 	.word	0xfe00e800

080025e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	4613      	mov	r3, r2
 80025f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	0d5b      	lsrs	r3, r3, #21
 8002600:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <I2C_TransferConfig+0x58>)
 8002606:	430b      	orrs	r3, r1
 8002608:	43db      	mvns	r3, r3
 800260a:	ea02 0103 	and.w	r1, r2, r3
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002614:	7a7b      	ldrb	r3, [r7, #9]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	03ff63ff 	.word	0x03ff63ff

08002640 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	d138      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002660:	2302      	movs	r3, #2
 8002662:	e032      	b.n	80026ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002692:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d139      	bne.n	8002760 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e033      	b.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2224      	movs	r2, #36	; 0x24
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002728:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	2b06      	cmp	r3, #6
 8002782:	d00a      	beq.n	800279a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e040      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e03e      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80027a2:	491f      	ldr	r1, [pc, #124]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027aa:	f7fe ffd9 	bl	8001760 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b0:	e009      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027b2:	f7fe ffd5 	bl	8001760 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c0:	d901      	bls.n	80027c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e028      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d1ee      	bne.n	80027b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b1e      	cmp	r3, #30
 80027d8:	d008      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b2e      	cmp	r3, #46	; 0x2e
 80027de:	d005      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b1d      	cmp	r3, #29
 80027e4:	d002      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b2d      	cmp	r3, #45	; 0x2d
 80027ea:	d114      	bne.n	8002816 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027ec:	f7fe ffb8 	bl	8001760 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027f2:	e009      	b.n	8002808 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027f4:	f7fe ffb4 	bl	8001760 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002802:	d901      	bls.n	8002808 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d1ee      	bne.n	80027f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024800 	.word	0x58024800

08002824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08c      	sub	sp, #48	; 0x30
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e3ff      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8087 	beq.w	8002952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002844:	4b99      	ldr	r3, [pc, #612]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800284e:	4b97      	ldr	r3, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2b10      	cmp	r3, #16
 8002858:	d007      	beq.n	800286a <HAL_RCC_OscConfig+0x46>
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	2b18      	cmp	r3, #24
 800285e:	d110      	bne.n	8002882 <HAL_RCC_OscConfig+0x5e>
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b90      	ldr	r3, [pc, #576]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d06c      	beq.n	8002950 <HAL_RCC_OscConfig+0x12c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d168      	bne.n	8002950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e3d9      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x76>
 800288c:	4b87      	ldr	r3, [pc, #540]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a86      	ldr	r2, [pc, #536]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e02e      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x98>
 80028a2:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7e      	ldr	r2, [pc, #504]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0xbc>
 80028c6:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a75      	ldr	r2, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 80028e0:	4b72      	ldr	r3, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a71      	ldr	r2, [pc, #452]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe ff2e 	bl	8001760 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe ff2a 	bl	8001760 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e38d      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291a:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xe4>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe ff1a 	bl	8001760 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe ff16 	bl	8001760 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e379      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002942:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x10c>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80ae 	beq.w	8002abc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002968:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800296a:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_RCC_OscConfig+0x162>
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2b18      	cmp	r3, #24
 800297a:	d13a      	bne.n	80029f2 <HAL_RCC_OscConfig+0x1ce>
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d135      	bne.n	80029f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x17a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e34b      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	f7fe ff0d 	bl	80017bc <HAL_GetREVID>
 80029a2:	4602      	mov	r2, r0
 80029a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d817      	bhi.n	80029dc <HAL_RCC_OscConfig+0x1b8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d108      	bne.n	80029c6 <HAL_RCC_OscConfig+0x1a2>
 80029b4:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029bc:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c4:	e07a      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	031b      	lsls	r3, r3, #12
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029da:	e06f      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	4930      	ldr	r1, [pc, #192]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	e064      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d045      	beq.n	8002a86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0219 	bic.w	r2, r3, #25
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4929      	ldr	r1, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fea8 	bl	8001760 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7fe fea4 	bl	8001760 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e307      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	f7fe fec3 	bl	80017bc <HAL_GetREVID>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d817      	bhi.n	8002a70 <HAL_RCC_OscConfig+0x24c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d108      	bne.n	8002a5a <HAL_RCC_OscConfig+0x236>
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a50:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	6053      	str	r3, [r2, #4]
 8002a58:	e030      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	031b      	lsls	r3, r3, #12
 8002a68:	4910      	ldr	r1, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 8002a6e:	e025      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	490b      	ldr	r1, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
 8002a84:	e01a      	b.n	8002abc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x288>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe fe65 	bl	8001760 <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fe61 	bl	8001760 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d903      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e2c4      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
 8002aac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab0:	4ba4      	ldr	r3, [pc, #656]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ee      	bne.n	8002a9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a9 	beq.w	8002c1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aca:	4b9e      	ldr	r3, [pc, #632]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ad2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad4:	4b9b      	ldr	r3, [pc, #620]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d007      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2cc>
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b18      	cmp	r3, #24
 8002ae4:	d13a      	bne.n	8002b5c <HAL_RCC_OscConfig+0x338>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d135      	bne.n	8002b5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002af0:	4b94      	ldr	r3, [pc, #592]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2e4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e296      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b08:	f7fe fe58 	bl	80017bc <HAL_GetREVID>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d817      	bhi.n	8002b46 <HAL_RCC_OscConfig+0x322>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d108      	bne.n	8002b30 <HAL_RCC_OscConfig+0x30c>
 8002b1e:	4b89      	ldr	r3, [pc, #548]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b2e:	e075      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b30:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	069b      	lsls	r3, r3, #26
 8002b3e:	4981      	ldr	r1, [pc, #516]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b44:	e06a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b46:	4b7f      	ldr	r3, [pc, #508]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	497b      	ldr	r1, [pc, #492]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5a:	e05f      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d042      	beq.n	8002bea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b64:	4b77      	ldr	r3, [pc, #476]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fdf6 	bl	8001760 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b78:	f7fe fdf2 	bl	8001760 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e255      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b96:	f7fe fe11 	bl	80017bc <HAL_GetREVID>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d817      	bhi.n	8002bd4 <HAL_RCC_OscConfig+0x3b0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d108      	bne.n	8002bbe <HAL_RCC_OscConfig+0x39a>
 8002bac:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bb4:	4a63      	ldr	r2, [pc, #396]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bba:	6053      	str	r3, [r2, #4]
 8002bbc:	e02e      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	495d      	ldr	r1, [pc, #372]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
 8002bd2:	e023      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
 8002bd4:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	4958      	ldr	r1, [pc, #352]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
 8002be8:	e018      	b.n	8002c1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bea:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a55      	ldr	r2, [pc, #340]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fdb3 	bl	8001760 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fdaf 	bl	8001760 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e212      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d036      	beq.n	8002c96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d019      	beq.n	8002c64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c30:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fd90 	bl	8001760 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe fd8c 	bl	8001760 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1ef      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x420>
 8002c62:	e018      	b.n	8002c96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe fd76 	bl	8001760 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe fd72 	bl	8001760 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1d5      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d036      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fd53 	bl	8001760 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cbe:	f7fe fd4f 	bl	8001760 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1b2      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x49a>
 8002cdc:	e018      	b.n	8002d10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fd39 	bl	8001760 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cf2:	f7fe fd35 	bl	8001760 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e198      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x520>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8085 	beq.w	8002e28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_OscConfig+0x524>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_RCC_OscConfig+0x524>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fd19 	bl	8001760 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d30:	e00c      	b.n	8002d4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe fd15 	bl	8001760 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b64      	cmp	r3, #100	; 0x64
 8002d3e:	d905      	bls.n	8002d4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e178      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4c:	4b96      	ldr	r3, [pc, #600]	; (8002fa8 <HAL_RCC_OscConfig+0x784>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ec      	beq.n	8002d32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x54a>
 8002d60:	4b92      	ldr	r3, [pc, #584]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a91      	ldr	r2, [pc, #580]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x5a6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x56c>
 8002d76:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a8c      	ldr	r2, [pc, #560]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a89      	ldr	r2, [pc, #548]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x5a6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x58e>
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a83      	ldr	r2, [pc, #524]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b81      	ldr	r3, [pc, #516]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x5a6>
 8002db2:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a7a      	ldr	r2, [pc, #488]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fcc5 	bl	8001760 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fcc1 	bl	8001760 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e122      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df0:	4b6e      	ldr	r3, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x5b6>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fcaf 	bl	8001760 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fcab 	bl	8001760 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e10c      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e1c:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8101 	beq.w	8003034 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e32:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e3a:	2b18      	cmp	r3, #24
 8002e3c:	f000 80bc 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	f040 8095 	bne.w	8002f74 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe fc83 	bl	8001760 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fc7f 	bl	8001760 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0e2      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e70:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x78c>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	4946      	ldr	r1, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	628b      	str	r3, [r1, #40]	; 0x28
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	025b      	lsls	r3, r3, #9
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ec6:	4939      	ldr	r1, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ecc:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_RCC_OscConfig+0x790>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	4931      	ldr	r1, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f023 020c 	bic.w	r2, r3, #12
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	492c      	ldr	r1, [pc, #176]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f023 0202 	bic.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4928      	ldr	r1, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fc08 	bl	8001760 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fc04 	bl	8001760 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e067      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x730>
 8002f72:	e05f      	b.n	8003034 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fbee 	bl	8001760 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fbea 	bl	8001760 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e04d      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_OscConfig+0x788>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x764>
 8002fa6:	e045      	b.n	8003034 <HAL_RCC_OscConfig+0x810>
 8002fa8:	58024800 	.word	0x58024800
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	fffffc0c 	.word	0xfffffc0c
 8002fb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCC_OscConfig+0x81c>)
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_OscConfig+0x81c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d031      	beq.n	8003030 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d12a      	bne.n	8003030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d122      	bne.n	8003030 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0a5b      	lsrs	r3, r3, #9
 8002ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d111      	bne.n	8003030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d108      	bne.n	8003030 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3730      	adds	r7, #48	; 0x30
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	58024400 	.word	0x58024400

08003044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e19c      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b8a      	ldr	r3, [pc, #552]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4985      	ldr	r1, [pc, #532]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b83      	ldr	r3, [pc, #524]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e184      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d908      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a4:	4b78      	ldr	r3, [pc, #480]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	4975      	ldr	r1, [pc, #468]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b70      	ldr	r3, [pc, #448]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d908      	bls.n	80030e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	496a      	ldr	r1, [pc, #424]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003100:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	495e      	ldr	r1, [pc, #376]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800310e:	4313      	orrs	r3, r2
 8003110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800312a:	429a      	cmp	r2, r3
 800312c:	d908      	bls.n	8003140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4953      	ldr	r1, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800313c:	4313      	orrs	r3, r2
 800313e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	4b4d      	ldr	r3, [pc, #308]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	429a      	cmp	r2, r3
 800315a:	d908      	bls.n	800316e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f023 020f 	bic.w	r2, r3, #15
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4947      	ldr	r1, [pc, #284]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800316a:	4313      	orrs	r3, r2
 800316c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d055      	beq.n	8003226 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800317a:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4940      	ldr	r1, [pc, #256]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003188:	4313      	orrs	r3, r2
 800318a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0f6      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d115      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0ea      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c4:	4b30      	ldr	r3, [pc, #192]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0de      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0d6      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f023 0207 	bic.w	r2, r3, #7
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe fab3 	bl	8001760 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fe faaf 	bl	8001760 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0be      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	429a      	cmp	r2, r3
 8003224:	d1eb      	bne.n	80031fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x244>)
 8003250:	4313      	orrs	r3, r2
 8003252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d214      	bcs.n	800328c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 020f 	bic.w	r2, r3, #15
 800326a:	4906      	ldr	r1, [pc, #24]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCC_ClockConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e086      	b.n	8003392 <HAL_RCC_ClockConfig+0x34e>
 8003284:	52002000 	.word	0x52002000
 8003288:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d208      	bcs.n	80032ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4939      	ldr	r1, [pc, #228]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d208      	bcs.n	80032e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	492e      	ldr	r1, [pc, #184]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003300:	429a      	cmp	r2, r3
 8003302:	d208      	bcs.n	8003316 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4922      	ldr	r1, [pc, #136]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003312:	4313      	orrs	r3, r2
 8003314:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332e:	429a      	cmp	r2, r3
 8003330:	d208      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4917      	ldr	r1, [pc, #92]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003340:	4313      	orrs	r3, r2
 8003342:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003344:	f000 f834 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003348:	4601      	mov	r1, r0
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa21 f303 	lsr.w	r3, r1, r3
 8003360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x358>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_RCC_ClockConfig+0x35c>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x360>)
 800337a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x364>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x368>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f9a0 	bl	80016cc <HAL_InitTick>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	08008bd8 	.word	0x08008bd8
 80033a4:	20000004 	.word	0x20000004
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000014 	.word	0x20000014

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b6:	4baf      	ldr	r3, [pc, #700]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033be:	2b18      	cmp	r3, #24
 80033c0:	f200 814e 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x2b0>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003431 	.word	0x08003431
 80033d0:	08003661 	.word	0x08003661
 80033d4:	08003661 	.word	0x08003661
 80033d8:	08003661 	.word	0x08003661
 80033dc:	08003661 	.word	0x08003661
 80033e0:	08003661 	.word	0x08003661
 80033e4:	08003661 	.word	0x08003661
 80033e8:	08003661 	.word	0x08003661
 80033ec:	08003457 	.word	0x08003457
 80033f0:	08003661 	.word	0x08003661
 80033f4:	08003661 	.word	0x08003661
 80033f8:	08003661 	.word	0x08003661
 80033fc:	08003661 	.word	0x08003661
 8003400:	08003661 	.word	0x08003661
 8003404:	08003661 	.word	0x08003661
 8003408:	08003661 	.word	0x08003661
 800340c:	0800345d 	.word	0x0800345d
 8003410:	08003661 	.word	0x08003661
 8003414:	08003661 	.word	0x08003661
 8003418:	08003661 	.word	0x08003661
 800341c:	08003661 	.word	0x08003661
 8003420:	08003661 	.word	0x08003661
 8003424:	08003661 	.word	0x08003661
 8003428:	08003661 	.word	0x08003661
 800342c:	08003463 	.word	0x08003463
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003430:	4b90      	ldr	r3, [pc, #576]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800343c:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	4a8c      	ldr	r2, [pc, #560]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800344e:	e10a      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003452:	61bb      	str	r3, [r7, #24]
    break;
 8003454:	e107      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003458:	61bb      	str	r3, [r7, #24]
    break;
 800345a:	e104      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800345c:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800345e:	61bb      	str	r3, [r7, #24]
    break;
 8003460:	e101      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003462:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003476:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003478:	4b7e      	ldr	r3, [pc, #504]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	08db      	lsrs	r3, r3, #3
 8003488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80da 	beq.w	800365a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d05a      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x1b2>
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d302      	bcc.n	80034b6 <HAL_RCC_GetSysClockFreq+0x106>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d078      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80034b4:	e099      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02d      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034c2:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	08db      	lsrs	r3, r3, #3
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003500:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003518:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800351c:	e087      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003528:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2d8>
 800352c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003540:	ed97 6a02 	vldr	s12, [r7, #8]
 8003544:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003560:	e065      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800368c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003574:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003584:	ed97 6a02 	vldr	s12, [r7, #8]
 8003588:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2d4>
 800358c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035a4:	e043      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003690 <HAL_RCC_GetSysClockFreq+0x2e0>
 80035b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035cc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e8:	e021      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800368c <HAL_RCC_GetSysClockFreq+0x2dc>
 80035f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003610:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800362c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	0a5b      	lsrs	r3, r3, #9
 8003634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003638:	3301      	adds	r3, #1
 800363a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003646:	edd7 6a07 	vldr	s13, [r7, #28]
 800364a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003658:	e005      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
    break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003662:	61bb      	str	r3, [r7, #24]
    break;
 8003664:	bf00      	nop
  }

  return sysclockfreq;
 8003666:	69bb      	ldr	r3, [r7, #24]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3724      	adds	r7, #36	; 0x24
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	58024400 	.word	0x58024400
 8003678:	03d09000 	.word	0x03d09000
 800367c:	003d0900 	.word	0x003d0900
 8003680:	017d7840 	.word	0x017d7840
 8003684:	46000000 	.word	0x46000000
 8003688:	4c742400 	.word	0x4c742400
 800368c:	4a742400 	.word	0x4a742400
 8003690:	4bbebc20 	.word	0x4bbebc20

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800369a:	f7ff fe89 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800369e:	4601      	mov	r1, r0
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	fa21 f303 	lsr.w	r3, r1, r3
 80036b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_GetHCLKFreq+0x58>)
 80036d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCC_GetHCLKFreq+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	08008bd8 	.word	0x08008bd8
 80036ec:	20000004 	.word	0x20000004
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036f8:	f7ff ffcc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_RCC_GetPCLK1Freq+0x28>)
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	58024400 	.word	0x58024400
 800371c:	08008bd8 	.word	0x08008bd8

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003724:	f7ff ffb6 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8003728:	4601      	mov	r1, r0
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	58024400 	.word	0x58024400
 8003748:	08008bd8 	.word	0x08008bd8

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003758:	2300      	movs	r3, #0
 800375a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003770:	d013      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003776:	d802      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800377c:	e01f      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003782:	d013      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003788:	d01c      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4baf      	ldr	r3, [pc, #700]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4aae      	ldr	r2, [pc, #696]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 f96f 	bl	8004a84 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037aa:	e00c      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3324      	adds	r3, #36	; 0x24
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fa18 	bl	8004be8 <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037cc:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	499c      	ldr	r1, [pc, #624]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	650b      	str	r3, [r1, #80]	; 0x50
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d826      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003815 	.word	0x08003815
 8003804:	08003823 	.word	0x08003823
 8003808:	08003835 	.word	0x08003835
 800380c:	0800384d 	.word	0x0800384d
 8003810:	0800384d 	.word	0x0800384d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a8c      	ldr	r2, [pc, #560]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003820:	e015      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 f92b 	bl	8004a84 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003832:	e00c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f9d4 	bl	8004be8 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800384c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003854:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f023 0207 	bic.w	r2, r3, #7
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	497a      	ldr	r1, [pc, #488]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003862:	4313      	orrs	r3, r2
 8003864:	650b      	str	r3, [r1, #80]	; 0x50
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d01c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d804      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d00d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800388c:	e01e      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800388e:	2bc0      	cmp	r3, #192	; 0xc0
 8003890:	d01f      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d01e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003898:	e018      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	4a6b      	ldr	r2, [pc, #428]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038a6:	e017      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f8e8 	bl	8004a84 <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038b8:	e00e      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3324      	adds	r3, #36	; 0x24
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 f991 	bl	8004be8 <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
      break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80038d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038de:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4958      	ldr	r1, [pc, #352]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	650b      	str	r3, [r1, #80]	; 0x50
 80038f0:	e001      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d044      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390c:	d01f      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d805      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d00e      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800391e:	e01f      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003924:	d01f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800392a:	d01e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800392c:	e018      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800393a:	e017      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f89e 	bl	8004a84 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800394c:	e00e      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f947 	bl	8004be8 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800396a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003980:	4932      	ldr	r1, [pc, #200]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003982:	4313      	orrs	r3, r2
 8003984:	658b      	str	r3, [r1, #88]	; 0x58
 8003986:	e001      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003994:	2b00      	cmp	r3, #0
 8003996:	d044      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800399e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a2:	d01f      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a8:	d805      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80039ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b2:	d00e      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039b4:	e01f      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ba:	d01f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c0:	d01e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039c2:	e018      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d0:	e017      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f853 	bl	8004a84 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039e2:	e00e      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f8fc 	bl	8004be8 <RCCEx_PLL3_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a16:	490d      	ldr	r1, [pc, #52]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a1c:	e001      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d035      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d00c      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d802      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01b      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003a3e:	e017      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d00c      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d018      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003a48:	e012      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4baf      	ldr	r3, [pc, #700]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	4aae      	ldr	r2, [pc, #696]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a5c:	e00e      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2102      	movs	r1, #2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f80d 	bl	8004a84 <RCCEx_PLL2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a6e:	e005      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a82:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8e:	49a0      	ldr	r1, [pc, #640]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a94:	e001      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d042      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d01f      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab4:	d805      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d00e      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ac0:	e01f      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac6:	d01f      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003acc:	d01e      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b8f      	ldr	r3, [pc, #572]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a8e      	ldr	r2, [pc, #568]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003adc:	e017      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ffcd 	bl	8004a84 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003aee:	e00e      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f876 	bl	8004be8 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b14:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	497b      	ldr	r1, [pc, #492]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	650b      	str	r3, [r1, #80]	; 0x50
 8003b26:	e001      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d042      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b40:	d01b      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b46:	d805      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d022      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b52:	e01b      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b58:	d01d      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b64:	d01b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b66:	e011      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff88 	bl	8004a84 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b78:	e012      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	; 0x24
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f831 	bl	8004be8 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb2:	4957      	ldr	r1, [pc, #348]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb8:	e001      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d01b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d805      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d022      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003be6:	e01b      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d01d      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf2:	d01c      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003bf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bf8:	d01b      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003bfa:	e011      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ff3e 	bl	8004a84 <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e012      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3324      	adds	r3, #36	; 0x24
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ffe7 	bl	8004be8 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c26:	bf00      	nop
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c3a:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c48:	4931      	ldr	r1, [pc, #196]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02d      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c68:	d005      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c82:	e00c      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fefa 	bl	8004a84 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
      break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb0:	4917      	ldr	r1, [pc, #92]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8003cb6:	e001      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d035      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d81b      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003ce9 	.word	0x08003ce9
 8003ce0:	08003cf7 	.word	0x08003cf7
 8003ce4:	08003d15 	.word	0x08003d15
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cf4:	e00f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fec1 	bl	8004a84 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d06:	e006      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
      break;
 8003d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d1c:	4bba      	ldr	r3, [pc, #744]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	f023 0203 	bic.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	49b7      	ldr	r1, [pc, #732]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d2e:	e001      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8086 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d42:	4bb2      	ldr	r3, [pc, #712]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4ab1      	ldr	r2, [pc, #708]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d4e:	f7fd fd07 	bl	8001760 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d54:	e009      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d56:	f7fd fd03 	bl	8001760 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d902      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	75fb      	strb	r3, [r7, #23]
        break;
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6a:	4ba8      	ldr	r3, [pc, #672]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d166      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d7c:	4ba2      	ldr	r3, [pc, #648]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d86:	4053      	eors	r3, r2
 8003d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d90:	4b9d      	ldr	r3, [pc, #628]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9a:	4b9b      	ldr	r3, [pc, #620]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a9a      	ldr	r2, [pc, #616]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003da6:	4b98      	ldr	r3, [pc, #608]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a97      	ldr	r2, [pc, #604]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003db2:	4a95      	ldr	r2, [pc, #596]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d115      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fccc 	bl	8001760 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fcc8 	bl	8001760 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d902      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	75fb      	strb	r3, [r7, #23]
            break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de4:	4b88      	ldr	r3, [pc, #544]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d126      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e06:	4b80      	ldr	r3, [pc, #512]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e14:	0919      	lsrs	r1, r3, #4
 8003e16:	4b7e      	ldr	r3, [pc, #504]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e18:	400b      	ands	r3, r1
 8003e1a:	497b      	ldr	r1, [pc, #492]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	610b      	str	r3, [r1, #16]
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003e22:	4b79      	ldr	r3, [pc, #484]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4a78      	ldr	r2, [pc, #480]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e2c:	6113      	str	r3, [r2, #16]
 8003e2e:	4b76      	ldr	r3, [pc, #472]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	4972      	ldr	r1, [pc, #456]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	670b      	str	r3, [r1, #112]	; 0x70
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	75bb      	strb	r3, [r7, #22]
 8003e48:	e001      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d07d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5e:	2b28      	cmp	r3, #40	; 0x28
 8003e60:	d866      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003f37 	.word	0x08003f37
 8003e6c:	08003f31 	.word	0x08003f31
 8003e70:	08003f31 	.word	0x08003f31
 8003e74:	08003f31 	.word	0x08003f31
 8003e78:	08003f31 	.word	0x08003f31
 8003e7c:	08003f31 	.word	0x08003f31
 8003e80:	08003f31 	.word	0x08003f31
 8003e84:	08003f31 	.word	0x08003f31
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08003f31 	.word	0x08003f31
 8003e90:	08003f31 	.word	0x08003f31
 8003e94:	08003f31 	.word	0x08003f31
 8003e98:	08003f31 	.word	0x08003f31
 8003e9c:	08003f31 	.word	0x08003f31
 8003ea0:	08003f31 	.word	0x08003f31
 8003ea4:	08003f31 	.word	0x08003f31
 8003ea8:	08003f1f 	.word	0x08003f1f
 8003eac:	08003f31 	.word	0x08003f31
 8003eb0:	08003f31 	.word	0x08003f31
 8003eb4:	08003f31 	.word	0x08003f31
 8003eb8:	08003f31 	.word	0x08003f31
 8003ebc:	08003f31 	.word	0x08003f31
 8003ec0:	08003f31 	.word	0x08003f31
 8003ec4:	08003f31 	.word	0x08003f31
 8003ec8:	08003f37 	.word	0x08003f37
 8003ecc:	08003f31 	.word	0x08003f31
 8003ed0:	08003f31 	.word	0x08003f31
 8003ed4:	08003f31 	.word	0x08003f31
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f31 	.word	0x08003f31
 8003ee8:	08003f37 	.word	0x08003f37
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f31 	.word	0x08003f31
 8003ef4:	08003f31 	.word	0x08003f31
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f31 	.word	0x08003f31
 8003f04:	08003f31 	.word	0x08003f31
 8003f08:	08003f37 	.word	0x08003f37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fdb6 	bl	8004a84 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fe5f 	bl	8004be8 <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4a:	492f      	ldr	r1, [pc, #188]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	654b      	str	r3, [r1, #84]	; 0x54
 8003f50:	e001      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d037      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d820      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fb3 	.word	0x08003fb3
 8003f74:	08003f89 	.word	0x08003f89
 8003f78:	08003f9b 	.word	0x08003f9b
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fd78 	bl	8004a84 <RCCEx_PLL2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3324      	adds	r3, #36	; 0x24
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fe21 	bl	8004be8 <RCCEx_PLL3_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 0207 	bic.w	r2, r3, #7
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	4910      	ldr	r1, [pc, #64]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	654b      	str	r3, [r1, #84]	; 0x54
 8003fcc:	e001      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d040      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d827      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	0800403f 	.word	0x0800403f
 8003ff4:	08004015 	.word	0x08004015
 8003ff8:	08004027 	.word	0x08004027
 8003ffc:	0800403f 	.word	0x0800403f
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800403f 	.word	0x0800403f
 8004008:	58024400 	.word	0x58024400
 800400c:	58024800 	.word	0x58024800
 8004010:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fd32 	bl	8004a84 <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004024:	e00c      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fddb 	bl	8004be8 <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004036:	e003      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
      break;
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800403e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004046:	4bb2      	ldr	r3, [pc, #712]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f023 0207 	bic.w	r2, r3, #7
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	49ae      	ldr	r1, [pc, #696]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	658b      	str	r3, [r1, #88]	; 0x58
 800405a:	e001      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d044      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004076:	d01b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d805      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d022      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004088:	e01b      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d01d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004094:	d01c      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800409a:	d01b      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800409c:	e011      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fced 	bl	8004a84 <RCCEx_PLL2_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040ae:	e012      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3324      	adds	r3, #36	; 0x24
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fd96 	bl	8004be8 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040c0:	e009      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
      break;
 80040c6:	e006      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040c8:	bf00      	nop
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040cc:	bf00      	nop
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040dc:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ea:	4989      	ldr	r1, [pc, #548]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	654b      	str	r3, [r1, #84]	; 0x54
 80040f0:	e001      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d044      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410c:	d01b      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800410e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004112:	d805      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d022      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800411e:	e01b      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d01d      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800412a:	d01c      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800412c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004130:	d01b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004132:	e011      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fca2 	bl	8004a84 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004144:	e012      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	; 0x24
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd4b 	bl	8004be8 <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004156:	e009      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800416a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004180:	4963      	ldr	r1, [pc, #396]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	658b      	str	r3, [r1, #88]	; 0x58
 8004186:	e001      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d044      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a2:	d01b      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80041a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a8:	d805      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d022      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041b4:	e01b      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d01d      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041c0:	d01c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80041c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c6:	d01b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80041c8:	e011      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fc57 	bl	8004a84 <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041da:	e012      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3324      	adds	r3, #36	; 0x24
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fd00 	bl	8004be8 <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041ec:	e009      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
      break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004216:	493e      	ldr	r1, [pc, #248]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	658b      	str	r3, [r1, #88]	; 0x58
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d10a      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fcd1 	bl	8004be8 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004250:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425e:	492c      	ldr	r1, [pc, #176]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004260:	4313      	orrs	r3, r2
 8004262:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d10a      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fcb0 	bl	8004be8 <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a0:	491b      	ldr	r1, [pc, #108]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d032      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d00d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80042be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c2:	d016      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d111      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fbd8 	bl	8004a84 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042d8:	e00c      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3324      	adds	r3, #36	; 0x24
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fc81 	bl	8004be8 <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004308:	4901      	ldr	r1, [pc, #4]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	658b      	str	r3, [r1, #88]	; 0x58
 800430e:	e003      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02f      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432e:	d00c      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004334:	d015      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433a:	d10f      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433c:	4b79      	ldr	r3, [pc, #484]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4a78      	ldr	r2, [pc, #480]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004348:	e00c      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3324      	adds	r3, #36	; 0x24
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fc49 	bl	8004be8 <RCCEx_PLL3_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800435a:	e003      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436a:	4b6e      	ldr	r3, [pc, #440]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004378:	496a      	ldr	r1, [pc, #424]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	654b      	str	r3, [r1, #84]	; 0x54
 800437e:	e001      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d029      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d007      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800439e:	e00f      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a0:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fb65 	bl	8004a84 <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043be:	e002      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043cc:	4b55      	ldr	r3, [pc, #340]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	4952      	ldr	r1, [pc, #328]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fbf6 	bl	8004be8 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02f      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d00c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d802      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004426:	e00d      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d00f      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800442e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004432:	d00e      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004434:	e006      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004436:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	4a3a      	ldr	r2, [pc, #232]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004442:	e007      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800445a:	4b32      	ldr	r3, [pc, #200]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004466:	492f      	ldr	r1, [pc, #188]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	654b      	str	r3, [r1, #84]	; 0x54
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4926      	ldr	r1, [pc, #152]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044aa:	491e      	ldr	r1, [pc, #120]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c8:	4916      	ldr	r1, [pc, #88]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4a11      	ldr	r2, [pc, #68]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044e4:	6113      	str	r3, [r2, #16]
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044f0:	490c      	ldr	r1, [pc, #48]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da08      	bge.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450a:	4906      	ldr	r1, [pc, #24]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800450c:	4313      	orrs	r3, r2
 800450e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004510:	7dbb      	ldrb	r3, [r7, #22]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	58024400 	.word	0x58024400

08004528 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800452c:	f7ff f8b2 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 8004530:	4601      	mov	r1, r0
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800453e:	5cd3      	ldrb	r3, [r2, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	08008bd8 	.word	0x08008bd8

08004554 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800455c:	4b9d      	ldr	r3, [pc, #628]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004566:	4b9b      	ldr	r3, [pc, #620]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004572:	4b98      	ldr	r3, [pc, #608]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800457e:	4b95      	ldr	r3, [pc, #596]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	08db      	lsrs	r3, r3, #3
 8004584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 810a 	beq.w	80047b6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d05a      	beq.n	800465e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d302      	bcc.n	80045b2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d078      	beq.n	80046a2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80045b0:	e099      	b.n	80046e6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b2:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02d      	beq.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045be:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	4a83      	ldr	r2, [pc, #524]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e8:	4b7a      	ldr	r3, [pc, #488]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004618:	e087      	b.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004624:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462c:	4b69      	ldr	r3, [pc, #420]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004640:	eddf 5a66 	vldr	s11, [pc, #408]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465c:	e065      	b.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800466c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004670:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004680:	ed97 6a03 	vldr	s12, [r7, #12]
 8004684:	eddf 5a55 	vldr	s11, [pc, #340]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046a0:	e043      	b.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80046b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046e4:	e021      	b.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004708:	ed97 6a03 	vldr	s12, [r7, #12]
 800470c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004728:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	0a5b      	lsrs	r3, r3, #9
 8004730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004744:	edd7 6a07 	vldr	s13, [r7, #28]
 8004748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004750:	ee17 2a90 	vmov	r2, s15
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004772:	edd7 6a07 	vldr	s13, [r7, #28]
 8004776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477e:	ee17 2a90 	vmov	r2, s15
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	0e1b      	lsrs	r3, r3, #24
 800478c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	ee17 2a90 	vmov	r2, s15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	3724      	adds	r7, #36	; 0x24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	58024400 	.word	0x58024400
 80047d8:	03d09000 	.word	0x03d09000
 80047dc:	46000000 	.word	0x46000000
 80047e0:	4c742400 	.word	0x4c742400
 80047e4:	4a742400 	.word	0x4a742400
 80047e8:	4bbebc20 	.word	0x4bbebc20

080047ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f4:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047fe:	4b9b      	ldr	r3, [pc, #620]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	0d1b      	lsrs	r3, r3, #20
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800480a:	4b98      	ldr	r3, [pc, #608]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004816:	4b95      	ldr	r3, [pc, #596]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 810a 	beq.w	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d05a      	beq.n	80048f6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d302      	bcc.n	800484a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d078      	beq.n	800493a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004848:	e099      	b.n	800497e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484a:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d02d      	beq.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004890:	ed97 6a03 	vldr	s12, [r7, #12]
 8004894:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048b0:	e087      	b.n	80049c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80048c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f4:	e065      	b.n	80049c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004908:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004918:	ed97 6a03 	vldr	s12, [r7, #12]
 800491c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004938:	e043      	b.n	80049c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494c:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004960:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497c:	e021      	b.n	80049c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800498c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e8:	ee17 2a90 	vmov	r2, s15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	0e1b      	lsrs	r3, r3, #24
 8004a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	ee17 2a90 	vmov	r2, s15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3724      	adds	r7, #36	; 0x24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	03d09000 	.word	0x03d09000
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4a742400 	.word	0x4a742400
 8004a80:	4bbebc20 	.word	0x4bbebc20

08004a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a92:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d101      	bne.n	8004aa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e099      	b.n	8004bd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fc fe57 	bl	8001760 <HAL_GetTick>
 8004ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ab6:	f7fc fe53 	bl	8001760 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e086      	b.n	8004bd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ac8:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	493f      	ldr	r1, [pc, #252]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b18:	4931      	ldr	r1, [pc, #196]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	492d      	ldr	r1, [pc, #180]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f023 0220 	bic.w	r2, r3, #32
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	4928      	ldr	r1, [pc, #160]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b42:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	f023 0310 	bic.w	r3, r3, #16
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <RCCEx_PLL2_Config+0x160>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	69d2      	ldr	r2, [r2, #28]
 8004b5a:	00d2      	lsls	r2, r2, #3
 8004b5c:	4920      	ldr	r1, [pc, #128]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	f043 0310 	orr.w	r3, r3, #16
 8004b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b80:	e00f      	b.n	8004ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b94:	e005      	b.n	8004ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fc fdd7 	bl	8001760 <HAL_GetTick>
 8004bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bb6:	f7fc fdd3 	bl	8001760 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e006      	b.n	8004bd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <RCCEx_PLL2_Config+0x15c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	ffff0007 	.word	0xffff0007

08004be8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bf6:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d101      	bne.n	8004c06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e099      	b.n	8004d3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c06:	4b4f      	ldr	r3, [pc, #316]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4e      	ldr	r2, [pc, #312]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c12:	f7fc fda5 	bl	8001760 <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c1a:	f7fc fda1 	bl	8001760 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e086      	b.n	8004d3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c2c:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f0      	bne.n	8004c1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	051b      	lsls	r3, r3, #20
 8004c46:	493f      	ldr	r1, [pc, #252]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	025b      	lsls	r3, r3, #9
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c7c:	4931      	ldr	r1, [pc, #196]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	492d      	ldr	r1, [pc, #180]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	4928      	ldr	r1, [pc, #160]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <RCCEx_PLL3_Config+0x160>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	69d2      	ldr	r2, [r2, #28]
 8004cbe:	00d2      	lsls	r2, r2, #3
 8004cc0:	4920      	ldr	r1, [pc, #128]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ce4:	e00f      	b.n	8004d06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf8:	e005      	b.n	8004d06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d12:	f7fc fd25 	bl	8001760 <HAL_GetTick>
 8004d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d1a:	f7fc fd21 	bl	8001760 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e006      	b.n	8004d3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <RCCEx_PLL3_Config+0x15c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	58024400 	.word	0x58024400
 8004d48:	ffff0007 	.word	0xffff0007

08004d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e042      	b.n	8004de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fc fb29 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	; 0x24
 8004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8c2 	bl	8004f18 <UART_SetConfig>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e022      	b.n	8004de4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fe66 	bl	8005a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 feed 	bl	8005bbc <UART_CheckIdleState>
 8004de2:	4603      	mov	r3, r0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	f040 8083 	bne.w	8004f0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_UART_Transmit+0x28>
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e07b      	b.n	8004f10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Transmit+0x3a>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e074      	b.n	8004f10 <HAL_UART_Transmit+0x124>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2221      	movs	r2, #33	; 0x21
 8004e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fc8f 	bl	8001760 <HAL_GetTick>
 8004e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d108      	bne.n	8004e70 <HAL_UART_Transmit+0x84>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e003      	b.n	8004e78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004e80:	e02c      	b.n	8004edc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fedd 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e039      	b.n	8004f10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e007      	b.n	8004eca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1cc      	bne.n	8004e82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 feaa 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e006      	b.n	8004f10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f1c:	b08e      	sub	sp, #56	; 0x38
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f46:	4313      	orrs	r3, r2
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4bc1      	ldr	r3, [pc, #772]	; (8005258 <UART_SetConfig+0x340>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4ab7      	ldr	r2, [pc, #732]	; (800525c <UART_SetConfig+0x344>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	4bb2      	ldr	r3, [pc, #712]	; (8005260 <UART_SetConfig+0x348>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f023 010f 	bic.w	r1, r3, #15
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4aa9      	ldr	r2, [pc, #676]	; (8005264 <UART_SetConfig+0x34c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d177      	bne.n	80050b2 <UART_SetConfig+0x19a>
 8004fc2:	4ba9      	ldr	r3, [pc, #676]	; (8005268 <UART_SetConfig+0x350>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fca:	2b28      	cmp	r3, #40	; 0x28
 8004fcc:	d86c      	bhi.n	80050a8 <UART_SetConfig+0x190>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0xbc>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08005079 	.word	0x08005079
 8004fd8:	080050a9 	.word	0x080050a9
 8004fdc:	080050a9 	.word	0x080050a9
 8004fe0:	080050a9 	.word	0x080050a9
 8004fe4:	080050a9 	.word	0x080050a9
 8004fe8:	080050a9 	.word	0x080050a9
 8004fec:	080050a9 	.word	0x080050a9
 8004ff0:	080050a9 	.word	0x080050a9
 8004ff4:	08005081 	.word	0x08005081
 8004ff8:	080050a9 	.word	0x080050a9
 8004ffc:	080050a9 	.word	0x080050a9
 8005000:	080050a9 	.word	0x080050a9
 8005004:	080050a9 	.word	0x080050a9
 8005008:	080050a9 	.word	0x080050a9
 800500c:	080050a9 	.word	0x080050a9
 8005010:	080050a9 	.word	0x080050a9
 8005014:	08005089 	.word	0x08005089
 8005018:	080050a9 	.word	0x080050a9
 800501c:	080050a9 	.word	0x080050a9
 8005020:	080050a9 	.word	0x080050a9
 8005024:	080050a9 	.word	0x080050a9
 8005028:	080050a9 	.word	0x080050a9
 800502c:	080050a9 	.word	0x080050a9
 8005030:	080050a9 	.word	0x080050a9
 8005034:	08005091 	.word	0x08005091
 8005038:	080050a9 	.word	0x080050a9
 800503c:	080050a9 	.word	0x080050a9
 8005040:	080050a9 	.word	0x080050a9
 8005044:	080050a9 	.word	0x080050a9
 8005048:	080050a9 	.word	0x080050a9
 800504c:	080050a9 	.word	0x080050a9
 8005050:	080050a9 	.word	0x080050a9
 8005054:	08005099 	.word	0x08005099
 8005058:	080050a9 	.word	0x080050a9
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050a9 	.word	0x080050a9
 800506c:	080050a9 	.word	0x080050a9
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050a1 	.word	0x080050a1
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e233      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005086:	e22f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e22b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	e227      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005098:	2320      	movs	r3, #32
 800509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509e:	e223      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a6:	e21f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ae:	bf00      	nop
 80050b0:	e21a      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6d      	ldr	r2, [pc, #436]	; (800526c <UART_SetConfig+0x354>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d132      	bne.n	8005122 <UART_SetConfig+0x20a>
 80050bc:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <UART_SetConfig+0x350>)
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	d827      	bhi.n	8005118 <UART_SetConfig+0x200>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x1b8>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050e9 	.word	0x080050e9
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	080050f9 	.word	0x080050f9
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ee:	e1fb      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e1f7      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e1f3      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e1ef      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005108:	2320      	movs	r3, #32
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	e1eb      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e1e7      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	bf00      	nop
 8005120:	e1e2      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a52      	ldr	r2, [pc, #328]	; (8005270 <UART_SetConfig+0x358>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d132      	bne.n	8005192 <UART_SetConfig+0x27a>
 800512c:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <UART_SetConfig+0x350>)
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	2b05      	cmp	r3, #5
 8005136:	d827      	bhi.n	8005188 <UART_SetConfig+0x270>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <UART_SetConfig+0x228>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005159 	.word	0x08005159
 8005144:	08005161 	.word	0x08005161
 8005148:	08005169 	.word	0x08005169
 800514c:	08005171 	.word	0x08005171
 8005150:	08005179 	.word	0x08005179
 8005154:	08005181 	.word	0x08005181
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515e:	e1c3      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005166:	e1bf      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516e:	e1bb      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005176:	e1b7      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005178:	2320      	movs	r3, #32
 800517a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517e:	e1b3      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005186:	e1af      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518e:	bf00      	nop
 8005190:	e1aa      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a37      	ldr	r2, [pc, #220]	; (8005274 <UART_SetConfig+0x35c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d132      	bne.n	8005202 <UART_SetConfig+0x2ea>
 800519c:	4b32      	ldr	r3, [pc, #200]	; (8005268 <UART_SetConfig+0x350>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d827      	bhi.n	80051f8 <UART_SetConfig+0x2e0>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x298>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051d9 	.word	0x080051d9
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ce:	e18b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051d0:	2304      	movs	r3, #4
 80051d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d6:	e187      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051d8:	2308      	movs	r3, #8
 80051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051de:	e183      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051e0:	2310      	movs	r3, #16
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	e17f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051e8:	2320      	movs	r3, #32
 80051ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ee:	e17b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e177      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	bf00      	nop
 8005200:	e172      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <UART_SetConfig+0x360>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d144      	bne.n	8005296 <UART_SetConfig+0x37e>
 800520c:	4b16      	ldr	r3, [pc, #88]	; (8005268 <UART_SetConfig+0x350>)
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	2b05      	cmp	r3, #5
 8005216:	d839      	bhi.n	800528c <UART_SetConfig+0x374>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x308>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005239 	.word	0x08005239
 8005224:	08005241 	.word	0x08005241
 8005228:	08005249 	.word	0x08005249
 800522c:	08005251 	.word	0x08005251
 8005230:	0800527d 	.word	0x0800527d
 8005234:	08005285 	.word	0x08005285
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e153      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e14f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e14b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e147      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005258:	cfff69f3 	.word	0xcfff69f3
 800525c:	58000c00 	.word	0x58000c00
 8005260:	11fff4ff 	.word	0x11fff4ff
 8005264:	40011000 	.word	0x40011000
 8005268:	58024400 	.word	0x58024400
 800526c:	40004400 	.word	0x40004400
 8005270:	40004800 	.word	0x40004800
 8005274:	40004c00 	.word	0x40004c00
 8005278:	40005000 	.word	0x40005000
 800527c:	2320      	movs	r3, #32
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e131      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e12d      	b.n	80054e8 <UART_SetConfig+0x5d0>
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005292:	bf00      	nop
 8005294:	e128      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4ab6      	ldr	r2, [pc, #728]	; (8005574 <UART_SetConfig+0x65c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d178      	bne.n	8005392 <UART_SetConfig+0x47a>
 80052a0:	4bb5      	ldr	r3, [pc, #724]	; (8005578 <UART_SetConfig+0x660>)
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a8:	2b28      	cmp	r3, #40	; 0x28
 80052aa:	d86d      	bhi.n	8005388 <UART_SetConfig+0x470>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x39c>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	08005359 	.word	0x08005359
 80052b8:	08005389 	.word	0x08005389
 80052bc:	08005389 	.word	0x08005389
 80052c0:	08005389 	.word	0x08005389
 80052c4:	08005389 	.word	0x08005389
 80052c8:	08005389 	.word	0x08005389
 80052cc:	08005389 	.word	0x08005389
 80052d0:	08005389 	.word	0x08005389
 80052d4:	08005361 	.word	0x08005361
 80052d8:	08005389 	.word	0x08005389
 80052dc:	08005389 	.word	0x08005389
 80052e0:	08005389 	.word	0x08005389
 80052e4:	08005389 	.word	0x08005389
 80052e8:	08005389 	.word	0x08005389
 80052ec:	08005389 	.word	0x08005389
 80052f0:	08005389 	.word	0x08005389
 80052f4:	08005369 	.word	0x08005369
 80052f8:	08005389 	.word	0x08005389
 80052fc:	08005389 	.word	0x08005389
 8005300:	08005389 	.word	0x08005389
 8005304:	08005389 	.word	0x08005389
 8005308:	08005389 	.word	0x08005389
 800530c:	08005389 	.word	0x08005389
 8005310:	08005389 	.word	0x08005389
 8005314:	08005371 	.word	0x08005371
 8005318:	08005389 	.word	0x08005389
 800531c:	08005389 	.word	0x08005389
 8005320:	08005389 	.word	0x08005389
 8005324:	08005389 	.word	0x08005389
 8005328:	08005389 	.word	0x08005389
 800532c:	08005389 	.word	0x08005389
 8005330:	08005389 	.word	0x08005389
 8005334:	08005379 	.word	0x08005379
 8005338:	08005389 	.word	0x08005389
 800533c:	08005389 	.word	0x08005389
 8005340:	08005389 	.word	0x08005389
 8005344:	08005389 	.word	0x08005389
 8005348:	08005389 	.word	0x08005389
 800534c:	08005389 	.word	0x08005389
 8005350:	08005389 	.word	0x08005389
 8005354:	08005381 	.word	0x08005381
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535e:	e0c3      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005366:	e0bf      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536e:	e0bb      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005376:	e0b7      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005378:	2320      	movs	r3, #32
 800537a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537e:	e0b3      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005386:	e0af      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538e:	bf00      	nop
 8005390:	e0aa      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a79      	ldr	r2, [pc, #484]	; (800557c <UART_SetConfig+0x664>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d132      	bne.n	8005402 <UART_SetConfig+0x4ea>
 800539c:	4b76      	ldr	r3, [pc, #472]	; (8005578 <UART_SetConfig+0x660>)
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d827      	bhi.n	80053f8 <UART_SetConfig+0x4e0>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x498>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053c9 	.word	0x080053c9
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053d9 	.word	0x080053d9
 80053bc:	080053e1 	.word	0x080053e1
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053f1 	.word	0x080053f1
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e08b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e087      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e083      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	e07f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053e8:	2320      	movs	r3, #32
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e07b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e077      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	bf00      	nop
 8005400:	e072      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <UART_SetConfig+0x668>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d132      	bne.n	8005472 <UART_SetConfig+0x55a>
 800540c:	4b5a      	ldr	r3, [pc, #360]	; (8005578 <UART_SetConfig+0x660>)
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	2b05      	cmp	r3, #5
 8005416:	d827      	bhi.n	8005468 <UART_SetConfig+0x550>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x508>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005439 	.word	0x08005439
 8005424:	08005441 	.word	0x08005441
 8005428:	08005449 	.word	0x08005449
 800542c:	08005451 	.word	0x08005451
 8005430:	08005459 	.word	0x08005459
 8005434:	08005461 	.word	0x08005461
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e053      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e04f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e04b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e047      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005458:	2320      	movs	r3, #32
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e043      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e03f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	bf00      	nop
 8005470:	e03a      	b.n	80054e8 <UART_SetConfig+0x5d0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a43      	ldr	r2, [pc, #268]	; (8005584 <UART_SetConfig+0x66c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d132      	bne.n	80054e2 <UART_SetConfig+0x5ca>
 800547c:	4b3e      	ldr	r3, [pc, #248]	; (8005578 <UART_SetConfig+0x660>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	2b05      	cmp	r3, #5
 8005486:	d827      	bhi.n	80054d8 <UART_SetConfig+0x5c0>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x578>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054b1 	.word	0x080054b1
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e01b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e017      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e013      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c6:	e00f      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	e007      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <UART_SetConfig+0x5d0>
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a25      	ldr	r2, [pc, #148]	; (8005584 <UART_SetConfig+0x66c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	f040 80b8 	bne.w	8005664 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d019      	beq.n	8005530 <UART_SetConfig+0x618>
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	dc04      	bgt.n	800550a <UART_SetConfig+0x5f2>
 8005500:	2b02      	cmp	r3, #2
 8005502:	d009      	beq.n	8005518 <UART_SetConfig+0x600>
 8005504:	2b04      	cmp	r3, #4
 8005506:	d00b      	beq.n	8005520 <UART_SetConfig+0x608>
 8005508:	e042      	b.n	8005590 <UART_SetConfig+0x678>
 800550a:	2b20      	cmp	r3, #32
 800550c:	d02b      	beq.n	8005566 <UART_SetConfig+0x64e>
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d02c      	beq.n	800556c <UART_SetConfig+0x654>
 8005512:	2b10      	cmp	r3, #16
 8005514:	d014      	beq.n	8005540 <UART_SetConfig+0x628>
 8005516:	e03b      	b.n	8005590 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005518:	f7ff f806 	bl	8004528 <HAL_RCCEx_GetD3PCLK1Freq>
 800551c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800551e:	e03d      	b.n	800559c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff f815 	bl	8004554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800552e:	e035      	b.n	800559c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff f959 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800553e:	e02d      	b.n	800559c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005540:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <UART_SetConfig+0x660>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <UART_SetConfig+0x660>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <UART_SetConfig+0x670>)
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800555e:	e01d      	b.n	800559c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <UART_SetConfig+0x670>)
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005564:	e01a      	b.n	800559c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <UART_SetConfig+0x674>)
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800556a:	e017      	b.n	800559c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005572:	e013      	b.n	800559c <UART_SetConfig+0x684>
 8005574:	40011400 	.word	0x40011400
 8005578:	58024400 	.word	0x58024400
 800557c:	40007800 	.word	0x40007800
 8005580:	40007c00 	.word	0x40007c00
 8005584:	58000c00 	.word	0x58000c00
 8005588:	03d09000 	.word	0x03d09000
 800558c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800559a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 824d 	beq.w	8005a3e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	4aad      	ldr	r2, [pc, #692]	; (8005860 <UART_SetConfig+0x948>)
 80055aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	6a3a      	ldr	r2, [r7, #32]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d305      	bcc.n	80055d4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d903      	bls.n	80055dc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055da:	e230      	b.n	8005a3e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	4618      	mov	r0, r3
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	4a9d      	ldr	r2, [pc, #628]	; (8005860 <UART_SetConfig+0x948>)
 80055ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	f7fa feca 	bl	8000390 <__aeabi_uldivmod>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4619      	mov	r1, r3
 8005602:	4622      	mov	r2, r4
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	f04f 0400 	mov.w	r4, #0
 800560c:	0214      	lsls	r4, r2, #8
 800560e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005612:	020b      	lsls	r3, r1, #8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6852      	ldr	r2, [r2, #4]
 8005618:	0852      	lsrs	r2, r2, #1
 800561a:	4611      	mov	r1, r2
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	eb13 0b01 	adds.w	fp, r3, r1
 8005624:	eb44 0c02 	adc.w	ip, r4, r2
 8005628:	4658      	mov	r0, fp
 800562a:	4661      	mov	r1, ip
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f04f 0400 	mov.w	r4, #0
 8005634:	461a      	mov	r2, r3
 8005636:	4623      	mov	r3, r4
 8005638:	f7fa feaa 	bl	8000390 <__aeabi_uldivmod>
 800563c:	4603      	mov	r3, r0
 800563e:	460c      	mov	r4, r1
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005648:	d308      	bcc.n	800565c <UART_SetConfig+0x744>
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d204      	bcs.n	800565c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e1f0      	b.n	8005a3e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005662:	e1ec      	b.n	8005a3e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	f040 8100 	bne.w	8005870 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	f200 80b7 	bhi.w	80057e8 <UART_SetConfig+0x8d0>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x768>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	08005785 	.word	0x08005785
 8005684:	0800578d 	.word	0x0800578d
 8005688:	080057e9 	.word	0x080057e9
 800568c:	080057e9 	.word	0x080057e9
 8005690:	08005795 	.word	0x08005795
 8005694:	080057e9 	.word	0x080057e9
 8005698:	080057e9 	.word	0x080057e9
 800569c:	080057e9 	.word	0x080057e9
 80056a0:	080057a5 	.word	0x080057a5
 80056a4:	080057e9 	.word	0x080057e9
 80056a8:	080057e9 	.word	0x080057e9
 80056ac:	080057e9 	.word	0x080057e9
 80056b0:	080057e9 	.word	0x080057e9
 80056b4:	080057e9 	.word	0x080057e9
 80056b8:	080057e9 	.word	0x080057e9
 80056bc:	080057e9 	.word	0x080057e9
 80056c0:	080057b5 	.word	0x080057b5
 80056c4:	080057e9 	.word	0x080057e9
 80056c8:	080057e9 	.word	0x080057e9
 80056cc:	080057e9 	.word	0x080057e9
 80056d0:	080057e9 	.word	0x080057e9
 80056d4:	080057e9 	.word	0x080057e9
 80056d8:	080057e9 	.word	0x080057e9
 80056dc:	080057e9 	.word	0x080057e9
 80056e0:	080057e9 	.word	0x080057e9
 80056e4:	080057e9 	.word	0x080057e9
 80056e8:	080057e9 	.word	0x080057e9
 80056ec:	080057e9 	.word	0x080057e9
 80056f0:	080057e9 	.word	0x080057e9
 80056f4:	080057e9 	.word	0x080057e9
 80056f8:	080057e9 	.word	0x080057e9
 80056fc:	080057e9 	.word	0x080057e9
 8005700:	080057db 	.word	0x080057db
 8005704:	080057e9 	.word	0x080057e9
 8005708:	080057e9 	.word	0x080057e9
 800570c:	080057e9 	.word	0x080057e9
 8005710:	080057e9 	.word	0x080057e9
 8005714:	080057e9 	.word	0x080057e9
 8005718:	080057e9 	.word	0x080057e9
 800571c:	080057e9 	.word	0x080057e9
 8005720:	080057e9 	.word	0x080057e9
 8005724:	080057e9 	.word	0x080057e9
 8005728:	080057e9 	.word	0x080057e9
 800572c:	080057e9 	.word	0x080057e9
 8005730:	080057e9 	.word	0x080057e9
 8005734:	080057e9 	.word	0x080057e9
 8005738:	080057e9 	.word	0x080057e9
 800573c:	080057e9 	.word	0x080057e9
 8005740:	080057e9 	.word	0x080057e9
 8005744:	080057e9 	.word	0x080057e9
 8005748:	080057e9 	.word	0x080057e9
 800574c:	080057e9 	.word	0x080057e9
 8005750:	080057e9 	.word	0x080057e9
 8005754:	080057e9 	.word	0x080057e9
 8005758:	080057e9 	.word	0x080057e9
 800575c:	080057e9 	.word	0x080057e9
 8005760:	080057e9 	.word	0x080057e9
 8005764:	080057e9 	.word	0x080057e9
 8005768:	080057e9 	.word	0x080057e9
 800576c:	080057e9 	.word	0x080057e9
 8005770:	080057e9 	.word	0x080057e9
 8005774:	080057e9 	.word	0x080057e9
 8005778:	080057e9 	.word	0x080057e9
 800577c:	080057e9 	.word	0x080057e9
 8005780:	080057e1 	.word	0x080057e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fd ffb6 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8005788:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800578a:	e033      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800578c:	f7fd ffc8 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8005790:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005792:	e02f      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005794:	f107 0314 	add.w	r3, r7, #20
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fedb 	bl	8004554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a2:	e027      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff f81f 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057b2:	e01f      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <UART_SetConfig+0x94c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <UART_SetConfig+0x94c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a27      	ldr	r2, [pc, #156]	; (8005868 <UART_SetConfig+0x950>)
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057d2:	e00f      	b.n	80057f4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <UART_SetConfig+0x950>)
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057d8:	e00c      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <UART_SetConfig+0x954>)
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057de:	e009      	b.n	80057f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e6:	e005      	b.n	80057f4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8121 	beq.w	8005a3e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <UART_SetConfig+0x948>)
 8005802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005806:	461a      	mov	r2, r3
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	fbb3 f3f2 	udiv	r3, r3, r2
 800580e:	005a      	lsls	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	441a      	add	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	b29b      	uxth	r3, r3
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b0f      	cmp	r3, #15
 8005828:	d916      	bls.n	8005858 <UART_SetConfig+0x940>
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d212      	bcs.n	8005858 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	b29b      	uxth	r3, r3
 8005836:	f023 030f 	bic.w	r3, r3, #15
 800583a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	b29a      	uxth	r2, r3
 8005848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800584a:	4313      	orrs	r3, r2
 800584c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e0f2      	b.n	8005a3e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800585e:	e0ee      	b.n	8005a3e <UART_SetConfig+0xb26>
 8005860:	08008be8 	.word	0x08008be8
 8005864:	58024400 	.word	0x58024400
 8005868:	03d09000 	.word	0x03d09000
 800586c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	f200 80b7 	bhi.w	80059e8 <UART_SetConfig+0xad0>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x968>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005985 	.word	0x08005985
 8005884:	0800598d 	.word	0x0800598d
 8005888:	080059e9 	.word	0x080059e9
 800588c:	080059e9 	.word	0x080059e9
 8005890:	08005995 	.word	0x08005995
 8005894:	080059e9 	.word	0x080059e9
 8005898:	080059e9 	.word	0x080059e9
 800589c:	080059e9 	.word	0x080059e9
 80058a0:	080059a5 	.word	0x080059a5
 80058a4:	080059e9 	.word	0x080059e9
 80058a8:	080059e9 	.word	0x080059e9
 80058ac:	080059e9 	.word	0x080059e9
 80058b0:	080059e9 	.word	0x080059e9
 80058b4:	080059e9 	.word	0x080059e9
 80058b8:	080059e9 	.word	0x080059e9
 80058bc:	080059e9 	.word	0x080059e9
 80058c0:	080059b5 	.word	0x080059b5
 80058c4:	080059e9 	.word	0x080059e9
 80058c8:	080059e9 	.word	0x080059e9
 80058cc:	080059e9 	.word	0x080059e9
 80058d0:	080059e9 	.word	0x080059e9
 80058d4:	080059e9 	.word	0x080059e9
 80058d8:	080059e9 	.word	0x080059e9
 80058dc:	080059e9 	.word	0x080059e9
 80058e0:	080059e9 	.word	0x080059e9
 80058e4:	080059e9 	.word	0x080059e9
 80058e8:	080059e9 	.word	0x080059e9
 80058ec:	080059e9 	.word	0x080059e9
 80058f0:	080059e9 	.word	0x080059e9
 80058f4:	080059e9 	.word	0x080059e9
 80058f8:	080059e9 	.word	0x080059e9
 80058fc:	080059e9 	.word	0x080059e9
 8005900:	080059db 	.word	0x080059db
 8005904:	080059e9 	.word	0x080059e9
 8005908:	080059e9 	.word	0x080059e9
 800590c:	080059e9 	.word	0x080059e9
 8005910:	080059e9 	.word	0x080059e9
 8005914:	080059e9 	.word	0x080059e9
 8005918:	080059e9 	.word	0x080059e9
 800591c:	080059e9 	.word	0x080059e9
 8005920:	080059e9 	.word	0x080059e9
 8005924:	080059e9 	.word	0x080059e9
 8005928:	080059e9 	.word	0x080059e9
 800592c:	080059e9 	.word	0x080059e9
 8005930:	080059e9 	.word	0x080059e9
 8005934:	080059e9 	.word	0x080059e9
 8005938:	080059e9 	.word	0x080059e9
 800593c:	080059e9 	.word	0x080059e9
 8005940:	080059e9 	.word	0x080059e9
 8005944:	080059e9 	.word	0x080059e9
 8005948:	080059e9 	.word	0x080059e9
 800594c:	080059e9 	.word	0x080059e9
 8005950:	080059e9 	.word	0x080059e9
 8005954:	080059e9 	.word	0x080059e9
 8005958:	080059e9 	.word	0x080059e9
 800595c:	080059e9 	.word	0x080059e9
 8005960:	080059e9 	.word	0x080059e9
 8005964:	080059e9 	.word	0x080059e9
 8005968:	080059e9 	.word	0x080059e9
 800596c:	080059e9 	.word	0x080059e9
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059e9 	.word	0x080059e9
 800597c:	080059e9 	.word	0x080059e9
 8005980:	080059e1 	.word	0x080059e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7fd feb6 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8005988:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800598a:	e033      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7fd fec8 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8005990:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005992:	e02f      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fddb 	bl	8004554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a2:	e027      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe ff1f 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059b2:	e01f      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b4:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <UART_SetConfig+0xb50>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059c0:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <UART_SetConfig+0xb50>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a28      	ldr	r2, [pc, #160]	; (8005a6c <UART_SetConfig+0xb54>)
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059d2:	e00f      	b.n	80059f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <UART_SetConfig+0xb54>)
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d8:	e00c      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <UART_SetConfig+0xb58>)
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059de:	e009      	b.n	80059f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e6:	e005      	b.n	80059f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059f2:	bf00      	nop
    }

    if (pclk != 0U)
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d021      	beq.n	8005a3e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <UART_SetConfig+0xb5c>)
 8005a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d908      	bls.n	8005a38 <UART_SetConfig+0xb20>
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d204      	bcs.n	8005a38 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e002      	b.n	8005a3e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005a5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3738      	adds	r7, #56	; 0x38
 8005a62:	46bd      	mov	sp, r7
 8005a64:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	03d09000 	.word	0x03d09000
 8005a70:	003d0900 	.word	0x003d0900
 8005a74:	08008be8 	.word	0x08008be8

08005a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d10a      	bne.n	8005b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bcc:	f7fb fdc8 	bl	8001760 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d10e      	bne.n	8005bfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f82c 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e022      	b.n	8005c44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d10e      	bne.n	8005c2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f816 	bl	8005c4c <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00c      	b.n	8005c44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5c:	e062      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d05e      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fb fd7b 	bl	8001760 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11d      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e045      	b.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d02e      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd4:	d126      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e00f      	b.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d08d      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e027      	b.n	8005db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2224      	movs	r2, #36	; 0x24
 8005d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e02d      	b.n	8005e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2224      	movs	r2, #36	; 0x24
 8005de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f850 	bl	8005eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e02d      	b.n	8005eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2224      	movs	r2, #36	; 0x24
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f812 	bl	8005eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	; (8005f80 <UARTEx_SetNbDataToProcess+0xc8>)
 8005ec2:	f107 0314 	add.w	r3, r7, #20
 8005ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005eca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005ece:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <UARTEx_SetNbDataToProcess+0xcc>)
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ed8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ef4:	e03d      	b.n	8005f72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005efa:	2310      	movs	r3, #16
 8005efc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	0e5b      	lsrs	r3, r3, #25
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0f5b      	lsrs	r3, r3, #29
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005f1e:	7fbb      	ldrb	r3, [r7, #30]
 8005f20:	7f3a      	ldrb	r2, [r7, #28]
 8005f22:	f107 0120 	add.w	r1, r7, #32
 8005f26:	440a      	add	r2, r1
 8005f28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005f2c:	fb02 f303 	mul.w	r3, r2, r3
 8005f30:	7f3a      	ldrb	r2, [r7, #28]
 8005f32:	f107 0120 	add.w	r1, r7, #32
 8005f36:	440a      	add	r2, r1
 8005f38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	7f7a      	ldrb	r2, [r7, #29]
 8005f4c:	f107 0120 	add.w	r1, r7, #32
 8005f50:	440a      	add	r2, r1
 8005f52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	7f7a      	ldrb	r2, [r7, #29]
 8005f5c:	f107 0120 	add.w	r1, r7, #32
 8005f60:	440a      	add	r2, r1
 8005f62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005f66:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f72:	bf00      	nop
 8005f74:	3724      	adds	r7, #36	; 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	08008bc8 	.word	0x08008bc8
 8005f84:	08008bd0 	.word	0x08008bd0

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000001c 	.word	0x2000001c

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0d      	ldr	r6, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1ba4      	subs	r4, r4, r6
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	42a5      	cmp	r5, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4e0b      	ldr	r6, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f002 fcd8 	bl	800895c <_init>
 8005fac:	1ba4      	subs	r4, r4, r6
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	42a5      	cmp	r5, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fbc:	4798      	blx	r3
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc6:	4798      	blx	r3
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08008ec8 	.word	0x08008ec8
 8005fd0:	08008ec8 	.word	0x08008ec8
 8005fd4:	08008ec8 	.word	0x08008ec8
 8005fd8:	08008ecc 	.word	0x08008ecc

08005fdc <memcpy>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	1e43      	subs	r3, r0, #1
 8005fe0:	440a      	add	r2, r1
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xc>
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff0:	e7f7      	b.n	8005fe2 <memcpy+0x6>

08005ff2 <memset>:
 8005ff2:	4402      	add	r2, r0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d100      	bne.n	8005ffc <memset+0xa>
 8005ffa:	4770      	bx	lr
 8005ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8006000:	e7f9      	b.n	8005ff6 <memset+0x4>

08006002 <__cvt>:
 8006002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006004:	ed2d 8b02 	vpush	{d8}
 8006008:	eeb0 8b40 	vmov.f64	d8, d0
 800600c:	b085      	sub	sp, #20
 800600e:	4617      	mov	r7, r2
 8006010:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006012:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006014:	ee18 2a90 	vmov	r2, s17
 8006018:	f025 0520 	bic.w	r5, r5, #32
 800601c:	2a00      	cmp	r2, #0
 800601e:	bfb6      	itet	lt
 8006020:	222d      	movlt	r2, #45	; 0x2d
 8006022:	2200      	movge	r2, #0
 8006024:	eeb1 8b40 	vneglt.f64	d8, d0
 8006028:	2d46      	cmp	r5, #70	; 0x46
 800602a:	460c      	mov	r4, r1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	d004      	beq.n	800603a <__cvt+0x38>
 8006030:	2d45      	cmp	r5, #69	; 0x45
 8006032:	d100      	bne.n	8006036 <__cvt+0x34>
 8006034:	3401      	adds	r4, #1
 8006036:	2102      	movs	r1, #2
 8006038:	e000      	b.n	800603c <__cvt+0x3a>
 800603a:	2103      	movs	r1, #3
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	ab02      	add	r3, sp, #8
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4622      	mov	r2, r4
 8006046:	4633      	mov	r3, r6
 8006048:	eeb0 0b48 	vmov.f64	d0, d8
 800604c:	f000 fdfc 	bl	8006c48 <_dtoa_r>
 8006050:	2d47      	cmp	r5, #71	; 0x47
 8006052:	d101      	bne.n	8006058 <__cvt+0x56>
 8006054:	07fb      	lsls	r3, r7, #31
 8006056:	d51e      	bpl.n	8006096 <__cvt+0x94>
 8006058:	2d46      	cmp	r5, #70	; 0x46
 800605a:	eb00 0304 	add.w	r3, r0, r4
 800605e:	d10c      	bne.n	800607a <__cvt+0x78>
 8006060:	7802      	ldrb	r2, [r0, #0]
 8006062:	2a30      	cmp	r2, #48	; 0x30
 8006064:	d107      	bne.n	8006076 <__cvt+0x74>
 8006066:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606e:	bf1c      	itt	ne
 8006070:	f1c4 0401 	rsbne	r4, r4, #1
 8006074:	6034      	strne	r4, [r6, #0]
 8006076:	6832      	ldr	r2, [r6, #0]
 8006078:	4413      	add	r3, r2
 800607a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006082:	d007      	beq.n	8006094 <__cvt+0x92>
 8006084:	2130      	movs	r1, #48	; 0x30
 8006086:	9a03      	ldr	r2, [sp, #12]
 8006088:	429a      	cmp	r2, r3
 800608a:	d204      	bcs.n	8006096 <__cvt+0x94>
 800608c:	1c54      	adds	r4, r2, #1
 800608e:	9403      	str	r4, [sp, #12]
 8006090:	7011      	strb	r1, [r2, #0]
 8006092:	e7f8      	b.n	8006086 <__cvt+0x84>
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800609a:	1a1b      	subs	r3, r3, r0
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	b005      	add	sp, #20
 80060a0:	ecbd 8b02 	vpop	{d8}
 80060a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060a6 <__exponent>:
 80060a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a8:	2900      	cmp	r1, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	bfba      	itte	lt
 80060ae:	4249      	neglt	r1, r1
 80060b0:	232d      	movlt	r3, #45	; 0x2d
 80060b2:	232b      	movge	r3, #43	; 0x2b
 80060b4:	2909      	cmp	r1, #9
 80060b6:	f804 2b02 	strb.w	r2, [r4], #2
 80060ba:	7043      	strb	r3, [r0, #1]
 80060bc:	dd20      	ble.n	8006100 <__exponent+0x5a>
 80060be:	f10d 0307 	add.w	r3, sp, #7
 80060c2:	461f      	mov	r7, r3
 80060c4:	260a      	movs	r6, #10
 80060c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80060ca:	fb06 1115 	mls	r1, r6, r5, r1
 80060ce:	3130      	adds	r1, #48	; 0x30
 80060d0:	2d09      	cmp	r5, #9
 80060d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060d6:	f103 32ff 	add.w	r2, r3, #4294967295
 80060da:	4629      	mov	r1, r5
 80060dc:	dc09      	bgt.n	80060f2 <__exponent+0x4c>
 80060de:	3130      	adds	r1, #48	; 0x30
 80060e0:	3b02      	subs	r3, #2
 80060e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060e6:	42bb      	cmp	r3, r7
 80060e8:	4622      	mov	r2, r4
 80060ea:	d304      	bcc.n	80060f6 <__exponent+0x50>
 80060ec:	1a10      	subs	r0, r2, r0
 80060ee:	b003      	add	sp, #12
 80060f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f2:	4613      	mov	r3, r2
 80060f4:	e7e7      	b.n	80060c6 <__exponent+0x20>
 80060f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fa:	f804 2b01 	strb.w	r2, [r4], #1
 80060fe:	e7f2      	b.n	80060e6 <__exponent+0x40>
 8006100:	2330      	movs	r3, #48	; 0x30
 8006102:	4419      	add	r1, r3
 8006104:	7083      	strb	r3, [r0, #2]
 8006106:	1d02      	adds	r2, r0, #4
 8006108:	70c1      	strb	r1, [r0, #3]
 800610a:	e7ef      	b.n	80060ec <__exponent+0x46>
 800610c:	0000      	movs	r0, r0
	...

08006110 <_printf_float>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	b08d      	sub	sp, #52	; 0x34
 8006116:	460c      	mov	r4, r1
 8006118:	4616      	mov	r6, r2
 800611a:	461f      	mov	r7, r3
 800611c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006120:	4605      	mov	r5, r0
 8006122:	f001 fc57 	bl	80079d4 <_localeconv_r>
 8006126:	f8d0 b000 	ldr.w	fp, [r0]
 800612a:	4658      	mov	r0, fp
 800612c:	f7fa f8d8 	bl	80002e0 <strlen>
 8006130:	2300      	movs	r3, #0
 8006132:	930a      	str	r3, [sp, #40]	; 0x28
 8006134:	f8d8 3000 	ldr.w	r3, [r8]
 8006138:	9005      	str	r0, [sp, #20]
 800613a:	3307      	adds	r3, #7
 800613c:	f023 0307 	bic.w	r3, r3, #7
 8006140:	f103 0108 	add.w	r1, r3, #8
 8006144:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	f8c8 1000 	str.w	r1, [r8]
 800614e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006152:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006156:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80063e0 <_printf_float+0x2d0>
 800615a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800615e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006162:	eeb4 6b47 	vcmp.f64	d6, d7
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	dd24      	ble.n	80061b6 <_printf_float+0xa6>
 800616c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	d502      	bpl.n	800617c <_printf_float+0x6c>
 8006176:	232d      	movs	r3, #45	; 0x2d
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617c:	499a      	ldr	r1, [pc, #616]	; (80063e8 <_printf_float+0x2d8>)
 800617e:	4b9b      	ldr	r3, [pc, #620]	; (80063ec <_printf_float+0x2dc>)
 8006180:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006184:	bf8c      	ite	hi
 8006186:	4688      	movhi	r8, r1
 8006188:	4698      	movls	r8, r3
 800618a:	f022 0204 	bic.w	r2, r2, #4
 800618e:	2303      	movs	r3, #3
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	f04f 0a00 	mov.w	sl, #0
 8006198:	9700      	str	r7, [sp, #0]
 800619a:	4633      	mov	r3, r6
 800619c:	aa0b      	add	r2, sp, #44	; 0x2c
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f9e1 	bl	8006568 <_printf_common>
 80061a6:	3001      	adds	r0, #1
 80061a8:	f040 8089 	bne.w	80062be <_printf_float+0x1ae>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	b00d      	add	sp, #52	; 0x34
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80061ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061be:	d702      	bvc.n	80061c6 <_printf_float+0xb6>
 80061c0:	498b      	ldr	r1, [pc, #556]	; (80063f0 <_printf_float+0x2e0>)
 80061c2:	4b8c      	ldr	r3, [pc, #560]	; (80063f4 <_printf_float+0x2e4>)
 80061c4:	e7dc      	b.n	8006180 <_printf_float+0x70>
 80061c6:	6861      	ldr	r1, [r4, #4]
 80061c8:	1c4b      	adds	r3, r1, #1
 80061ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ce:	ab0a      	add	r3, sp, #40	; 0x28
 80061d0:	a809      	add	r0, sp, #36	; 0x24
 80061d2:	d13b      	bne.n	800624c <_printf_float+0x13c>
 80061d4:	2106      	movs	r1, #6
 80061d6:	6061      	str	r1, [r4, #4]
 80061d8:	f04f 0c00 	mov.w	ip, #0
 80061dc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80061e0:	e9cd 0900 	strd	r0, r9, [sp]
 80061e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	6861      	ldr	r1, [r4, #4]
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7ff ff08 	bl	8006002 <__cvt>
 80061f2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80061f6:	2b47      	cmp	r3, #71	; 0x47
 80061f8:	4680      	mov	r8, r0
 80061fa:	d109      	bne.n	8006210 <_printf_float+0x100>
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	1cd8      	adds	r0, r3, #3
 8006200:	db02      	blt.n	8006208 <_printf_float+0xf8>
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	4293      	cmp	r3, r2
 8006206:	dd47      	ble.n	8006298 <_printf_float+0x188>
 8006208:	f1a9 0902 	sub.w	r9, r9, #2
 800620c:	fa5f f989 	uxtb.w	r9, r9
 8006210:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006216:	d824      	bhi.n	8006262 <_printf_float+0x152>
 8006218:	3901      	subs	r1, #1
 800621a:	464a      	mov	r2, r9
 800621c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006220:	9109      	str	r1, [sp, #36]	; 0x24
 8006222:	f7ff ff40 	bl	80060a6 <__exponent>
 8006226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006228:	1813      	adds	r3, r2, r0
 800622a:	2a01      	cmp	r2, #1
 800622c:	4682      	mov	sl, r0
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	dc02      	bgt.n	8006238 <_printf_float+0x128>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	07d1      	lsls	r1, r2, #31
 8006236:	d501      	bpl.n	800623c <_printf_float+0x12c>
 8006238:	3301      	adds	r3, #1
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0a9      	beq.n	8006198 <_printf_float+0x88>
 8006244:	232d      	movs	r3, #45	; 0x2d
 8006246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624a:	e7a5      	b.n	8006198 <_printf_float+0x88>
 800624c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006250:	f000 8178 	beq.w	8006544 <_printf_float+0x434>
 8006254:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006258:	d1be      	bne.n	80061d8 <_printf_float+0xc8>
 800625a:	2900      	cmp	r1, #0
 800625c:	d1bc      	bne.n	80061d8 <_printf_float+0xc8>
 800625e:	2101      	movs	r1, #1
 8006260:	e7b9      	b.n	80061d6 <_printf_float+0xc6>
 8006262:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006266:	d119      	bne.n	800629c <_printf_float+0x18c>
 8006268:	2900      	cmp	r1, #0
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	dd0c      	ble.n	8006288 <_printf_float+0x178>
 800626e:	6121      	str	r1, [r4, #16]
 8006270:	b913      	cbnz	r3, 8006278 <_printf_float+0x168>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	07d2      	lsls	r2, r2, #31
 8006276:	d502      	bpl.n	800627e <_printf_float+0x16e>
 8006278:	3301      	adds	r3, #1
 800627a:	440b      	add	r3, r1
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	65a3      	str	r3, [r4, #88]	; 0x58
 8006282:	f04f 0a00 	mov.w	sl, #0
 8006286:	e7d9      	b.n	800623c <_printf_float+0x12c>
 8006288:	b913      	cbnz	r3, 8006290 <_printf_float+0x180>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	07d0      	lsls	r0, r2, #31
 800628e:	d501      	bpl.n	8006294 <_printf_float+0x184>
 8006290:	3302      	adds	r3, #2
 8006292:	e7f3      	b.n	800627c <_printf_float+0x16c>
 8006294:	2301      	movs	r3, #1
 8006296:	e7f1      	b.n	800627c <_printf_float+0x16c>
 8006298:	f04f 0967 	mov.w	r9, #103	; 0x67
 800629c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062a0:	4293      	cmp	r3, r2
 80062a2:	db05      	blt.n	80062b0 <_printf_float+0x1a0>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	07d1      	lsls	r1, r2, #31
 80062aa:	d5e8      	bpl.n	800627e <_printf_float+0x16e>
 80062ac:	3301      	adds	r3, #1
 80062ae:	e7e5      	b.n	800627c <_printf_float+0x16c>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bfd4      	ite	le
 80062b4:	f1c3 0302 	rsble	r3, r3, #2
 80062b8:	2301      	movgt	r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	e7de      	b.n	800627c <_printf_float+0x16c>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	055a      	lsls	r2, r3, #21
 80062c2:	d407      	bmi.n	80062d4 <_printf_float+0x1c4>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	4642      	mov	r2, r8
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d12a      	bne.n	8006328 <_printf_float+0x218>
 80062d2:	e76b      	b.n	80061ac <_printf_float+0x9c>
 80062d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80062d8:	f240 80de 	bls.w	8006498 <_printf_float+0x388>
 80062dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80062e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80062e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e8:	d133      	bne.n	8006352 <_printf_float+0x242>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4a42      	ldr	r2, [pc, #264]	; (80063f8 <_printf_float+0x2e8>)
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f af59 	beq.w	80061ac <_printf_float+0x9c>
 80062fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062fe:	429a      	cmp	r2, r3
 8006300:	db02      	blt.n	8006308 <_printf_float+0x1f8>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	07d8      	lsls	r0, r3, #31
 8006306:	d50f      	bpl.n	8006328 <_printf_float+0x218>
 8006308:	9b05      	ldr	r3, [sp, #20]
 800630a:	465a      	mov	r2, fp
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f af4a 	beq.w	80061ac <_printf_float+0x9c>
 8006318:	f04f 0800 	mov.w	r8, #0
 800631c:	f104 091a 	add.w	r9, r4, #26
 8006320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006322:	3b01      	subs	r3, #1
 8006324:	4543      	cmp	r3, r8
 8006326:	dc09      	bgt.n	800633c <_printf_float+0x22c>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	079b      	lsls	r3, r3, #30
 800632c:	f100 8105 	bmi.w	800653a <_printf_float+0x42a>
 8006330:	68e0      	ldr	r0, [r4, #12]
 8006332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006334:	4298      	cmp	r0, r3
 8006336:	bfb8      	it	lt
 8006338:	4618      	movlt	r0, r3
 800633a:	e739      	b.n	80061b0 <_printf_float+0xa0>
 800633c:	2301      	movs	r3, #1
 800633e:	464a      	mov	r2, r9
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f af30 	beq.w	80061ac <_printf_float+0x9c>
 800634c:	f108 0801 	add.w	r8, r8, #1
 8006350:	e7e6      	b.n	8006320 <_printf_float+0x210>
 8006352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	dc2b      	bgt.n	80063b0 <_printf_float+0x2a0>
 8006358:	2301      	movs	r3, #1
 800635a:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <_printf_float+0x2e8>)
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f af22 	beq.w	80061ac <_printf_float+0x9c>
 8006368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636a:	b923      	cbnz	r3, 8006376 <_printf_float+0x266>
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	b913      	cbnz	r3, 8006376 <_printf_float+0x266>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	d5d8      	bpl.n	8006328 <_printf_float+0x218>
 8006376:	9b05      	ldr	r3, [sp, #20]
 8006378:	465a      	mov	r2, fp
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f af13 	beq.w	80061ac <_printf_float+0x9c>
 8006386:	f04f 0900 	mov.w	r9, #0
 800638a:	f104 0a1a 	add.w	sl, r4, #26
 800638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006390:	425b      	negs	r3, r3
 8006392:	454b      	cmp	r3, r9
 8006394:	dc01      	bgt.n	800639a <_printf_float+0x28a>
 8006396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006398:	e795      	b.n	80062c6 <_printf_float+0x1b6>
 800639a:	2301      	movs	r3, #1
 800639c:	4652      	mov	r2, sl
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	f43f af01 	beq.w	80061ac <_printf_float+0x9c>
 80063aa:	f109 0901 	add.w	r9, r9, #1
 80063ae:	e7ee      	b.n	800638e <_printf_float+0x27e>
 80063b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bfa8      	it	ge
 80063b8:	461a      	movge	r2, r3
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	4691      	mov	r9, r2
 80063be:	dd07      	ble.n	80063d0 <_printf_float+0x2c0>
 80063c0:	4613      	mov	r3, r2
 80063c2:	4631      	mov	r1, r6
 80063c4:	4642      	mov	r2, r8
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f43f aeee 	beq.w	80061ac <_printf_float+0x9c>
 80063d0:	f104 031a 	add.w	r3, r4, #26
 80063d4:	f04f 0a00 	mov.w	sl, #0
 80063d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063dc:	9307      	str	r3, [sp, #28]
 80063de:	e017      	b.n	8006410 <_printf_float+0x300>
 80063e0:	ffffffff 	.word	0xffffffff
 80063e4:	7fefffff 	.word	0x7fefffff
 80063e8:	08008c08 	.word	0x08008c08
 80063ec:	08008c04 	.word	0x08008c04
 80063f0:	08008c10 	.word	0x08008c10
 80063f4:	08008c0c 	.word	0x08008c0c
 80063f8:	08008c14 	.word	0x08008c14
 80063fc:	2301      	movs	r3, #1
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f aed0 	beq.w	80061ac <_printf_float+0x9c>
 800640c:	f10a 0a01 	add.w	sl, sl, #1
 8006410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006412:	9306      	str	r3, [sp, #24]
 8006414:	eba3 0309 	sub.w	r3, r3, r9
 8006418:	4553      	cmp	r3, sl
 800641a:	dcef      	bgt.n	80063fc <_printf_float+0x2ec>
 800641c:	9b06      	ldr	r3, [sp, #24]
 800641e:	4498      	add	r8, r3
 8006420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006424:	429a      	cmp	r2, r3
 8006426:	db15      	blt.n	8006454 <_printf_float+0x344>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d412      	bmi.n	8006454 <_printf_float+0x344>
 800642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006430:	9a06      	ldr	r2, [sp, #24]
 8006432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006434:	1a9a      	subs	r2, r3, r2
 8006436:	eba3 0a01 	sub.w	sl, r3, r1
 800643a:	4592      	cmp	sl, r2
 800643c:	bfa8      	it	ge
 800643e:	4692      	movge	sl, r2
 8006440:	f1ba 0f00 	cmp.w	sl, #0
 8006444:	dc0e      	bgt.n	8006464 <_printf_float+0x354>
 8006446:	f04f 0800 	mov.w	r8, #0
 800644a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800644e:	f104 091a 	add.w	r9, r4, #26
 8006452:	e019      	b.n	8006488 <_printf_float+0x378>
 8006454:	9b05      	ldr	r3, [sp, #20]
 8006456:	465a      	mov	r2, fp
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	d1e5      	bne.n	800642e <_printf_float+0x31e>
 8006462:	e6a3      	b.n	80061ac <_printf_float+0x9c>
 8006464:	4653      	mov	r3, sl
 8006466:	4642      	mov	r2, r8
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	d1e9      	bne.n	8006446 <_printf_float+0x336>
 8006472:	e69b      	b.n	80061ac <_printf_float+0x9c>
 8006474:	2301      	movs	r3, #1
 8006476:	464a      	mov	r2, r9
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	f43f ae94 	beq.w	80061ac <_printf_float+0x9c>
 8006484:	f108 0801 	add.w	r8, r8, #1
 8006488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	eba3 030a 	sub.w	r3, r3, sl
 8006492:	4543      	cmp	r3, r8
 8006494:	dcee      	bgt.n	8006474 <_printf_float+0x364>
 8006496:	e747      	b.n	8006328 <_printf_float+0x218>
 8006498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649a:	2a01      	cmp	r2, #1
 800649c:	dc01      	bgt.n	80064a2 <_printf_float+0x392>
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	d539      	bpl.n	8006516 <_printf_float+0x406>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4642      	mov	r2, r8
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae7d 	beq.w	80061ac <_printf_float+0x9c>
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	465a      	mov	r2, fp
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f108 0801 	add.w	r8, r8, #1
 80064c2:	f43f ae73 	beq.w	80061ac <_printf_float+0x9c>
 80064c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80064ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80064d8:	d018      	beq.n	800650c <_printf_float+0x3fc>
 80064da:	4642      	mov	r2, r8
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	d10e      	bne.n	8006504 <_printf_float+0x3f4>
 80064e6:	e661      	b.n	80061ac <_printf_float+0x9c>
 80064e8:	2301      	movs	r3, #1
 80064ea:	464a      	mov	r2, r9
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f ae5a 	beq.w	80061ac <_printf_float+0x9c>
 80064f8:	f108 0801 	add.w	r8, r8, #1
 80064fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fe:	3b01      	subs	r3, #1
 8006500:	4543      	cmp	r3, r8
 8006502:	dcf1      	bgt.n	80064e8 <_printf_float+0x3d8>
 8006504:	4653      	mov	r3, sl
 8006506:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800650a:	e6dd      	b.n	80062c8 <_printf_float+0x1b8>
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	f104 091a 	add.w	r9, r4, #26
 8006514:	e7f2      	b.n	80064fc <_printf_float+0x3ec>
 8006516:	2301      	movs	r3, #1
 8006518:	e7df      	b.n	80064da <_printf_float+0x3ca>
 800651a:	2301      	movs	r3, #1
 800651c:	464a      	mov	r2, r9
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	f43f ae41 	beq.w	80061ac <_printf_float+0x9c>
 800652a:	f108 0801 	add.w	r8, r8, #1
 800652e:	68e3      	ldr	r3, [r4, #12]
 8006530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	4543      	cmp	r3, r8
 8006536:	dcf0      	bgt.n	800651a <_printf_float+0x40a>
 8006538:	e6fa      	b.n	8006330 <_printf_float+0x220>
 800653a:	f04f 0800 	mov.w	r8, #0
 800653e:	f104 0919 	add.w	r9, r4, #25
 8006542:	e7f4      	b.n	800652e <_printf_float+0x41e>
 8006544:	2900      	cmp	r1, #0
 8006546:	f43f ae8a 	beq.w	800625e <_printf_float+0x14e>
 800654a:	f04f 0c00 	mov.w	ip, #0
 800654e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006552:	e9cd 0900 	strd	r0, r9, [sp]
 8006556:	6022      	str	r2, [r4, #0]
 8006558:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff fd50 	bl	8006002 <__cvt>
 8006562:	4680      	mov	r8, r0
 8006564:	e64a      	b.n	80061fc <_printf_float+0xec>
 8006566:	bf00      	nop

08006568 <_printf_common>:
 8006568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	4691      	mov	r9, r2
 800656e:	461f      	mov	r7, r3
 8006570:	688a      	ldr	r2, [r1, #8]
 8006572:	690b      	ldr	r3, [r1, #16]
 8006574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006578:	4293      	cmp	r3, r2
 800657a:	bfb8      	it	lt
 800657c:	4613      	movlt	r3, r2
 800657e:	f8c9 3000 	str.w	r3, [r9]
 8006582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006586:	4606      	mov	r6, r0
 8006588:	460c      	mov	r4, r1
 800658a:	b112      	cbz	r2, 8006592 <_printf_common+0x2a>
 800658c:	3301      	adds	r3, #1
 800658e:	f8c9 3000 	str.w	r3, [r9]
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	0699      	lsls	r1, r3, #26
 8006596:	bf42      	ittt	mi
 8006598:	f8d9 3000 	ldrmi.w	r3, [r9]
 800659c:	3302      	addmi	r3, #2
 800659e:	f8c9 3000 	strmi.w	r3, [r9]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d107      	bne.n	80065ba <_printf_common+0x52>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	f8d9 2000 	ldr.w	r2, [r9]
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	dc28      	bgt.n	800660c <_printf_common+0xa4>
 80065ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	3300      	adds	r3, #0
 80065c2:	bf18      	it	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	0692      	lsls	r2, r2, #26
 80065c8:	d42d      	bmi.n	8006626 <_printf_common+0xbe>
 80065ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ce:	4639      	mov	r1, r7
 80065d0:	4630      	mov	r0, r6
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d020      	beq.n	800661a <_printf_common+0xb2>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	68e5      	ldr	r5, [r4, #12]
 80065dc:	f8d9 2000 	ldr.w	r2, [r9]
 80065e0:	f003 0306 	and.w	r3, r3, #6
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	bf08      	it	eq
 80065e8:	1aad      	subeq	r5, r5, r2
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	6922      	ldr	r2, [r4, #16]
 80065ee:	bf0c      	ite	eq
 80065f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f4:	2500      	movne	r5, #0
 80065f6:	4293      	cmp	r3, r2
 80065f8:	bfc4      	itt	gt
 80065fa:	1a9b      	subgt	r3, r3, r2
 80065fc:	18ed      	addgt	r5, r5, r3
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	341a      	adds	r4, #26
 8006604:	454d      	cmp	r5, r9
 8006606:	d11a      	bne.n	800663e <_printf_common+0xd6>
 8006608:	2000      	movs	r0, #0
 800660a:	e008      	b.n	800661e <_printf_common+0xb6>
 800660c:	2301      	movs	r3, #1
 800660e:	4652      	mov	r2, sl
 8006610:	4639      	mov	r1, r7
 8006612:	4630      	mov	r0, r6
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d103      	bne.n	8006622 <_printf_common+0xba>
 800661a:	f04f 30ff 	mov.w	r0, #4294967295
 800661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006622:	3501      	adds	r5, #1
 8006624:	e7c3      	b.n	80065ae <_printf_common+0x46>
 8006626:	18e1      	adds	r1, r4, r3
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	2030      	movs	r0, #48	; 0x30
 800662c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006630:	4422      	add	r2, r4
 8006632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800663a:	3302      	adds	r3, #2
 800663c:	e7c5      	b.n	80065ca <_printf_common+0x62>
 800663e:	2301      	movs	r3, #1
 8006640:	4622      	mov	r2, r4
 8006642:	4639      	mov	r1, r7
 8006644:	4630      	mov	r0, r6
 8006646:	47c0      	blx	r8
 8006648:	3001      	adds	r0, #1
 800664a:	d0e6      	beq.n	800661a <_printf_common+0xb2>
 800664c:	f109 0901 	add.w	r9, r9, #1
 8006650:	e7d8      	b.n	8006604 <_printf_common+0x9c>
	...

08006654 <_printf_i>:
 8006654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006658:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800665c:	460c      	mov	r4, r1
 800665e:	7e09      	ldrb	r1, [r1, #24]
 8006660:	b085      	sub	sp, #20
 8006662:	296e      	cmp	r1, #110	; 0x6e
 8006664:	4617      	mov	r7, r2
 8006666:	4606      	mov	r6, r0
 8006668:	4698      	mov	r8, r3
 800666a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800666c:	f000 80b3 	beq.w	80067d6 <_printf_i+0x182>
 8006670:	d822      	bhi.n	80066b8 <_printf_i+0x64>
 8006672:	2963      	cmp	r1, #99	; 0x63
 8006674:	d036      	beq.n	80066e4 <_printf_i+0x90>
 8006676:	d80a      	bhi.n	800668e <_printf_i+0x3a>
 8006678:	2900      	cmp	r1, #0
 800667a:	f000 80b9 	beq.w	80067f0 <_printf_i+0x19c>
 800667e:	2958      	cmp	r1, #88	; 0x58
 8006680:	f000 8083 	beq.w	800678a <_printf_i+0x136>
 8006684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006688:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800668c:	e032      	b.n	80066f4 <_printf_i+0xa0>
 800668e:	2964      	cmp	r1, #100	; 0x64
 8006690:	d001      	beq.n	8006696 <_printf_i+0x42>
 8006692:	2969      	cmp	r1, #105	; 0x69
 8006694:	d1f6      	bne.n	8006684 <_printf_i+0x30>
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	6813      	ldr	r3, [r2, #0]
 800669a:	0605      	lsls	r5, r0, #24
 800669c:	f103 0104 	add.w	r1, r3, #4
 80066a0:	d52a      	bpl.n	80066f8 <_printf_i+0xa4>
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da03      	bge.n	80066b2 <_printf_i+0x5e>
 80066aa:	222d      	movs	r2, #45	; 0x2d
 80066ac:	425b      	negs	r3, r3
 80066ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066b2:	486f      	ldr	r0, [pc, #444]	; (8006870 <_printf_i+0x21c>)
 80066b4:	220a      	movs	r2, #10
 80066b6:	e039      	b.n	800672c <_printf_i+0xd8>
 80066b8:	2973      	cmp	r1, #115	; 0x73
 80066ba:	f000 809d 	beq.w	80067f8 <_printf_i+0x1a4>
 80066be:	d808      	bhi.n	80066d2 <_printf_i+0x7e>
 80066c0:	296f      	cmp	r1, #111	; 0x6f
 80066c2:	d020      	beq.n	8006706 <_printf_i+0xb2>
 80066c4:	2970      	cmp	r1, #112	; 0x70
 80066c6:	d1dd      	bne.n	8006684 <_printf_i+0x30>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	f043 0320 	orr.w	r3, r3, #32
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	e003      	b.n	80066da <_printf_i+0x86>
 80066d2:	2975      	cmp	r1, #117	; 0x75
 80066d4:	d017      	beq.n	8006706 <_printf_i+0xb2>
 80066d6:	2978      	cmp	r1, #120	; 0x78
 80066d8:	d1d4      	bne.n	8006684 <_printf_i+0x30>
 80066da:	2378      	movs	r3, #120	; 0x78
 80066dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066e0:	4864      	ldr	r0, [pc, #400]	; (8006874 <_printf_i+0x220>)
 80066e2:	e055      	b.n	8006790 <_printf_i+0x13c>
 80066e4:	6813      	ldr	r3, [r2, #0]
 80066e6:	1d19      	adds	r1, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6011      	str	r1, [r2, #0]
 80066ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e08c      	b.n	8006812 <_printf_i+0x1be>
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6011      	str	r1, [r2, #0]
 80066fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006700:	bf18      	it	ne
 8006702:	b21b      	sxthne	r3, r3
 8006704:	e7cf      	b.n	80066a6 <_printf_i+0x52>
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	6825      	ldr	r5, [r4, #0]
 800670a:	1d18      	adds	r0, r3, #4
 800670c:	6010      	str	r0, [r2, #0]
 800670e:	0628      	lsls	r0, r5, #24
 8006710:	d501      	bpl.n	8006716 <_printf_i+0xc2>
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	e002      	b.n	800671c <_printf_i+0xc8>
 8006716:	0668      	lsls	r0, r5, #25
 8006718:	d5fb      	bpl.n	8006712 <_printf_i+0xbe>
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	4854      	ldr	r0, [pc, #336]	; (8006870 <_printf_i+0x21c>)
 800671e:	296f      	cmp	r1, #111	; 0x6f
 8006720:	bf14      	ite	ne
 8006722:	220a      	movne	r2, #10
 8006724:	2208      	moveq	r2, #8
 8006726:	2100      	movs	r1, #0
 8006728:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800672c:	6865      	ldr	r5, [r4, #4]
 800672e:	60a5      	str	r5, [r4, #8]
 8006730:	2d00      	cmp	r5, #0
 8006732:	f2c0 8095 	blt.w	8006860 <_printf_i+0x20c>
 8006736:	6821      	ldr	r1, [r4, #0]
 8006738:	f021 0104 	bic.w	r1, r1, #4
 800673c:	6021      	str	r1, [r4, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d13d      	bne.n	80067be <_printf_i+0x16a>
 8006742:	2d00      	cmp	r5, #0
 8006744:	f040 808e 	bne.w	8006864 <_printf_i+0x210>
 8006748:	4665      	mov	r5, ip
 800674a:	2a08      	cmp	r2, #8
 800674c:	d10b      	bne.n	8006766 <_printf_i+0x112>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07db      	lsls	r3, r3, #31
 8006752:	d508      	bpl.n	8006766 <_printf_i+0x112>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	bfde      	ittt	le
 800675c:	2330      	movle	r3, #48	; 0x30
 800675e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006762:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006766:	ebac 0305 	sub.w	r3, ip, r5
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	f8cd 8000 	str.w	r8, [sp]
 8006770:	463b      	mov	r3, r7
 8006772:	aa03      	add	r2, sp, #12
 8006774:	4621      	mov	r1, r4
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff fef6 	bl	8006568 <_printf_common>
 800677c:	3001      	adds	r0, #1
 800677e:	d14d      	bne.n	800681c <_printf_i+0x1c8>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	b005      	add	sp, #20
 8006786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800678a:	4839      	ldr	r0, [pc, #228]	; (8006870 <_printf_i+0x21c>)
 800678c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	1d1d      	adds	r5, r3, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6015      	str	r5, [r2, #0]
 800679a:	060a      	lsls	r2, r1, #24
 800679c:	d50b      	bpl.n	80067b6 <_printf_i+0x162>
 800679e:	07ca      	lsls	r2, r1, #31
 80067a0:	bf44      	itt	mi
 80067a2:	f041 0120 	orrmi.w	r1, r1, #32
 80067a6:	6021      	strmi	r1, [r4, #0]
 80067a8:	b91b      	cbnz	r3, 80067b2 <_printf_i+0x15e>
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	f022 0220 	bic.w	r2, r2, #32
 80067b0:	6022      	str	r2, [r4, #0]
 80067b2:	2210      	movs	r2, #16
 80067b4:	e7b7      	b.n	8006726 <_printf_i+0xd2>
 80067b6:	064d      	lsls	r5, r1, #25
 80067b8:	bf48      	it	mi
 80067ba:	b29b      	uxthmi	r3, r3
 80067bc:	e7ef      	b.n	800679e <_printf_i+0x14a>
 80067be:	4665      	mov	r5, ip
 80067c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80067c4:	fb02 3311 	mls	r3, r2, r1, r3
 80067c8:	5cc3      	ldrb	r3, [r0, r3]
 80067ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067ce:	460b      	mov	r3, r1
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d1f5      	bne.n	80067c0 <_printf_i+0x16c>
 80067d4:	e7b9      	b.n	800674a <_printf_i+0xf6>
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	6825      	ldr	r5, [r4, #0]
 80067da:	6961      	ldr	r1, [r4, #20]
 80067dc:	1d18      	adds	r0, r3, #4
 80067de:	6010      	str	r0, [r2, #0]
 80067e0:	0628      	lsls	r0, r5, #24
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	d501      	bpl.n	80067ea <_printf_i+0x196>
 80067e6:	6019      	str	r1, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <_printf_i+0x19c>
 80067ea:	066a      	lsls	r2, r5, #25
 80067ec:	d5fb      	bpl.n	80067e6 <_printf_i+0x192>
 80067ee:	8019      	strh	r1, [r3, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	4665      	mov	r5, ip
 80067f6:	e7b9      	b.n	800676c <_printf_i+0x118>
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	1d19      	adds	r1, r3, #4
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	681d      	ldr	r5, [r3, #0]
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	2100      	movs	r1, #0
 8006804:	4628      	mov	r0, r5
 8006806:	f7f9 fd73 	bl	80002f0 <memchr>
 800680a:	b108      	cbz	r0, 8006810 <_printf_i+0x1bc>
 800680c:	1b40      	subs	r0, r0, r5
 800680e:	6060      	str	r0, [r4, #4]
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	2300      	movs	r3, #0
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681a:	e7a7      	b.n	800676c <_printf_i+0x118>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	462a      	mov	r2, r5
 8006820:	4639      	mov	r1, r7
 8006822:	4630      	mov	r0, r6
 8006824:	47c0      	blx	r8
 8006826:	3001      	adds	r0, #1
 8006828:	d0aa      	beq.n	8006780 <_printf_i+0x12c>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	079b      	lsls	r3, r3, #30
 800682e:	d413      	bmi.n	8006858 <_printf_i+0x204>
 8006830:	68e0      	ldr	r0, [r4, #12]
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	4298      	cmp	r0, r3
 8006836:	bfb8      	it	lt
 8006838:	4618      	movlt	r0, r3
 800683a:	e7a3      	b.n	8006784 <_printf_i+0x130>
 800683c:	2301      	movs	r3, #1
 800683e:	464a      	mov	r2, r9
 8006840:	4639      	mov	r1, r7
 8006842:	4630      	mov	r0, r6
 8006844:	47c0      	blx	r8
 8006846:	3001      	adds	r0, #1
 8006848:	d09a      	beq.n	8006780 <_printf_i+0x12c>
 800684a:	3501      	adds	r5, #1
 800684c:	68e3      	ldr	r3, [r4, #12]
 800684e:	9a03      	ldr	r2, [sp, #12]
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	42ab      	cmp	r3, r5
 8006854:	dcf2      	bgt.n	800683c <_printf_i+0x1e8>
 8006856:	e7eb      	b.n	8006830 <_printf_i+0x1dc>
 8006858:	2500      	movs	r5, #0
 800685a:	f104 0919 	add.w	r9, r4, #25
 800685e:	e7f5      	b.n	800684c <_printf_i+0x1f8>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1ac      	bne.n	80067be <_printf_i+0x16a>
 8006864:	7803      	ldrb	r3, [r0, #0]
 8006866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800686a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686e:	e76c      	b.n	800674a <_printf_i+0xf6>
 8006870:	08008c16 	.word	0x08008c16
 8006874:	08008c27 	.word	0x08008c27

08006878 <iprintf>:
 8006878:	b40f      	push	{r0, r1, r2, r3}
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <iprintf+0x2c>)
 800687c:	b513      	push	{r0, r1, r4, lr}
 800687e:	681c      	ldr	r4, [r3, #0]
 8006880:	b124      	cbz	r4, 800688c <iprintf+0x14>
 8006882:	69a3      	ldr	r3, [r4, #24]
 8006884:	b913      	cbnz	r3, 800688c <iprintf+0x14>
 8006886:	4620      	mov	r0, r4
 8006888:	f001 f81a 	bl	80078c0 <__sinit>
 800688c:	ab05      	add	r3, sp, #20
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	68a1      	ldr	r1, [r4, #8]
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	4620      	mov	r0, r4
 8006896:	f001 fe25 	bl	80084e4 <_vfiprintf_r>
 800689a:	b002      	add	sp, #8
 800689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a0:	b004      	add	sp, #16
 80068a2:	4770      	bx	lr
 80068a4:	2000001c 	.word	0x2000001c

080068a8 <_puts_r>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	460e      	mov	r6, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	b118      	cbz	r0, 80068b8 <_puts_r+0x10>
 80068b0:	6983      	ldr	r3, [r0, #24]
 80068b2:	b90b      	cbnz	r3, 80068b8 <_puts_r+0x10>
 80068b4:	f001 f804 	bl	80078c0 <__sinit>
 80068b8:	69ab      	ldr	r3, [r5, #24]
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	b913      	cbnz	r3, 80068c4 <_puts_r+0x1c>
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 fffe 	bl	80078c0 <__sinit>
 80068c4:	4b23      	ldr	r3, [pc, #140]	; (8006954 <_puts_r+0xac>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d117      	bne.n	80068fa <_puts_r+0x52>
 80068ca:	686c      	ldr	r4, [r5, #4]
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	071b      	lsls	r3, r3, #28
 80068d0:	d51d      	bpl.n	800690e <_puts_r+0x66>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	b1db      	cbz	r3, 800690e <_puts_r+0x66>
 80068d6:	3e01      	subs	r6, #1
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068de:	3b01      	subs	r3, #1
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	b9e9      	cbnz	r1, 8006920 <_puts_r+0x78>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da2e      	bge.n	8006946 <_puts_r+0x9e>
 80068e8:	4622      	mov	r2, r4
 80068ea:	210a      	movs	r1, #10
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f85f 	bl	80069b0 <__swbuf_r>
 80068f2:	3001      	adds	r0, #1
 80068f4:	d011      	beq.n	800691a <_puts_r+0x72>
 80068f6:	200a      	movs	r0, #10
 80068f8:	e011      	b.n	800691e <_puts_r+0x76>
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <_puts_r+0xb0>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d101      	bne.n	8006904 <_puts_r+0x5c>
 8006900:	68ac      	ldr	r4, [r5, #8]
 8006902:	e7e3      	b.n	80068cc <_puts_r+0x24>
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <_puts_r+0xb4>)
 8006906:	429c      	cmp	r4, r3
 8006908:	bf08      	it	eq
 800690a:	68ec      	ldreq	r4, [r5, #12]
 800690c:	e7de      	b.n	80068cc <_puts_r+0x24>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f89f 	bl	8006a54 <__swsetup_r>
 8006916:	2800      	cmp	r0, #0
 8006918:	d0dd      	beq.n	80068d6 <_puts_r+0x2e>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	2b00      	cmp	r3, #0
 8006922:	da04      	bge.n	800692e <_puts_r+0x86>
 8006924:	69a2      	ldr	r2, [r4, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	dc06      	bgt.n	8006938 <_puts_r+0x90>
 800692a:	290a      	cmp	r1, #10
 800692c:	d004      	beq.n	8006938 <_puts_r+0x90>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	7019      	strb	r1, [r3, #0]
 8006936:	e7cf      	b.n	80068d8 <_puts_r+0x30>
 8006938:	4622      	mov	r2, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f838 	bl	80069b0 <__swbuf_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1c9      	bne.n	80068d8 <_puts_r+0x30>
 8006944:	e7e9      	b.n	800691a <_puts_r+0x72>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	200a      	movs	r0, #10
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	7018      	strb	r0, [r3, #0]
 8006950:	e7e5      	b.n	800691e <_puts_r+0x76>
 8006952:	bf00      	nop
 8006954:	08008c68 	.word	0x08008c68
 8006958:	08008c88 	.word	0x08008c88
 800695c:	08008c48 	.word	0x08008c48

08006960 <puts>:
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <puts+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f7ff bf9f 	b.w	80068a8 <_puts_r>
 800696a:	bf00      	nop
 800696c:	2000001c 	.word	0x2000001c

08006970 <siprintf>:
 8006970:	b40e      	push	{r1, r2, r3}
 8006972:	b500      	push	{lr}
 8006974:	b09c      	sub	sp, #112	; 0x70
 8006976:	ab1d      	add	r3, sp, #116	; 0x74
 8006978:	9002      	str	r0, [sp, #8]
 800697a:	9006      	str	r0, [sp, #24]
 800697c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006980:	4809      	ldr	r0, [pc, #36]	; (80069a8 <siprintf+0x38>)
 8006982:	9107      	str	r1, [sp, #28]
 8006984:	9104      	str	r1, [sp, #16]
 8006986:	4909      	ldr	r1, [pc, #36]	; (80069ac <siprintf+0x3c>)
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	9105      	str	r1, [sp, #20]
 800698e:	6800      	ldr	r0, [r0, #0]
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	a902      	add	r1, sp, #8
 8006994:	f001 fc84 	bl	80082a0 <_svfiprintf_r>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	b01c      	add	sp, #112	; 0x70
 80069a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a4:	b003      	add	sp, #12
 80069a6:	4770      	bx	lr
 80069a8:	2000001c 	.word	0x2000001c
 80069ac:	ffff0208 	.word	0xffff0208

080069b0 <__swbuf_r>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	460e      	mov	r6, r1
 80069b4:	4614      	mov	r4, r2
 80069b6:	4605      	mov	r5, r0
 80069b8:	b118      	cbz	r0, 80069c2 <__swbuf_r+0x12>
 80069ba:	6983      	ldr	r3, [r0, #24]
 80069bc:	b90b      	cbnz	r3, 80069c2 <__swbuf_r+0x12>
 80069be:	f000 ff7f 	bl	80078c0 <__sinit>
 80069c2:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <__swbuf_r+0x98>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	d12a      	bne.n	8006a1e <__swbuf_r+0x6e>
 80069c8:	686c      	ldr	r4, [r5, #4]
 80069ca:	69a3      	ldr	r3, [r4, #24]
 80069cc:	60a3      	str	r3, [r4, #8]
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	071a      	lsls	r2, r3, #28
 80069d2:	d52e      	bpl.n	8006a32 <__swbuf_r+0x82>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	b363      	cbz	r3, 8006a32 <__swbuf_r+0x82>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	6820      	ldr	r0, [r4, #0]
 80069dc:	1ac0      	subs	r0, r0, r3
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	b2f6      	uxtb	r6, r6
 80069e2:	4283      	cmp	r3, r0
 80069e4:	4637      	mov	r7, r6
 80069e6:	dc04      	bgt.n	80069f2 <__swbuf_r+0x42>
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 fefe 	bl	80077ec <_fflush_r>
 80069f0:	bb28      	cbnz	r0, 8006a3e <__swbuf_r+0x8e>
 80069f2:	68a3      	ldr	r3, [r4, #8]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	6022      	str	r2, [r4, #0]
 80069fe:	701e      	strb	r6, [r3, #0]
 8006a00:	6963      	ldr	r3, [r4, #20]
 8006a02:	3001      	adds	r0, #1
 8006a04:	4283      	cmp	r3, r0
 8006a06:	d004      	beq.n	8006a12 <__swbuf_r+0x62>
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	07db      	lsls	r3, r3, #31
 8006a0c:	d519      	bpl.n	8006a42 <__swbuf_r+0x92>
 8006a0e:	2e0a      	cmp	r6, #10
 8006a10:	d117      	bne.n	8006a42 <__swbuf_r+0x92>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 fee9 	bl	80077ec <_fflush_r>
 8006a1a:	b190      	cbz	r0, 8006a42 <__swbuf_r+0x92>
 8006a1c:	e00f      	b.n	8006a3e <__swbuf_r+0x8e>
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <__swbuf_r+0x9c>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d101      	bne.n	8006a28 <__swbuf_r+0x78>
 8006a24:	68ac      	ldr	r4, [r5, #8]
 8006a26:	e7d0      	b.n	80069ca <__swbuf_r+0x1a>
 8006a28:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <__swbuf_r+0xa0>)
 8006a2a:	429c      	cmp	r4, r3
 8006a2c:	bf08      	it	eq
 8006a2e:	68ec      	ldreq	r4, [r5, #12]
 8006a30:	e7cb      	b.n	80069ca <__swbuf_r+0x1a>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f000 f80d 	bl	8006a54 <__swsetup_r>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d0cc      	beq.n	80069d8 <__swbuf_r+0x28>
 8006a3e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a42:	4638      	mov	r0, r7
 8006a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a46:	bf00      	nop
 8006a48:	08008c68 	.word	0x08008c68
 8006a4c:	08008c88 	.word	0x08008c88
 8006a50:	08008c48 	.word	0x08008c48

08006a54 <__swsetup_r>:
 8006a54:	4b32      	ldr	r3, [pc, #200]	; (8006b20 <__swsetup_r+0xcc>)
 8006a56:	b570      	push	{r4, r5, r6, lr}
 8006a58:	681d      	ldr	r5, [r3, #0]
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	b125      	cbz	r5, 8006a6a <__swsetup_r+0x16>
 8006a60:	69ab      	ldr	r3, [r5, #24]
 8006a62:	b913      	cbnz	r3, 8006a6a <__swsetup_r+0x16>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 ff2b 	bl	80078c0 <__sinit>
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <__swsetup_r+0xd0>)
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d10f      	bne.n	8006a90 <__swsetup_r+0x3c>
 8006a70:	686c      	ldr	r4, [r5, #4]
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	0715      	lsls	r5, r2, #28
 8006a7a:	d42c      	bmi.n	8006ad6 <__swsetup_r+0x82>
 8006a7c:	06d0      	lsls	r0, r2, #27
 8006a7e:	d411      	bmi.n	8006aa4 <__swsetup_r+0x50>
 8006a80:	2209      	movs	r2, #9
 8006a82:	6032      	str	r2, [r6, #0]
 8006a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	e03e      	b.n	8006b0e <__swsetup_r+0xba>
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <__swsetup_r+0xd4>)
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d101      	bne.n	8006a9a <__swsetup_r+0x46>
 8006a96:	68ac      	ldr	r4, [r5, #8]
 8006a98:	e7eb      	b.n	8006a72 <__swsetup_r+0x1e>
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <__swsetup_r+0xd8>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	bf08      	it	eq
 8006aa0:	68ec      	ldreq	r4, [r5, #12]
 8006aa2:	e7e6      	b.n	8006a72 <__swsetup_r+0x1e>
 8006aa4:	0751      	lsls	r1, r2, #29
 8006aa6:	d512      	bpl.n	8006ace <__swsetup_r+0x7a>
 8006aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aaa:	b141      	cbz	r1, 8006abe <__swsetup_r+0x6a>
 8006aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	d002      	beq.n	8006aba <__swsetup_r+0x66>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f001 faf1 	bl	800809c <_free_r>
 8006aba:	2300      	movs	r3, #0
 8006abc:	6363      	str	r3, [r4, #52]	; 0x34
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f043 0308 	orr.w	r3, r3, #8
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	b94b      	cbnz	r3, 8006aee <__swsetup_r+0x9a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d003      	beq.n	8006aee <__swsetup_r+0x9a>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f000 ffa5 	bl	8007a38 <__smakebuf_r>
 8006aee:	89a2      	ldrh	r2, [r4, #12]
 8006af0:	f012 0301 	ands.w	r3, r2, #1
 8006af4:	d00c      	beq.n	8006b10 <__swsetup_r+0xbc>
 8006af6:	2300      	movs	r3, #0
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	6963      	ldr	r3, [r4, #20]
 8006afc:	425b      	negs	r3, r3
 8006afe:	61a3      	str	r3, [r4, #24]
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	b953      	cbnz	r3, 8006b1a <__swsetup_r+0xc6>
 8006b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006b0c:	d1ba      	bne.n	8006a84 <__swsetup_r+0x30>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	0792      	lsls	r2, r2, #30
 8006b12:	bf58      	it	pl
 8006b14:	6963      	ldrpl	r3, [r4, #20]
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	e7f2      	b.n	8006b00 <__swsetup_r+0xac>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e7f7      	b.n	8006b0e <__swsetup_r+0xba>
 8006b1e:	bf00      	nop
 8006b20:	2000001c 	.word	0x2000001c
 8006b24:	08008c68 	.word	0x08008c68
 8006b28:	08008c88 	.word	0x08008c88
 8006b2c:	08008c48 	.word	0x08008c48

08006b30 <quorem>:
 8006b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	6903      	ldr	r3, [r0, #16]
 8006b36:	690c      	ldr	r4, [r1, #16]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	f2c0 8082 	blt.w	8006c44 <quorem+0x114>
 8006b40:	3c01      	subs	r4, #1
 8006b42:	f101 0714 	add.w	r7, r1, #20
 8006b46:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b4a:	f100 0614 	add.w	r6, r0, #20
 8006b4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b56:	eb06 030c 	add.w	r3, r6, ip
 8006b5a:	3501      	adds	r5, #1
 8006b5c:	eb07 090c 	add.w	r9, r7, ip
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	fbb0 f5f5 	udiv	r5, r0, r5
 8006b66:	b395      	cbz	r5, 8006bce <quorem+0x9e>
 8006b68:	f04f 0a00 	mov.w	sl, #0
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	46b6      	mov	lr, r6
 8006b70:	46d3      	mov	fp, sl
 8006b72:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b76:	b293      	uxth	r3, r2
 8006b78:	fb05 a303 	mla	r3, r5, r3, sl
 8006b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ebab 0303 	sub.w	r3, fp, r3
 8006b86:	0c12      	lsrs	r2, r2, #16
 8006b88:	f8de b000 	ldr.w	fp, [lr]
 8006b8c:	fb05 a202 	mla	r2, r5, r2, sl
 8006b90:	fa13 f38b 	uxtah	r3, r3, fp
 8006b94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006b98:	fa1f fb82 	uxth.w	fp, r2
 8006b9c:	f8de 2000 	ldr.w	r2, [lr]
 8006ba0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bae:	4581      	cmp	r9, r0
 8006bb0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006bb4:	f84e 3b04 	str.w	r3, [lr], #4
 8006bb8:	d2db      	bcs.n	8006b72 <quorem+0x42>
 8006bba:	f856 300c 	ldr.w	r3, [r6, ip]
 8006bbe:	b933      	cbnz	r3, 8006bce <quorem+0x9e>
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	d330      	bcc.n	8006c2c <quorem+0xfc>
 8006bca:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bce:	4640      	mov	r0, r8
 8006bd0:	f001 f990 	bl	8007ef4 <__mcmp>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	db25      	blt.n	8006c24 <quorem+0xf4>
 8006bd8:	3501      	adds	r5, #1
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f04f 0c00 	mov.w	ip, #0
 8006be0:	f857 2b04 	ldr.w	r2, [r7], #4
 8006be4:	f8d0 e000 	ldr.w	lr, [r0]
 8006be8:	b293      	uxth	r3, r2
 8006bea:	ebac 0303 	sub.w	r3, ip, r3
 8006bee:	0c12      	lsrs	r2, r2, #16
 8006bf0:	fa13 f38e 	uxtah	r3, r3, lr
 8006bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c02:	45b9      	cmp	r9, r7
 8006c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c08:	f840 3b04 	str.w	r3, [r0], #4
 8006c0c:	d2e8      	bcs.n	8006be0 <quorem+0xb0>
 8006c0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c16:	b92a      	cbnz	r2, 8006c24 <quorem+0xf4>
 8006c18:	3b04      	subs	r3, #4
 8006c1a:	429e      	cmp	r6, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	d30b      	bcc.n	8006c38 <quorem+0x108>
 8006c20:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c24:	4628      	mov	r0, r5
 8006c26:	b003      	add	sp, #12
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	d1ca      	bne.n	8006bca <quorem+0x9a>
 8006c34:	3c01      	subs	r4, #1
 8006c36:	e7c5      	b.n	8006bc4 <quorem+0x94>
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d1ef      	bne.n	8006c20 <quorem+0xf0>
 8006c40:	3c01      	subs	r4, #1
 8006c42:	e7ea      	b.n	8006c1a <quorem+0xea>
 8006c44:	2000      	movs	r0, #0
 8006c46:	e7ee      	b.n	8006c26 <quorem+0xf6>

08006c48 <_dtoa_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	ec57 6b10 	vmov	r6, r7, d0
 8006c50:	b095      	sub	sp, #84	; 0x54
 8006c52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c54:	9108      	str	r1, [sp, #32]
 8006c56:	4604      	mov	r4, r0
 8006c58:	920a      	str	r2, [sp, #40]	; 0x28
 8006c5a:	9311      	str	r3, [sp, #68]	; 0x44
 8006c5c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006c60:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006c64:	b93d      	cbnz	r5, 8006c76 <_dtoa_r+0x2e>
 8006c66:	2010      	movs	r0, #16
 8006c68:	f000 ff26 	bl	8007ab8 <malloc>
 8006c6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c72:	6005      	str	r5, [r0, #0]
 8006c74:	60c5      	str	r5, [r0, #12]
 8006c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b151      	cbz	r1, 8006c92 <_dtoa_r+0x4a>
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	604a      	str	r2, [r1, #4]
 8006c80:	2301      	movs	r3, #1
 8006c82:	4093      	lsls	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 ff52 	bl	8007b30 <_Bfree>
 8006c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	1e3b      	subs	r3, r7, #0
 8006c94:	bfb9      	ittee	lt
 8006c96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c9a:	9303      	strlt	r3, [sp, #12]
 8006c9c:	2300      	movge	r3, #0
 8006c9e:	f8c8 3000 	strge.w	r3, [r8]
 8006ca2:	9d03      	ldr	r5, [sp, #12]
 8006ca4:	4bac      	ldr	r3, [pc, #688]	; (8006f58 <_dtoa_r+0x310>)
 8006ca6:	bfbc      	itt	lt
 8006ca8:	2201      	movlt	r2, #1
 8006caa:	f8c8 2000 	strlt.w	r2, [r8]
 8006cae:	43ab      	bics	r3, r5
 8006cb0:	d11b      	bne.n	8006cea <_dtoa_r+0xa2>
 8006cb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cb4:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	b923      	cbnz	r3, 8006cc8 <_dtoa_r+0x80>
 8006cbe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	f000 84dd 	beq.w	8007682 <_dtoa_r+0xa3a>
 8006cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cca:	b953      	cbnz	r3, 8006ce2 <_dtoa_r+0x9a>
 8006ccc:	4ba3      	ldr	r3, [pc, #652]	; (8006f5c <_dtoa_r+0x314>)
 8006cce:	e020      	b.n	8006d12 <_dtoa_r+0xca>
 8006cd0:	4ba3      	ldr	r3, [pc, #652]	; (8006f60 <_dtoa_r+0x318>)
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	9804      	ldr	r0, [sp, #16]
 8006cdc:	b015      	add	sp, #84	; 0x54
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	4b9e      	ldr	r3, [pc, #632]	; (8006f5c <_dtoa_r+0x314>)
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	3303      	adds	r3, #3
 8006ce8:	e7f5      	b.n	8006cd6 <_dtoa_r+0x8e>
 8006cea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cfa:	d10c      	bne.n	8006d16 <_dtoa_r+0xce>
 8006cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cfe:	2301      	movs	r3, #1
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 84b9 	beq.w	800767c <_dtoa_r+0xa34>
 8006d0a:	4b96      	ldr	r3, [pc, #600]	; (8006f64 <_dtoa_r+0x31c>)
 8006d0c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	e7e1      	b.n	8006cda <_dtoa_r+0x92>
 8006d16:	a913      	add	r1, sp, #76	; 0x4c
 8006d18:	aa12      	add	r2, sp, #72	; 0x48
 8006d1a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f001 f95f 	bl	8007fe2 <__d2b>
 8006d24:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8006d28:	9001      	str	r0, [sp, #4]
 8006d2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	d046      	beq.n	8006dbe <_dtoa_r+0x176>
 8006d30:	9805      	ldr	r0, [sp, #20]
 8006d32:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8006d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8006d3e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d42:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8006d46:	2700      	movs	r7, #0
 8006d48:	ee07 aa90 	vmov	s15, sl
 8006d4c:	ec43 2b16 	vmov	d6, r2, r3
 8006d50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006d54:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8006f40 <_dtoa_r+0x2f8>
 8006d58:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d60:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8006f48 <_dtoa_r+0x300>
 8006d64:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006d68:	eeb0 7b46 	vmov.f64	d7, d6
 8006d6c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006f50 <_dtoa_r+0x308>
 8006d70:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006d74:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006d78:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d80:	ee16 ba90 	vmov	fp, s13
 8006d84:	d508      	bpl.n	8006d98 <_dtoa_r+0x150>
 8006d86:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006d8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	bf18      	it	ne
 8006d94:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006d98:	f1bb 0f16 	cmp.w	fp, #22
 8006d9c:	d834      	bhi.n	8006e08 <_dtoa_r+0x1c0>
 8006d9e:	4b72      	ldr	r3, [pc, #456]	; (8006f68 <_dtoa_r+0x320>)
 8006da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006da4:	ed93 7b00 	vldr	d7, [r3]
 8006da8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006dac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db4:	dd01      	ble.n	8006dba <_dtoa_r+0x172>
 8006db6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e025      	b.n	8006e0a <_dtoa_r+0x1c2>
 8006dbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc0:	eb01 0a03 	add.w	sl, r1, r3
 8006dc4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	dd17      	ble.n	8006dfc <_dtoa_r+0x1b4>
 8006dcc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006dd0:	9a02      	ldr	r2, [sp, #8]
 8006dd2:	409d      	lsls	r5, r3
 8006dd4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	432b      	orrs	r3, r5
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006dee:	9805      	ldr	r0, [sp, #20]
 8006df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df4:	2701      	movs	r7, #1
 8006df6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8006dfa:	e7a5      	b.n	8006d48 <_dtoa_r+0x100>
 8006dfc:	9a02      	ldr	r2, [sp, #8]
 8006dfe:	f1c3 0320 	rsb	r3, r3, #32
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	e7ea      	b.n	8006dde <_dtoa_r+0x196>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	eba1 0a0a 	sub.w	sl, r1, sl
 8006e0e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e10:	f1ba 0301 	subs.w	r3, sl, #1
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	bf43      	ittte	mi
 8006e18:	2300      	movmi	r3, #0
 8006e1a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8006e1e:	9307      	strmi	r3, [sp, #28]
 8006e20:	f04f 0a00 	movpl.w	sl, #0
 8006e24:	f1bb 0f00 	cmp.w	fp, #0
 8006e28:	db19      	blt.n	8006e5e <_dtoa_r+0x216>
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006e30:	445b      	add	r3, fp
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	9b08      	ldr	r3, [sp, #32]
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d866      	bhi.n	8006f0c <_dtoa_r+0x2c4>
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	bfc4      	itt	gt
 8006e42:	3b04      	subgt	r3, #4
 8006e44:	9308      	strgt	r3, [sp, #32]
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	f1a3 0302 	sub.w	r3, r3, #2
 8006e4c:	bfcc      	ite	gt
 8006e4e:	2500      	movgt	r5, #0
 8006e50:	2501      	movle	r5, #1
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d866      	bhi.n	8006f24 <_dtoa_r+0x2dc>
 8006e56:	e8df f003 	tbb	[pc, r3]
 8006e5a:	5755      	.short	0x5755
 8006e5c:	4909      	.short	0x4909
 8006e5e:	2300      	movs	r3, #0
 8006e60:	ebaa 0a0b 	sub.w	sl, sl, fp
 8006e64:	f1cb 0800 	rsb	r8, fp, #0
 8006e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e6a:	e7e5      	b.n	8006e38 <_dtoa_r+0x1f0>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dd59      	ble.n	8006f2a <_dtoa_r+0x2e2>
 8006e76:	9306      	str	r3, [sp, #24]
 8006e78:	4699      	mov	r9, r3
 8006e7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	6072      	str	r2, [r6, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	f102 0014 	add.w	r0, r2, #20
 8006e86:	4298      	cmp	r0, r3
 8006e88:	6871      	ldr	r1, [r6, #4]
 8006e8a:	d953      	bls.n	8006f34 <_dtoa_r+0x2ec>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 fe1b 	bl	8007ac8 <_Balloc>
 8006e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e94:	6030      	str	r0, [r6, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	f1b9 0f0e 	cmp.w	r9, #14
 8006e9e:	f200 80c2 	bhi.w	8007026 <_dtoa_r+0x3de>
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	f000 80bf 	beq.w	8007026 <_dtoa_r+0x3de>
 8006ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eac:	f1bb 0f00 	cmp.w	fp, #0
 8006eb0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006eb4:	f340 80e6 	ble.w	8007084 <_dtoa_r+0x43c>
 8006eb8:	4a2b      	ldr	r2, [pc, #172]	; (8006f68 <_dtoa_r+0x320>)
 8006eba:	f00b 030f 	and.w	r3, fp, #15
 8006ebe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec2:	ed93 7b00 	vldr	d7, [r3]
 8006ec6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8006eca:	06da      	lsls	r2, r3, #27
 8006ecc:	f140 80d8 	bpl.w	8007080 <_dtoa_r+0x438>
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <_dtoa_r+0x324>)
 8006ed2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8006ed6:	ed92 6b08 	vldr	d6, [r2, #32]
 8006eda:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8006ede:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	4920      	ldr	r1, [pc, #128]	; (8006f6c <_dtoa_r+0x324>)
 8006eea:	e04a      	b.n	8006f82 <_dtoa_r+0x33a>
 8006eec:	2301      	movs	r3, #1
 8006eee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef2:	445b      	add	r3, fp
 8006ef4:	f103 0901 	add.w	r9, r3, #1
 8006ef8:	9306      	str	r3, [sp, #24]
 8006efa:	464b      	mov	r3, r9
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	bfb8      	it	lt
 8006f00:	2301      	movlt	r3, #1
 8006f02:	e7ba      	b.n	8006e7a <_dtoa_r+0x232>
 8006f04:	2300      	movs	r3, #0
 8006f06:	e7b2      	b.n	8006e6e <_dtoa_r+0x226>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e7f0      	b.n	8006eee <_dtoa_r+0x2a6>
 8006f0c:	2501      	movs	r5, #1
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295
 8006f18:	9306      	str	r3, [sp, #24]
 8006f1a:	4699      	mov	r9, r3
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2312      	movs	r3, #18
 8006f20:	920a      	str	r2, [sp, #40]	; 0x28
 8006f22:	e7aa      	b.n	8006e7a <_dtoa_r+0x232>
 8006f24:	2301      	movs	r3, #1
 8006f26:	9309      	str	r3, [sp, #36]	; 0x24
 8006f28:	e7f4      	b.n	8006f14 <_dtoa_r+0x2cc>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	9306      	str	r3, [sp, #24]
 8006f2e:	4699      	mov	r9, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	e7f5      	b.n	8006f20 <_dtoa_r+0x2d8>
 8006f34:	3101      	adds	r1, #1
 8006f36:	6071      	str	r1, [r6, #4]
 8006f38:	0052      	lsls	r2, r2, #1
 8006f3a:	e7a2      	b.n	8006e82 <_dtoa_r+0x23a>
 8006f3c:	f3af 8000 	nop.w
 8006f40:	636f4361 	.word	0x636f4361
 8006f44:	3fd287a7 	.word	0x3fd287a7
 8006f48:	8b60c8b3 	.word	0x8b60c8b3
 8006f4c:	3fc68a28 	.word	0x3fc68a28
 8006f50:	509f79fb 	.word	0x509f79fb
 8006f54:	3fd34413 	.word	0x3fd34413
 8006f58:	7ff00000 	.word	0x7ff00000
 8006f5c:	08008c41 	.word	0x08008c41
 8006f60:	08008c38 	.word	0x08008c38
 8006f64:	08008c15 	.word	0x08008c15
 8006f68:	08008cd0 	.word	0x08008cd0
 8006f6c:	08008ca8 	.word	0x08008ca8
 8006f70:	07de      	lsls	r6, r3, #31
 8006f72:	d504      	bpl.n	8006f7e <_dtoa_r+0x336>
 8006f74:	ed91 6b00 	vldr	d6, [r1]
 8006f78:	3201      	adds	r2, #1
 8006f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f7e:	105b      	asrs	r3, r3, #1
 8006f80:	3108      	adds	r1, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f4      	bne.n	8006f70 <_dtoa_r+0x328>
 8006f86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006f8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006f8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a7 	beq.w	80070e8 <_dtoa_r+0x4a0>
 8006f9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006f9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	f140 809d 	bpl.w	80070e8 <_dtoa_r+0x4a0>
 8006fae:	f1b9 0f00 	cmp.w	r9, #0
 8006fb2:	f000 8099 	beq.w	80070e8 <_dtoa_r+0x4a0>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd30      	ble.n	800701e <_dtoa_r+0x3d6>
 8006fbc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006fc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fc8:	9d06      	ldr	r5, [sp, #24]
 8006fca:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006fce:	3201      	adds	r2, #1
 8006fd0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006fd4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006fd8:	ee07 2a90 	vmov	s15, r2
 8006fdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fe0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006fe4:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006fe8:	9a03      	ldr	r2, [sp, #12]
 8006fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	d17b      	bne.n	80070ee <_dtoa_r+0x4a6>
 8006ff6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006ffa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ffe:	ec41 0b17 	vmov	d7, r0, r1
 8007002:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700a:	f300 8253 	bgt.w	80074b4 <_dtoa_r+0x86c>
 800700e:	eeb1 7b47 	vneg.f64	d7, d7
 8007012:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	f100 8249 	bmi.w	80074b0 <_dtoa_r+0x868>
 800701e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007022:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007028:	2b00      	cmp	r3, #0
 800702a:	f2c0 8119 	blt.w	8007260 <_dtoa_r+0x618>
 800702e:	f1bb 0f0e 	cmp.w	fp, #14
 8007032:	f300 8115 	bgt.w	8007260 <_dtoa_r+0x618>
 8007036:	4bc3      	ldr	r3, [pc, #780]	; (8007344 <_dtoa_r+0x6fc>)
 8007038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800703c:	ed93 6b00 	vldr	d6, [r3]
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	f280 80ba 	bge.w	80071bc <_dtoa_r+0x574>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	f300 80b6 	bgt.w	80071bc <_dtoa_r+0x574>
 8007050:	f040 822d 	bne.w	80074ae <_dtoa_r+0x866>
 8007054:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007058:	ee26 6b07 	vmul.f64	d6, d6, d7
 800705c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007060:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	464d      	mov	r5, r9
 800706a:	464f      	mov	r7, r9
 800706c:	f280 8204 	bge.w	8007478 <_dtoa_r+0x830>
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	9a04      	ldr	r2, [sp, #16]
 8007074:	1c5e      	adds	r6, r3, #1
 8007076:	2331      	movs	r3, #49	; 0x31
 8007078:	7013      	strb	r3, [r2, #0]
 800707a:	f10b 0b01 	add.w	fp, fp, #1
 800707e:	e1ff      	b.n	8007480 <_dtoa_r+0x838>
 8007080:	2202      	movs	r2, #2
 8007082:	e731      	b.n	8006ee8 <_dtoa_r+0x2a0>
 8007084:	d02e      	beq.n	80070e4 <_dtoa_r+0x49c>
 8007086:	f1cb 0300 	rsb	r3, fp, #0
 800708a:	4aae      	ldr	r2, [pc, #696]	; (8007344 <_dtoa_r+0x6fc>)
 800708c:	f003 010f 	and.w	r1, r3, #15
 8007090:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007094:	ed92 7b00 	vldr	d7, [r2]
 8007098:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800709c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80070a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80070a4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80070a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80070ac:	49a6      	ldr	r1, [pc, #664]	; (8007348 <_dtoa_r+0x700>)
 80070ae:	111b      	asrs	r3, r3, #4
 80070b0:	2000      	movs	r0, #0
 80070b2:	2202      	movs	r2, #2
 80070b4:	b93b      	cbnz	r3, 80070c6 <_dtoa_r+0x47e>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f af6b 	beq.w	8006f92 <_dtoa_r+0x34a>
 80070bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c4:	e765      	b.n	8006f92 <_dtoa_r+0x34a>
 80070c6:	07dd      	lsls	r5, r3, #31
 80070c8:	d509      	bpl.n	80070de <_dtoa_r+0x496>
 80070ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80070ce:	ed91 7b00 	vldr	d7, [r1]
 80070d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80070d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80070da:	3201      	adds	r2, #1
 80070dc:	2001      	movs	r0, #1
 80070de:	105b      	asrs	r3, r3, #1
 80070e0:	3108      	adds	r1, #8
 80070e2:	e7e7      	b.n	80070b4 <_dtoa_r+0x46c>
 80070e4:	2202      	movs	r2, #2
 80070e6:	e754      	b.n	8006f92 <_dtoa_r+0x34a>
 80070e8:	465b      	mov	r3, fp
 80070ea:	464d      	mov	r5, r9
 80070ec:	e770      	b.n	8006fd0 <_dtoa_r+0x388>
 80070ee:	4a95      	ldr	r2, [pc, #596]	; (8007344 <_dtoa_r+0x6fc>)
 80070f0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80070f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80070f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070fa:	ec41 0b17 	vmov	d7, r0, r1
 80070fe:	b35a      	cbz	r2, 8007158 <_dtoa_r+0x510>
 8007100:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007104:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007108:	9e04      	ldr	r6, [sp, #16]
 800710a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800710e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007112:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007116:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800711a:	ee14 2a90 	vmov	r2, s9
 800711e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007122:	3230      	adds	r2, #48	; 0x30
 8007124:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007128:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007130:	f806 2b01 	strb.w	r2, [r6], #1
 8007134:	d43b      	bmi.n	80071ae <_dtoa_r+0x566>
 8007136:	ee32 5b46 	vsub.f64	d5, d2, d6
 800713a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	d472      	bmi.n	800722a <_dtoa_r+0x5e2>
 8007144:	9a04      	ldr	r2, [sp, #16]
 8007146:	1ab2      	subs	r2, r6, r2
 8007148:	4295      	cmp	r5, r2
 800714a:	f77f af68 	ble.w	800701e <_dtoa_r+0x3d6>
 800714e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007152:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007156:	e7de      	b.n	8007116 <_dtoa_r+0x4ce>
 8007158:	9a04      	ldr	r2, [sp, #16]
 800715a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800715e:	1956      	adds	r6, r2, r5
 8007160:	4611      	mov	r1, r2
 8007162:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007166:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800716a:	ee14 2a90 	vmov	r2, s9
 800716e:	3230      	adds	r2, #48	; 0x30
 8007170:	f801 2b01 	strb.w	r2, [r1], #1
 8007174:	42b1      	cmp	r1, r6
 8007176:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800717a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800717e:	d11a      	bne.n	80071b6 <_dtoa_r+0x56e>
 8007180:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007184:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007188:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	dc4b      	bgt.n	800722a <_dtoa_r+0x5e2>
 8007192:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007196:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	f57f af3e 	bpl.w	800701e <_dtoa_r+0x3d6>
 80071a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071a6:	2a30      	cmp	r2, #48	; 0x30
 80071a8:	f106 31ff 	add.w	r1, r6, #4294967295
 80071ac:	d001      	beq.n	80071b2 <_dtoa_r+0x56a>
 80071ae:	469b      	mov	fp, r3
 80071b0:	e02a      	b.n	8007208 <_dtoa_r+0x5c0>
 80071b2:	460e      	mov	r6, r1
 80071b4:	e7f5      	b.n	80071a2 <_dtoa_r+0x55a>
 80071b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80071ba:	e7d4      	b.n	8007166 <_dtoa_r+0x51e>
 80071bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80071c4:	9e04      	ldr	r6, [sp, #16]
 80071c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80071ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80071ce:	ee15 3a10 	vmov	r3, s10
 80071d2:	3330      	adds	r3, #48	; 0x30
 80071d4:	f806 3b01 	strb.w	r3, [r6], #1
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	1af3      	subs	r3, r6, r3
 80071dc:	4599      	cmp	r9, r3
 80071de:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80071e2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80071e6:	d133      	bne.n	8007250 <_dtoa_r+0x608>
 80071e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80071ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	dc18      	bgt.n	8007228 <_dtoa_r+0x5e0>
 80071f6:	eeb4 7b46 	vcmp.f64	d7, d6
 80071fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fe:	d103      	bne.n	8007208 <_dtoa_r+0x5c0>
 8007200:	ee15 3a10 	vmov	r3, s10
 8007204:	07db      	lsls	r3, r3, #31
 8007206:	d40f      	bmi.n	8007228 <_dtoa_r+0x5e0>
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fc90 	bl	8007b30 <_Bfree>
 8007210:	2300      	movs	r3, #0
 8007212:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007214:	7033      	strb	r3, [r6, #0]
 8007216:	f10b 0301 	add.w	r3, fp, #1
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800721e:	2b00      	cmp	r3, #0
 8007220:	f43f ad5b 	beq.w	8006cda <_dtoa_r+0x92>
 8007224:	601e      	str	r6, [r3, #0]
 8007226:	e558      	b.n	8006cda <_dtoa_r+0x92>
 8007228:	465b      	mov	r3, fp
 800722a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800722e:	2939      	cmp	r1, #57	; 0x39
 8007230:	f106 32ff 	add.w	r2, r6, #4294967295
 8007234:	d106      	bne.n	8007244 <_dtoa_r+0x5fc>
 8007236:	9904      	ldr	r1, [sp, #16]
 8007238:	4291      	cmp	r1, r2
 800723a:	d107      	bne.n	800724c <_dtoa_r+0x604>
 800723c:	2230      	movs	r2, #48	; 0x30
 800723e:	700a      	strb	r2, [r1, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	460a      	mov	r2, r1
 8007244:	7811      	ldrb	r1, [r2, #0]
 8007246:	3101      	adds	r1, #1
 8007248:	7011      	strb	r1, [r2, #0]
 800724a:	e7b0      	b.n	80071ae <_dtoa_r+0x566>
 800724c:	4616      	mov	r6, r2
 800724e:	e7ec      	b.n	800722a <_dtoa_r+0x5e2>
 8007250:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d1b3      	bne.n	80071c6 <_dtoa_r+0x57e>
 800725e:	e7d3      	b.n	8007208 <_dtoa_r+0x5c0>
 8007260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007262:	2a00      	cmp	r2, #0
 8007264:	f000 808d 	beq.w	8007382 <_dtoa_r+0x73a>
 8007268:	9a08      	ldr	r2, [sp, #32]
 800726a:	2a01      	cmp	r2, #1
 800726c:	dc72      	bgt.n	8007354 <_dtoa_r+0x70c>
 800726e:	2f00      	cmp	r7, #0
 8007270:	d06c      	beq.n	800734c <_dtoa_r+0x704>
 8007272:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007276:	4645      	mov	r5, r8
 8007278:	4656      	mov	r6, sl
 800727a:	9a07      	ldr	r2, [sp, #28]
 800727c:	2101      	movs	r1, #1
 800727e:	441a      	add	r2, r3
 8007280:	4620      	mov	r0, r4
 8007282:	449a      	add	sl, r3
 8007284:	9207      	str	r2, [sp, #28]
 8007286:	f000 fcf3 	bl	8007c70 <__i2b>
 800728a:	4607      	mov	r7, r0
 800728c:	2e00      	cmp	r6, #0
 800728e:	dd0b      	ble.n	80072a8 <_dtoa_r+0x660>
 8007290:	9b07      	ldr	r3, [sp, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd08      	ble.n	80072a8 <_dtoa_r+0x660>
 8007296:	42b3      	cmp	r3, r6
 8007298:	9a07      	ldr	r2, [sp, #28]
 800729a:	bfa8      	it	ge
 800729c:	4633      	movge	r3, r6
 800729e:	ebaa 0a03 	sub.w	sl, sl, r3
 80072a2:	1af6      	subs	r6, r6, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d01d      	beq.n	80072ea <_dtoa_r+0x6a2>
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d06a      	beq.n	800738a <_dtoa_r+0x742>
 80072b4:	b18d      	cbz	r5, 80072da <_dtoa_r+0x692>
 80072b6:	4639      	mov	r1, r7
 80072b8:	462a      	mov	r2, r5
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fd78 	bl	8007db0 <__pow5mult>
 80072c0:	9a01      	ldr	r2, [sp, #4]
 80072c2:	4601      	mov	r1, r0
 80072c4:	4607      	mov	r7, r0
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fcdb 	bl	8007c82 <__multiply>
 80072cc:	9901      	ldr	r1, [sp, #4]
 80072ce:	900c      	str	r0, [sp, #48]	; 0x30
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fc2d 	bl	8007b30 <_Bfree>
 80072d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	ebb8 0205 	subs.w	r2, r8, r5
 80072de:	d004      	beq.n	80072ea <_dtoa_r+0x6a2>
 80072e0:	9901      	ldr	r1, [sp, #4]
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fd64 	bl	8007db0 <__pow5mult>
 80072e8:	9001      	str	r0, [sp, #4]
 80072ea:	2101      	movs	r1, #1
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fcbf 	bl	8007c70 <__i2b>
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	4605      	mov	r5, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 81ca 	beq.w	8007690 <_dtoa_r+0xa48>
 80072fc:	461a      	mov	r2, r3
 80072fe:	4601      	mov	r1, r0
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fd55 	bl	8007db0 <__pow5mult>
 8007306:	9b08      	ldr	r3, [sp, #32]
 8007308:	2b01      	cmp	r3, #1
 800730a:	4605      	mov	r5, r0
 800730c:	dc44      	bgt.n	8007398 <_dtoa_r+0x750>
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13c      	bne.n	800738e <_dtoa_r+0x746>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731a:	2b00      	cmp	r3, #0
 800731c:	d137      	bne.n	800738e <_dtoa_r+0x746>
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007324:	0d1b      	lsrs	r3, r3, #20
 8007326:	051b      	lsls	r3, r3, #20
 8007328:	2b00      	cmp	r3, #0
 800732a:	d033      	beq.n	8007394 <_dtoa_r+0x74c>
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	3301      	adds	r3, #1
 8007330:	f10a 0a01 	add.w	sl, sl, #1
 8007334:	9307      	str	r3, [sp, #28]
 8007336:	f04f 0801 	mov.w	r8, #1
 800733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733c:	bb73      	cbnz	r3, 800739c <_dtoa_r+0x754>
 800733e:	2001      	movs	r0, #1
 8007340:	e034      	b.n	80073ac <_dtoa_r+0x764>
 8007342:	bf00      	nop
 8007344:	08008cd0 	.word	0x08008cd0
 8007348:	08008ca8 	.word	0x08008ca8
 800734c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800734e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007352:	e790      	b.n	8007276 <_dtoa_r+0x62e>
 8007354:	f109 35ff 	add.w	r5, r9, #4294967295
 8007358:	45a8      	cmp	r8, r5
 800735a:	bfbf      	itttt	lt
 800735c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800735e:	eba5 0808 	sublt.w	r8, r5, r8
 8007362:	4443      	addlt	r3, r8
 8007364:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007366:	bfb6      	itet	lt
 8007368:	46a8      	movlt	r8, r5
 800736a:	eba8 0505 	subge.w	r5, r8, r5
 800736e:	2500      	movlt	r5, #0
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	bfb9      	ittee	lt
 8007376:	ebaa 0609 	sublt.w	r6, sl, r9
 800737a:	2300      	movlt	r3, #0
 800737c:	4656      	movge	r6, sl
 800737e:	464b      	movge	r3, r9
 8007380:	e77b      	b.n	800727a <_dtoa_r+0x632>
 8007382:	4645      	mov	r5, r8
 8007384:	4656      	mov	r6, sl
 8007386:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007388:	e780      	b.n	800728c <_dtoa_r+0x644>
 800738a:	4642      	mov	r2, r8
 800738c:	e7a8      	b.n	80072e0 <_dtoa_r+0x698>
 800738e:	f04f 0800 	mov.w	r8, #0
 8007392:	e7d2      	b.n	800733a <_dtoa_r+0x6f2>
 8007394:	4698      	mov	r8, r3
 8007396:	e7d0      	b.n	800733a <_dtoa_r+0x6f2>
 8007398:	f04f 0800 	mov.w	r8, #0
 800739c:	692b      	ldr	r3, [r5, #16]
 800739e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80073a2:	6918      	ldr	r0, [r3, #16]
 80073a4:	f000 fc16 	bl	8007bd4 <__hi0bits>
 80073a8:	f1c0 0020 	rsb	r0, r0, #32
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	4418      	add	r0, r3
 80073b0:	f010 001f 	ands.w	r0, r0, #31
 80073b4:	d047      	beq.n	8007446 <_dtoa_r+0x7fe>
 80073b6:	f1c0 0320 	rsb	r3, r0, #32
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	dd3b      	ble.n	8007436 <_dtoa_r+0x7ee>
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	f1c0 001c 	rsb	r0, r0, #28
 80073c4:	4482      	add	sl, r0
 80073c6:	4406      	add	r6, r0
 80073c8:	4403      	add	r3, r0
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	f1ba 0f00 	cmp.w	sl, #0
 80073d0:	dd05      	ble.n	80073de <_dtoa_r+0x796>
 80073d2:	4652      	mov	r2, sl
 80073d4:	9901      	ldr	r1, [sp, #4]
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 fd38 	bl	8007e4c <__lshift>
 80073dc:	9001      	str	r0, [sp, #4]
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x7a8>
 80073e4:	4629      	mov	r1, r5
 80073e6:	461a      	mov	r2, r3
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fd2f 	bl	8007e4c <__lshift>
 80073ee:	4605      	mov	r5, r0
 80073f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073f2:	b353      	cbz	r3, 800744a <_dtoa_r+0x802>
 80073f4:	4629      	mov	r1, r5
 80073f6:	9801      	ldr	r0, [sp, #4]
 80073f8:	f000 fd7c 	bl	8007ef4 <__mcmp>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	da24      	bge.n	800744a <_dtoa_r+0x802>
 8007400:	2300      	movs	r3, #0
 8007402:	220a      	movs	r2, #10
 8007404:	9901      	ldr	r1, [sp, #4]
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fba9 	bl	8007b5e <__multadd>
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	9001      	str	r0, [sp, #4]
 8007410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8142 	beq.w	800769e <_dtoa_r+0xa56>
 800741a:	2300      	movs	r3, #0
 800741c:	4639      	mov	r1, r7
 800741e:	220a      	movs	r2, #10
 8007420:	4620      	mov	r0, r4
 8007422:	f000 fb9c 	bl	8007b5e <__multadd>
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	4607      	mov	r7, r0
 800742c:	dc4b      	bgt.n	80074c6 <_dtoa_r+0x87e>
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	2b02      	cmp	r3, #2
 8007432:	dd48      	ble.n	80074c6 <_dtoa_r+0x87e>
 8007434:	e011      	b.n	800745a <_dtoa_r+0x812>
 8007436:	d0c9      	beq.n	80073cc <_dtoa_r+0x784>
 8007438:	9a07      	ldr	r2, [sp, #28]
 800743a:	331c      	adds	r3, #28
 800743c:	441a      	add	r2, r3
 800743e:	449a      	add	sl, r3
 8007440:	441e      	add	r6, r3
 8007442:	4613      	mov	r3, r2
 8007444:	e7c1      	b.n	80073ca <_dtoa_r+0x782>
 8007446:	4603      	mov	r3, r0
 8007448:	e7f6      	b.n	8007438 <_dtoa_r+0x7f0>
 800744a:	f1b9 0f00 	cmp.w	r9, #0
 800744e:	dc34      	bgt.n	80074ba <_dtoa_r+0x872>
 8007450:	9b08      	ldr	r3, [sp, #32]
 8007452:	2b02      	cmp	r3, #2
 8007454:	dd31      	ble.n	80074ba <_dtoa_r+0x872>
 8007456:	f8cd 9018 	str.w	r9, [sp, #24]
 800745a:	9b06      	ldr	r3, [sp, #24]
 800745c:	b963      	cbnz	r3, 8007478 <_dtoa_r+0x830>
 800745e:	4629      	mov	r1, r5
 8007460:	2205      	movs	r2, #5
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fb7b 	bl	8007b5e <__multadd>
 8007468:	4601      	mov	r1, r0
 800746a:	4605      	mov	r5, r0
 800746c:	9801      	ldr	r0, [sp, #4]
 800746e:	f000 fd41 	bl	8007ef4 <__mcmp>
 8007472:	2800      	cmp	r0, #0
 8007474:	f73f adfc 	bgt.w	8007070 <_dtoa_r+0x428>
 8007478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747a:	9e04      	ldr	r6, [sp, #16]
 800747c:	ea6f 0b03 	mvn.w	fp, r3
 8007480:	f04f 0900 	mov.w	r9, #0
 8007484:	4629      	mov	r1, r5
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fb52 	bl	8007b30 <_Bfree>
 800748c:	2f00      	cmp	r7, #0
 800748e:	f43f aebb 	beq.w	8007208 <_dtoa_r+0x5c0>
 8007492:	f1b9 0f00 	cmp.w	r9, #0
 8007496:	d005      	beq.n	80074a4 <_dtoa_r+0x85c>
 8007498:	45b9      	cmp	r9, r7
 800749a:	d003      	beq.n	80074a4 <_dtoa_r+0x85c>
 800749c:	4649      	mov	r1, r9
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fb46 	bl	8007b30 <_Bfree>
 80074a4:	4639      	mov	r1, r7
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fb42 	bl	8007b30 <_Bfree>
 80074ac:	e6ac      	b.n	8007208 <_dtoa_r+0x5c0>
 80074ae:	2500      	movs	r5, #0
 80074b0:	462f      	mov	r7, r5
 80074b2:	e7e1      	b.n	8007478 <_dtoa_r+0x830>
 80074b4:	469b      	mov	fp, r3
 80074b6:	462f      	mov	r7, r5
 80074b8:	e5da      	b.n	8007070 <_dtoa_r+0x428>
 80074ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074bc:	f8cd 9018 	str.w	r9, [sp, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80f3 	beq.w	80076ac <_dtoa_r+0xa64>
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	dd05      	ble.n	80074d6 <_dtoa_r+0x88e>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4632      	mov	r2, r6
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fcbc 	bl	8007e4c <__lshift>
 80074d4:	4607      	mov	r7, r0
 80074d6:	f1b8 0f00 	cmp.w	r8, #0
 80074da:	d04c      	beq.n	8007576 <_dtoa_r+0x92e>
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 faf2 	bl	8007ac8 <_Balloc>
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	3202      	adds	r2, #2
 80074e8:	4606      	mov	r6, r0
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	f107 010c 	add.w	r1, r7, #12
 80074f0:	300c      	adds	r0, #12
 80074f2:	f7fe fd73 	bl	8005fdc <memcpy>
 80074f6:	2201      	movs	r2, #1
 80074f8:	4631      	mov	r1, r6
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fca6 	bl	8007e4c <__lshift>
 8007500:	9b02      	ldr	r3, [sp, #8]
 8007502:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	46b9      	mov	r9, r7
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	4607      	mov	r7, r0
 8007510:	4629      	mov	r1, r5
 8007512:	9801      	ldr	r0, [sp, #4]
 8007514:	f7ff fb0c 	bl	8006b30 <quorem>
 8007518:	4649      	mov	r1, r9
 800751a:	4606      	mov	r6, r0
 800751c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007520:	9801      	ldr	r0, [sp, #4]
 8007522:	f000 fce7 	bl	8007ef4 <__mcmp>
 8007526:	463a      	mov	r2, r7
 8007528:	9002      	str	r0, [sp, #8]
 800752a:	4629      	mov	r1, r5
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fcfb 	bl	8007f28 <__mdiff>
 8007532:	68c3      	ldr	r3, [r0, #12]
 8007534:	4602      	mov	r2, r0
 8007536:	bb03      	cbnz	r3, 800757a <_dtoa_r+0x932>
 8007538:	4601      	mov	r1, r0
 800753a:	9009      	str	r0, [sp, #36]	; 0x24
 800753c:	9801      	ldr	r0, [sp, #4]
 800753e:	f000 fcd9 	bl	8007ef4 <__mcmp>
 8007542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007544:	4603      	mov	r3, r0
 8007546:	4611      	mov	r1, r2
 8007548:	4620      	mov	r0, r4
 800754a:	9309      	str	r3, [sp, #36]	; 0x24
 800754c:	f000 faf0 	bl	8007b30 <_Bfree>
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	b9a3      	cbnz	r3, 800757e <_dtoa_r+0x936>
 8007554:	9a08      	ldr	r2, [sp, #32]
 8007556:	b992      	cbnz	r2, 800757e <_dtoa_r+0x936>
 8007558:	9a07      	ldr	r2, [sp, #28]
 800755a:	b982      	cbnz	r2, 800757e <_dtoa_r+0x936>
 800755c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007560:	d029      	beq.n	80075b6 <_dtoa_r+0x96e>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd01      	ble.n	800756c <_dtoa_r+0x924>
 8007568:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800756c:	f10a 0601 	add.w	r6, sl, #1
 8007570:	f88a 8000 	strb.w	r8, [sl]
 8007574:	e786      	b.n	8007484 <_dtoa_r+0x83c>
 8007576:	4638      	mov	r0, r7
 8007578:	e7c2      	b.n	8007500 <_dtoa_r+0x8b8>
 800757a:	2301      	movs	r3, #1
 800757c:	e7e3      	b.n	8007546 <_dtoa_r+0x8fe>
 800757e:	9a02      	ldr	r2, [sp, #8]
 8007580:	2a00      	cmp	r2, #0
 8007582:	db04      	blt.n	800758e <_dtoa_r+0x946>
 8007584:	d124      	bne.n	80075d0 <_dtoa_r+0x988>
 8007586:	9a08      	ldr	r2, [sp, #32]
 8007588:	bb12      	cbnz	r2, 80075d0 <_dtoa_r+0x988>
 800758a:	9a07      	ldr	r2, [sp, #28]
 800758c:	bb02      	cbnz	r2, 80075d0 <_dtoa_r+0x988>
 800758e:	2b00      	cmp	r3, #0
 8007590:	ddec      	ble.n	800756c <_dtoa_r+0x924>
 8007592:	2201      	movs	r2, #1
 8007594:	9901      	ldr	r1, [sp, #4]
 8007596:	4620      	mov	r0, r4
 8007598:	f000 fc58 	bl	8007e4c <__lshift>
 800759c:	4629      	mov	r1, r5
 800759e:	9001      	str	r0, [sp, #4]
 80075a0:	f000 fca8 	bl	8007ef4 <__mcmp>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dc03      	bgt.n	80075b0 <_dtoa_r+0x968>
 80075a8:	d1e0      	bne.n	800756c <_dtoa_r+0x924>
 80075aa:	f018 0f01 	tst.w	r8, #1
 80075ae:	d0dd      	beq.n	800756c <_dtoa_r+0x924>
 80075b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80075b4:	d1d8      	bne.n	8007568 <_dtoa_r+0x920>
 80075b6:	2339      	movs	r3, #57	; 0x39
 80075b8:	f10a 0601 	add.w	r6, sl, #1
 80075bc:	f88a 3000 	strb.w	r3, [sl]
 80075c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075c4:	2b39      	cmp	r3, #57	; 0x39
 80075c6:	f106 32ff 	add.w	r2, r6, #4294967295
 80075ca:	d04c      	beq.n	8007666 <_dtoa_r+0xa1e>
 80075cc:	3301      	adds	r3, #1
 80075ce:	e051      	b.n	8007674 <_dtoa_r+0xa2c>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f10a 0601 	add.w	r6, sl, #1
 80075d6:	dd05      	ble.n	80075e4 <_dtoa_r+0x99c>
 80075d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80075dc:	d0eb      	beq.n	80075b6 <_dtoa_r+0x96e>
 80075de:	f108 0801 	add.w	r8, r8, #1
 80075e2:	e7c5      	b.n	8007570 <_dtoa_r+0x928>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	9a06      	ldr	r2, [sp, #24]
 80075e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80075ec:	1af3      	subs	r3, r6, r3
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d021      	beq.n	8007636 <_dtoa_r+0x9ee>
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	9901      	ldr	r1, [sp, #4]
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fab0 	bl	8007b5e <__multadd>
 80075fe:	45b9      	cmp	r9, r7
 8007600:	9001      	str	r0, [sp, #4]
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	f04f 020a 	mov.w	r2, #10
 800760a:	4649      	mov	r1, r9
 800760c:	4620      	mov	r0, r4
 800760e:	d105      	bne.n	800761c <_dtoa_r+0x9d4>
 8007610:	f000 faa5 	bl	8007b5e <__multadd>
 8007614:	4681      	mov	r9, r0
 8007616:	4607      	mov	r7, r0
 8007618:	46b2      	mov	sl, r6
 800761a:	e779      	b.n	8007510 <_dtoa_r+0x8c8>
 800761c:	f000 fa9f 	bl	8007b5e <__multadd>
 8007620:	4639      	mov	r1, r7
 8007622:	4681      	mov	r9, r0
 8007624:	2300      	movs	r3, #0
 8007626:	220a      	movs	r2, #10
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fa98 	bl	8007b5e <__multadd>
 800762e:	4607      	mov	r7, r0
 8007630:	e7f2      	b.n	8007618 <_dtoa_r+0x9d0>
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	2201      	movs	r2, #1
 8007638:	9901      	ldr	r1, [sp, #4]
 800763a:	4620      	mov	r0, r4
 800763c:	f000 fc06 	bl	8007e4c <__lshift>
 8007640:	4629      	mov	r1, r5
 8007642:	9001      	str	r0, [sp, #4]
 8007644:	f000 fc56 	bl	8007ef4 <__mcmp>
 8007648:	2800      	cmp	r0, #0
 800764a:	dcb9      	bgt.n	80075c0 <_dtoa_r+0x978>
 800764c:	d102      	bne.n	8007654 <_dtoa_r+0xa0c>
 800764e:	f018 0f01 	tst.w	r8, #1
 8007652:	d1b5      	bne.n	80075c0 <_dtoa_r+0x978>
 8007654:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	f106 32ff 	add.w	r2, r6, #4294967295
 800765e:	f47f af11 	bne.w	8007484 <_dtoa_r+0x83c>
 8007662:	4616      	mov	r6, r2
 8007664:	e7f6      	b.n	8007654 <_dtoa_r+0xa0c>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	4293      	cmp	r3, r2
 800766a:	d105      	bne.n	8007678 <_dtoa_r+0xa30>
 800766c:	9a04      	ldr	r2, [sp, #16]
 800766e:	f10b 0b01 	add.w	fp, fp, #1
 8007672:	2331      	movs	r3, #49	; 0x31
 8007674:	7013      	strb	r3, [r2, #0]
 8007676:	e705      	b.n	8007484 <_dtoa_r+0x83c>
 8007678:	4616      	mov	r6, r2
 800767a:	e7a1      	b.n	80075c0 <_dtoa_r+0x978>
 800767c:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <_dtoa_r+0xa90>)
 800767e:	f7ff bb48 	b.w	8006d12 <_dtoa_r+0xca>
 8007682:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f ab23 	bne.w	8006cd0 <_dtoa_r+0x88>
 800768a:	4b14      	ldr	r3, [pc, #80]	; (80076dc <_dtoa_r+0xa94>)
 800768c:	f7ff bb41 	b.w	8006d12 <_dtoa_r+0xca>
 8007690:	9b08      	ldr	r3, [sp, #32]
 8007692:	2b01      	cmp	r3, #1
 8007694:	f77f ae3b 	ble.w	800730e <_dtoa_r+0x6c6>
 8007698:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800769c:	e64f      	b.n	800733e <_dtoa_r+0x6f6>
 800769e:	9b06      	ldr	r3, [sp, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dc03      	bgt.n	80076ac <_dtoa_r+0xa64>
 80076a4:	9b08      	ldr	r3, [sp, #32]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	f73f aed7 	bgt.w	800745a <_dtoa_r+0x812>
 80076ac:	9e04      	ldr	r6, [sp, #16]
 80076ae:	9801      	ldr	r0, [sp, #4]
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7ff fa3d 	bl	8006b30 <quorem>
 80076b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076ba:	f806 8b01 	strb.w	r8, [r6], #1
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	9a06      	ldr	r2, [sp, #24]
 80076c2:	1af3      	subs	r3, r6, r3
 80076c4:	429a      	cmp	r2, r3
 80076c6:	ddb4      	ble.n	8007632 <_dtoa_r+0x9ea>
 80076c8:	2300      	movs	r3, #0
 80076ca:	220a      	movs	r2, #10
 80076cc:	9901      	ldr	r1, [sp, #4]
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fa45 	bl	8007b5e <__multadd>
 80076d4:	9001      	str	r0, [sp, #4]
 80076d6:	e7ea      	b.n	80076ae <_dtoa_r+0xa66>
 80076d8:	08008c14 	.word	0x08008c14
 80076dc:	08008c38 	.word	0x08008c38

080076e0 <__sflush_r>:
 80076e0:	898a      	ldrh	r2, [r1, #12]
 80076e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	4605      	mov	r5, r0
 80076e8:	0710      	lsls	r0, r2, #28
 80076ea:	460c      	mov	r4, r1
 80076ec:	d458      	bmi.n	80077a0 <__sflush_r+0xc0>
 80076ee:	684b      	ldr	r3, [r1, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dc05      	bgt.n	8007700 <__sflush_r+0x20>
 80076f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc02      	bgt.n	8007700 <__sflush_r+0x20>
 80076fa:	2000      	movs	r0, #0
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007702:	2e00      	cmp	r6, #0
 8007704:	d0f9      	beq.n	80076fa <__sflush_r+0x1a>
 8007706:	2300      	movs	r3, #0
 8007708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800770c:	682f      	ldr	r7, [r5, #0]
 800770e:	6a21      	ldr	r1, [r4, #32]
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	d032      	beq.n	800777a <__sflush_r+0x9a>
 8007714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	075a      	lsls	r2, r3, #29
 800771a:	d505      	bpl.n	8007728 <__sflush_r+0x48>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	1ac0      	subs	r0, r0, r3
 8007720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007722:	b10b      	cbz	r3, 8007728 <__sflush_r+0x48>
 8007724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007726:	1ac0      	subs	r0, r0, r3
 8007728:	2300      	movs	r3, #0
 800772a:	4602      	mov	r2, r0
 800772c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772e:	6a21      	ldr	r1, [r4, #32]
 8007730:	4628      	mov	r0, r5
 8007732:	47b0      	blx	r6
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	d106      	bne.n	8007748 <__sflush_r+0x68>
 800773a:	6829      	ldr	r1, [r5, #0]
 800773c:	291d      	cmp	r1, #29
 800773e:	d848      	bhi.n	80077d2 <__sflush_r+0xf2>
 8007740:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <__sflush_r+0x108>)
 8007742:	40ca      	lsrs	r2, r1
 8007744:	07d6      	lsls	r6, r2, #31
 8007746:	d544      	bpl.n	80077d2 <__sflush_r+0xf2>
 8007748:	2200      	movs	r2, #0
 800774a:	6062      	str	r2, [r4, #4]
 800774c:	04d9      	lsls	r1, r3, #19
 800774e:	6922      	ldr	r2, [r4, #16]
 8007750:	6022      	str	r2, [r4, #0]
 8007752:	d504      	bpl.n	800775e <__sflush_r+0x7e>
 8007754:	1c42      	adds	r2, r0, #1
 8007756:	d101      	bne.n	800775c <__sflush_r+0x7c>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b903      	cbnz	r3, 800775e <__sflush_r+0x7e>
 800775c:	6560      	str	r0, [r4, #84]	; 0x54
 800775e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007760:	602f      	str	r7, [r5, #0]
 8007762:	2900      	cmp	r1, #0
 8007764:	d0c9      	beq.n	80076fa <__sflush_r+0x1a>
 8007766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800776a:	4299      	cmp	r1, r3
 800776c:	d002      	beq.n	8007774 <__sflush_r+0x94>
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fc94 	bl	800809c <_free_r>
 8007774:	2000      	movs	r0, #0
 8007776:	6360      	str	r0, [r4, #52]	; 0x34
 8007778:	e7c0      	b.n	80076fc <__sflush_r+0x1c>
 800777a:	2301      	movs	r3, #1
 800777c:	4628      	mov	r0, r5
 800777e:	47b0      	blx	r6
 8007780:	1c41      	adds	r1, r0, #1
 8007782:	d1c8      	bne.n	8007716 <__sflush_r+0x36>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0c5      	beq.n	8007716 <__sflush_r+0x36>
 800778a:	2b1d      	cmp	r3, #29
 800778c:	d001      	beq.n	8007792 <__sflush_r+0xb2>
 800778e:	2b16      	cmp	r3, #22
 8007790:	d101      	bne.n	8007796 <__sflush_r+0xb6>
 8007792:	602f      	str	r7, [r5, #0]
 8007794:	e7b1      	b.n	80076fa <__sflush_r+0x1a>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	e7ad      	b.n	80076fc <__sflush_r+0x1c>
 80077a0:	690f      	ldr	r7, [r1, #16]
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	d0a9      	beq.n	80076fa <__sflush_r+0x1a>
 80077a6:	0793      	lsls	r3, r2, #30
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	bf08      	it	eq
 80077ac:	694b      	ldreq	r3, [r1, #20]
 80077ae:	600f      	str	r7, [r1, #0]
 80077b0:	bf18      	it	ne
 80077b2:	2300      	movne	r3, #0
 80077b4:	eba6 0807 	sub.w	r8, r6, r7
 80077b8:	608b      	str	r3, [r1, #8]
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	dd9c      	ble.n	80076fa <__sflush_r+0x1a>
 80077c0:	4643      	mov	r3, r8
 80077c2:	463a      	mov	r2, r7
 80077c4:	6a21      	ldr	r1, [r4, #32]
 80077c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b0      	blx	r6
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dc06      	bgt.n	80077de <__sflush_r+0xfe>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e78e      	b.n	80076fc <__sflush_r+0x1c>
 80077de:	4407      	add	r7, r0
 80077e0:	eba8 0800 	sub.w	r8, r8, r0
 80077e4:	e7e9      	b.n	80077ba <__sflush_r+0xda>
 80077e6:	bf00      	nop
 80077e8:	20400001 	.word	0x20400001

080077ec <_fflush_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	690b      	ldr	r3, [r1, #16]
 80077f0:	4605      	mov	r5, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	b1db      	cbz	r3, 800782e <_fflush_r+0x42>
 80077f6:	b118      	cbz	r0, 8007800 <_fflush_r+0x14>
 80077f8:	6983      	ldr	r3, [r0, #24]
 80077fa:	b90b      	cbnz	r3, 8007800 <_fflush_r+0x14>
 80077fc:	f000 f860 	bl	80078c0 <__sinit>
 8007800:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <_fflush_r+0x48>)
 8007802:	429c      	cmp	r4, r3
 8007804:	d109      	bne.n	800781a <_fflush_r+0x2e>
 8007806:	686c      	ldr	r4, [r5, #4]
 8007808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780c:	b17b      	cbz	r3, 800782e <_fflush_r+0x42>
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007816:	f7ff bf63 	b.w	80076e0 <__sflush_r>
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <_fflush_r+0x4c>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d101      	bne.n	8007824 <_fflush_r+0x38>
 8007820:	68ac      	ldr	r4, [r5, #8]
 8007822:	e7f1      	b.n	8007808 <_fflush_r+0x1c>
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <_fflush_r+0x50>)
 8007826:	429c      	cmp	r4, r3
 8007828:	bf08      	it	eq
 800782a:	68ec      	ldreq	r4, [r5, #12]
 800782c:	e7ec      	b.n	8007808 <_fflush_r+0x1c>
 800782e:	2000      	movs	r0, #0
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	08008c68 	.word	0x08008c68
 8007838:	08008c88 	.word	0x08008c88
 800783c:	08008c48 	.word	0x08008c48

08007840 <std>:
 8007840:	2300      	movs	r3, #0
 8007842:	b510      	push	{r4, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	e9c0 3300 	strd	r3, r3, [r0]
 800784a:	6083      	str	r3, [r0, #8]
 800784c:	8181      	strh	r1, [r0, #12]
 800784e:	6643      	str	r3, [r0, #100]	; 0x64
 8007850:	81c2      	strh	r2, [r0, #14]
 8007852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007856:	6183      	str	r3, [r0, #24]
 8007858:	4619      	mov	r1, r3
 800785a:	2208      	movs	r2, #8
 800785c:	305c      	adds	r0, #92	; 0x5c
 800785e:	f7fe fbc8 	bl	8005ff2 <memset>
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <std+0x38>)
 8007864:	6263      	str	r3, [r4, #36]	; 0x24
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x3c>)
 8007868:	62a3      	str	r3, [r4, #40]	; 0x28
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x40>)
 800786c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x44>)
 8007870:	6224      	str	r4, [r4, #32]
 8007872:	6323      	str	r3, [r4, #48]	; 0x30
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	08008731 	.word	0x08008731
 800787c:	08008753 	.word	0x08008753
 8007880:	0800878b 	.word	0x0800878b
 8007884:	080087af 	.word	0x080087af

08007888 <_cleanup_r>:
 8007888:	4901      	ldr	r1, [pc, #4]	; (8007890 <_cleanup_r+0x8>)
 800788a:	f000 b885 	b.w	8007998 <_fwalk_reent>
 800788e:	bf00      	nop
 8007890:	080077ed 	.word	0x080077ed

08007894 <__sfmoreglue>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	1e4a      	subs	r2, r1, #1
 8007898:	2568      	movs	r5, #104	; 0x68
 800789a:	4355      	muls	r5, r2
 800789c:	460e      	mov	r6, r1
 800789e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078a2:	f000 fc49 	bl	8008138 <_malloc_r>
 80078a6:	4604      	mov	r4, r0
 80078a8:	b140      	cbz	r0, 80078bc <__sfmoreglue+0x28>
 80078aa:	2100      	movs	r1, #0
 80078ac:	e9c0 1600 	strd	r1, r6, [r0]
 80078b0:	300c      	adds	r0, #12
 80078b2:	60a0      	str	r0, [r4, #8]
 80078b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078b8:	f7fe fb9b 	bl	8005ff2 <memset>
 80078bc:	4620      	mov	r0, r4
 80078be:	bd70      	pop	{r4, r5, r6, pc}

080078c0 <__sinit>:
 80078c0:	6983      	ldr	r3, [r0, #24]
 80078c2:	b510      	push	{r4, lr}
 80078c4:	4604      	mov	r4, r0
 80078c6:	bb33      	cbnz	r3, 8007916 <__sinit+0x56>
 80078c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80078cc:	6503      	str	r3, [r0, #80]	; 0x50
 80078ce:	4b12      	ldr	r3, [pc, #72]	; (8007918 <__sinit+0x58>)
 80078d0:	4a12      	ldr	r2, [pc, #72]	; (800791c <__sinit+0x5c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6282      	str	r2, [r0, #40]	; 0x28
 80078d6:	4298      	cmp	r0, r3
 80078d8:	bf04      	itt	eq
 80078da:	2301      	moveq	r3, #1
 80078dc:	6183      	streq	r3, [r0, #24]
 80078de:	f000 f81f 	bl	8007920 <__sfp>
 80078e2:	6060      	str	r0, [r4, #4]
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f81b 	bl	8007920 <__sfp>
 80078ea:	60a0      	str	r0, [r4, #8]
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f817 	bl	8007920 <__sfp>
 80078f2:	2200      	movs	r2, #0
 80078f4:	60e0      	str	r0, [r4, #12]
 80078f6:	2104      	movs	r1, #4
 80078f8:	6860      	ldr	r0, [r4, #4]
 80078fa:	f7ff ffa1 	bl	8007840 <std>
 80078fe:	2201      	movs	r2, #1
 8007900:	2109      	movs	r1, #9
 8007902:	68a0      	ldr	r0, [r4, #8]
 8007904:	f7ff ff9c 	bl	8007840 <std>
 8007908:	2202      	movs	r2, #2
 800790a:	2112      	movs	r1, #18
 800790c:	68e0      	ldr	r0, [r4, #12]
 800790e:	f7ff ff97 	bl	8007840 <std>
 8007912:	2301      	movs	r3, #1
 8007914:	61a3      	str	r3, [r4, #24]
 8007916:	bd10      	pop	{r4, pc}
 8007918:	08008c00 	.word	0x08008c00
 800791c:	08007889 	.word	0x08007889

08007920 <__sfp>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <__sfp+0x70>)
 8007924:	681e      	ldr	r6, [r3, #0]
 8007926:	69b3      	ldr	r3, [r6, #24]
 8007928:	4607      	mov	r7, r0
 800792a:	b913      	cbnz	r3, 8007932 <__sfp+0x12>
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff ffc7 	bl	80078c0 <__sinit>
 8007932:	3648      	adds	r6, #72	; 0x48
 8007934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007938:	3b01      	subs	r3, #1
 800793a:	d503      	bpl.n	8007944 <__sfp+0x24>
 800793c:	6833      	ldr	r3, [r6, #0]
 800793e:	b133      	cbz	r3, 800794e <__sfp+0x2e>
 8007940:	6836      	ldr	r6, [r6, #0]
 8007942:	e7f7      	b.n	8007934 <__sfp+0x14>
 8007944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007948:	b16d      	cbz	r5, 8007966 <__sfp+0x46>
 800794a:	3468      	adds	r4, #104	; 0x68
 800794c:	e7f4      	b.n	8007938 <__sfp+0x18>
 800794e:	2104      	movs	r1, #4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ff9f 	bl	8007894 <__sfmoreglue>
 8007956:	6030      	str	r0, [r6, #0]
 8007958:	2800      	cmp	r0, #0
 800795a:	d1f1      	bne.n	8007940 <__sfp+0x20>
 800795c:	230c      	movs	r3, #12
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4604      	mov	r4, r0
 8007962:	4620      	mov	r0, r4
 8007964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <__sfp+0x74>)
 8007968:	6665      	str	r5, [r4, #100]	; 0x64
 800796a:	e9c4 5500 	strd	r5, r5, [r4]
 800796e:	60a5      	str	r5, [r4, #8]
 8007970:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007974:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007978:	2208      	movs	r2, #8
 800797a:	4629      	mov	r1, r5
 800797c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007980:	f7fe fb37 	bl	8005ff2 <memset>
 8007984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800798c:	e7e9      	b.n	8007962 <__sfp+0x42>
 800798e:	bf00      	nop
 8007990:	08008c00 	.word	0x08008c00
 8007994:	ffff0001 	.word	0xffff0001

08007998 <_fwalk_reent>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	4680      	mov	r8, r0
 800799e:	4689      	mov	r9, r1
 80079a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079a4:	2600      	movs	r6, #0
 80079a6:	b914      	cbnz	r4, 80079ae <_fwalk_reent+0x16>
 80079a8:	4630      	mov	r0, r6
 80079aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80079b2:	3f01      	subs	r7, #1
 80079b4:	d501      	bpl.n	80079ba <_fwalk_reent+0x22>
 80079b6:	6824      	ldr	r4, [r4, #0]
 80079b8:	e7f5      	b.n	80079a6 <_fwalk_reent+0xe>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d907      	bls.n	80079d0 <_fwalk_reent+0x38>
 80079c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079c4:	3301      	adds	r3, #1
 80079c6:	d003      	beq.n	80079d0 <_fwalk_reent+0x38>
 80079c8:	4629      	mov	r1, r5
 80079ca:	4640      	mov	r0, r8
 80079cc:	47c8      	blx	r9
 80079ce:	4306      	orrs	r6, r0
 80079d0:	3568      	adds	r5, #104	; 0x68
 80079d2:	e7ee      	b.n	80079b2 <_fwalk_reent+0x1a>

080079d4 <_localeconv_r>:
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <_localeconv_r+0x14>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a18      	ldr	r0, [r3, #32]
 80079da:	4b04      	ldr	r3, [pc, #16]	; (80079ec <_localeconv_r+0x18>)
 80079dc:	2800      	cmp	r0, #0
 80079de:	bf08      	it	eq
 80079e0:	4618      	moveq	r0, r3
 80079e2:	30f0      	adds	r0, #240	; 0xf0
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000001c 	.word	0x2000001c
 80079ec:	20000080 	.word	0x20000080

080079f0 <__swhatbuf_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	460e      	mov	r6, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	b096      	sub	sp, #88	; 0x58
 80079fc:	4614      	mov	r4, r2
 80079fe:	461d      	mov	r5, r3
 8007a00:	da07      	bge.n	8007a12 <__swhatbuf_r+0x22>
 8007a02:	2300      	movs	r3, #0
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	89b3      	ldrh	r3, [r6, #12]
 8007a08:	061a      	lsls	r2, r3, #24
 8007a0a:	d410      	bmi.n	8007a2e <__swhatbuf_r+0x3e>
 8007a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a10:	e00e      	b.n	8007a30 <__swhatbuf_r+0x40>
 8007a12:	466a      	mov	r2, sp
 8007a14:	f000 fef2 	bl	80087fc <_fstat_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dbf2      	blt.n	8007a02 <__swhatbuf_r+0x12>
 8007a1c:	9a01      	ldr	r2, [sp, #4]
 8007a1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a26:	425a      	negs	r2, r3
 8007a28:	415a      	adcs	r2, r3
 8007a2a:	602a      	str	r2, [r5, #0]
 8007a2c:	e7ee      	b.n	8007a0c <__swhatbuf_r+0x1c>
 8007a2e:	2340      	movs	r3, #64	; 0x40
 8007a30:	2000      	movs	r0, #0
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	b016      	add	sp, #88	; 0x58
 8007a36:	bd70      	pop	{r4, r5, r6, pc}

08007a38 <__smakebuf_r>:
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a3c:	079d      	lsls	r5, r3, #30
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	d507      	bpl.n	8007a54 <__smakebuf_r+0x1c>
 8007a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	6163      	str	r3, [r4, #20]
 8007a50:	b002      	add	sp, #8
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	ab01      	add	r3, sp, #4
 8007a56:	466a      	mov	r2, sp
 8007a58:	f7ff ffca 	bl	80079f0 <__swhatbuf_r>
 8007a5c:	9900      	ldr	r1, [sp, #0]
 8007a5e:	4605      	mov	r5, r0
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 fb69 	bl	8008138 <_malloc_r>
 8007a66:	b948      	cbnz	r0, 8007a7c <__smakebuf_r+0x44>
 8007a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6c:	059a      	lsls	r2, r3, #22
 8007a6e:	d4ef      	bmi.n	8007a50 <__smakebuf_r+0x18>
 8007a70:	f023 0303 	bic.w	r3, r3, #3
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	81a3      	strh	r3, [r4, #12]
 8007a7a:	e7e3      	b.n	8007a44 <__smakebuf_r+0xc>
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <__smakebuf_r+0x7c>)
 8007a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	6020      	str	r0, [r4, #0]
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	6163      	str	r3, [r4, #20]
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	6120      	str	r0, [r4, #16]
 8007a92:	b15b      	cbz	r3, 8007aac <__smakebuf_r+0x74>
 8007a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 fec1 	bl	8008820 <_isatty_r>
 8007a9e:	b128      	cbz	r0, 8007aac <__smakebuf_r+0x74>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	431d      	orrs	r5, r3
 8007ab0:	81a5      	strh	r5, [r4, #12]
 8007ab2:	e7cd      	b.n	8007a50 <__smakebuf_r+0x18>
 8007ab4:	08007889 	.word	0x08007889

08007ab8 <malloc>:
 8007ab8:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <malloc+0xc>)
 8007aba:	4601      	mov	r1, r0
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	f000 bb3b 	b.w	8008138 <_malloc_r>
 8007ac2:	bf00      	nop
 8007ac4:	2000001c 	.word	0x2000001c

08007ac8 <_Balloc>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007acc:	4604      	mov	r4, r0
 8007ace:	460e      	mov	r6, r1
 8007ad0:	b93d      	cbnz	r5, 8007ae2 <_Balloc+0x1a>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f7ff fff0 	bl	8007ab8 <malloc>
 8007ad8:	6260      	str	r0, [r4, #36]	; 0x24
 8007ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ade:	6005      	str	r5, [r0, #0]
 8007ae0:	60c5      	str	r5, [r0, #12]
 8007ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ae4:	68eb      	ldr	r3, [r5, #12]
 8007ae6:	b183      	cbz	r3, 8007b0a <_Balloc+0x42>
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007af0:	b9b8      	cbnz	r0, 8007b22 <_Balloc+0x5a>
 8007af2:	2101      	movs	r1, #1
 8007af4:	fa01 f506 	lsl.w	r5, r1, r6
 8007af8:	1d6a      	adds	r2, r5, #5
 8007afa:	0092      	lsls	r2, r2, #2
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fabf 	bl	8008080 <_calloc_r>
 8007b02:	b160      	cbz	r0, 8007b1e <_Balloc+0x56>
 8007b04:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b08:	e00e      	b.n	8007b28 <_Balloc+0x60>
 8007b0a:	2221      	movs	r2, #33	; 0x21
 8007b0c:	2104      	movs	r1, #4
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fab6 	bl	8008080 <_calloc_r>
 8007b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b16:	60e8      	str	r0, [r5, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e4      	bne.n	8007ae8 <_Balloc+0x20>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	6802      	ldr	r2, [r0, #0]
 8007b24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b2e:	e7f7      	b.n	8007b20 <_Balloc+0x58>

08007b30 <_Bfree>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b34:	4606      	mov	r6, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	b93c      	cbnz	r4, 8007b4a <_Bfree+0x1a>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ffbc 	bl	8007ab8 <malloc>
 8007b40:	6270      	str	r0, [r6, #36]	; 0x24
 8007b42:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b46:	6004      	str	r4, [r0, #0]
 8007b48:	60c4      	str	r4, [r0, #12]
 8007b4a:	b13d      	cbz	r5, 8007b5c <_Bfree+0x2c>
 8007b4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b4e:	686a      	ldr	r2, [r5, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b56:	6029      	str	r1, [r5, #0]
 8007b58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}

08007b5e <__multadd>:
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	690d      	ldr	r5, [r1, #16]
 8007b64:	461f      	mov	r7, r3
 8007b66:	4606      	mov	r6, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	f101 0c14 	add.w	ip, r1, #20
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f8dc 0000 	ldr.w	r0, [ip]
 8007b74:	b281      	uxth	r1, r0
 8007b76:	fb02 7101 	mla	r1, r2, r1, r7
 8007b7a:	0c0f      	lsrs	r7, r1, #16
 8007b7c:	0c00      	lsrs	r0, r0, #16
 8007b7e:	fb02 7000 	mla	r0, r2, r0, r7
 8007b82:	b289      	uxth	r1, r1
 8007b84:	3301      	adds	r3, #1
 8007b86:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007b8a:	429d      	cmp	r5, r3
 8007b8c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007b90:	f84c 1b04 	str.w	r1, [ip], #4
 8007b94:	dcec      	bgt.n	8007b70 <__multadd+0x12>
 8007b96:	b1d7      	cbz	r7, 8007bce <__multadd+0x70>
 8007b98:	68a3      	ldr	r3, [r4, #8]
 8007b9a:	42ab      	cmp	r3, r5
 8007b9c:	dc12      	bgt.n	8007bc4 <__multadd+0x66>
 8007b9e:	6861      	ldr	r1, [r4, #4]
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	3101      	adds	r1, #1
 8007ba4:	f7ff ff90 	bl	8007ac8 <_Balloc>
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	3202      	adds	r2, #2
 8007bac:	f104 010c 	add.w	r1, r4, #12
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	0092      	lsls	r2, r2, #2
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	f7fe fa11 	bl	8005fdc <memcpy>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f7ff ffb7 	bl	8007b30 <_Bfree>
 8007bc2:	4644      	mov	r4, r8
 8007bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bc8:	3501      	adds	r5, #1
 8007bca:	615f      	str	r7, [r3, #20]
 8007bcc:	6125      	str	r5, [r4, #16]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bd4 <__hi0bits>:
 8007bd4:	0c02      	lsrs	r2, r0, #16
 8007bd6:	0412      	lsls	r2, r2, #16
 8007bd8:	4603      	mov	r3, r0
 8007bda:	b9b2      	cbnz	r2, 8007c0a <__hi0bits+0x36>
 8007bdc:	0403      	lsls	r3, r0, #16
 8007bde:	2010      	movs	r0, #16
 8007be0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007be4:	bf04      	itt	eq
 8007be6:	021b      	lsleq	r3, r3, #8
 8007be8:	3008      	addeq	r0, #8
 8007bea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bee:	bf04      	itt	eq
 8007bf0:	011b      	lsleq	r3, r3, #4
 8007bf2:	3004      	addeq	r0, #4
 8007bf4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bf8:	bf04      	itt	eq
 8007bfa:	009b      	lsleq	r3, r3, #2
 8007bfc:	3002      	addeq	r0, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	db06      	blt.n	8007c10 <__hi0bits+0x3c>
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	d503      	bpl.n	8007c0e <__hi0bits+0x3a>
 8007c06:	3001      	adds	r0, #1
 8007c08:	4770      	bx	lr
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e7e8      	b.n	8007be0 <__hi0bits+0xc>
 8007c0e:	2020      	movs	r0, #32
 8007c10:	4770      	bx	lr

08007c12 <__lo0bits>:
 8007c12:	6803      	ldr	r3, [r0, #0]
 8007c14:	f013 0207 	ands.w	r2, r3, #7
 8007c18:	4601      	mov	r1, r0
 8007c1a:	d00b      	beq.n	8007c34 <__lo0bits+0x22>
 8007c1c:	07da      	lsls	r2, r3, #31
 8007c1e:	d423      	bmi.n	8007c68 <__lo0bits+0x56>
 8007c20:	0798      	lsls	r0, r3, #30
 8007c22:	bf49      	itett	mi
 8007c24:	085b      	lsrmi	r3, r3, #1
 8007c26:	089b      	lsrpl	r3, r3, #2
 8007c28:	2001      	movmi	r0, #1
 8007c2a:	600b      	strmi	r3, [r1, #0]
 8007c2c:	bf5c      	itt	pl
 8007c2e:	600b      	strpl	r3, [r1, #0]
 8007c30:	2002      	movpl	r0, #2
 8007c32:	4770      	bx	lr
 8007c34:	b298      	uxth	r0, r3
 8007c36:	b9a8      	cbnz	r0, 8007c64 <__lo0bits+0x52>
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	2010      	movs	r0, #16
 8007c3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c40:	bf04      	itt	eq
 8007c42:	0a1b      	lsreq	r3, r3, #8
 8007c44:	3008      	addeq	r0, #8
 8007c46:	071a      	lsls	r2, r3, #28
 8007c48:	bf04      	itt	eq
 8007c4a:	091b      	lsreq	r3, r3, #4
 8007c4c:	3004      	addeq	r0, #4
 8007c4e:	079a      	lsls	r2, r3, #30
 8007c50:	bf04      	itt	eq
 8007c52:	089b      	lsreq	r3, r3, #2
 8007c54:	3002      	addeq	r0, #2
 8007c56:	07da      	lsls	r2, r3, #31
 8007c58:	d402      	bmi.n	8007c60 <__lo0bits+0x4e>
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	d006      	beq.n	8007c6c <__lo0bits+0x5a>
 8007c5e:	3001      	adds	r0, #1
 8007c60:	600b      	str	r3, [r1, #0]
 8007c62:	4770      	bx	lr
 8007c64:	4610      	mov	r0, r2
 8007c66:	e7e9      	b.n	8007c3c <__lo0bits+0x2a>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4770      	bx	lr
 8007c6c:	2020      	movs	r0, #32
 8007c6e:	4770      	bx	lr

08007c70 <__i2b>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	2101      	movs	r1, #1
 8007c76:	f7ff ff27 	bl	8007ac8 <_Balloc>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	6144      	str	r4, [r0, #20]
 8007c7e:	6102      	str	r2, [r0, #16]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <__multiply>:
 8007c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c86:	4614      	mov	r4, r2
 8007c88:	690a      	ldr	r2, [r1, #16]
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfb8      	it	lt
 8007c90:	460b      	movlt	r3, r1
 8007c92:	4688      	mov	r8, r1
 8007c94:	bfbc      	itt	lt
 8007c96:	46a0      	movlt	r8, r4
 8007c98:	461c      	movlt	r4, r3
 8007c9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ca6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007caa:	eb07 0609 	add.w	r6, r7, r9
 8007cae:	42b3      	cmp	r3, r6
 8007cb0:	bfb8      	it	lt
 8007cb2:	3101      	addlt	r1, #1
 8007cb4:	f7ff ff08 	bl	8007ac8 <_Balloc>
 8007cb8:	f100 0514 	add.w	r5, r0, #20
 8007cbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4573      	cmp	r3, lr
 8007cc6:	d316      	bcc.n	8007cf6 <__multiply+0x74>
 8007cc8:	f104 0214 	add.w	r2, r4, #20
 8007ccc:	f108 0114 	add.w	r1, r8, #20
 8007cd0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007cd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	9201      	str	r2, [sp, #4]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d80c      	bhi.n	8007cfc <__multiply+0x7a>
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	dd03      	ble.n	8007cee <__multiply+0x6c>
 8007ce6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d05d      	beq.n	8007daa <__multiply+0x128>
 8007cee:	6106      	str	r6, [r0, #16]
 8007cf0:	b003      	add	sp, #12
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	f843 2b04 	str.w	r2, [r3], #4
 8007cfa:	e7e3      	b.n	8007cc4 <__multiply+0x42>
 8007cfc:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d00:	f1bb 0f00 	cmp.w	fp, #0
 8007d04:	d023      	beq.n	8007d4e <__multiply+0xcc>
 8007d06:	4689      	mov	r9, r1
 8007d08:	46ac      	mov	ip, r5
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d12:	f8dc a000 	ldr.w	sl, [ip]
 8007d16:	b2a3      	uxth	r3, r4
 8007d18:	fa1f fa8a 	uxth.w	sl, sl
 8007d1c:	fb0b a303 	mla	r3, fp, r3, sl
 8007d20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d24:	f8dc 4000 	ldr.w	r4, [ip]
 8007d28:	4443      	add	r3, r8
 8007d2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d36:	46e2      	mov	sl, ip
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d3e:	454f      	cmp	r7, r9
 8007d40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d44:	f84a 3b04 	str.w	r3, [sl], #4
 8007d48:	d82b      	bhi.n	8007da2 <__multiply+0x120>
 8007d4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d54:	3204      	adds	r2, #4
 8007d56:	f1ba 0f00 	cmp.w	sl, #0
 8007d5a:	d020      	beq.n	8007d9e <__multiply+0x11c>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	4689      	mov	r9, r1
 8007d60:	46a8      	mov	r8, r5
 8007d62:	f04f 0b00 	mov.w	fp, #0
 8007d66:	f8b9 c000 	ldrh.w	ip, [r9]
 8007d6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007d6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007d72:	445c      	add	r4, fp
 8007d74:	46c4      	mov	ip, r8
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d7c:	f84c 3b04 	str.w	r3, [ip], #4
 8007d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	fb0a b303 	mla	r3, sl, r3, fp
 8007d8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007d92:	454f      	cmp	r7, r9
 8007d94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007d98:	d805      	bhi.n	8007da6 <__multiply+0x124>
 8007d9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d9e:	3504      	adds	r5, #4
 8007da0:	e79b      	b.n	8007cda <__multiply+0x58>
 8007da2:	46d4      	mov	ip, sl
 8007da4:	e7b3      	b.n	8007d0e <__multiply+0x8c>
 8007da6:	46e0      	mov	r8, ip
 8007da8:	e7dd      	b.n	8007d66 <__multiply+0xe4>
 8007daa:	3e01      	subs	r6, #1
 8007dac:	e799      	b.n	8007ce2 <__multiply+0x60>
	...

08007db0 <__pow5mult>:
 8007db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db4:	4615      	mov	r5, r2
 8007db6:	f012 0203 	ands.w	r2, r2, #3
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	d007      	beq.n	8007dd0 <__pow5mult+0x20>
 8007dc0:	3a01      	subs	r2, #1
 8007dc2:	4c21      	ldr	r4, [pc, #132]	; (8007e48 <__pow5mult+0x98>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dca:	f7ff fec8 	bl	8007b5e <__multadd>
 8007dce:	4607      	mov	r7, r0
 8007dd0:	10ad      	asrs	r5, r5, #2
 8007dd2:	d035      	beq.n	8007e40 <__pow5mult+0x90>
 8007dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dd6:	b93c      	cbnz	r4, 8007de8 <__pow5mult+0x38>
 8007dd8:	2010      	movs	r0, #16
 8007dda:	f7ff fe6d 	bl	8007ab8 <malloc>
 8007dde:	6270      	str	r0, [r6, #36]	; 0x24
 8007de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007de4:	6004      	str	r4, [r0, #0]
 8007de6:	60c4      	str	r4, [r0, #12]
 8007de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007df0:	b94c      	cbnz	r4, 8007e06 <__pow5mult+0x56>
 8007df2:	f240 2171 	movw	r1, #625	; 0x271
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff3a 	bl	8007c70 <__i2b>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e02:	4604      	mov	r4, r0
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	07eb      	lsls	r3, r5, #31
 8007e0c:	d50a      	bpl.n	8007e24 <__pow5mult+0x74>
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4622      	mov	r2, r4
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ff35 	bl	8007c82 <__multiply>
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4681      	mov	r9, r0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff fe87 	bl	8007b30 <_Bfree>
 8007e22:	464f      	mov	r7, r9
 8007e24:	106d      	asrs	r5, r5, #1
 8007e26:	d00b      	beq.n	8007e40 <__pow5mult+0x90>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	b938      	cbnz	r0, 8007e3c <__pow5mult+0x8c>
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff ff26 	bl	8007c82 <__multiply>
 8007e36:	6020      	str	r0, [r4, #0]
 8007e38:	f8c0 8000 	str.w	r8, [r0]
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	e7e4      	b.n	8007e0a <__pow5mult+0x5a>
 8007e40:	4638      	mov	r0, r7
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	bf00      	nop
 8007e48:	08008d98 	.word	0x08008d98

08007e4c <__lshift>:
 8007e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6849      	ldr	r1, [r1, #4]
 8007e5a:	eb0a 0903 	add.w	r9, sl, r3
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	4607      	mov	r7, r0
 8007e62:	4616      	mov	r6, r2
 8007e64:	f109 0501 	add.w	r5, r9, #1
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	db32      	blt.n	8007ed2 <__lshift+0x86>
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff fe2b 	bl	8007ac8 <_Balloc>
 8007e72:	2300      	movs	r3, #0
 8007e74:	4680      	mov	r8, r0
 8007e76:	f100 0114 	add.w	r1, r0, #20
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4553      	cmp	r3, sl
 8007e7e:	db2b      	blt.n	8007ed8 <__lshift+0x8c>
 8007e80:	6920      	ldr	r0, [r4, #16]
 8007e82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e86:	f104 0314 	add.w	r3, r4, #20
 8007e8a:	f016 021f 	ands.w	r2, r6, #31
 8007e8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e96:	d025      	beq.n	8007ee4 <__lshift+0x98>
 8007e98:	f1c2 0e20 	rsb	lr, r2, #32
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	681e      	ldr	r6, [r3, #0]
 8007ea0:	468a      	mov	sl, r1
 8007ea2:	4096      	lsls	r6, r2
 8007ea4:	4330      	orrs	r0, r6
 8007ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8007eaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8007eae:	459c      	cmp	ip, r3
 8007eb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007eb4:	d814      	bhi.n	8007ee0 <__lshift+0x94>
 8007eb6:	6048      	str	r0, [r1, #4]
 8007eb8:	b108      	cbz	r0, 8007ebe <__lshift+0x72>
 8007eba:	f109 0502 	add.w	r5, r9, #2
 8007ebe:	3d01      	subs	r5, #1
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	f7ff fe32 	bl	8007b30 <_Bfree>
 8007ecc:	4640      	mov	r0, r8
 8007ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed2:	3101      	adds	r1, #1
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	e7c7      	b.n	8007e68 <__lshift+0x1c>
 8007ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007edc:	3301      	adds	r3, #1
 8007ede:	e7cd      	b.n	8007e7c <__lshift+0x30>
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	e7dc      	b.n	8007e9e <__lshift+0x52>
 8007ee4:	3904      	subs	r1, #4
 8007ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eea:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eee:	459c      	cmp	ip, r3
 8007ef0:	d8f9      	bhi.n	8007ee6 <__lshift+0x9a>
 8007ef2:	e7e4      	b.n	8007ebe <__lshift+0x72>

08007ef4 <__mcmp>:
 8007ef4:	6903      	ldr	r3, [r0, #16]
 8007ef6:	690a      	ldr	r2, [r1, #16]
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	b530      	push	{r4, r5, lr}
 8007efc:	d10c      	bne.n	8007f18 <__mcmp+0x24>
 8007efe:	0092      	lsls	r2, r2, #2
 8007f00:	3014      	adds	r0, #20
 8007f02:	3114      	adds	r1, #20
 8007f04:	1884      	adds	r4, r0, r2
 8007f06:	4411      	add	r1, r2
 8007f08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f10:	4295      	cmp	r5, r2
 8007f12:	d003      	beq.n	8007f1c <__mcmp+0x28>
 8007f14:	d305      	bcc.n	8007f22 <__mcmp+0x2e>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	bd30      	pop	{r4, r5, pc}
 8007f1c:	42a0      	cmp	r0, r4
 8007f1e:	d3f3      	bcc.n	8007f08 <__mcmp+0x14>
 8007f20:	e7fa      	b.n	8007f18 <__mcmp+0x24>
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	e7f7      	b.n	8007f18 <__mcmp+0x24>

08007f28 <__mdiff>:
 8007f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	460d      	mov	r5, r1
 8007f2e:	4607      	mov	r7, r0
 8007f30:	4611      	mov	r1, r2
 8007f32:	4628      	mov	r0, r5
 8007f34:	4614      	mov	r4, r2
 8007f36:	f7ff ffdd 	bl	8007ef4 <__mcmp>
 8007f3a:	1e06      	subs	r6, r0, #0
 8007f3c:	d108      	bne.n	8007f50 <__mdiff+0x28>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff fdc1 	bl	8007ac8 <_Balloc>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	bfa4      	itt	ge
 8007f52:	4623      	movge	r3, r4
 8007f54:	462c      	movge	r4, r5
 8007f56:	4638      	mov	r0, r7
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	bfa6      	itte	ge
 8007f5c:	461d      	movge	r5, r3
 8007f5e:	2600      	movge	r6, #0
 8007f60:	2601      	movlt	r6, #1
 8007f62:	f7ff fdb1 	bl	8007ac8 <_Balloc>
 8007f66:	692b      	ldr	r3, [r5, #16]
 8007f68:	60c6      	str	r6, [r0, #12]
 8007f6a:	6926      	ldr	r6, [r4, #16]
 8007f6c:	f105 0914 	add.w	r9, r5, #20
 8007f70:	f104 0214 	add.w	r2, r4, #20
 8007f74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007f78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007f7c:	f100 0514 	add.w	r5, r0, #20
 8007f80:	f04f 0e00 	mov.w	lr, #0
 8007f84:	f852 ab04 	ldr.w	sl, [r2], #4
 8007f88:	f859 4b04 	ldr.w	r4, [r9], #4
 8007f8c:	fa1e f18a 	uxtah	r1, lr, sl
 8007f90:	b2a3      	uxth	r3, r4
 8007f92:	1ac9      	subs	r1, r1, r3
 8007f94:	0c23      	lsrs	r3, r4, #16
 8007f96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007f9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f9e:	b289      	uxth	r1, r1
 8007fa0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007fa4:	45c8      	cmp	r8, r9
 8007fa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007faa:	4694      	mov	ip, r2
 8007fac:	f845 3b04 	str.w	r3, [r5], #4
 8007fb0:	d8e8      	bhi.n	8007f84 <__mdiff+0x5c>
 8007fb2:	45bc      	cmp	ip, r7
 8007fb4:	d304      	bcc.n	8007fc0 <__mdiff+0x98>
 8007fb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007fba:	b183      	cbz	r3, 8007fde <__mdiff+0xb6>
 8007fbc:	6106      	str	r6, [r0, #16]
 8007fbe:	e7c5      	b.n	8007f4c <__mdiff+0x24>
 8007fc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007fc4:	fa1e f381 	uxtah	r3, lr, r1
 8007fc8:	141a      	asrs	r2, r3, #16
 8007fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007fd8:	f845 3b04 	str.w	r3, [r5], #4
 8007fdc:	e7e9      	b.n	8007fb2 <__mdiff+0x8a>
 8007fde:	3e01      	subs	r6, #1
 8007fe0:	e7e9      	b.n	8007fb6 <__mdiff+0x8e>

08007fe2 <__d2b>:
 8007fe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	2101      	movs	r1, #1
 8007fea:	ec59 8b10 	vmov	r8, r9, d0
 8007fee:	4615      	mov	r5, r2
 8007ff0:	f7ff fd6a 	bl	8007ac8 <_Balloc>
 8007ff4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ffe:	bb34      	cbnz	r4, 800804e <__d2b+0x6c>
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	f1b8 0300 	subs.w	r3, r8, #0
 8008006:	d027      	beq.n	8008058 <__d2b+0x76>
 8008008:	a802      	add	r0, sp, #8
 800800a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800800e:	f7ff fe00 	bl	8007c12 <__lo0bits>
 8008012:	9900      	ldr	r1, [sp, #0]
 8008014:	b1f0      	cbz	r0, 8008054 <__d2b+0x72>
 8008016:	9a01      	ldr	r2, [sp, #4]
 8008018:	f1c0 0320 	rsb	r3, r0, #32
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	430b      	orrs	r3, r1
 8008022:	40c2      	lsrs	r2, r0
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2102      	movne	r1, #2
 8008032:	2101      	moveq	r1, #1
 8008034:	6139      	str	r1, [r7, #16]
 8008036:	b1c4      	cbz	r4, 800806a <__d2b+0x88>
 8008038:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800803c:	4404      	add	r4, r0
 800803e:	6034      	str	r4, [r6, #0]
 8008040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008044:	6028      	str	r0, [r5, #0]
 8008046:	4638      	mov	r0, r7
 8008048:	b003      	add	sp, #12
 800804a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800804e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008052:	e7d5      	b.n	8008000 <__d2b+0x1e>
 8008054:	6179      	str	r1, [r7, #20]
 8008056:	e7e7      	b.n	8008028 <__d2b+0x46>
 8008058:	a801      	add	r0, sp, #4
 800805a:	f7ff fdda 	bl	8007c12 <__lo0bits>
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	2101      	movs	r1, #1
 8008064:	6139      	str	r1, [r7, #16]
 8008066:	3020      	adds	r0, #32
 8008068:	e7e5      	b.n	8008036 <__d2b+0x54>
 800806a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800806e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008072:	6030      	str	r0, [r6, #0]
 8008074:	6918      	ldr	r0, [r3, #16]
 8008076:	f7ff fdad 	bl	8007bd4 <__hi0bits>
 800807a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800807e:	e7e1      	b.n	8008044 <__d2b+0x62>

08008080 <_calloc_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	fb02 f401 	mul.w	r4, r2, r1
 8008086:	4621      	mov	r1, r4
 8008088:	f000 f856 	bl	8008138 <_malloc_r>
 800808c:	4605      	mov	r5, r0
 800808e:	b118      	cbz	r0, 8008098 <_calloc_r+0x18>
 8008090:	4622      	mov	r2, r4
 8008092:	2100      	movs	r1, #0
 8008094:	f7fd ffad 	bl	8005ff2 <memset>
 8008098:	4628      	mov	r0, r5
 800809a:	bd38      	pop	{r3, r4, r5, pc}

0800809c <_free_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4605      	mov	r5, r0
 80080a0:	2900      	cmp	r1, #0
 80080a2:	d045      	beq.n	8008130 <_free_r+0x94>
 80080a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a8:	1f0c      	subs	r4, r1, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bfb8      	it	lt
 80080ae:	18e4      	addlt	r4, r4, r3
 80080b0:	f000 fc03 	bl	80088ba <__malloc_lock>
 80080b4:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <_free_r+0x98>)
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	4610      	mov	r0, r2
 80080ba:	b933      	cbnz	r3, 80080ca <_free_r+0x2e>
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	6014      	str	r4, [r2, #0]
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c6:	f000 bbf9 	b.w	80088bc <__malloc_unlock>
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	d90c      	bls.n	80080e8 <_free_r+0x4c>
 80080ce:	6821      	ldr	r1, [r4, #0]
 80080d0:	1862      	adds	r2, r4, r1
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bf04      	itt	eq
 80080d6:	681a      	ldreq	r2, [r3, #0]
 80080d8:	685b      	ldreq	r3, [r3, #4]
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	bf04      	itt	eq
 80080de:	1852      	addeq	r2, r2, r1
 80080e0:	6022      	streq	r2, [r4, #0]
 80080e2:	6004      	str	r4, [r0, #0]
 80080e4:	e7ec      	b.n	80080c0 <_free_r+0x24>
 80080e6:	4613      	mov	r3, r2
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	b10a      	cbz	r2, 80080f0 <_free_r+0x54>
 80080ec:	42a2      	cmp	r2, r4
 80080ee:	d9fa      	bls.n	80080e6 <_free_r+0x4a>
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	1858      	adds	r0, r3, r1
 80080f4:	42a0      	cmp	r0, r4
 80080f6:	d10b      	bne.n	8008110 <_free_r+0x74>
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	4401      	add	r1, r0
 80080fc:	1858      	adds	r0, r3, r1
 80080fe:	4282      	cmp	r2, r0
 8008100:	6019      	str	r1, [r3, #0]
 8008102:	d1dd      	bne.n	80080c0 <_free_r+0x24>
 8008104:	6810      	ldr	r0, [r2, #0]
 8008106:	6852      	ldr	r2, [r2, #4]
 8008108:	605a      	str	r2, [r3, #4]
 800810a:	4401      	add	r1, r0
 800810c:	6019      	str	r1, [r3, #0]
 800810e:	e7d7      	b.n	80080c0 <_free_r+0x24>
 8008110:	d902      	bls.n	8008118 <_free_r+0x7c>
 8008112:	230c      	movs	r3, #12
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	e7d3      	b.n	80080c0 <_free_r+0x24>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	1821      	adds	r1, r4, r0
 800811c:	428a      	cmp	r2, r1
 800811e:	bf04      	itt	eq
 8008120:	6811      	ldreq	r1, [r2, #0]
 8008122:	6852      	ldreq	r2, [r2, #4]
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	bf04      	itt	eq
 8008128:	1809      	addeq	r1, r1, r0
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	605c      	str	r4, [r3, #4]
 800812e:	e7c7      	b.n	80080c0 <_free_r+0x24>
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	bf00      	nop
 8008134:	2000020c 	.word	0x2000020c

08008138 <_malloc_r>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	1ccd      	adds	r5, r1, #3
 800813c:	f025 0503 	bic.w	r5, r5, #3
 8008140:	3508      	adds	r5, #8
 8008142:	2d0c      	cmp	r5, #12
 8008144:	bf38      	it	cc
 8008146:	250c      	movcc	r5, #12
 8008148:	2d00      	cmp	r5, #0
 800814a:	4606      	mov	r6, r0
 800814c:	db01      	blt.n	8008152 <_malloc_r+0x1a>
 800814e:	42a9      	cmp	r1, r5
 8008150:	d903      	bls.n	800815a <_malloc_r+0x22>
 8008152:	230c      	movs	r3, #12
 8008154:	6033      	str	r3, [r6, #0]
 8008156:	2000      	movs	r0, #0
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	f000 fbae 	bl	80088ba <__malloc_lock>
 800815e:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <_malloc_r+0xac>)
 8008160:	6814      	ldr	r4, [r2, #0]
 8008162:	4621      	mov	r1, r4
 8008164:	b991      	cbnz	r1, 800818c <_malloc_r+0x54>
 8008166:	4c20      	ldr	r4, [pc, #128]	; (80081e8 <_malloc_r+0xb0>)
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	b91b      	cbnz	r3, 8008174 <_malloc_r+0x3c>
 800816c:	4630      	mov	r0, r6
 800816e:	f000 facf 	bl	8008710 <_sbrk_r>
 8008172:	6020      	str	r0, [r4, #0]
 8008174:	4629      	mov	r1, r5
 8008176:	4630      	mov	r0, r6
 8008178:	f000 faca 	bl	8008710 <_sbrk_r>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d124      	bne.n	80081ca <_malloc_r+0x92>
 8008180:	230c      	movs	r3, #12
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 fb99 	bl	80088bc <__malloc_unlock>
 800818a:	e7e4      	b.n	8008156 <_malloc_r+0x1e>
 800818c:	680b      	ldr	r3, [r1, #0]
 800818e:	1b5b      	subs	r3, r3, r5
 8008190:	d418      	bmi.n	80081c4 <_malloc_r+0x8c>
 8008192:	2b0b      	cmp	r3, #11
 8008194:	d90f      	bls.n	80081b6 <_malloc_r+0x7e>
 8008196:	600b      	str	r3, [r1, #0]
 8008198:	50cd      	str	r5, [r1, r3]
 800819a:	18cc      	adds	r4, r1, r3
 800819c:	4630      	mov	r0, r6
 800819e:	f000 fb8d 	bl	80088bc <__malloc_unlock>
 80081a2:	f104 000b 	add.w	r0, r4, #11
 80081a6:	1d23      	adds	r3, r4, #4
 80081a8:	f020 0007 	bic.w	r0, r0, #7
 80081ac:	1ac3      	subs	r3, r0, r3
 80081ae:	d0d3      	beq.n	8008158 <_malloc_r+0x20>
 80081b0:	425a      	negs	r2, r3
 80081b2:	50e2      	str	r2, [r4, r3]
 80081b4:	e7d0      	b.n	8008158 <_malloc_r+0x20>
 80081b6:	428c      	cmp	r4, r1
 80081b8:	684b      	ldr	r3, [r1, #4]
 80081ba:	bf16      	itet	ne
 80081bc:	6063      	strne	r3, [r4, #4]
 80081be:	6013      	streq	r3, [r2, #0]
 80081c0:	460c      	movne	r4, r1
 80081c2:	e7eb      	b.n	800819c <_malloc_r+0x64>
 80081c4:	460c      	mov	r4, r1
 80081c6:	6849      	ldr	r1, [r1, #4]
 80081c8:	e7cc      	b.n	8008164 <_malloc_r+0x2c>
 80081ca:	1cc4      	adds	r4, r0, #3
 80081cc:	f024 0403 	bic.w	r4, r4, #3
 80081d0:	42a0      	cmp	r0, r4
 80081d2:	d005      	beq.n	80081e0 <_malloc_r+0xa8>
 80081d4:	1a21      	subs	r1, r4, r0
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 fa9a 	bl	8008710 <_sbrk_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d0cf      	beq.n	8008180 <_malloc_r+0x48>
 80081e0:	6025      	str	r5, [r4, #0]
 80081e2:	e7db      	b.n	800819c <_malloc_r+0x64>
 80081e4:	2000020c 	.word	0x2000020c
 80081e8:	20000210 	.word	0x20000210

080081ec <__ssputs_r>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	688e      	ldr	r6, [r1, #8]
 80081f2:	429e      	cmp	r6, r3
 80081f4:	4682      	mov	sl, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4690      	mov	r8, r2
 80081fa:	4699      	mov	r9, r3
 80081fc:	d837      	bhi.n	800826e <__ssputs_r+0x82>
 80081fe:	898a      	ldrh	r2, [r1, #12]
 8008200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008204:	d031      	beq.n	800826a <__ssputs_r+0x7e>
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	6909      	ldr	r1, [r1, #16]
 800820a:	1a6f      	subs	r7, r5, r1
 800820c:	6965      	ldr	r5, [r4, #20]
 800820e:	2302      	movs	r3, #2
 8008210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008214:	fb95 f5f3 	sdiv	r5, r5, r3
 8008218:	f109 0301 	add.w	r3, r9, #1
 800821c:	443b      	add	r3, r7
 800821e:	429d      	cmp	r5, r3
 8008220:	bf38      	it	cc
 8008222:	461d      	movcc	r5, r3
 8008224:	0553      	lsls	r3, r2, #21
 8008226:	d530      	bpl.n	800828a <__ssputs_r+0x9e>
 8008228:	4629      	mov	r1, r5
 800822a:	f7ff ff85 	bl	8008138 <_malloc_r>
 800822e:	4606      	mov	r6, r0
 8008230:	b950      	cbnz	r0, 8008248 <__ssputs_r+0x5c>
 8008232:	230c      	movs	r3, #12
 8008234:	f8ca 3000 	str.w	r3, [sl]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	463a      	mov	r2, r7
 800824a:	6921      	ldr	r1, [r4, #16]
 800824c:	f7fd fec6 	bl	8005fdc <memcpy>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	6126      	str	r6, [r4, #16]
 800825e:	6165      	str	r5, [r4, #20]
 8008260:	443e      	add	r6, r7
 8008262:	1bed      	subs	r5, r5, r7
 8008264:	6026      	str	r6, [r4, #0]
 8008266:	60a5      	str	r5, [r4, #8]
 8008268:	464e      	mov	r6, r9
 800826a:	454e      	cmp	r6, r9
 800826c:	d900      	bls.n	8008270 <__ssputs_r+0x84>
 800826e:	464e      	mov	r6, r9
 8008270:	4632      	mov	r2, r6
 8008272:	4641      	mov	r1, r8
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	f000 fb07 	bl	8008888 <memmove>
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	1b9b      	subs	r3, r3, r6
 800827e:	60a3      	str	r3, [r4, #8]
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	441e      	add	r6, r3
 8008284:	6026      	str	r6, [r4, #0]
 8008286:	2000      	movs	r0, #0
 8008288:	e7dc      	b.n	8008244 <__ssputs_r+0x58>
 800828a:	462a      	mov	r2, r5
 800828c:	f000 fb17 	bl	80088be <_realloc_r>
 8008290:	4606      	mov	r6, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1e2      	bne.n	800825c <__ssputs_r+0x70>
 8008296:	6921      	ldr	r1, [r4, #16]
 8008298:	4650      	mov	r0, sl
 800829a:	f7ff feff 	bl	800809c <_free_r>
 800829e:	e7c8      	b.n	8008232 <__ssputs_r+0x46>

080082a0 <_svfiprintf_r>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	461d      	mov	r5, r3
 80082a6:	898b      	ldrh	r3, [r1, #12]
 80082a8:	061f      	lsls	r7, r3, #24
 80082aa:	b09d      	sub	sp, #116	; 0x74
 80082ac:	4680      	mov	r8, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	4616      	mov	r6, r2
 80082b2:	d50f      	bpl.n	80082d4 <_svfiprintf_r+0x34>
 80082b4:	690b      	ldr	r3, [r1, #16]
 80082b6:	b96b      	cbnz	r3, 80082d4 <_svfiprintf_r+0x34>
 80082b8:	2140      	movs	r1, #64	; 0x40
 80082ba:	f7ff ff3d 	bl	8008138 <_malloc_r>
 80082be:	6020      	str	r0, [r4, #0]
 80082c0:	6120      	str	r0, [r4, #16]
 80082c2:	b928      	cbnz	r0, 80082d0 <_svfiprintf_r+0x30>
 80082c4:	230c      	movs	r3, #12
 80082c6:	f8c8 3000 	str.w	r3, [r8]
 80082ca:	f04f 30ff 	mov.w	r0, #4294967295
 80082ce:	e0c8      	b.n	8008462 <_svfiprintf_r+0x1c2>
 80082d0:	2340      	movs	r3, #64	; 0x40
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	2320      	movs	r3, #32
 80082da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082de:	2330      	movs	r3, #48	; 0x30
 80082e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082e4:	9503      	str	r5, [sp, #12]
 80082e6:	f04f 0b01 	mov.w	fp, #1
 80082ea:	4637      	mov	r7, r6
 80082ec:	463d      	mov	r5, r7
 80082ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082f2:	b10b      	cbz	r3, 80082f8 <_svfiprintf_r+0x58>
 80082f4:	2b25      	cmp	r3, #37	; 0x25
 80082f6:	d13e      	bne.n	8008376 <_svfiprintf_r+0xd6>
 80082f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80082fc:	d00b      	beq.n	8008316 <_svfiprintf_r+0x76>
 80082fe:	4653      	mov	r3, sl
 8008300:	4632      	mov	r2, r6
 8008302:	4621      	mov	r1, r4
 8008304:	4640      	mov	r0, r8
 8008306:	f7ff ff71 	bl	80081ec <__ssputs_r>
 800830a:	3001      	adds	r0, #1
 800830c:	f000 80a4 	beq.w	8008458 <_svfiprintf_r+0x1b8>
 8008310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008312:	4453      	add	r3, sl
 8008314:	9309      	str	r3, [sp, #36]	; 0x24
 8008316:	783b      	ldrb	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 809d 	beq.w	8008458 <_svfiprintf_r+0x1b8>
 800831e:	2300      	movs	r3, #0
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008330:	931a      	str	r3, [sp, #104]	; 0x68
 8008332:	462f      	mov	r7, r5
 8008334:	2205      	movs	r2, #5
 8008336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800833a:	4850      	ldr	r0, [pc, #320]	; (800847c <_svfiprintf_r+0x1dc>)
 800833c:	f7f7 ffd8 	bl	80002f0 <memchr>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	b9d0      	cbnz	r0, 800837a <_svfiprintf_r+0xda>
 8008344:	06d9      	lsls	r1, r3, #27
 8008346:	bf44      	itt	mi
 8008348:	2220      	movmi	r2, #32
 800834a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800834e:	071a      	lsls	r2, r3, #28
 8008350:	bf44      	itt	mi
 8008352:	222b      	movmi	r2, #43	; 0x2b
 8008354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008358:	782a      	ldrb	r2, [r5, #0]
 800835a:	2a2a      	cmp	r2, #42	; 0x2a
 800835c:	d015      	beq.n	800838a <_svfiprintf_r+0xea>
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	462f      	mov	r7, r5
 8008362:	2000      	movs	r0, #0
 8008364:	250a      	movs	r5, #10
 8008366:	4639      	mov	r1, r7
 8008368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836c:	3b30      	subs	r3, #48	; 0x30
 800836e:	2b09      	cmp	r3, #9
 8008370:	d94d      	bls.n	800840e <_svfiprintf_r+0x16e>
 8008372:	b1b8      	cbz	r0, 80083a4 <_svfiprintf_r+0x104>
 8008374:	e00f      	b.n	8008396 <_svfiprintf_r+0xf6>
 8008376:	462f      	mov	r7, r5
 8008378:	e7b8      	b.n	80082ec <_svfiprintf_r+0x4c>
 800837a:	4a40      	ldr	r2, [pc, #256]	; (800847c <_svfiprintf_r+0x1dc>)
 800837c:	1a80      	subs	r0, r0, r2
 800837e:	fa0b f000 	lsl.w	r0, fp, r0
 8008382:	4318      	orrs	r0, r3
 8008384:	9004      	str	r0, [sp, #16]
 8008386:	463d      	mov	r5, r7
 8008388:	e7d3      	b.n	8008332 <_svfiprintf_r+0x92>
 800838a:	9a03      	ldr	r2, [sp, #12]
 800838c:	1d11      	adds	r1, r2, #4
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	9103      	str	r1, [sp, #12]
 8008392:	2a00      	cmp	r2, #0
 8008394:	db01      	blt.n	800839a <_svfiprintf_r+0xfa>
 8008396:	9207      	str	r2, [sp, #28]
 8008398:	e004      	b.n	80083a4 <_svfiprintf_r+0x104>
 800839a:	4252      	negs	r2, r2
 800839c:	f043 0302 	orr.w	r3, r3, #2
 80083a0:	9207      	str	r2, [sp, #28]
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	783b      	ldrb	r3, [r7, #0]
 80083a6:	2b2e      	cmp	r3, #46	; 0x2e
 80083a8:	d10c      	bne.n	80083c4 <_svfiprintf_r+0x124>
 80083aa:	787b      	ldrb	r3, [r7, #1]
 80083ac:	2b2a      	cmp	r3, #42	; 0x2a
 80083ae:	d133      	bne.n	8008418 <_svfiprintf_r+0x178>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9203      	str	r2, [sp, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfb8      	it	lt
 80083bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80083c0:	3702      	adds	r7, #2
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	4d2e      	ldr	r5, [pc, #184]	; (8008480 <_svfiprintf_r+0x1e0>)
 80083c6:	7839      	ldrb	r1, [r7, #0]
 80083c8:	2203      	movs	r2, #3
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7f7 ff90 	bl	80002f0 <memchr>
 80083d0:	b138      	cbz	r0, 80083e2 <_svfiprintf_r+0x142>
 80083d2:	2340      	movs	r3, #64	; 0x40
 80083d4:	1b40      	subs	r0, r0, r5
 80083d6:	fa03 f000 	lsl.w	r0, r3, r0
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	4303      	orrs	r3, r0
 80083de:	3701      	adds	r7, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	7839      	ldrb	r1, [r7, #0]
 80083e4:	4827      	ldr	r0, [pc, #156]	; (8008484 <_svfiprintf_r+0x1e4>)
 80083e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ea:	2206      	movs	r2, #6
 80083ec:	1c7e      	adds	r6, r7, #1
 80083ee:	f7f7 ff7f 	bl	80002f0 <memchr>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d038      	beq.n	8008468 <_svfiprintf_r+0x1c8>
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <_svfiprintf_r+0x1e8>)
 80083f8:	bb13      	cbnz	r3, 8008440 <_svfiprintf_r+0x1a0>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	3307      	adds	r3, #7
 80083fe:	f023 0307 	bic.w	r3, r3, #7
 8008402:	3308      	adds	r3, #8
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	444b      	add	r3, r9
 800840a:	9309      	str	r3, [sp, #36]	; 0x24
 800840c:	e76d      	b.n	80082ea <_svfiprintf_r+0x4a>
 800840e:	fb05 3202 	mla	r2, r5, r2, r3
 8008412:	2001      	movs	r0, #1
 8008414:	460f      	mov	r7, r1
 8008416:	e7a6      	b.n	8008366 <_svfiprintf_r+0xc6>
 8008418:	2300      	movs	r3, #0
 800841a:	3701      	adds	r7, #1
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	4619      	mov	r1, r3
 8008420:	250a      	movs	r5, #10
 8008422:	4638      	mov	r0, r7
 8008424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008428:	3a30      	subs	r2, #48	; 0x30
 800842a:	2a09      	cmp	r2, #9
 800842c:	d903      	bls.n	8008436 <_svfiprintf_r+0x196>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0c8      	beq.n	80083c4 <_svfiprintf_r+0x124>
 8008432:	9105      	str	r1, [sp, #20]
 8008434:	e7c6      	b.n	80083c4 <_svfiprintf_r+0x124>
 8008436:	fb05 2101 	mla	r1, r5, r1, r2
 800843a:	2301      	movs	r3, #1
 800843c:	4607      	mov	r7, r0
 800843e:	e7f0      	b.n	8008422 <_svfiprintf_r+0x182>
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4622      	mov	r2, r4
 8008446:	4b11      	ldr	r3, [pc, #68]	; (800848c <_svfiprintf_r+0x1ec>)
 8008448:	a904      	add	r1, sp, #16
 800844a:	4640      	mov	r0, r8
 800844c:	f7fd fe60 	bl	8006110 <_printf_float>
 8008450:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008454:	4681      	mov	r9, r0
 8008456:	d1d6      	bne.n	8008406 <_svfiprintf_r+0x166>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	f53f af35 	bmi.w	80082ca <_svfiprintf_r+0x2a>
 8008460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008462:	b01d      	add	sp, #116	; 0x74
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4622      	mov	r2, r4
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <_svfiprintf_r+0x1ec>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	4640      	mov	r0, r8
 8008474:	f7fe f8ee 	bl	8006654 <_printf_i>
 8008478:	e7ea      	b.n	8008450 <_svfiprintf_r+0x1b0>
 800847a:	bf00      	nop
 800847c:	08008da4 	.word	0x08008da4
 8008480:	08008daa 	.word	0x08008daa
 8008484:	08008dae 	.word	0x08008dae
 8008488:	08006111 	.word	0x08006111
 800848c:	080081ed 	.word	0x080081ed

08008490 <__sfputc_r>:
 8008490:	6893      	ldr	r3, [r2, #8]
 8008492:	3b01      	subs	r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	b410      	push	{r4}
 8008498:	6093      	str	r3, [r2, #8]
 800849a:	da08      	bge.n	80084ae <__sfputc_r+0x1e>
 800849c:	6994      	ldr	r4, [r2, #24]
 800849e:	42a3      	cmp	r3, r4
 80084a0:	db01      	blt.n	80084a6 <__sfputc_r+0x16>
 80084a2:	290a      	cmp	r1, #10
 80084a4:	d103      	bne.n	80084ae <__sfputc_r+0x1e>
 80084a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084aa:	f7fe ba81 	b.w	80069b0 <__swbuf_r>
 80084ae:	6813      	ldr	r3, [r2, #0]
 80084b0:	1c58      	adds	r0, r3, #1
 80084b2:	6010      	str	r0, [r2, #0]
 80084b4:	7019      	strb	r1, [r3, #0]
 80084b6:	4608      	mov	r0, r1
 80084b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084bc:	4770      	bx	lr

080084be <__sfputs_r>:
 80084be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c0:	4606      	mov	r6, r0
 80084c2:	460f      	mov	r7, r1
 80084c4:	4614      	mov	r4, r2
 80084c6:	18d5      	adds	r5, r2, r3
 80084c8:	42ac      	cmp	r4, r5
 80084ca:	d101      	bne.n	80084d0 <__sfputs_r+0x12>
 80084cc:	2000      	movs	r0, #0
 80084ce:	e007      	b.n	80084e0 <__sfputs_r+0x22>
 80084d0:	463a      	mov	r2, r7
 80084d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7ff ffda 	bl	8008490 <__sfputc_r>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d1f3      	bne.n	80084c8 <__sfputs_r+0xa>
 80084e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084e4 <_vfiprintf_r>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	b09d      	sub	sp, #116	; 0x74
 80084ec:	4617      	mov	r7, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	4606      	mov	r6, r0
 80084f2:	b118      	cbz	r0, 80084fc <_vfiprintf_r+0x18>
 80084f4:	6983      	ldr	r3, [r0, #24]
 80084f6:	b90b      	cbnz	r3, 80084fc <_vfiprintf_r+0x18>
 80084f8:	f7ff f9e2 	bl	80078c0 <__sinit>
 80084fc:	4b7c      	ldr	r3, [pc, #496]	; (80086f0 <_vfiprintf_r+0x20c>)
 80084fe:	429c      	cmp	r4, r3
 8008500:	d158      	bne.n	80085b4 <_vfiprintf_r+0xd0>
 8008502:	6874      	ldr	r4, [r6, #4]
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	0718      	lsls	r0, r3, #28
 8008508:	d55e      	bpl.n	80085c8 <_vfiprintf_r+0xe4>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d05b      	beq.n	80085c8 <_vfiprintf_r+0xe4>
 8008510:	2300      	movs	r3, #0
 8008512:	9309      	str	r3, [sp, #36]	; 0x24
 8008514:	2320      	movs	r3, #32
 8008516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851a:	2330      	movs	r3, #48	; 0x30
 800851c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008520:	9503      	str	r5, [sp, #12]
 8008522:	f04f 0b01 	mov.w	fp, #1
 8008526:	46b8      	mov	r8, r7
 8008528:	4645      	mov	r5, r8
 800852a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800852e:	b10b      	cbz	r3, 8008534 <_vfiprintf_r+0x50>
 8008530:	2b25      	cmp	r3, #37	; 0x25
 8008532:	d154      	bne.n	80085de <_vfiprintf_r+0xfa>
 8008534:	ebb8 0a07 	subs.w	sl, r8, r7
 8008538:	d00b      	beq.n	8008552 <_vfiprintf_r+0x6e>
 800853a:	4653      	mov	r3, sl
 800853c:	463a      	mov	r2, r7
 800853e:	4621      	mov	r1, r4
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ffbc 	bl	80084be <__sfputs_r>
 8008546:	3001      	adds	r0, #1
 8008548:	f000 80c2 	beq.w	80086d0 <_vfiprintf_r+0x1ec>
 800854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854e:	4453      	add	r3, sl
 8008550:	9309      	str	r3, [sp, #36]	; 0x24
 8008552:	f898 3000 	ldrb.w	r3, [r8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80ba 	beq.w	80086d0 <_vfiprintf_r+0x1ec>
 800855c:	2300      	movs	r3, #0
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856e:	931a      	str	r3, [sp, #104]	; 0x68
 8008570:	46a8      	mov	r8, r5
 8008572:	2205      	movs	r2, #5
 8008574:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008578:	485e      	ldr	r0, [pc, #376]	; (80086f4 <_vfiprintf_r+0x210>)
 800857a:	f7f7 feb9 	bl	80002f0 <memchr>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	bb78      	cbnz	r0, 80085e2 <_vfiprintf_r+0xfe>
 8008582:	06d9      	lsls	r1, r3, #27
 8008584:	bf44      	itt	mi
 8008586:	2220      	movmi	r2, #32
 8008588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800858c:	071a      	lsls	r2, r3, #28
 800858e:	bf44      	itt	mi
 8008590:	222b      	movmi	r2, #43	; 0x2b
 8008592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008596:	782a      	ldrb	r2, [r5, #0]
 8008598:	2a2a      	cmp	r2, #42	; 0x2a
 800859a:	d02a      	beq.n	80085f2 <_vfiprintf_r+0x10e>
 800859c:	9a07      	ldr	r2, [sp, #28]
 800859e:	46a8      	mov	r8, r5
 80085a0:	2000      	movs	r0, #0
 80085a2:	250a      	movs	r5, #10
 80085a4:	4641      	mov	r1, r8
 80085a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085aa:	3b30      	subs	r3, #48	; 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d969      	bls.n	8008684 <_vfiprintf_r+0x1a0>
 80085b0:	b360      	cbz	r0, 800860c <_vfiprintf_r+0x128>
 80085b2:	e024      	b.n	80085fe <_vfiprintf_r+0x11a>
 80085b4:	4b50      	ldr	r3, [pc, #320]	; (80086f8 <_vfiprintf_r+0x214>)
 80085b6:	429c      	cmp	r4, r3
 80085b8:	d101      	bne.n	80085be <_vfiprintf_r+0xda>
 80085ba:	68b4      	ldr	r4, [r6, #8]
 80085bc:	e7a2      	b.n	8008504 <_vfiprintf_r+0x20>
 80085be:	4b4f      	ldr	r3, [pc, #316]	; (80086fc <_vfiprintf_r+0x218>)
 80085c0:	429c      	cmp	r4, r3
 80085c2:	bf08      	it	eq
 80085c4:	68f4      	ldreq	r4, [r6, #12]
 80085c6:	e79d      	b.n	8008504 <_vfiprintf_r+0x20>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7fe fa42 	bl	8006a54 <__swsetup_r>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d09d      	beq.n	8008510 <_vfiprintf_r+0x2c>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b01d      	add	sp, #116	; 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	46a8      	mov	r8, r5
 80085e0:	e7a2      	b.n	8008528 <_vfiprintf_r+0x44>
 80085e2:	4a44      	ldr	r2, [pc, #272]	; (80086f4 <_vfiprintf_r+0x210>)
 80085e4:	1a80      	subs	r0, r0, r2
 80085e6:	fa0b f000 	lsl.w	r0, fp, r0
 80085ea:	4318      	orrs	r0, r3
 80085ec:	9004      	str	r0, [sp, #16]
 80085ee:	4645      	mov	r5, r8
 80085f0:	e7be      	b.n	8008570 <_vfiprintf_r+0x8c>
 80085f2:	9a03      	ldr	r2, [sp, #12]
 80085f4:	1d11      	adds	r1, r2, #4
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	9103      	str	r1, [sp, #12]
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	db01      	blt.n	8008602 <_vfiprintf_r+0x11e>
 80085fe:	9207      	str	r2, [sp, #28]
 8008600:	e004      	b.n	800860c <_vfiprintf_r+0x128>
 8008602:	4252      	negs	r2, r2
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	9207      	str	r2, [sp, #28]
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	f898 3000 	ldrb.w	r3, [r8]
 8008610:	2b2e      	cmp	r3, #46	; 0x2e
 8008612:	d10e      	bne.n	8008632 <_vfiprintf_r+0x14e>
 8008614:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008618:	2b2a      	cmp	r3, #42	; 0x2a
 800861a:	d138      	bne.n	800868e <_vfiprintf_r+0x1aa>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	f04f 33ff 	movlt.w	r3, #4294967295
 800862c:	f108 0802 	add.w	r8, r8, #2
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4d33      	ldr	r5, [pc, #204]	; (8008700 <_vfiprintf_r+0x21c>)
 8008634:	f898 1000 	ldrb.w	r1, [r8]
 8008638:	2203      	movs	r2, #3
 800863a:	4628      	mov	r0, r5
 800863c:	f7f7 fe58 	bl	80002f0 <memchr>
 8008640:	b140      	cbz	r0, 8008654 <_vfiprintf_r+0x170>
 8008642:	2340      	movs	r3, #64	; 0x40
 8008644:	1b40      	subs	r0, r0, r5
 8008646:	fa03 f000 	lsl.w	r0, r3, r0
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	4303      	orrs	r3, r0
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	f898 1000 	ldrb.w	r1, [r8]
 8008658:	482a      	ldr	r0, [pc, #168]	; (8008704 <_vfiprintf_r+0x220>)
 800865a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800865e:	2206      	movs	r2, #6
 8008660:	f108 0701 	add.w	r7, r8, #1
 8008664:	f7f7 fe44 	bl	80002f0 <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d037      	beq.n	80086dc <_vfiprintf_r+0x1f8>
 800866c:	4b26      	ldr	r3, [pc, #152]	; (8008708 <_vfiprintf_r+0x224>)
 800866e:	bb1b      	cbnz	r3, 80086b8 <_vfiprintf_r+0x1d4>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3307      	adds	r3, #7
 8008674:	f023 0307 	bic.w	r3, r3, #7
 8008678:	3308      	adds	r3, #8
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	444b      	add	r3, r9
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	e750      	b.n	8008526 <_vfiprintf_r+0x42>
 8008684:	fb05 3202 	mla	r2, r5, r2, r3
 8008688:	2001      	movs	r0, #1
 800868a:	4688      	mov	r8, r1
 800868c:	e78a      	b.n	80085a4 <_vfiprintf_r+0xc0>
 800868e:	2300      	movs	r3, #0
 8008690:	f108 0801 	add.w	r8, r8, #1
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	4619      	mov	r1, r3
 8008698:	250a      	movs	r5, #10
 800869a:	4640      	mov	r0, r8
 800869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a0:	3a30      	subs	r2, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d903      	bls.n	80086ae <_vfiprintf_r+0x1ca>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0c3      	beq.n	8008632 <_vfiprintf_r+0x14e>
 80086aa:	9105      	str	r1, [sp, #20]
 80086ac:	e7c1      	b.n	8008632 <_vfiprintf_r+0x14e>
 80086ae:	fb05 2101 	mla	r1, r5, r1, r2
 80086b2:	2301      	movs	r3, #1
 80086b4:	4680      	mov	r8, r0
 80086b6:	e7f0      	b.n	800869a <_vfiprintf_r+0x1b6>
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4622      	mov	r2, r4
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <_vfiprintf_r+0x228>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7fd fd24 	bl	8006110 <_printf_float>
 80086c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086cc:	4681      	mov	r9, r0
 80086ce:	d1d5      	bne.n	800867c <_vfiprintf_r+0x198>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	065b      	lsls	r3, r3, #25
 80086d4:	f53f af7e 	bmi.w	80085d4 <_vfiprintf_r+0xf0>
 80086d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086da:	e77d      	b.n	80085d8 <_vfiprintf_r+0xf4>
 80086dc:	ab03      	add	r3, sp, #12
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4622      	mov	r2, r4
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <_vfiprintf_r+0x228>)
 80086e4:	a904      	add	r1, sp, #16
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7fd ffb4 	bl	8006654 <_printf_i>
 80086ec:	e7ec      	b.n	80086c8 <_vfiprintf_r+0x1e4>
 80086ee:	bf00      	nop
 80086f0:	08008c68 	.word	0x08008c68
 80086f4:	08008da4 	.word	0x08008da4
 80086f8:	08008c88 	.word	0x08008c88
 80086fc:	08008c48 	.word	0x08008c48
 8008700:	08008daa 	.word	0x08008daa
 8008704:	08008dae 	.word	0x08008dae
 8008708:	08006111 	.word	0x08006111
 800870c:	080084bf 	.word	0x080084bf

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4c06      	ldr	r4, [pc, #24]	; (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4605      	mov	r5, r0
 8008718:	4608      	mov	r0, r1
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	f7f8 ff3a 	bl	8001594 <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200002f4 	.word	0x200002f4

08008730 <__sread>:
 8008730:	b510      	push	{r4, lr}
 8008732:	460c      	mov	r4, r1
 8008734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008738:	f000 f8e8 	bl	800890c <_read_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	bfab      	itete	ge
 8008740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008742:	89a3      	ldrhlt	r3, [r4, #12]
 8008744:	181b      	addge	r3, r3, r0
 8008746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800874a:	bfac      	ite	ge
 800874c:	6563      	strge	r3, [r4, #84]	; 0x54
 800874e:	81a3      	strhlt	r3, [r4, #12]
 8008750:	bd10      	pop	{r4, pc}

08008752 <__swrite>:
 8008752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	461f      	mov	r7, r3
 8008758:	898b      	ldrh	r3, [r1, #12]
 800875a:	05db      	lsls	r3, r3, #23
 800875c:	4605      	mov	r5, r0
 800875e:	460c      	mov	r4, r1
 8008760:	4616      	mov	r6, r2
 8008762:	d505      	bpl.n	8008770 <__swrite+0x1e>
 8008764:	2302      	movs	r3, #2
 8008766:	2200      	movs	r2, #0
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	f000 f868 	bl	8008840 <_lseek_r>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	4632      	mov	r2, r6
 800877e:	463b      	mov	r3, r7
 8008780:	4628      	mov	r0, r5
 8008782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008786:	f000 b817 	b.w	80087b8 <_write_r>

0800878a <__sseek>:
 800878a:	b510      	push	{r4, lr}
 800878c:	460c      	mov	r4, r1
 800878e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008792:	f000 f855 	bl	8008840 <_lseek_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	bf15      	itete	ne
 800879c:	6560      	strne	r0, [r4, #84]	; 0x54
 800879e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087a6:	81a3      	strheq	r3, [r4, #12]
 80087a8:	bf18      	it	ne
 80087aa:	81a3      	strhne	r3, [r4, #12]
 80087ac:	bd10      	pop	{r4, pc}

080087ae <__sclose>:
 80087ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b2:	f000 b813 	b.w	80087dc <_close_r>
	...

080087b8 <_write_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4c07      	ldr	r4, [pc, #28]	; (80087d8 <_write_r+0x20>)
 80087bc:	4605      	mov	r5, r0
 80087be:	4608      	mov	r0, r1
 80087c0:	4611      	mov	r1, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f7f8 fe93 	bl	80014f2 <_write>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_write_r+0x1e>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_write_r+0x1e>
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	200002f4 	.word	0x200002f4

080087dc <_close_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4c06      	ldr	r4, [pc, #24]	; (80087f8 <_close_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4605      	mov	r5, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	f7f8 fe9f 	bl	800152a <_close>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_close_r+0x1a>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_close_r+0x1a>
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	200002f4 	.word	0x200002f4

080087fc <_fstat_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4c07      	ldr	r4, [pc, #28]	; (800881c <_fstat_r+0x20>)
 8008800:	2300      	movs	r3, #0
 8008802:	4605      	mov	r5, r0
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	f7f8 fe9a 	bl	8001542 <_fstat>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d102      	bne.n	8008818 <_fstat_r+0x1c>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	b103      	cbz	r3, 8008818 <_fstat_r+0x1c>
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	bf00      	nop
 800881c:	200002f4 	.word	0x200002f4

08008820 <_isatty_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4c06      	ldr	r4, [pc, #24]	; (800883c <_isatty_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4605      	mov	r5, r0
 8008828:	4608      	mov	r0, r1
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	f7f8 fe99 	bl	8001562 <_isatty>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_isatty_r+0x1a>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	b103      	cbz	r3, 800883a <_isatty_r+0x1a>
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	200002f4 	.word	0x200002f4

08008840 <_lseek_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4c07      	ldr	r4, [pc, #28]	; (8008860 <_lseek_r+0x20>)
 8008844:	4605      	mov	r5, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f8 fe92 	bl	8001578 <_lseek>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_lseek_r+0x1e>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	b103      	cbz	r3, 800885e <_lseek_r+0x1e>
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	200002f4 	.word	0x200002f4

08008864 <__ascii_mbtowc>:
 8008864:	b082      	sub	sp, #8
 8008866:	b901      	cbnz	r1, 800886a <__ascii_mbtowc+0x6>
 8008868:	a901      	add	r1, sp, #4
 800886a:	b142      	cbz	r2, 800887e <__ascii_mbtowc+0x1a>
 800886c:	b14b      	cbz	r3, 8008882 <__ascii_mbtowc+0x1e>
 800886e:	7813      	ldrb	r3, [r2, #0]
 8008870:	600b      	str	r3, [r1, #0]
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	1c10      	adds	r0, r2, #0
 8008876:	bf18      	it	ne
 8008878:	2001      	movne	r0, #1
 800887a:	b002      	add	sp, #8
 800887c:	4770      	bx	lr
 800887e:	4610      	mov	r0, r2
 8008880:	e7fb      	b.n	800887a <__ascii_mbtowc+0x16>
 8008882:	f06f 0001 	mvn.w	r0, #1
 8008886:	e7f8      	b.n	800887a <__ascii_mbtowc+0x16>

08008888 <memmove>:
 8008888:	4288      	cmp	r0, r1
 800888a:	b510      	push	{r4, lr}
 800888c:	eb01 0302 	add.w	r3, r1, r2
 8008890:	d807      	bhi.n	80088a2 <memmove+0x1a>
 8008892:	1e42      	subs	r2, r0, #1
 8008894:	4299      	cmp	r1, r3
 8008896:	d00a      	beq.n	80088ae <memmove+0x26>
 8008898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088a0:	e7f8      	b.n	8008894 <memmove+0xc>
 80088a2:	4283      	cmp	r3, r0
 80088a4:	d9f5      	bls.n	8008892 <memmove+0xa>
 80088a6:	1881      	adds	r1, r0, r2
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	42d3      	cmn	r3, r2
 80088ac:	d100      	bne.n	80088b0 <memmove+0x28>
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088b8:	e7f7      	b.n	80088aa <memmove+0x22>

080088ba <__malloc_lock>:
 80088ba:	4770      	bx	lr

080088bc <__malloc_unlock>:
 80088bc:	4770      	bx	lr

080088be <_realloc_r>:
 80088be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c0:	4607      	mov	r7, r0
 80088c2:	4614      	mov	r4, r2
 80088c4:	460e      	mov	r6, r1
 80088c6:	b921      	cbnz	r1, 80088d2 <_realloc_r+0x14>
 80088c8:	4611      	mov	r1, r2
 80088ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088ce:	f7ff bc33 	b.w	8008138 <_malloc_r>
 80088d2:	b922      	cbnz	r2, 80088de <_realloc_r+0x20>
 80088d4:	f7ff fbe2 	bl	800809c <_free_r>
 80088d8:	4625      	mov	r5, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088de:	f000 f834 	bl	800894a <_malloc_usable_size_r>
 80088e2:	42a0      	cmp	r0, r4
 80088e4:	d20f      	bcs.n	8008906 <_realloc_r+0x48>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff fc25 	bl	8008138 <_malloc_r>
 80088ee:	4605      	mov	r5, r0
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d0f2      	beq.n	80088da <_realloc_r+0x1c>
 80088f4:	4631      	mov	r1, r6
 80088f6:	4622      	mov	r2, r4
 80088f8:	f7fd fb70 	bl	8005fdc <memcpy>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4638      	mov	r0, r7
 8008900:	f7ff fbcc 	bl	800809c <_free_r>
 8008904:	e7e9      	b.n	80088da <_realloc_r+0x1c>
 8008906:	4635      	mov	r5, r6
 8008908:	e7e7      	b.n	80088da <_realloc_r+0x1c>
	...

0800890c <_read_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4c07      	ldr	r4, [pc, #28]	; (800892c <_read_r+0x20>)
 8008910:	4605      	mov	r5, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	6022      	str	r2, [r4, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f8 fdcc 	bl	80014b8 <_read>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_read_r+0x1e>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	b103      	cbz	r3, 800892a <_read_r+0x1e>
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200002f4 	.word	0x200002f4

08008930 <__ascii_wctomb>:
 8008930:	b149      	cbz	r1, 8008946 <__ascii_wctomb+0x16>
 8008932:	2aff      	cmp	r2, #255	; 0xff
 8008934:	bf85      	ittet	hi
 8008936:	238a      	movhi	r3, #138	; 0x8a
 8008938:	6003      	strhi	r3, [r0, #0]
 800893a:	700a      	strbls	r2, [r1, #0]
 800893c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008940:	bf98      	it	ls
 8008942:	2001      	movls	r0, #1
 8008944:	4770      	bx	lr
 8008946:	4608      	mov	r0, r1
 8008948:	4770      	bx	lr

0800894a <_malloc_usable_size_r>:
 800894a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894e:	1f18      	subs	r0, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbc      	itt	lt
 8008954:	580b      	ldrlt	r3, [r1, r0]
 8008956:	18c0      	addlt	r0, r0, r3
 8008958:	4770      	bx	lr
	...

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
