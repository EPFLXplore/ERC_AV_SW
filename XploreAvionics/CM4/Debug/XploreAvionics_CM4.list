
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08104cd8  08104cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104d7c  08104d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08104d80  08104d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  10000000  08104d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004f68  10000024  08104da8  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004f8c  08104da8  00024f8c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ef74  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004d11  00000000  00000000  0004efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001910  00000000  00000000  00053ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001718  00000000  00000000  000555f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f350  00000000  00000000  00056d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019b75  00000000  00000000  00096058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0019b075  00000000  00000000  000afbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0024ac42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006824  00000000  00000000  0024acc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000024 	.word	0x10000024
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104cc0 	.word	0x08104cc0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000028 	.word	0x10000028
 81002dc:	08104cc0 	.word	0x08104cc0

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100318:	b480      	push	{r7}
 810031a:	b083      	sub	sp, #12
 810031c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810031e:	4b12      	ldr	r3, [pc, #72]	; (8100368 <MX_DMA_Init+0x50>)
 8100320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100324:	4a10      	ldr	r2, [pc, #64]	; (8100368 <MX_DMA_Init+0x50>)
 8100326:	f043 0301 	orr.w	r3, r3, #1
 810032a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810032e:	4b0e      	ldr	r3, [pc, #56]	; (8100368 <MX_DMA_Init+0x50>)
 8100330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100334:	f003 0301 	and.w	r3, r3, #1
 8100338:	607b      	str	r3, [r7, #4]
 810033a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 810033c:	4b0a      	ldr	r3, [pc, #40]	; (8100368 <MX_DMA_Init+0x50>)
 810033e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100342:	4a09      	ldr	r2, [pc, #36]	; (8100368 <MX_DMA_Init+0x50>)
 8100344:	f043 0302 	orr.w	r3, r3, #2
 8100348:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810034c:	4b06      	ldr	r3, [pc, #24]	; (8100368 <MX_DMA_Init+0x50>)
 810034e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100352:	f003 0302 	and.w	r3, r3, #2
 8100356:	603b      	str	r3, [r7, #0]
 8100358:	683b      	ldr	r3, [r7, #0]

}
 810035a:	bf00      	nop
 810035c:	370c      	adds	r7, #12
 810035e:	46bd      	mov	sp, r7
 8100360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100364:	4770      	bx	lr
 8100366:	bf00      	nop
 8100368:	58024400 	.word	0x58024400

0810036c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 810036c:	b580      	push	{r7, lr}
 810036e:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8100370:	4b2e      	ldr	r3, [pc, #184]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100372:	4a2f      	ldr	r2, [pc, #188]	; (8100430 <MX_FDCAN1_Init+0xc4>)
 8100374:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100376:	4b2d      	ldr	r3, [pc, #180]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100378:	2200      	movs	r2, #0
 810037a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 810037c:	4b2b      	ldr	r3, [pc, #172]	; (810042c <MX_FDCAN1_Init+0xc0>)
 810037e:	2200      	movs	r2, #0
 8100380:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8100382:	4b2a      	ldr	r3, [pc, #168]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100384:	2200      	movs	r2, #0
 8100386:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100388:	4b28      	ldr	r3, [pc, #160]	; (810042c <MX_FDCAN1_Init+0xc0>)
 810038a:	2200      	movs	r2, #0
 810038c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 810038e:	4b27      	ldr	r3, [pc, #156]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100390:	2200      	movs	r2, #0
 8100392:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8100394:	4b25      	ldr	r3, [pc, #148]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100396:	2201      	movs	r2, #1
 8100398:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 810039a:	4b24      	ldr	r3, [pc, #144]	; (810042c <MX_FDCAN1_Init+0xc0>)
 810039c:	2201      	movs	r2, #1
 810039e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 81003a0:	4b22      	ldr	r3, [pc, #136]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003a2:	2202      	movs	r2, #2
 81003a4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 81003a6:	4b21      	ldr	r3, [pc, #132]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003a8:	2202      	movs	r2, #2
 81003aa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 81003ac:	4b1f      	ldr	r3, [pc, #124]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003ae:	2201      	movs	r2, #1
 81003b0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 81003b2:	4b1e      	ldr	r3, [pc, #120]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003b4:	2201      	movs	r2, #1
 81003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 81003b8:	4b1c      	ldr	r3, [pc, #112]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003ba:	2201      	movs	r2, #1
 81003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 81003be:	4b1b      	ldr	r3, [pc, #108]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003c0:	2201      	movs	r2, #1
 81003c2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 81003c4:	4b19      	ldr	r3, [pc, #100]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003c6:	2200      	movs	r2, #0
 81003c8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 81003ca:	4b18      	ldr	r3, [pc, #96]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003cc:	2200      	movs	r2, #0
 81003ce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 81003d0:	4b16      	ldr	r3, [pc, #88]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003d2:	2200      	movs	r2, #0
 81003d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 81003d6:	4b15      	ldr	r3, [pc, #84]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003d8:	2200      	movs	r2, #0
 81003da:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81003dc:	4b13      	ldr	r3, [pc, #76]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003de:	2204      	movs	r2, #4
 81003e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 81003e2:	4b12      	ldr	r3, [pc, #72]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003e4:	2200      	movs	r2, #0
 81003e6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81003e8:	4b10      	ldr	r3, [pc, #64]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003ea:	2204      	movs	r2, #4
 81003ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 81003ee:	4b0f      	ldr	r3, [pc, #60]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003f0:	2200      	movs	r2, #0
 81003f2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81003f4:	4b0d      	ldr	r3, [pc, #52]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003f6:	2204      	movs	r2, #4
 81003f8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 81003fa:	4b0c      	ldr	r3, [pc, #48]	; (810042c <MX_FDCAN1_Init+0xc0>)
 81003fc:	2200      	movs	r2, #0
 81003fe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100400:	4b0a      	ldr	r3, [pc, #40]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100402:	2200      	movs	r2, #0
 8100404:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100406:	4b09      	ldr	r3, [pc, #36]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100408:	2200      	movs	r2, #0
 810040a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 810040c:	4b07      	ldr	r3, [pc, #28]	; (810042c <MX_FDCAN1_Init+0xc0>)
 810040e:	2200      	movs	r2, #0
 8100410:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100412:	4b06      	ldr	r3, [pc, #24]	; (810042c <MX_FDCAN1_Init+0xc0>)
 8100414:	2204      	movs	r2, #4
 8100416:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100418:	4804      	ldr	r0, [pc, #16]	; (810042c <MX_FDCAN1_Init+0xc0>)
 810041a:	f000 fbd3 	bl	8100bc4 <HAL_FDCAN_Init>
 810041e:	4603      	mov	r3, r0
 8100420:	2b00      	cmp	r3, #0
 8100422:	d001      	beq.n	8100428 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8100424:	f000 f902 	bl	810062c <Error_Handler>
  }

}
 8100428:	bf00      	nop
 810042a:	bd80      	pop	{r7, pc}
 810042c:	10004954 	.word	0x10004954
 8100430:	4000a000 	.word	0x4000a000

08100434 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8100434:	b580      	push	{r7, lr}
 8100436:	b08a      	sub	sp, #40	; 0x28
 8100438:	af00      	add	r7, sp, #0
 810043a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810043c:	f107 0314 	add.w	r3, r7, #20
 8100440:	2200      	movs	r2, #0
 8100442:	601a      	str	r2, [r3, #0]
 8100444:	605a      	str	r2, [r3, #4]
 8100446:	609a      	str	r2, [r3, #8]
 8100448:	60da      	str	r2, [r3, #12]
 810044a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 810044c:	687b      	ldr	r3, [r7, #4]
 810044e:	681b      	ldr	r3, [r3, #0]
 8100450:	4a1a      	ldr	r2, [pc, #104]	; (81004bc <HAL_FDCAN_MspInit+0x88>)
 8100452:	4293      	cmp	r3, r2
 8100454:	d12e      	bne.n	81004b4 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8100456:	4b1a      	ldr	r3, [pc, #104]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 8100458:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810045c:	4a18      	ldr	r2, [pc, #96]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 810045e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100462:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8100466:	4b16      	ldr	r3, [pc, #88]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 8100468:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810046c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100470:	613b      	str	r3, [r7, #16]
 8100472:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100474:	4b12      	ldr	r3, [pc, #72]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 8100476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810047a:	4a11      	ldr	r2, [pc, #68]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 810047c:	f043 0301 	orr.w	r3, r3, #1
 8100480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100484:	4b0e      	ldr	r3, [pc, #56]	; (81004c0 <HAL_FDCAN_MspInit+0x8c>)
 8100486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810048a:	f003 0301 	and.w	r3, r3, #1
 810048e:	60fb      	str	r3, [r7, #12]
 8100490:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8100492:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8100496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100498:	2302      	movs	r3, #2
 810049a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810049c:	2300      	movs	r3, #0
 810049e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81004a0:	2303      	movs	r3, #3
 81004a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 81004a4:	2309      	movs	r3, #9
 81004a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81004a8:	f107 0314 	add.w	r3, r7, #20
 81004ac:	4619      	mov	r1, r3
 81004ae:	4805      	ldr	r0, [pc, #20]	; (81004c4 <HAL_FDCAN_MspInit+0x90>)
 81004b0:	f000 fefa 	bl	81012a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 81004b4:	bf00      	nop
 81004b6:	3728      	adds	r7, #40	; 0x28
 81004b8:	46bd      	mov	sp, r7
 81004ba:	bd80      	pop	{r7, pc}
 81004bc:	4000a000 	.word	0x4000a000
 81004c0:	58024400 	.word	0x58024400
 81004c4:	58020000 	.word	0x58020000

081004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81004c8:	b580      	push	{r7, lr}
 81004ca:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81004cc:	4a04      	ldr	r2, [pc, #16]	; (81004e0 <MX_FREERTOS_Init+0x18>)
 81004ce:	2100      	movs	r1, #0
 81004d0:	4804      	ldr	r0, [pc, #16]	; (81004e4 <MX_FREERTOS_Init+0x1c>)
 81004d2:	f001 feeb 	bl	81022ac <osThreadNew>
 81004d6:	4602      	mov	r2, r0
 81004d8:	4b03      	ldr	r3, [pc, #12]	; (81004e8 <MX_FREERTOS_Init+0x20>)
 81004da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 81004dc:	bf00      	nop
 81004de:	bd80      	pop	{r7, pc}
 81004e0:	08104d58 	.word	0x08104d58
 81004e4:	081004ed 	.word	0x081004ed
 81004e8:	100049f4 	.word	0x100049f4

081004ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81004ec:	b580      	push	{r7, lr}
 81004ee:	b082      	sub	sp, #8
 81004f0:	af00      	add	r7, sp, #0
 81004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 81004f4:	2001      	movs	r0, #1
 81004f6:	f001 ff7f 	bl	81023f8 <osDelay>
 81004fa:	e7fb      	b.n	81004f4 <StartDefaultTask+0x8>

081004fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 81004fc:	b480      	push	{r7}
 81004fe:	b083      	sub	sp, #12
 8100500:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100502:	4b12      	ldr	r3, [pc, #72]	; (810054c <MX_GPIO_Init+0x50>)
 8100504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100508:	4a10      	ldr	r2, [pc, #64]	; (810054c <MX_GPIO_Init+0x50>)
 810050a:	f043 0320 	orr.w	r3, r3, #32
 810050e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100512:	4b0e      	ldr	r3, [pc, #56]	; (810054c <MX_GPIO_Init+0x50>)
 8100514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100518:	f003 0320 	and.w	r3, r3, #32
 810051c:	607b      	str	r3, [r7, #4]
 810051e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100520:	4b0a      	ldr	r3, [pc, #40]	; (810054c <MX_GPIO_Init+0x50>)
 8100522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100526:	4a09      	ldr	r2, [pc, #36]	; (810054c <MX_GPIO_Init+0x50>)
 8100528:	f043 0301 	orr.w	r3, r3, #1
 810052c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100530:	4b06      	ldr	r3, [pc, #24]	; (810054c <MX_GPIO_Init+0x50>)
 8100532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100536:	f003 0301 	and.w	r3, r3, #1
 810053a:	603b      	str	r3, [r7, #0]
 810053c:	683b      	ldr	r3, [r7, #0]

}
 810053e:	bf00      	nop
 8100540:	370c      	adds	r7, #12
 8100542:	46bd      	mov	sp, r7
 8100544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100548:	4770      	bx	lr
 810054a:	bf00      	nop
 810054c:	58024400 	.word	0x58024400

08100550 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8100550:	b580      	push	{r7, lr}
 8100552:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 8100554:	4b0b      	ldr	r3, [pc, #44]	; (8100584 <MX_IWDG2_Init+0x34>)
 8100556:	4a0c      	ldr	r2, [pc, #48]	; (8100588 <MX_IWDG2_Init+0x38>)
 8100558:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 810055a:	4b0a      	ldr	r3, [pc, #40]	; (8100584 <MX_IWDG2_Init+0x34>)
 810055c:	2200      	movs	r2, #0
 810055e:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8100560:	4b08      	ldr	r3, [pc, #32]	; (8100584 <MX_IWDG2_Init+0x34>)
 8100562:	f640 72ff 	movw	r2, #4095	; 0xfff
 8100566:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8100568:	4b06      	ldr	r3, [pc, #24]	; (8100584 <MX_IWDG2_Init+0x34>)
 810056a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810056e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8100570:	4804      	ldr	r0, [pc, #16]	; (8100584 <MX_IWDG2_Init+0x34>)
 8100572:	f001 f85b 	bl	810162c <HAL_IWDG_Init>
 8100576:	4603      	mov	r3, r0
 8100578:	2b00      	cmp	r3, #0
 810057a:	d001      	beq.n	8100580 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 810057c:	f000 f856 	bl	810062c <Error_Handler>
  }

}
 8100580:	bf00      	nop
 8100582:	bd80      	pop	{r7, pc}
 8100584:	100049f8 	.word	0x100049f8
 8100588:	58004c00 	.word	0x58004c00

0810058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810058c:	b580      	push	{r7, lr}
 810058e:	b082      	sub	sp, #8
 8100590:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100592:	4b23      	ldr	r3, [pc, #140]	; (8100620 <main+0x94>)
 8100594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100598:	4a21      	ldr	r2, [pc, #132]	; (8100620 <main+0x94>)
 810059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810059e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005a2:	4b1f      	ldr	r3, [pc, #124]	; (8100620 <main+0x94>)
 81005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81005ac:	607b      	str	r3, [r7, #4]
 81005ae:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005b0:	2001      	movs	r0, #1
 81005b2:	f001 f829 	bl	8101608 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81005b6:	f001 f8f5 	bl	81017a4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81005ba:	2201      	movs	r2, #1
 81005bc:	2102      	movs	r1, #2
 81005be:	2000      	movs	r0, #0
 81005c0:	f001 f87a 	bl	81016b8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005c4:	4b17      	ldr	r3, [pc, #92]	; (8100624 <main+0x98>)
 81005c6:	681b      	ldr	r3, [r3, #0]
 81005c8:	091b      	lsrs	r3, r3, #4
 81005ca:	f003 030f 	and.w	r3, r3, #15
 81005ce:	2b07      	cmp	r3, #7
 81005d0:	d108      	bne.n	81005e4 <main+0x58>
 81005d2:	4b15      	ldr	r3, [pc, #84]	; (8100628 <main+0x9c>)
 81005d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81005d8:	4a13      	ldr	r2, [pc, #76]	; (8100628 <main+0x9c>)
 81005da:	f043 0301 	orr.w	r3, r3, #1
 81005de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81005e2:	e007      	b.n	81005f4 <main+0x68>
 81005e4:	4b10      	ldr	r3, [pc, #64]	; (8100628 <main+0x9c>)
 81005e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81005ea:	4a0f      	ldr	r2, [pc, #60]	; (8100628 <main+0x9c>)
 81005ec:	f043 0301 	orr.w	r3, r3, #1
 81005f0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81005f4:	f000 f988 	bl	8100908 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81005f8:	f7ff ff80 	bl	81004fc <MX_GPIO_Init>
  MX_DMA_Init();
 81005fc:	f7ff fe8c 	bl	8100318 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8100600:	f7ff feb4 	bl	810036c <MX_FDCAN1_Init>
  MX_IWDG2_Init();
 8100604:	f7ff ffa4 	bl	8100550 <MX_IWDG2_Init>
  MX_SPI5_Init();
 8100608:	f000 f818 	bl	810063c <MX_SPI5_Init>
  MX_FATFS_Init();
 810060c:	f001 fd18 	bl	8102040 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8100610:	f001 fde2 	bl	81021d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8100614:	f7ff ff58 	bl	81004c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8100618:	f001 fe12 	bl	8102240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810061c:	e7fe      	b.n	810061c <main+0x90>
 810061e:	bf00      	nop
 8100620:	58024400 	.word	0x58024400
 8100624:	e000ed00 	.word	0xe000ed00
 8100628:	58026400 	.word	0x58026400

0810062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810062c:	b480      	push	{r7}
 810062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8100630:	bf00      	nop
 8100632:	46bd      	mov	sp, r7
 8100634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100638:	4770      	bx	lr
	...

0810063c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8100640:	4b27      	ldr	r3, [pc, #156]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100642:	4a28      	ldr	r2, [pc, #160]	; (81006e4 <MX_SPI5_Init+0xa8>)
 8100644:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100646:	4b26      	ldr	r3, [pc, #152]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100648:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810064c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 810064e:	4b24      	ldr	r3, [pc, #144]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100650:	2200      	movs	r2, #0
 8100652:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100654:	4b22      	ldr	r3, [pc, #136]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100656:	2203      	movs	r2, #3
 8100658:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 810065a:	4b21      	ldr	r3, [pc, #132]	; (81006e0 <MX_SPI5_Init+0xa4>)
 810065c:	2200      	movs	r2, #0
 810065e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100660:	4b1f      	ldr	r3, [pc, #124]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100662:	2200      	movs	r2, #0
 8100664:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8100666:	4b1e      	ldr	r3, [pc, #120]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810066c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 810066e:	4b1c      	ldr	r3, [pc, #112]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100670:	2200      	movs	r2, #0
 8100672:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100674:	4b1a      	ldr	r3, [pc, #104]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100676:	2200      	movs	r2, #0
 8100678:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 810067a:	4b19      	ldr	r3, [pc, #100]	; (81006e0 <MX_SPI5_Init+0xa4>)
 810067c:	2200      	movs	r2, #0
 810067e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100680:	4b17      	ldr	r3, [pc, #92]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100682:	2200      	movs	r2, #0
 8100684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100686:	4b16      	ldr	r3, [pc, #88]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100688:	2200      	movs	r2, #0
 810068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810068c:	4b14      	ldr	r3, [pc, #80]	; (81006e0 <MX_SPI5_Init+0xa4>)
 810068e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100692:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100694:	4b12      	ldr	r3, [pc, #72]	; (81006e0 <MX_SPI5_Init+0xa4>)
 8100696:	2200      	movs	r2, #0
 8100698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810069a:	4b11      	ldr	r3, [pc, #68]	; (81006e0 <MX_SPI5_Init+0xa4>)
 810069c:	2200      	movs	r2, #0
 810069e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81006a0:	4b0f      	ldr	r3, [pc, #60]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006a2:	2200      	movs	r2, #0
 81006a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81006a6:	4b0e      	ldr	r3, [pc, #56]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006a8:	2200      	movs	r2, #0
 81006aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81006ac:	4b0c      	ldr	r3, [pc, #48]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006ae:	2200      	movs	r2, #0
 81006b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81006b2:	4b0b      	ldr	r3, [pc, #44]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006b4:	2200      	movs	r2, #0
 81006b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81006b8:	4b09      	ldr	r3, [pc, #36]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006ba:	2200      	movs	r2, #0
 81006bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81006be:	4b08      	ldr	r3, [pc, #32]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006c0:	2200      	movs	r2, #0
 81006c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81006c4:	4b06      	ldr	r3, [pc, #24]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006c6:	2200      	movs	r2, #0
 81006c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 81006ca:	4805      	ldr	r0, [pc, #20]	; (81006e0 <MX_SPI5_Init+0xa4>)
 81006cc:	f001 fa74 	bl	8101bb8 <HAL_SPI_Init>
 81006d0:	4603      	mov	r3, r0
 81006d2:	2b00      	cmp	r3, #0
 81006d4:	d001      	beq.n	81006da <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 81006d6:	f7ff ffa9 	bl	810062c <Error_Handler>
  }

}
 81006da:	bf00      	nop
 81006dc:	bd80      	pop	{r7, pc}
 81006de:	bf00      	nop
 81006e0:	10004a08 	.word	0x10004a08
 81006e4:	40015000 	.word	0x40015000

081006e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81006e8:	b580      	push	{r7, lr}
 81006ea:	b08a      	sub	sp, #40	; 0x28
 81006ec:	af00      	add	r7, sp, #0
 81006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006f0:	f107 0314 	add.w	r3, r7, #20
 81006f4:	2200      	movs	r2, #0
 81006f6:	601a      	str	r2, [r3, #0]
 81006f8:	605a      	str	r2, [r3, #4]
 81006fa:	609a      	str	r2, [r3, #8]
 81006fc:	60da      	str	r2, [r3, #12]
 81006fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8100700:	687b      	ldr	r3, [r7, #4]
 8100702:	681b      	ldr	r3, [r3, #0]
 8100704:	4a1a      	ldr	r2, [pc, #104]	; (8100770 <HAL_SPI_MspInit+0x88>)
 8100706:	4293      	cmp	r3, r2
 8100708:	d12e      	bne.n	8100768 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 810070a:	4b1a      	ldr	r3, [pc, #104]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 810070c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100710:	4a18      	ldr	r2, [pc, #96]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 8100712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100716:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810071a:	4b16      	ldr	r3, [pc, #88]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 810071c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100724:	613b      	str	r3, [r7, #16]
 8100726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100728:	4b12      	ldr	r3, [pc, #72]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 810072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810072e:	4a11      	ldr	r2, [pc, #68]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 8100730:	f043 0320 	orr.w	r3, r3, #32
 8100734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100738:	4b0e      	ldr	r3, [pc, #56]	; (8100774 <HAL_SPI_MspInit+0x8c>)
 810073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810073e:	f003 0320 	and.w	r3, r3, #32
 8100742:	60fb      	str	r3, [r7, #12]
 8100744:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8100746:	f44f 6318 	mov.w	r3, #2432	; 0x980
 810074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810074c:	2302      	movs	r3, #2
 810074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100750:	2300      	movs	r3, #0
 8100752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100754:	2300      	movs	r3, #0
 8100756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8100758:	2305      	movs	r3, #5
 810075a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810075c:	f107 0314 	add.w	r3, r7, #20
 8100760:	4619      	mov	r1, r3
 8100762:	4805      	ldr	r0, [pc, #20]	; (8100778 <HAL_SPI_MspInit+0x90>)
 8100764:	f000 fda0 	bl	81012a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8100768:	bf00      	nop
 810076a:	3728      	adds	r7, #40	; 0x28
 810076c:	46bd      	mov	sp, r7
 810076e:	bd80      	pop	{r7, pc}
 8100770:	40015000 	.word	0x40015000
 8100774:	58024400 	.word	0x58024400
 8100778:	58021400 	.word	0x58021400

0810077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810077c:	b580      	push	{r7, lr}
 810077e:	b082      	sub	sp, #8
 8100780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100782:	4b0c      	ldr	r3, [pc, #48]	; (81007b4 <HAL_MspInit+0x38>)
 8100784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100788:	4a0a      	ldr	r2, [pc, #40]	; (81007b4 <HAL_MspInit+0x38>)
 810078a:	f043 0302 	orr.w	r3, r3, #2
 810078e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100792:	4b08      	ldr	r3, [pc, #32]	; (81007b4 <HAL_MspInit+0x38>)
 8100794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100798:	f003 0302 	and.w	r3, r3, #2
 810079c:	607b      	str	r3, [r7, #4]
 810079e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81007a0:	2200      	movs	r2, #0
 81007a2:	210f      	movs	r1, #15
 81007a4:	f06f 0001 	mvn.w	r0, #1
 81007a8:	f000 f9d0 	bl	8100b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007ac:	bf00      	nop
 81007ae:	3708      	adds	r7, #8
 81007b0:	46bd      	mov	sp, r7
 81007b2:	bd80      	pop	{r7, pc}
 81007b4:	58024400 	.word	0x58024400

081007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81007b8:	b580      	push	{r7, lr}
 81007ba:	b08e      	sub	sp, #56	; 0x38
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 81007c0:	2300      	movs	r3, #0
 81007c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 81007c4:	2300      	movs	r3, #0
 81007c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 81007c8:	2200      	movs	r2, #0
 81007ca:	6879      	ldr	r1, [r7, #4]
 81007cc:	202c      	movs	r0, #44	; 0x2c
 81007ce:	f000 f9bd 	bl	8100b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 81007d2:	202c      	movs	r0, #44	; 0x2c
 81007d4:	f000 f9d4 	bl	8100b80 <HAL_NVIC_EnableIRQ>
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 81007d8:	4b21      	ldr	r3, [pc, #132]	; (8100860 <HAL_InitTick+0xa8>)
 81007da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81007de:	4a20      	ldr	r2, [pc, #128]	; (8100860 <HAL_InitTick+0xa8>)
 81007e0:	f043 0302 	orr.w	r3, r3, #2
 81007e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81007e8:	4b1d      	ldr	r3, [pc, #116]	; (8100860 <HAL_InitTick+0xa8>)
 81007ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81007ee:	f003 0302 	and.w	r3, r3, #2
 81007f2:	60bb      	str	r3, [r7, #8]
 81007f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81007f6:	f107 020c 	add.w	r2, r7, #12
 81007fa:	f107 0310 	add.w	r3, r7, #16
 81007fe:	4611      	mov	r1, r2
 8100800:	4618      	mov	r0, r3
 8100802:	f001 f997 	bl	8101b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8100806:	f001 f97f 	bl	8101b08 <HAL_RCC_GetPCLK2Freq>
 810080a:	4603      	mov	r3, r0
 810080c:	005b      	lsls	r3, r3, #1
 810080e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8100810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100812:	4a14      	ldr	r2, [pc, #80]	; (8100864 <HAL_InitTick+0xac>)
 8100814:	fba2 2303 	umull	r2, r3, r2, r3
 8100818:	0c9b      	lsrs	r3, r3, #18
 810081a:	3b01      	subs	r3, #1
 810081c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 810081e:	4b12      	ldr	r3, [pc, #72]	; (8100868 <HAL_InitTick+0xb0>)
 8100820:	4a12      	ldr	r2, [pc, #72]	; (810086c <HAL_InitTick+0xb4>)
 8100822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8100824:	4b10      	ldr	r3, [pc, #64]	; (8100868 <HAL_InitTick+0xb0>)
 8100826:	f240 32e7 	movw	r2, #999	; 0x3e7
 810082a:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 810082c:	4a0e      	ldr	r2, [pc, #56]	; (8100868 <HAL_InitTick+0xb0>)
 810082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100830:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8100832:	4b0d      	ldr	r3, [pc, #52]	; (8100868 <HAL_InitTick+0xb0>)
 8100834:	2200      	movs	r2, #0
 8100836:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100838:	4b0b      	ldr	r3, [pc, #44]	; (8100868 <HAL_InitTick+0xb0>)
 810083a:	2200      	movs	r2, #0
 810083c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 810083e:	480a      	ldr	r0, [pc, #40]	; (8100868 <HAL_InitTick+0xb0>)
 8100840:	f001 facd 	bl	8101dde <HAL_TIM_Base_Init>
 8100844:	4603      	mov	r3, r0
 8100846:	2b00      	cmp	r3, #0
 8100848:	d104      	bne.n	8100854 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 810084a:	4807      	ldr	r0, [pc, #28]	; (8100868 <HAL_InitTick+0xb0>)
 810084c:	f001 fb28 	bl	8101ea0 <HAL_TIM_Base_Start_IT>
 8100850:	4603      	mov	r3, r0
 8100852:	e000      	b.n	8100856 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8100854:	2301      	movs	r3, #1
}
 8100856:	4618      	mov	r0, r3
 8100858:	3738      	adds	r7, #56	; 0x38
 810085a:	46bd      	mov	sp, r7
 810085c:	bd80      	pop	{r7, pc}
 810085e:	bf00      	nop
 8100860:	58024400 	.word	0x58024400
 8100864:	431bde83 	.word	0x431bde83
 8100868:	10004a90 	.word	0x10004a90
 810086c:	40010400 	.word	0x40010400

08100870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100870:	b480      	push	{r7}
 8100872:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100874:	bf00      	nop
 8100876:	46bd      	mov	sp, r7
 8100878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810087c:	4770      	bx	lr

0810087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810087e:	b480      	push	{r7}
 8100880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100882:	e7fe      	b.n	8100882 <HardFault_Handler+0x4>

08100884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100884:	b480      	push	{r7}
 8100886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100888:	e7fe      	b.n	8100888 <MemManage_Handler+0x4>

0810088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810088a:	b480      	push	{r7}
 810088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810088e:	e7fe      	b.n	810088e <BusFault_Handler+0x4>

08100890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100890:	b480      	push	{r7}
 8100892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100894:	e7fe      	b.n	8100894 <UsageFault_Handler+0x4>

08100896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100896:	b480      	push	{r7}
 8100898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810089a:	bf00      	nop
 810089c:	46bd      	mov	sp, r7
 810089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a2:	4770      	bx	lr

081008a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81008a4:	b480      	push	{r7}
 81008a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 81008a8:	bf00      	nop
 81008aa:	46bd      	mov	sp, r7
 81008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b0:	4770      	bx	lr
	...

081008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 81008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81008ec <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 81008b8:	f7ff fd12 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81008bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81008be:	e003      	b.n	81008c8 <LoopCopyDataInit>

081008c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81008c0:	4b0b      	ldr	r3, [pc, #44]	; (81008f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 81008c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81008c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81008c6:	3104      	adds	r1, #4

081008c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81008c8:	480a      	ldr	r0, [pc, #40]	; (81008f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 81008ca:	4b0b      	ldr	r3, [pc, #44]	; (81008f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 81008cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81008ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81008d0:	d3f6      	bcc.n	81008c0 <CopyDataInit>
  ldr  r2, =_sbss
 81008d2:	4a0a      	ldr	r2, [pc, #40]	; (81008fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 81008d4:	e002      	b.n	81008dc <LoopFillZerobss>

081008d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81008d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81008d8:	f842 3b04 	str.w	r3, [r2], #4

081008dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81008dc:	4b08      	ldr	r3, [pc, #32]	; (8100900 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 81008de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81008e0:	d3f9      	bcc.n	81008d6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 81008e2:	f004 f9b5 	bl	8104c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81008e6:	f7ff fe51 	bl	810058c <main>
  bx  lr    
 81008ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81008ec:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81008f0:	08104d84 	.word	0x08104d84
  ldr  r0, =_sdata
 81008f4:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81008f8:	10000024 	.word	0x10000024
  ldr  r2, =_sbss
 81008fc:	10000024 	.word	0x10000024
  ldr  r3, = _ebss
 8100900:	10004f8c 	.word	0x10004f8c

08100904 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100904:	e7fe      	b.n	8100904 <ADC3_IRQHandler>
	...

08100908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100908:	b580      	push	{r7, lr}
 810090a:	b082      	sub	sp, #8
 810090c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810090e:	4b28      	ldr	r3, [pc, #160]	; (81009b0 <HAL_Init+0xa8>)
 8100910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100914:	4a26      	ldr	r2, [pc, #152]	; (81009b0 <HAL_Init+0xa8>)
 8100916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810091a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810091e:	4b24      	ldr	r3, [pc, #144]	; (81009b0 <HAL_Init+0xa8>)
 8100920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100928:	603b      	str	r3, [r7, #0]
 810092a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810092c:	4b21      	ldr	r3, [pc, #132]	; (81009b4 <HAL_Init+0xac>)
 810092e:	681b      	ldr	r3, [r3, #0]
 8100930:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100934:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100938:	4a1e      	ldr	r2, [pc, #120]	; (81009b4 <HAL_Init+0xac>)
 810093a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810093e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100940:	4b1c      	ldr	r3, [pc, #112]	; (81009b4 <HAL_Init+0xac>)
 8100942:	681b      	ldr	r3, [r3, #0]
 8100944:	4a1b      	ldr	r2, [pc, #108]	; (81009b4 <HAL_Init+0xac>)
 8100946:	f043 0301 	orr.w	r3, r3, #1
 810094a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810094c:	2003      	movs	r0, #3
 810094e:	f000 f8f2 	bl	8100b36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100952:	f000 ff35 	bl	81017c0 <HAL_RCC_GetSysClockFreq>
 8100956:	4601      	mov	r1, r0
 8100958:	4b15      	ldr	r3, [pc, #84]	; (81009b0 <HAL_Init+0xa8>)
 810095a:	699b      	ldr	r3, [r3, #24]
 810095c:	0a1b      	lsrs	r3, r3, #8
 810095e:	f003 030f 	and.w	r3, r3, #15
 8100962:	4a15      	ldr	r2, [pc, #84]	; (81009b8 <HAL_Init+0xb0>)
 8100964:	5cd3      	ldrb	r3, [r2, r3]
 8100966:	f003 031f 	and.w	r3, r3, #31
 810096a:	fa21 f303 	lsr.w	r3, r1, r3
 810096e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100970:	4b0f      	ldr	r3, [pc, #60]	; (81009b0 <HAL_Init+0xa8>)
 8100972:	699b      	ldr	r3, [r3, #24]
 8100974:	f003 030f 	and.w	r3, r3, #15
 8100978:	4a0f      	ldr	r2, [pc, #60]	; (81009b8 <HAL_Init+0xb0>)
 810097a:	5cd3      	ldrb	r3, [r2, r3]
 810097c:	f003 031f 	and.w	r3, r3, #31
 8100980:	687a      	ldr	r2, [r7, #4]
 8100982:	fa22 f303 	lsr.w	r3, r2, r3
 8100986:	4a0d      	ldr	r2, [pc, #52]	; (81009bc <HAL_Init+0xb4>)
 8100988:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810098a:	4b0c      	ldr	r3, [pc, #48]	; (81009bc <HAL_Init+0xb4>)
 810098c:	681b      	ldr	r3, [r3, #0]
 810098e:	4a0c      	ldr	r2, [pc, #48]	; (81009c0 <HAL_Init+0xb8>)
 8100990:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100992:	2000      	movs	r0, #0
 8100994:	f7ff ff10 	bl	81007b8 <HAL_InitTick>
 8100998:	4603      	mov	r3, r0
 810099a:	2b00      	cmp	r3, #0
 810099c:	d001      	beq.n	81009a2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810099e:	2301      	movs	r3, #1
 81009a0:	e002      	b.n	81009a8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009a2:	f7ff feeb 	bl	810077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009a6:	2300      	movs	r3, #0
}
 81009a8:	4618      	mov	r0, r3
 81009aa:	3708      	adds	r7, #8
 81009ac:	46bd      	mov	sp, r7
 81009ae:	bd80      	pop	{r7, pc}
 81009b0:	58024400 	.word	0x58024400
 81009b4:	40024400 	.word	0x40024400
 81009b8:	08104d48 	.word	0x08104d48
 81009bc:	10000004 	.word	0x10000004
 81009c0:	10000000 	.word	0x10000000

081009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81009c4:	b480      	push	{r7}
 81009c6:	af00      	add	r7, sp, #0
  return uwTick;
 81009c8:	4b03      	ldr	r3, [pc, #12]	; (81009d8 <HAL_GetTick+0x14>)
 81009ca:	681b      	ldr	r3, [r3, #0]
}
 81009cc:	4618      	mov	r0, r3
 81009ce:	46bd      	mov	sp, r7
 81009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d4:	4770      	bx	lr
 81009d6:	bf00      	nop
 81009d8:	10004adc 	.word	0x10004adc

081009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81009dc:	b480      	push	{r7}
 81009de:	b085      	sub	sp, #20
 81009e0:	af00      	add	r7, sp, #0
 81009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009e4:	687b      	ldr	r3, [r7, #4]
 81009e6:	f003 0307 	and.w	r3, r3, #7
 81009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009ec:	4b0c      	ldr	r3, [pc, #48]	; (8100a20 <__NVIC_SetPriorityGrouping+0x44>)
 81009ee:	68db      	ldr	r3, [r3, #12]
 81009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009f2:	68ba      	ldr	r2, [r7, #8]
 81009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81009f8:	4013      	ands	r3, r2
 81009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009fc:	68fb      	ldr	r3, [r7, #12]
 81009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100a00:	68bb      	ldr	r3, [r7, #8]
 8100a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100a0e:	4a04      	ldr	r2, [pc, #16]	; (8100a20 <__NVIC_SetPriorityGrouping+0x44>)
 8100a10:	68bb      	ldr	r3, [r7, #8]
 8100a12:	60d3      	str	r3, [r2, #12]
}
 8100a14:	bf00      	nop
 8100a16:	3714      	adds	r7, #20
 8100a18:	46bd      	mov	sp, r7
 8100a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1e:	4770      	bx	lr
 8100a20:	e000ed00 	.word	0xe000ed00

08100a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100a24:	b480      	push	{r7}
 8100a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100a28:	4b04      	ldr	r3, [pc, #16]	; (8100a3c <__NVIC_GetPriorityGrouping+0x18>)
 8100a2a:	68db      	ldr	r3, [r3, #12]
 8100a2c:	0a1b      	lsrs	r3, r3, #8
 8100a2e:	f003 0307 	and.w	r3, r3, #7
}
 8100a32:	4618      	mov	r0, r3
 8100a34:	46bd      	mov	sp, r7
 8100a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a3a:	4770      	bx	lr
 8100a3c:	e000ed00 	.word	0xe000ed00

08100a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100a40:	b480      	push	{r7}
 8100a42:	b083      	sub	sp, #12
 8100a44:	af00      	add	r7, sp, #0
 8100a46:	4603      	mov	r3, r0
 8100a48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a4e:	2b00      	cmp	r3, #0
 8100a50:	db0b      	blt.n	8100a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100a52:	88fb      	ldrh	r3, [r7, #6]
 8100a54:	f003 021f 	and.w	r2, r3, #31
 8100a58:	4907      	ldr	r1, [pc, #28]	; (8100a78 <__NVIC_EnableIRQ+0x38>)
 8100a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a5e:	095b      	lsrs	r3, r3, #5
 8100a60:	2001      	movs	r0, #1
 8100a62:	fa00 f202 	lsl.w	r2, r0, r2
 8100a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8100a6a:	bf00      	nop
 8100a6c:	370c      	adds	r7, #12
 8100a6e:	46bd      	mov	sp, r7
 8100a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a74:	4770      	bx	lr
 8100a76:	bf00      	nop
 8100a78:	e000e100 	.word	0xe000e100

08100a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	b083      	sub	sp, #12
 8100a80:	af00      	add	r7, sp, #0
 8100a82:	4603      	mov	r3, r0
 8100a84:	6039      	str	r1, [r7, #0]
 8100a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a8c:	2b00      	cmp	r3, #0
 8100a8e:	db0a      	blt.n	8100aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a90:	683b      	ldr	r3, [r7, #0]
 8100a92:	b2da      	uxtb	r2, r3
 8100a94:	490c      	ldr	r1, [pc, #48]	; (8100ac8 <__NVIC_SetPriority+0x4c>)
 8100a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a9a:	0112      	lsls	r2, r2, #4
 8100a9c:	b2d2      	uxtb	r2, r2
 8100a9e:	440b      	add	r3, r1
 8100aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100aa4:	e00a      	b.n	8100abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100aa6:	683b      	ldr	r3, [r7, #0]
 8100aa8:	b2da      	uxtb	r2, r3
 8100aaa:	4908      	ldr	r1, [pc, #32]	; (8100acc <__NVIC_SetPriority+0x50>)
 8100aac:	88fb      	ldrh	r3, [r7, #6]
 8100aae:	f003 030f 	and.w	r3, r3, #15
 8100ab2:	3b04      	subs	r3, #4
 8100ab4:	0112      	lsls	r2, r2, #4
 8100ab6:	b2d2      	uxtb	r2, r2
 8100ab8:	440b      	add	r3, r1
 8100aba:	761a      	strb	r2, [r3, #24]
}
 8100abc:	bf00      	nop
 8100abe:	370c      	adds	r7, #12
 8100ac0:	46bd      	mov	sp, r7
 8100ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac6:	4770      	bx	lr
 8100ac8:	e000e100 	.word	0xe000e100
 8100acc:	e000ed00 	.word	0xe000ed00

08100ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ad0:	b480      	push	{r7}
 8100ad2:	b089      	sub	sp, #36	; 0x24
 8100ad4:	af00      	add	r7, sp, #0
 8100ad6:	60f8      	str	r0, [r7, #12]
 8100ad8:	60b9      	str	r1, [r7, #8]
 8100ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100adc:	68fb      	ldr	r3, [r7, #12]
 8100ade:	f003 0307 	and.w	r3, r3, #7
 8100ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100ae4:	69fb      	ldr	r3, [r7, #28]
 8100ae6:	f1c3 0307 	rsb	r3, r3, #7
 8100aea:	2b04      	cmp	r3, #4
 8100aec:	bf28      	it	cs
 8100aee:	2304      	movcs	r3, #4
 8100af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100af2:	69fb      	ldr	r3, [r7, #28]
 8100af4:	3304      	adds	r3, #4
 8100af6:	2b06      	cmp	r3, #6
 8100af8:	d902      	bls.n	8100b00 <NVIC_EncodePriority+0x30>
 8100afa:	69fb      	ldr	r3, [r7, #28]
 8100afc:	3b03      	subs	r3, #3
 8100afe:	e000      	b.n	8100b02 <NVIC_EncodePriority+0x32>
 8100b00:	2300      	movs	r3, #0
 8100b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100b08:	69bb      	ldr	r3, [r7, #24]
 8100b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b0e:	43da      	mvns	r2, r3
 8100b10:	68bb      	ldr	r3, [r7, #8]
 8100b12:	401a      	ands	r2, r3
 8100b14:	697b      	ldr	r3, [r7, #20]
 8100b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100b1c:	697b      	ldr	r3, [r7, #20]
 8100b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8100b22:	43d9      	mvns	r1, r3
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100b28:	4313      	orrs	r3, r2
         );
}
 8100b2a:	4618      	mov	r0, r3
 8100b2c:	3724      	adds	r7, #36	; 0x24
 8100b2e:	46bd      	mov	sp, r7
 8100b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b34:	4770      	bx	lr

08100b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b36:	b580      	push	{r7, lr}
 8100b38:	b082      	sub	sp, #8
 8100b3a:	af00      	add	r7, sp, #0
 8100b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b3e:	6878      	ldr	r0, [r7, #4]
 8100b40:	f7ff ff4c 	bl	81009dc <__NVIC_SetPriorityGrouping>
}
 8100b44:	bf00      	nop
 8100b46:	3708      	adds	r7, #8
 8100b48:	46bd      	mov	sp, r7
 8100b4a:	bd80      	pop	{r7, pc}

08100b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b4c:	b580      	push	{r7, lr}
 8100b4e:	b086      	sub	sp, #24
 8100b50:	af00      	add	r7, sp, #0
 8100b52:	4603      	mov	r3, r0
 8100b54:	60b9      	str	r1, [r7, #8]
 8100b56:	607a      	str	r2, [r7, #4]
 8100b58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b5a:	f7ff ff63 	bl	8100a24 <__NVIC_GetPriorityGrouping>
 8100b5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b60:	687a      	ldr	r2, [r7, #4]
 8100b62:	68b9      	ldr	r1, [r7, #8]
 8100b64:	6978      	ldr	r0, [r7, #20]
 8100b66:	f7ff ffb3 	bl	8100ad0 <NVIC_EncodePriority>
 8100b6a:	4602      	mov	r2, r0
 8100b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b70:	4611      	mov	r1, r2
 8100b72:	4618      	mov	r0, r3
 8100b74:	f7ff ff82 	bl	8100a7c <__NVIC_SetPriority>
}
 8100b78:	bf00      	nop
 8100b7a:	3718      	adds	r7, #24
 8100b7c:	46bd      	mov	sp, r7
 8100b7e:	bd80      	pop	{r7, pc}

08100b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b80:	b580      	push	{r7, lr}
 8100b82:	b082      	sub	sp, #8
 8100b84:	af00      	add	r7, sp, #0
 8100b86:	4603      	mov	r3, r0
 8100b88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b8e:	4618      	mov	r0, r3
 8100b90:	f7ff ff56 	bl	8100a40 <__NVIC_EnableIRQ>
}
 8100b94:	bf00      	nop
 8100b96:	3708      	adds	r7, #8
 8100b98:	46bd      	mov	sp, r7
 8100b9a:	bd80      	pop	{r7, pc}

08100b9c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b9c:	b480      	push	{r7}
 8100b9e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100ba0:	4b07      	ldr	r3, [pc, #28]	; (8100bc0 <HAL_GetCurrentCPUID+0x24>)
 8100ba2:	681b      	ldr	r3, [r3, #0]
 8100ba4:	091b      	lsrs	r3, r3, #4
 8100ba6:	f003 030f 	and.w	r3, r3, #15
 8100baa:	2b07      	cmp	r3, #7
 8100bac:	d101      	bne.n	8100bb2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100bae:	2303      	movs	r3, #3
 8100bb0:	e000      	b.n	8100bb4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100bb2:	2301      	movs	r3, #1
  }
}
 8100bb4:	4618      	mov	r0, r3
 8100bb6:	46bd      	mov	sp, r7
 8100bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bbc:	4770      	bx	lr
 8100bbe:	bf00      	nop
 8100bc0:	e000ed00 	.word	0xe000ed00

08100bc4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8100bc4:	b580      	push	{r7, lr}
 8100bc6:	b098      	sub	sp, #96	; 0x60
 8100bc8:	af00      	add	r7, sp, #0
 8100bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8100bcc:	4a84      	ldr	r2, [pc, #528]	; (8100de0 <HAL_FDCAN_Init+0x21c>)
 8100bce:	f107 030c 	add.w	r3, r7, #12
 8100bd2:	4611      	mov	r1, r2
 8100bd4:	224c      	movs	r2, #76	; 0x4c
 8100bd6:	4618      	mov	r0, r3
 8100bd8:	f004 f85e 	bl	8104c98 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8100bdc:	687b      	ldr	r3, [r7, #4]
 8100bde:	2b00      	cmp	r3, #0
 8100be0:	d101      	bne.n	8100be6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8100be2:	2301      	movs	r3, #1
 8100be4:	e1ca      	b.n	8100f7c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	681b      	ldr	r3, [r3, #0]
 8100bea:	4a7e      	ldr	r2, [pc, #504]	; (8100de4 <HAL_FDCAN_Init+0x220>)
 8100bec:	4293      	cmp	r3, r2
 8100bee:	d106      	bne.n	8100bfe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	681b      	ldr	r3, [r3, #0]
 8100bf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8100bf8:	461a      	mov	r2, r3
 8100bfa:	687b      	ldr	r3, [r7, #4]
 8100bfc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8100bfe:	687b      	ldr	r3, [r7, #4]
 8100c00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8100c04:	b2db      	uxtb	r3, r3
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d106      	bne.n	8100c18 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8100c0a:	687b      	ldr	r3, [r7, #4]
 8100c0c:	2200      	movs	r2, #0
 8100c0e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8100c12:	6878      	ldr	r0, [r7, #4]
 8100c14:	f7ff fc0e 	bl	8100434 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8100c18:	687b      	ldr	r3, [r7, #4]
 8100c1a:	681b      	ldr	r3, [r3, #0]
 8100c1c:	699a      	ldr	r2, [r3, #24]
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	681b      	ldr	r3, [r3, #0]
 8100c22:	f022 0210 	bic.w	r2, r2, #16
 8100c26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8100c28:	f7ff fecc 	bl	81009c4 <HAL_GetTick>
 8100c2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8100c2e:	e014      	b.n	8100c5a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8100c30:	f7ff fec8 	bl	81009c4 <HAL_GetTick>
 8100c34:	4602      	mov	r2, r0
 8100c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8100c38:	1ad3      	subs	r3, r2, r3
 8100c3a:	2b0a      	cmp	r3, #10
 8100c3c:	d90d      	bls.n	8100c5a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8100c3e:	687b      	ldr	r3, [r7, #4]
 8100c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8100c44:	f043 0201 	orr.w	r2, r3, #1
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	2203      	movs	r2, #3
 8100c52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8100c56:	2301      	movs	r3, #1
 8100c58:	e190      	b.n	8100f7c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	681b      	ldr	r3, [r3, #0]
 8100c5e:	699b      	ldr	r3, [r3, #24]
 8100c60:	f003 0308 	and.w	r3, r3, #8
 8100c64:	2b08      	cmp	r3, #8
 8100c66:	d0e3      	beq.n	8100c30 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8100c68:	687b      	ldr	r3, [r7, #4]
 8100c6a:	681b      	ldr	r3, [r3, #0]
 8100c6c:	699a      	ldr	r2, [r3, #24]
 8100c6e:	687b      	ldr	r3, [r7, #4]
 8100c70:	681b      	ldr	r3, [r3, #0]
 8100c72:	f042 0201 	orr.w	r2, r2, #1
 8100c76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8100c78:	f7ff fea4 	bl	81009c4 <HAL_GetTick>
 8100c7c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8100c7e:	e014      	b.n	8100caa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8100c80:	f7ff fea0 	bl	81009c4 <HAL_GetTick>
 8100c84:	4602      	mov	r2, r0
 8100c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8100c88:	1ad3      	subs	r3, r2, r3
 8100c8a:	2b0a      	cmp	r3, #10
 8100c8c:	d90d      	bls.n	8100caa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8100c8e:	687b      	ldr	r3, [r7, #4]
 8100c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8100c94:	f043 0201 	orr.w	r2, r3, #1
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8100c9e:	687b      	ldr	r3, [r7, #4]
 8100ca0:	2203      	movs	r2, #3
 8100ca2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8100ca6:	2301      	movs	r3, #1
 8100ca8:	e168      	b.n	8100f7c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8100caa:	687b      	ldr	r3, [r7, #4]
 8100cac:	681b      	ldr	r3, [r3, #0]
 8100cae:	699b      	ldr	r3, [r3, #24]
 8100cb0:	f003 0301 	and.w	r3, r3, #1
 8100cb4:	2b00      	cmp	r3, #0
 8100cb6:	d0e3      	beq.n	8100c80 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8100cb8:	687b      	ldr	r3, [r7, #4]
 8100cba:	681b      	ldr	r3, [r3, #0]
 8100cbc:	699a      	ldr	r2, [r3, #24]
 8100cbe:	687b      	ldr	r3, [r7, #4]
 8100cc0:	681b      	ldr	r3, [r3, #0]
 8100cc2:	f042 0202 	orr.w	r2, r2, #2
 8100cc6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8100cc8:	687b      	ldr	r3, [r7, #4]
 8100cca:	7c1b      	ldrb	r3, [r3, #16]
 8100ccc:	2b01      	cmp	r3, #1
 8100cce:	d108      	bne.n	8100ce2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8100cd0:	687b      	ldr	r3, [r7, #4]
 8100cd2:	681b      	ldr	r3, [r3, #0]
 8100cd4:	699a      	ldr	r2, [r3, #24]
 8100cd6:	687b      	ldr	r3, [r7, #4]
 8100cd8:	681b      	ldr	r3, [r3, #0]
 8100cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8100cde:	619a      	str	r2, [r3, #24]
 8100ce0:	e007      	b.n	8100cf2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8100ce2:	687b      	ldr	r3, [r7, #4]
 8100ce4:	681b      	ldr	r3, [r3, #0]
 8100ce6:	699a      	ldr	r2, [r3, #24]
 8100ce8:	687b      	ldr	r3, [r7, #4]
 8100cea:	681b      	ldr	r3, [r3, #0]
 8100cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8100cf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	7c5b      	ldrb	r3, [r3, #17]
 8100cf6:	2b01      	cmp	r3, #1
 8100cf8:	d108      	bne.n	8100d0c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8100cfa:	687b      	ldr	r3, [r7, #4]
 8100cfc:	681b      	ldr	r3, [r3, #0]
 8100cfe:	699a      	ldr	r2, [r3, #24]
 8100d00:	687b      	ldr	r3, [r7, #4]
 8100d02:	681b      	ldr	r3, [r3, #0]
 8100d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8100d08:	619a      	str	r2, [r3, #24]
 8100d0a:	e007      	b.n	8100d1c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8100d0c:	687b      	ldr	r3, [r7, #4]
 8100d0e:	681b      	ldr	r3, [r3, #0]
 8100d10:	699a      	ldr	r2, [r3, #24]
 8100d12:	687b      	ldr	r3, [r7, #4]
 8100d14:	681b      	ldr	r3, [r3, #0]
 8100d16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8100d1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8100d1c:	687b      	ldr	r3, [r7, #4]
 8100d1e:	7c9b      	ldrb	r3, [r3, #18]
 8100d20:	2b01      	cmp	r3, #1
 8100d22:	d108      	bne.n	8100d36 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8100d24:	687b      	ldr	r3, [r7, #4]
 8100d26:	681b      	ldr	r3, [r3, #0]
 8100d28:	699a      	ldr	r2, [r3, #24]
 8100d2a:	687b      	ldr	r3, [r7, #4]
 8100d2c:	681b      	ldr	r3, [r3, #0]
 8100d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8100d32:	619a      	str	r2, [r3, #24]
 8100d34:	e007      	b.n	8100d46 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8100d36:	687b      	ldr	r3, [r7, #4]
 8100d38:	681b      	ldr	r3, [r3, #0]
 8100d3a:	699a      	ldr	r2, [r3, #24]
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	681b      	ldr	r3, [r3, #0]
 8100d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8100d44:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8100d46:	687b      	ldr	r3, [r7, #4]
 8100d48:	681b      	ldr	r3, [r3, #0]
 8100d4a:	699b      	ldr	r3, [r3, #24]
 8100d4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8100d50:	687b      	ldr	r3, [r7, #4]
 8100d52:	689a      	ldr	r2, [r3, #8]
 8100d54:	687b      	ldr	r3, [r7, #4]
 8100d56:	681b      	ldr	r3, [r3, #0]
 8100d58:	430a      	orrs	r2, r1
 8100d5a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	681b      	ldr	r3, [r3, #0]
 8100d60:	699a      	ldr	r2, [r3, #24]
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	681b      	ldr	r3, [r3, #0]
 8100d66:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8100d6a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	691a      	ldr	r2, [r3, #16]
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	681b      	ldr	r3, [r3, #0]
 8100d76:	f022 0210 	bic.w	r2, r2, #16
 8100d7a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	68db      	ldr	r3, [r3, #12]
 8100d80:	2b01      	cmp	r3, #1
 8100d82:	d108      	bne.n	8100d96 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8100d84:	687b      	ldr	r3, [r7, #4]
 8100d86:	681b      	ldr	r3, [r3, #0]
 8100d88:	699a      	ldr	r2, [r3, #24]
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	681b      	ldr	r3, [r3, #0]
 8100d8e:	f042 0204 	orr.w	r2, r2, #4
 8100d92:	619a      	str	r2, [r3, #24]
 8100d94:	e030      	b.n	8100df8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8100d96:	687b      	ldr	r3, [r7, #4]
 8100d98:	68db      	ldr	r3, [r3, #12]
 8100d9a:	2b00      	cmp	r3, #0
 8100d9c:	d02c      	beq.n	8100df8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	68db      	ldr	r3, [r3, #12]
 8100da2:	2b02      	cmp	r3, #2
 8100da4:	d020      	beq.n	8100de8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8100da6:	687b      	ldr	r3, [r7, #4]
 8100da8:	681b      	ldr	r3, [r3, #0]
 8100daa:	699a      	ldr	r2, [r3, #24]
 8100dac:	687b      	ldr	r3, [r7, #4]
 8100dae:	681b      	ldr	r3, [r3, #0]
 8100db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8100db4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8100db6:	687b      	ldr	r3, [r7, #4]
 8100db8:	681b      	ldr	r3, [r3, #0]
 8100dba:	691a      	ldr	r2, [r3, #16]
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	f042 0210 	orr.w	r2, r2, #16
 8100dc4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	68db      	ldr	r3, [r3, #12]
 8100dca:	2b03      	cmp	r3, #3
 8100dcc:	d114      	bne.n	8100df8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	681b      	ldr	r3, [r3, #0]
 8100dd2:	699a      	ldr	r2, [r3, #24]
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	f042 0220 	orr.w	r2, r2, #32
 8100ddc:	619a      	str	r2, [r3, #24]
 8100dde:	e00b      	b.n	8100df8 <HAL_FDCAN_Init+0x234>
 8100de0:	08104ce4 	.word	0x08104ce4
 8100de4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8100de8:	687b      	ldr	r3, [r7, #4]
 8100dea:	681b      	ldr	r3, [r3, #0]
 8100dec:	699a      	ldr	r2, [r3, #24]
 8100dee:	687b      	ldr	r3, [r7, #4]
 8100df0:	681b      	ldr	r3, [r3, #0]
 8100df2:	f042 0220 	orr.w	r2, r2, #32
 8100df6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	699b      	ldr	r3, [r3, #24]
 8100dfc:	3b01      	subs	r3, #1
 8100dfe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	69db      	ldr	r3, [r3, #28]
 8100e04:	3b01      	subs	r3, #1
 8100e06:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100e08:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	6a1b      	ldr	r3, [r3, #32]
 8100e0e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8100e10:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	695b      	ldr	r3, [r3, #20]
 8100e18:	3b01      	subs	r3, #1
 8100e1a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8100e20:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100e22:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8100e24:	687b      	ldr	r3, [r7, #4]
 8100e26:	689b      	ldr	r3, [r3, #8]
 8100e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8100e2c:	d115      	bne.n	8100e5a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100e2e:	687b      	ldr	r3, [r7, #4]
 8100e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e32:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100e38:	3b01      	subs	r3, #1
 8100e3a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100e3c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8100e3e:	687b      	ldr	r3, [r7, #4]
 8100e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100e42:	3b01      	subs	r3, #1
 8100e44:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8100e46:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100e4e:	3b01      	subs	r3, #1
 8100e50:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8100e56:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100e58:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100e5e:	2b00      	cmp	r3, #0
 8100e60:	d00a      	beq.n	8100e78 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	681b      	ldr	r3, [r3, #0]
 8100e66:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8100e6a:	687b      	ldr	r3, [r7, #4]
 8100e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8100e6e:	687b      	ldr	r3, [r7, #4]
 8100e70:	681b      	ldr	r3, [r3, #0]
 8100e72:	430a      	orrs	r2, r1
 8100e74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100e80:	4413      	add	r3, r2
 8100e82:	2b00      	cmp	r3, #0
 8100e84:	d012      	beq.n	8100eac <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	681b      	ldr	r3, [r3, #0]
 8100e8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8100e8e:	f023 0107 	bic.w	r1, r3, #7
 8100e92:	687b      	ldr	r3, [r7, #4]
 8100e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8100e96:	009b      	lsls	r3, r3, #2
 8100e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8100e9c:	4413      	add	r3, r2
 8100e9e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	681b      	ldr	r3, [r3, #0]
 8100ea6:	430a      	orrs	r2, r1
 8100ea8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8100eac:	687b      	ldr	r3, [r7, #4]
 8100eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8100eb0:	2b00      	cmp	r3, #0
 8100eb2:	d012      	beq.n	8100eda <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	681b      	ldr	r3, [r3, #0]
 8100eb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8100ebc:	f023 0107 	bic.w	r1, r3, #7
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8100ec4:	009b      	lsls	r3, r3, #2
 8100ec6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8100eca:	4413      	add	r3, r2
 8100ecc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8100ed0:	687b      	ldr	r3, [r7, #4]
 8100ed2:	681b      	ldr	r3, [r3, #0]
 8100ed4:	430a      	orrs	r2, r1
 8100ed6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d013      	beq.n	8100f0a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8100eea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8100eee:	687b      	ldr	r3, [r7, #4]
 8100ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8100ef2:	009b      	lsls	r3, r3, #2
 8100ef4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8100ef8:	4413      	add	r3, r2
 8100efa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8100efe:	011a      	lsls	r2, r3, #4
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	430a      	orrs	r2, r1
 8100f06:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	d013      	beq.n	8100f3a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	681b      	ldr	r3, [r3, #0]
 8100f16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8100f1a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8100f22:	009b      	lsls	r3, r3, #2
 8100f24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8100f28:	4413      	add	r3, r2
 8100f2a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8100f2e:	021a      	lsls	r2, r3, #8
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	681b      	ldr	r3, [r3, #0]
 8100f34:	430a      	orrs	r2, r1
 8100f36:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	4a11      	ldr	r2, [pc, #68]	; (8100f84 <HAL_FDCAN_Init+0x3c0>)
 8100f40:	4293      	cmp	r3, r2
 8100f42:	d107      	bne.n	8100f54 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8100f44:	687b      	ldr	r3, [r7, #4]
 8100f46:	685b      	ldr	r3, [r3, #4]
 8100f48:	689a      	ldr	r2, [r3, #8]
 8100f4a:	687b      	ldr	r3, [r7, #4]
 8100f4c:	685b      	ldr	r3, [r3, #4]
 8100f4e:	f022 0203 	bic.w	r2, r2, #3
 8100f52:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	2200      	movs	r2, #0
 8100f58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	2200      	movs	r2, #0
 8100f60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	2201      	movs	r2, #1
 8100f68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8100f6c:	6878      	ldr	r0, [r7, #4]
 8100f6e:	f000 f80b 	bl	8100f88 <FDCAN_CalcultateRamBlockAddresses>
 8100f72:	4603      	mov	r3, r0
 8100f74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8100f78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8100f7c:	4618      	mov	r0, r3
 8100f7e:	3760      	adds	r7, #96	; 0x60
 8100f80:	46bd      	mov	sp, r7
 8100f82:	bd80      	pop	{r7, pc}
 8100f84:	4000a000 	.word	0x4000a000

08100f88 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8100f88:	b480      	push	{r7}
 8100f8a:	b085      	sub	sp, #20
 8100f8c:	af00      	add	r7, sp, #0
 8100f8e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100f94:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8100f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8100fa2:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8100fa6:	68ba      	ldr	r2, [r7, #8]
 8100fa8:	0091      	lsls	r1, r2, #2
 8100faa:	687a      	ldr	r2, [r7, #4]
 8100fac:	6812      	ldr	r2, [r2, #0]
 8100fae:	430b      	orrs	r3, r1
 8100fb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	681b      	ldr	r3, [r3, #0]
 8100fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8100fbc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8100fc4:	041a      	lsls	r2, r3, #16
 8100fc6:	687b      	ldr	r3, [r7, #4]
 8100fc8:	681b      	ldr	r3, [r3, #0]
 8100fca:	430a      	orrs	r2, r1
 8100fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8100fd4:	68ba      	ldr	r2, [r7, #8]
 8100fd6:	4413      	add	r3, r2
 8100fd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8100fe6:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8100fea:	68ba      	ldr	r2, [r7, #8]
 8100fec:	0091      	lsls	r1, r2, #2
 8100fee:	687a      	ldr	r2, [r7, #4]
 8100ff0:	6812      	ldr	r2, [r2, #0]
 8100ff2:	430b      	orrs	r3, r1
 8100ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101000:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101008:	041a      	lsls	r2, r3, #16
 810100a:	687b      	ldr	r3, [r7, #4]
 810100c:	681b      	ldr	r3, [r3, #0]
 810100e:	430a      	orrs	r2, r1
 8101010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101018:	005b      	lsls	r3, r3, #1
 810101a:	68ba      	ldr	r2, [r7, #8]
 810101c:	4413      	add	r3, r2
 810101e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	681b      	ldr	r3, [r3, #0]
 8101024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810102c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8101030:	68ba      	ldr	r2, [r7, #8]
 8101032:	0091      	lsls	r1, r2, #2
 8101034:	687a      	ldr	r2, [r7, #4]
 8101036:	6812      	ldr	r2, [r2, #0]
 8101038:	430b      	orrs	r3, r1
 810103a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 810103e:	687b      	ldr	r3, [r7, #4]
 8101040:	681b      	ldr	r3, [r3, #0]
 8101042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101046:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810104a:	687b      	ldr	r3, [r7, #4]
 810104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810104e:	041a      	lsls	r2, r3, #16
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	681b      	ldr	r3, [r3, #0]
 8101054:	430a      	orrs	r2, r1
 8101056:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810105e:	687a      	ldr	r2, [r7, #4]
 8101060:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101062:	fb02 f303 	mul.w	r3, r2, r3
 8101066:	68ba      	ldr	r2, [r7, #8]
 8101068:	4413      	add	r3, r2
 810106a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	681b      	ldr	r3, [r3, #0]
 8101070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101074:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8101078:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810107c:	68ba      	ldr	r2, [r7, #8]
 810107e:	0091      	lsls	r1, r2, #2
 8101080:	687a      	ldr	r2, [r7, #4]
 8101082:	6812      	ldr	r2, [r2, #0]
 8101084:	430b      	orrs	r3, r1
 8101086:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 810108a:	687b      	ldr	r3, [r7, #4]
 810108c:	681b      	ldr	r3, [r3, #0]
 810108e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101092:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810109a:	041a      	lsls	r2, r3, #16
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	430a      	orrs	r2, r1
 81010a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81010aa:	687a      	ldr	r2, [r7, #4]
 81010ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 81010ae:	fb02 f303 	mul.w	r3, r2, r3
 81010b2:	68ba      	ldr	r2, [r7, #8]
 81010b4:	4413      	add	r3, r2
 81010b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 81010b8:	687b      	ldr	r3, [r7, #4]
 81010ba:	681b      	ldr	r3, [r3, #0]
 81010bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81010c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81010c4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81010c8:	68ba      	ldr	r2, [r7, #8]
 81010ca:	0091      	lsls	r1, r2, #2
 81010cc:	687a      	ldr	r2, [r7, #4]
 81010ce:	6812      	ldr	r2, [r2, #0]
 81010d0:	430b      	orrs	r3, r1
 81010d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81010da:	687a      	ldr	r2, [r7, #4]
 81010dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 81010de:	fb02 f303 	mul.w	r3, r2, r3
 81010e2:	68ba      	ldr	r2, [r7, #8]
 81010e4:	4413      	add	r3, r2
 81010e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	681b      	ldr	r3, [r3, #0]
 81010ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81010f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81010f4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81010f8:	68ba      	ldr	r2, [r7, #8]
 81010fa:	0091      	lsls	r1, r2, #2
 81010fc:	687a      	ldr	r2, [r7, #4]
 81010fe:	6812      	ldr	r2, [r2, #0]
 8101100:	430b      	orrs	r3, r1
 8101102:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8101106:	687b      	ldr	r3, [r7, #4]
 8101108:	681b      	ldr	r3, [r3, #0]
 810110a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810110e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8101112:	687b      	ldr	r3, [r7, #4]
 8101114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101116:	041a      	lsls	r2, r3, #16
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	681b      	ldr	r3, [r3, #0]
 810111c:	430a      	orrs	r2, r1
 810111e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101126:	005b      	lsls	r3, r3, #1
 8101128:	68ba      	ldr	r2, [r7, #8]
 810112a:	4413      	add	r3, r2
 810112c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	681b      	ldr	r3, [r3, #0]
 8101132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8101136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810113a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810113e:	68ba      	ldr	r2, [r7, #8]
 8101140:	0091      	lsls	r1, r2, #2
 8101142:	687a      	ldr	r2, [r7, #4]
 8101144:	6812      	ldr	r2, [r2, #0]
 8101146:	430b      	orrs	r3, r1
 8101148:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 810114c:	687b      	ldr	r3, [r7, #4]
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8101154:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8101158:	687b      	ldr	r3, [r7, #4]
 810115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810115c:	041a      	lsls	r2, r3, #16
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	681b      	ldr	r3, [r3, #0]
 8101162:	430a      	orrs	r2, r1
 8101164:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8101170:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101178:	061a      	lsls	r2, r3, #24
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	430a      	orrs	r2, r1
 8101180:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101188:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 810118c:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8101190:	009a      	lsls	r2, r3, #2
 8101192:	687b      	ldr	r3, [r7, #4]
 8101194:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810119e:	009b      	lsls	r3, r3, #2
 81011a0:	441a      	add	r2, r3
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81011ae:	00db      	lsls	r3, r3, #3
 81011b0:	441a      	add	r2, r3
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 81011ba:	687b      	ldr	r3, [r7, #4]
 81011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81011be:	6879      	ldr	r1, [r7, #4]
 81011c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 81011c2:	fb01 f303 	mul.w	r3, r1, r3
 81011c6:	009b      	lsls	r3, r3, #2
 81011c8:	441a      	add	r2, r3
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 81011ce:	687b      	ldr	r3, [r7, #4]
 81011d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 81011d2:	687b      	ldr	r3, [r7, #4]
 81011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81011d6:	6879      	ldr	r1, [r7, #4]
 81011d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 81011da:	fb01 f303 	mul.w	r3, r1, r3
 81011de:	009b      	lsls	r3, r3, #2
 81011e0:	441a      	add	r2, r3
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 81011e6:	687b      	ldr	r3, [r7, #4]
 81011e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81011ee:	6879      	ldr	r1, [r7, #4]
 81011f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 81011f2:	fb01 f303 	mul.w	r3, r1, r3
 81011f6:	009b      	lsls	r3, r3, #2
 81011f8:	441a      	add	r2, r3
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810120a:	00db      	lsls	r3, r3, #3
 810120c:	441a      	add	r2, r3
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810121e:	6879      	ldr	r1, [r7, #4]
 8101220:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8101222:	fb01 f303 	mul.w	r3, r1, r3
 8101226:	009b      	lsls	r3, r3, #2
 8101228:	441a      	add	r2, r3
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810123a:	6879      	ldr	r1, [r7, #4]
 810123c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 810123e:	fb01 f303 	mul.w	r3, r1, r3
 8101242:	009b      	lsls	r3, r3, #2
 8101244:	441a      	add	r2, r3
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101252:	4a14      	ldr	r2, [pc, #80]	; (81012a4 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8101254:	4293      	cmp	r3, r2
 8101256:	d90d      	bls.n	8101274 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810125e:	f043 0220 	orr.w	r2, r3, #32
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	2203      	movs	r2, #3
 810126c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8101270:	2301      	movs	r3, #1
 8101272:	e010      	b.n	8101296 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101278:	60fb      	str	r3, [r7, #12]
 810127a:	e005      	b.n	8101288 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 810127c:	68fb      	ldr	r3, [r7, #12]
 810127e:	2200      	movs	r2, #0
 8101280:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8101282:	68fb      	ldr	r3, [r7, #12]
 8101284:	3304      	adds	r3, #4
 8101286:	60fb      	str	r3, [r7, #12]
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810128e:	68fa      	ldr	r2, [r7, #12]
 8101290:	429a      	cmp	r2, r3
 8101292:	d3f3      	bcc.n	810127c <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8101294:	2300      	movs	r3, #0
}
 8101296:	4618      	mov	r0, r3
 8101298:	3714      	adds	r7, #20
 810129a:	46bd      	mov	sp, r7
 810129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012a0:	4770      	bx	lr
 81012a2:	bf00      	nop
 81012a4:	4000d3fc 	.word	0x4000d3fc

081012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81012a8:	b480      	push	{r7}
 81012aa:	b089      	sub	sp, #36	; 0x24
 81012ac:	af00      	add	r7, sp, #0
 81012ae:	6078      	str	r0, [r7, #4]
 81012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81012b2:	2300      	movs	r3, #0
 81012b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81012b6:	4b89      	ldr	r3, [pc, #548]	; (81014dc <HAL_GPIO_Init+0x234>)
 81012b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81012ba:	e194      	b.n	81015e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81012bc:	683b      	ldr	r3, [r7, #0]
 81012be:	681a      	ldr	r2, [r3, #0]
 81012c0:	2101      	movs	r1, #1
 81012c2:	69fb      	ldr	r3, [r7, #28]
 81012c4:	fa01 f303 	lsl.w	r3, r1, r3
 81012c8:	4013      	ands	r3, r2
 81012ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81012cc:	693b      	ldr	r3, [r7, #16]
 81012ce:	2b00      	cmp	r3, #0
 81012d0:	f000 8186 	beq.w	81015e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81012d4:	683b      	ldr	r3, [r7, #0]
 81012d6:	685b      	ldr	r3, [r3, #4]
 81012d8:	2b01      	cmp	r3, #1
 81012da:	d00b      	beq.n	81012f4 <HAL_GPIO_Init+0x4c>
 81012dc:	683b      	ldr	r3, [r7, #0]
 81012de:	685b      	ldr	r3, [r3, #4]
 81012e0:	2b02      	cmp	r3, #2
 81012e2:	d007      	beq.n	81012f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81012e4:	683b      	ldr	r3, [r7, #0]
 81012e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81012e8:	2b11      	cmp	r3, #17
 81012ea:	d003      	beq.n	81012f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81012ec:	683b      	ldr	r3, [r7, #0]
 81012ee:	685b      	ldr	r3, [r3, #4]
 81012f0:	2b12      	cmp	r3, #18
 81012f2:	d130      	bne.n	8101356 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	689b      	ldr	r3, [r3, #8]
 81012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81012fa:	69fb      	ldr	r3, [r7, #28]
 81012fc:	005b      	lsls	r3, r3, #1
 81012fe:	2203      	movs	r2, #3
 8101300:	fa02 f303 	lsl.w	r3, r2, r3
 8101304:	43db      	mvns	r3, r3
 8101306:	69ba      	ldr	r2, [r7, #24]
 8101308:	4013      	ands	r3, r2
 810130a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810130c:	683b      	ldr	r3, [r7, #0]
 810130e:	68da      	ldr	r2, [r3, #12]
 8101310:	69fb      	ldr	r3, [r7, #28]
 8101312:	005b      	lsls	r3, r3, #1
 8101314:	fa02 f303 	lsl.w	r3, r2, r3
 8101318:	69ba      	ldr	r2, [r7, #24]
 810131a:	4313      	orrs	r3, r2
 810131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	69ba      	ldr	r2, [r7, #24]
 8101322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	685b      	ldr	r3, [r3, #4]
 8101328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810132a:	2201      	movs	r2, #1
 810132c:	69fb      	ldr	r3, [r7, #28]
 810132e:	fa02 f303 	lsl.w	r3, r2, r3
 8101332:	43db      	mvns	r3, r3
 8101334:	69ba      	ldr	r2, [r7, #24]
 8101336:	4013      	ands	r3, r2
 8101338:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810133a:	683b      	ldr	r3, [r7, #0]
 810133c:	685b      	ldr	r3, [r3, #4]
 810133e:	091b      	lsrs	r3, r3, #4
 8101340:	f003 0201 	and.w	r2, r3, #1
 8101344:	69fb      	ldr	r3, [r7, #28]
 8101346:	fa02 f303 	lsl.w	r3, r2, r3
 810134a:	69ba      	ldr	r2, [r7, #24]
 810134c:	4313      	orrs	r3, r2
 810134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	69ba      	ldr	r2, [r7, #24]
 8101354:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	68db      	ldr	r3, [r3, #12]
 810135a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810135c:	69fb      	ldr	r3, [r7, #28]
 810135e:	005b      	lsls	r3, r3, #1
 8101360:	2203      	movs	r2, #3
 8101362:	fa02 f303 	lsl.w	r3, r2, r3
 8101366:	43db      	mvns	r3, r3
 8101368:	69ba      	ldr	r2, [r7, #24]
 810136a:	4013      	ands	r3, r2
 810136c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810136e:	683b      	ldr	r3, [r7, #0]
 8101370:	689a      	ldr	r2, [r3, #8]
 8101372:	69fb      	ldr	r3, [r7, #28]
 8101374:	005b      	lsls	r3, r3, #1
 8101376:	fa02 f303 	lsl.w	r3, r2, r3
 810137a:	69ba      	ldr	r2, [r7, #24]
 810137c:	4313      	orrs	r3, r2
 810137e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101380:	687b      	ldr	r3, [r7, #4]
 8101382:	69ba      	ldr	r2, [r7, #24]
 8101384:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101386:	683b      	ldr	r3, [r7, #0]
 8101388:	685b      	ldr	r3, [r3, #4]
 810138a:	2b02      	cmp	r3, #2
 810138c:	d003      	beq.n	8101396 <HAL_GPIO_Init+0xee>
 810138e:	683b      	ldr	r3, [r7, #0]
 8101390:	685b      	ldr	r3, [r3, #4]
 8101392:	2b12      	cmp	r3, #18
 8101394:	d123      	bne.n	81013de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101396:	69fb      	ldr	r3, [r7, #28]
 8101398:	08da      	lsrs	r2, r3, #3
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	3208      	adds	r2, #8
 810139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81013a4:	69fb      	ldr	r3, [r7, #28]
 81013a6:	f003 0307 	and.w	r3, r3, #7
 81013aa:	009b      	lsls	r3, r3, #2
 81013ac:	220f      	movs	r2, #15
 81013ae:	fa02 f303 	lsl.w	r3, r2, r3
 81013b2:	43db      	mvns	r3, r3
 81013b4:	69ba      	ldr	r2, [r7, #24]
 81013b6:	4013      	ands	r3, r2
 81013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81013ba:	683b      	ldr	r3, [r7, #0]
 81013bc:	691a      	ldr	r2, [r3, #16]
 81013be:	69fb      	ldr	r3, [r7, #28]
 81013c0:	f003 0307 	and.w	r3, r3, #7
 81013c4:	009b      	lsls	r3, r3, #2
 81013c6:	fa02 f303 	lsl.w	r3, r2, r3
 81013ca:	69ba      	ldr	r2, [r7, #24]
 81013cc:	4313      	orrs	r3, r2
 81013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81013d0:	69fb      	ldr	r3, [r7, #28]
 81013d2:	08da      	lsrs	r2, r3, #3
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	3208      	adds	r2, #8
 81013d8:	69b9      	ldr	r1, [r7, #24]
 81013da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	681b      	ldr	r3, [r3, #0]
 81013e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81013e4:	69fb      	ldr	r3, [r7, #28]
 81013e6:	005b      	lsls	r3, r3, #1
 81013e8:	2203      	movs	r2, #3
 81013ea:	fa02 f303 	lsl.w	r3, r2, r3
 81013ee:	43db      	mvns	r3, r3
 81013f0:	69ba      	ldr	r2, [r7, #24]
 81013f2:	4013      	ands	r3, r2
 81013f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81013f6:	683b      	ldr	r3, [r7, #0]
 81013f8:	685b      	ldr	r3, [r3, #4]
 81013fa:	f003 0203 	and.w	r2, r3, #3
 81013fe:	69fb      	ldr	r3, [r7, #28]
 8101400:	005b      	lsls	r3, r3, #1
 8101402:	fa02 f303 	lsl.w	r3, r2, r3
 8101406:	69ba      	ldr	r2, [r7, #24]
 8101408:	4313      	orrs	r3, r2
 810140a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	69ba      	ldr	r2, [r7, #24]
 8101410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101412:	683b      	ldr	r3, [r7, #0]
 8101414:	685b      	ldr	r3, [r3, #4]
 8101416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810141a:	2b00      	cmp	r3, #0
 810141c:	f000 80e0 	beq.w	81015e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101420:	4b2f      	ldr	r3, [pc, #188]	; (81014e0 <HAL_GPIO_Init+0x238>)
 8101422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101426:	4a2e      	ldr	r2, [pc, #184]	; (81014e0 <HAL_GPIO_Init+0x238>)
 8101428:	f043 0302 	orr.w	r3, r3, #2
 810142c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101430:	4b2b      	ldr	r3, [pc, #172]	; (81014e0 <HAL_GPIO_Init+0x238>)
 8101432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101436:	f003 0302 	and.w	r3, r3, #2
 810143a:	60fb      	str	r3, [r7, #12]
 810143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810143e:	4a29      	ldr	r2, [pc, #164]	; (81014e4 <HAL_GPIO_Init+0x23c>)
 8101440:	69fb      	ldr	r3, [r7, #28]
 8101442:	089b      	lsrs	r3, r3, #2
 8101444:	3302      	adds	r3, #2
 8101446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810144c:	69fb      	ldr	r3, [r7, #28]
 810144e:	f003 0303 	and.w	r3, r3, #3
 8101452:	009b      	lsls	r3, r3, #2
 8101454:	220f      	movs	r2, #15
 8101456:	fa02 f303 	lsl.w	r3, r2, r3
 810145a:	43db      	mvns	r3, r3
 810145c:	69ba      	ldr	r2, [r7, #24]
 810145e:	4013      	ands	r3, r2
 8101460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	4a20      	ldr	r2, [pc, #128]	; (81014e8 <HAL_GPIO_Init+0x240>)
 8101466:	4293      	cmp	r3, r2
 8101468:	d052      	beq.n	8101510 <HAL_GPIO_Init+0x268>
 810146a:	687b      	ldr	r3, [r7, #4]
 810146c:	4a1f      	ldr	r2, [pc, #124]	; (81014ec <HAL_GPIO_Init+0x244>)
 810146e:	4293      	cmp	r3, r2
 8101470:	d031      	beq.n	81014d6 <HAL_GPIO_Init+0x22e>
 8101472:	687b      	ldr	r3, [r7, #4]
 8101474:	4a1e      	ldr	r2, [pc, #120]	; (81014f0 <HAL_GPIO_Init+0x248>)
 8101476:	4293      	cmp	r3, r2
 8101478:	d02b      	beq.n	81014d2 <HAL_GPIO_Init+0x22a>
 810147a:	687b      	ldr	r3, [r7, #4]
 810147c:	4a1d      	ldr	r2, [pc, #116]	; (81014f4 <HAL_GPIO_Init+0x24c>)
 810147e:	4293      	cmp	r3, r2
 8101480:	d025      	beq.n	81014ce <HAL_GPIO_Init+0x226>
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	4a1c      	ldr	r2, [pc, #112]	; (81014f8 <HAL_GPIO_Init+0x250>)
 8101486:	4293      	cmp	r3, r2
 8101488:	d01f      	beq.n	81014ca <HAL_GPIO_Init+0x222>
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	4a1b      	ldr	r2, [pc, #108]	; (81014fc <HAL_GPIO_Init+0x254>)
 810148e:	4293      	cmp	r3, r2
 8101490:	d019      	beq.n	81014c6 <HAL_GPIO_Init+0x21e>
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	4a1a      	ldr	r2, [pc, #104]	; (8101500 <HAL_GPIO_Init+0x258>)
 8101496:	4293      	cmp	r3, r2
 8101498:	d013      	beq.n	81014c2 <HAL_GPIO_Init+0x21a>
 810149a:	687b      	ldr	r3, [r7, #4]
 810149c:	4a19      	ldr	r2, [pc, #100]	; (8101504 <HAL_GPIO_Init+0x25c>)
 810149e:	4293      	cmp	r3, r2
 81014a0:	d00d      	beq.n	81014be <HAL_GPIO_Init+0x216>
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	4a18      	ldr	r2, [pc, #96]	; (8101508 <HAL_GPIO_Init+0x260>)
 81014a6:	4293      	cmp	r3, r2
 81014a8:	d007      	beq.n	81014ba <HAL_GPIO_Init+0x212>
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	4a17      	ldr	r2, [pc, #92]	; (810150c <HAL_GPIO_Init+0x264>)
 81014ae:	4293      	cmp	r3, r2
 81014b0:	d101      	bne.n	81014b6 <HAL_GPIO_Init+0x20e>
 81014b2:	2309      	movs	r3, #9
 81014b4:	e02d      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014b6:	230a      	movs	r3, #10
 81014b8:	e02b      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014ba:	2308      	movs	r3, #8
 81014bc:	e029      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014be:	2307      	movs	r3, #7
 81014c0:	e027      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014c2:	2306      	movs	r3, #6
 81014c4:	e025      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014c6:	2305      	movs	r3, #5
 81014c8:	e023      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014ca:	2304      	movs	r3, #4
 81014cc:	e021      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014ce:	2303      	movs	r3, #3
 81014d0:	e01f      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014d2:	2302      	movs	r3, #2
 81014d4:	e01d      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014d6:	2301      	movs	r3, #1
 81014d8:	e01b      	b.n	8101512 <HAL_GPIO_Init+0x26a>
 81014da:	bf00      	nop
 81014dc:	580000c0 	.word	0x580000c0
 81014e0:	58024400 	.word	0x58024400
 81014e4:	58000400 	.word	0x58000400
 81014e8:	58020000 	.word	0x58020000
 81014ec:	58020400 	.word	0x58020400
 81014f0:	58020800 	.word	0x58020800
 81014f4:	58020c00 	.word	0x58020c00
 81014f8:	58021000 	.word	0x58021000
 81014fc:	58021400 	.word	0x58021400
 8101500:	58021800 	.word	0x58021800
 8101504:	58021c00 	.word	0x58021c00
 8101508:	58022000 	.word	0x58022000
 810150c:	58022400 	.word	0x58022400
 8101510:	2300      	movs	r3, #0
 8101512:	69fa      	ldr	r2, [r7, #28]
 8101514:	f002 0203 	and.w	r2, r2, #3
 8101518:	0092      	lsls	r2, r2, #2
 810151a:	4093      	lsls	r3, r2
 810151c:	69ba      	ldr	r2, [r7, #24]
 810151e:	4313      	orrs	r3, r2
 8101520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101522:	4938      	ldr	r1, [pc, #224]	; (8101604 <HAL_GPIO_Init+0x35c>)
 8101524:	69fb      	ldr	r3, [r7, #28]
 8101526:	089b      	lsrs	r3, r3, #2
 8101528:	3302      	adds	r3, #2
 810152a:	69ba      	ldr	r2, [r7, #24]
 810152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101530:	697b      	ldr	r3, [r7, #20]
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101536:	693b      	ldr	r3, [r7, #16]
 8101538:	43db      	mvns	r3, r3
 810153a:	69ba      	ldr	r2, [r7, #24]
 810153c:	4013      	ands	r3, r2
 810153e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101540:	683b      	ldr	r3, [r7, #0]
 8101542:	685b      	ldr	r3, [r3, #4]
 8101544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101548:	2b00      	cmp	r3, #0
 810154a:	d003      	beq.n	8101554 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810154c:	69ba      	ldr	r2, [r7, #24]
 810154e:	693b      	ldr	r3, [r7, #16]
 8101550:	4313      	orrs	r3, r2
 8101552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101554:	697b      	ldr	r3, [r7, #20]
 8101556:	69ba      	ldr	r2, [r7, #24]
 8101558:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810155a:	697b      	ldr	r3, [r7, #20]
 810155c:	685b      	ldr	r3, [r3, #4]
 810155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101560:	693b      	ldr	r3, [r7, #16]
 8101562:	43db      	mvns	r3, r3
 8101564:	69ba      	ldr	r2, [r7, #24]
 8101566:	4013      	ands	r3, r2
 8101568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810156a:	683b      	ldr	r3, [r7, #0]
 810156c:	685b      	ldr	r3, [r3, #4]
 810156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101572:	2b00      	cmp	r3, #0
 8101574:	d003      	beq.n	810157e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101576:	69ba      	ldr	r2, [r7, #24]
 8101578:	693b      	ldr	r3, [r7, #16]
 810157a:	4313      	orrs	r3, r2
 810157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810157e:	697b      	ldr	r3, [r7, #20]
 8101580:	69ba      	ldr	r2, [r7, #24]
 8101582:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101588:	681b      	ldr	r3, [r3, #0]
 810158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810158c:	693b      	ldr	r3, [r7, #16]
 810158e:	43db      	mvns	r3, r3
 8101590:	69ba      	ldr	r2, [r7, #24]
 8101592:	4013      	ands	r3, r2
 8101594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101596:	683b      	ldr	r3, [r7, #0]
 8101598:	685b      	ldr	r3, [r3, #4]
 810159a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d003      	beq.n	81015aa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81015a2:	69ba      	ldr	r2, [r7, #24]
 81015a4:	693b      	ldr	r3, [r7, #16]
 81015a6:	4313      	orrs	r3, r2
 81015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81015aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81015ae:	69bb      	ldr	r3, [r7, #24]
 81015b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81015b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81015b6:	685b      	ldr	r3, [r3, #4]
 81015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81015ba:	693b      	ldr	r3, [r7, #16]
 81015bc:	43db      	mvns	r3, r3
 81015be:	69ba      	ldr	r2, [r7, #24]
 81015c0:	4013      	ands	r3, r2
 81015c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81015c4:	683b      	ldr	r3, [r7, #0]
 81015c6:	685b      	ldr	r3, [r3, #4]
 81015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81015cc:	2b00      	cmp	r3, #0
 81015ce:	d003      	beq.n	81015d8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81015d0:	69ba      	ldr	r2, [r7, #24]
 81015d2:	693b      	ldr	r3, [r7, #16]
 81015d4:	4313      	orrs	r3, r2
 81015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81015d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81015dc:	69bb      	ldr	r3, [r7, #24]
 81015de:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81015e0:	69fb      	ldr	r3, [r7, #28]
 81015e2:	3301      	adds	r3, #1
 81015e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81015e6:	683b      	ldr	r3, [r7, #0]
 81015e8:	681a      	ldr	r2, [r3, #0]
 81015ea:	69fb      	ldr	r3, [r7, #28]
 81015ec:	fa22 f303 	lsr.w	r3, r2, r3
 81015f0:	2b00      	cmp	r3, #0
 81015f2:	f47f ae63 	bne.w	81012bc <HAL_GPIO_Init+0x14>
  }
}
 81015f6:	bf00      	nop
 81015f8:	3724      	adds	r7, #36	; 0x24
 81015fa:	46bd      	mov	sp, r7
 81015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101600:	4770      	bx	lr
 8101602:	bf00      	nop
 8101604:	58000400 	.word	0x58000400

08101608 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101608:	b480      	push	{r7}
 810160a:	b083      	sub	sp, #12
 810160c:	af00      	add	r7, sp, #0
 810160e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101610:	4b05      	ldr	r3, [pc, #20]	; (8101628 <HAL_HSEM_ActivateNotification+0x20>)
 8101612:	681a      	ldr	r2, [r3, #0]
 8101614:	4904      	ldr	r1, [pc, #16]	; (8101628 <HAL_HSEM_ActivateNotification+0x20>)
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	4313      	orrs	r3, r2
 810161a:	600b      	str	r3, [r1, #0]
#endif
}
 810161c:	bf00      	nop
 810161e:	370c      	adds	r7, #12
 8101620:	46bd      	mov	sp, r7
 8101622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101626:	4770      	bx	lr
 8101628:	58026510 	.word	0x58026510

0810162c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 810162c:	b580      	push	{r7, lr}
 810162e:	b084      	sub	sp, #16
 8101630:	af00      	add	r7, sp, #0
 8101632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	2b00      	cmp	r3, #0
 8101638:	d101      	bne.n	810163e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 810163a:	2301      	movs	r3, #1
 810163c:	e038      	b.n	81016b0 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 810163e:	687b      	ldr	r3, [r7, #4]
 8101640:	681b      	ldr	r3, [r3, #0]
 8101642:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8101646:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8101648:	687b      	ldr	r3, [r7, #4]
 810164a:	681b      	ldr	r3, [r3, #0]
 810164c:	f245 5255 	movw	r2, #21845	; 0x5555
 8101650:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	681b      	ldr	r3, [r3, #0]
 8101656:	687a      	ldr	r2, [r7, #4]
 8101658:	6852      	ldr	r2, [r2, #4]
 810165a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	681b      	ldr	r3, [r3, #0]
 8101660:	687a      	ldr	r2, [r7, #4]
 8101662:	6892      	ldr	r2, [r2, #8]
 8101664:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8101666:	f7ff f9ad 	bl	81009c4 <HAL_GetTick>
 810166a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 810166c:	e008      	b.n	8101680 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 810166e:	f7ff f9a9 	bl	81009c4 <HAL_GetTick>
 8101672:	4602      	mov	r2, r0
 8101674:	68fb      	ldr	r3, [r7, #12]
 8101676:	1ad3      	subs	r3, r2, r3
 8101678:	2b30      	cmp	r3, #48	; 0x30
 810167a:	d901      	bls.n	8101680 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 810167c:	2303      	movs	r3, #3
 810167e:	e017      	b.n	81016b0 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	68db      	ldr	r3, [r3, #12]
 8101686:	2b00      	cmp	r3, #0
 8101688:	d1f1      	bne.n	810166e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	691a      	ldr	r2, [r3, #16]
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	68db      	ldr	r3, [r3, #12]
 8101694:	429a      	cmp	r2, r3
 8101696:	d005      	beq.n	81016a4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	681b      	ldr	r3, [r3, #0]
 810169c:	687a      	ldr	r2, [r7, #4]
 810169e:	68d2      	ldr	r2, [r2, #12]
 81016a0:	611a      	str	r2, [r3, #16]
 81016a2:	e004      	b.n	81016ae <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 81016ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81016ae:	2300      	movs	r3, #0
}
 81016b0:	4618      	mov	r0, r3
 81016b2:	3710      	adds	r7, #16
 81016b4:	46bd      	mov	sp, r7
 81016b6:	bd80      	pop	{r7, pc}

081016b8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b084      	sub	sp, #16
 81016bc:	af00      	add	r7, sp, #0
 81016be:	60f8      	str	r0, [r7, #12]
 81016c0:	460b      	mov	r3, r1
 81016c2:	607a      	str	r2, [r7, #4]
 81016c4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81016c6:	4b35      	ldr	r3, [pc, #212]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	f023 0201 	bic.w	r2, r3, #1
 81016ce:	4933      	ldr	r1, [pc, #204]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016d0:	68fb      	ldr	r3, [r7, #12]
 81016d2:	4313      	orrs	r3, r2
 81016d4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	2b00      	cmp	r3, #0
 81016da:	d121      	bne.n	8101720 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81016dc:	f7ff fa5e 	bl	8100b9c <HAL_GetCurrentCPUID>
 81016e0:	4603      	mov	r3, r0
 81016e2:	2b03      	cmp	r3, #3
 81016e4:	d154      	bne.n	8101790 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81016e6:	4b2d      	ldr	r3, [pc, #180]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016e8:	691b      	ldr	r3, [r3, #16]
 81016ea:	4a2c      	ldr	r2, [pc, #176]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016ec:	f023 0301 	bic.w	r3, r3, #1
 81016f0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016f2:	4b2b      	ldr	r3, [pc, #172]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81016f4:	691b      	ldr	r3, [r3, #16]
 81016f6:	4a2a      	ldr	r2, [pc, #168]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81016f8:	f043 0304 	orr.w	r3, r3, #4
 81016fc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81016fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8101702:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101706:	7afb      	ldrb	r3, [r7, #11]
 8101708:	2b01      	cmp	r3, #1
 810170a:	d101      	bne.n	8101710 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810170c:	bf30      	wfi
 810170e:	e000      	b.n	8101712 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101710:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101712:	4b23      	ldr	r3, [pc, #140]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101714:	691b      	ldr	r3, [r3, #16]
 8101716:	4a22      	ldr	r2, [pc, #136]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101718:	f023 0304 	bic.w	r3, r3, #4
 810171c:	6113      	str	r3, [r2, #16]
 810171e:	e03a      	b.n	8101796 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	2b01      	cmp	r3, #1
 8101724:	d121      	bne.n	810176a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101726:	f7ff fa39 	bl	8100b9c <HAL_GetCurrentCPUID>
 810172a:	4603      	mov	r3, r0
 810172c:	2b01      	cmp	r3, #1
 810172e:	d131      	bne.n	8101794 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101730:	4b1a      	ldr	r3, [pc, #104]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101732:	695b      	ldr	r3, [r3, #20]
 8101734:	4a19      	ldr	r2, [pc, #100]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101736:	f023 0302 	bic.w	r3, r3, #2
 810173a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810173c:	4b18      	ldr	r3, [pc, #96]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810173e:	691b      	ldr	r3, [r3, #16]
 8101740:	4a17      	ldr	r2, [pc, #92]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101742:	f043 0304 	orr.w	r3, r3, #4
 8101746:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810174c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101750:	7afb      	ldrb	r3, [r7, #11]
 8101752:	2b01      	cmp	r3, #1
 8101754:	d101      	bne.n	810175a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101756:	bf30      	wfi
 8101758:	e000      	b.n	810175c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810175a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810175c:	4b10      	ldr	r3, [pc, #64]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810175e:	691b      	ldr	r3, [r3, #16]
 8101760:	4a0f      	ldr	r2, [pc, #60]	; (81017a0 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101762:	f023 0304 	bic.w	r3, r3, #4
 8101766:	6113      	str	r3, [r2, #16]
 8101768:	e015      	b.n	8101796 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810176a:	f7ff fa17 	bl	8100b9c <HAL_GetCurrentCPUID>
 810176e:	4603      	mov	r3, r0
 8101770:	2b03      	cmp	r3, #3
 8101772:	d106      	bne.n	8101782 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101774:	4b09      	ldr	r3, [pc, #36]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101776:	691b      	ldr	r3, [r3, #16]
 8101778:	4a08      	ldr	r2, [pc, #32]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 810177a:	f023 0304 	bic.w	r3, r3, #4
 810177e:	6113      	str	r3, [r2, #16]
 8101780:	e009      	b.n	8101796 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101782:	4b06      	ldr	r3, [pc, #24]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101784:	695b      	ldr	r3, [r3, #20]
 8101786:	4a05      	ldr	r2, [pc, #20]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101788:	f023 0304 	bic.w	r3, r3, #4
 810178c:	6153      	str	r3, [r2, #20]
 810178e:	e002      	b.n	8101796 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8101790:	bf00      	nop
 8101792:	e000      	b.n	8101796 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8101794:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101796:	3710      	adds	r7, #16
 8101798:	46bd      	mov	sp, r7
 810179a:	bd80      	pop	{r7, pc}
 810179c:	58024800 	.word	0x58024800
 81017a0:	e000ed00 	.word	0xe000ed00

081017a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81017a4:	b580      	push	{r7, lr}
 81017a6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81017a8:	f7ff f9f8 	bl	8100b9c <HAL_GetCurrentCPUID>
 81017ac:	4603      	mov	r3, r0
 81017ae:	2b03      	cmp	r3, #3
 81017b0:	d101      	bne.n	81017b6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81017b2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81017b4:	e001      	b.n	81017ba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81017b6:	bf40      	sev
    __WFE ();
 81017b8:	bf20      	wfe
}
 81017ba:	bf00      	nop
 81017bc:	bd80      	pop	{r7, pc}
	...

081017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81017c0:	b480      	push	{r7}
 81017c2:	b089      	sub	sp, #36	; 0x24
 81017c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81017c6:	4baf      	ldr	r3, [pc, #700]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81017c8:	691b      	ldr	r3, [r3, #16]
 81017ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81017ce:	2b18      	cmp	r3, #24
 81017d0:	f200 814e 	bhi.w	8101a70 <HAL_RCC_GetSysClockFreq+0x2b0>
 81017d4:	a201      	add	r2, pc, #4	; (adr r2, 81017dc <HAL_RCC_GetSysClockFreq+0x1c>)
 81017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017da:	bf00      	nop
 81017dc:	08101841 	.word	0x08101841
 81017e0:	08101a71 	.word	0x08101a71
 81017e4:	08101a71 	.word	0x08101a71
 81017e8:	08101a71 	.word	0x08101a71
 81017ec:	08101a71 	.word	0x08101a71
 81017f0:	08101a71 	.word	0x08101a71
 81017f4:	08101a71 	.word	0x08101a71
 81017f8:	08101a71 	.word	0x08101a71
 81017fc:	08101867 	.word	0x08101867
 8101800:	08101a71 	.word	0x08101a71
 8101804:	08101a71 	.word	0x08101a71
 8101808:	08101a71 	.word	0x08101a71
 810180c:	08101a71 	.word	0x08101a71
 8101810:	08101a71 	.word	0x08101a71
 8101814:	08101a71 	.word	0x08101a71
 8101818:	08101a71 	.word	0x08101a71
 810181c:	0810186d 	.word	0x0810186d
 8101820:	08101a71 	.word	0x08101a71
 8101824:	08101a71 	.word	0x08101a71
 8101828:	08101a71 	.word	0x08101a71
 810182c:	08101a71 	.word	0x08101a71
 8101830:	08101a71 	.word	0x08101a71
 8101834:	08101a71 	.word	0x08101a71
 8101838:	08101a71 	.word	0x08101a71
 810183c:	08101873 	.word	0x08101873
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101840:	4b90      	ldr	r3, [pc, #576]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	f003 0320 	and.w	r3, r3, #32
 8101848:	2b00      	cmp	r3, #0
 810184a:	d009      	beq.n	8101860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810184c:	4b8d      	ldr	r3, [pc, #564]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	08db      	lsrs	r3, r3, #3
 8101852:	f003 0303 	and.w	r3, r3, #3
 8101856:	4a8c      	ldr	r2, [pc, #560]	; (8101a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8101858:	fa22 f303 	lsr.w	r3, r2, r3
 810185c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810185e:	e10a      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101860:	4b89      	ldr	r3, [pc, #548]	; (8101a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8101862:	61bb      	str	r3, [r7, #24]
    break;
 8101864:	e107      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101866:	4b89      	ldr	r3, [pc, #548]	; (8101a8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101868:	61bb      	str	r3, [r7, #24]
    break;
 810186a:	e104      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810186c:	4b88      	ldr	r3, [pc, #544]	; (8101a90 <HAL_RCC_GetSysClockFreq+0x2d0>)
 810186e:	61bb      	str	r3, [r7, #24]
    break;
 8101870:	e101      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101872:	4b84      	ldr	r3, [pc, #528]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101876:	f003 0303 	and.w	r3, r3, #3
 810187a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810187c:	4b81      	ldr	r3, [pc, #516]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101880:	091b      	lsrs	r3, r3, #4
 8101882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101886:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101888:	4b7e      	ldr	r3, [pc, #504]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810188c:	f003 0301 	and.w	r3, r3, #1
 8101890:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101892:	4b7c      	ldr	r3, [pc, #496]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101896:	08db      	lsrs	r3, r3, #3
 8101898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810189c:	68fa      	ldr	r2, [r7, #12]
 810189e:	fb02 f303 	mul.w	r3, r2, r3
 81018a2:	ee07 3a90 	vmov	s15, r3
 81018a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81018ae:	693b      	ldr	r3, [r7, #16]
 81018b0:	2b00      	cmp	r3, #0
 81018b2:	f000 80da 	beq.w	8101a6a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81018b6:	697b      	ldr	r3, [r7, #20]
 81018b8:	2b01      	cmp	r3, #1
 81018ba:	d05a      	beq.n	8101972 <HAL_RCC_GetSysClockFreq+0x1b2>
 81018bc:	2b01      	cmp	r3, #1
 81018be:	d302      	bcc.n	81018c6 <HAL_RCC_GetSysClockFreq+0x106>
 81018c0:	2b02      	cmp	r3, #2
 81018c2:	d078      	beq.n	81019b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 81018c4:	e099      	b.n	81019fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81018c6:	4b6f      	ldr	r3, [pc, #444]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	f003 0320 	and.w	r3, r3, #32
 81018ce:	2b00      	cmp	r3, #0
 81018d0:	d02d      	beq.n	810192e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81018d2:	4b6c      	ldr	r3, [pc, #432]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	08db      	lsrs	r3, r3, #3
 81018d8:	f003 0303 	and.w	r3, r3, #3
 81018dc:	4a6a      	ldr	r2, [pc, #424]	; (8101a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81018de:	fa22 f303 	lsr.w	r3, r2, r3
 81018e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	ee07 3a90 	vmov	s15, r3
 81018ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ee:	693b      	ldr	r3, [r7, #16]
 81018f0:	ee07 3a90 	vmov	s15, r3
 81018f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018fc:	4b61      	ldr	r3, [pc, #388]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101904:	ee07 3a90 	vmov	s15, r3
 8101908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810190c:	ed97 6a02 	vldr	s12, [r7, #8]
 8101910:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810191c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101928:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810192c:	e087      	b.n	8101a3e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810192e:	693b      	ldr	r3, [r7, #16]
 8101930:	ee07 3a90 	vmov	s15, r3
 8101934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101938:	eddf 6a57 	vldr	s13, [pc, #348]	; 8101a98 <HAL_RCC_GetSysClockFreq+0x2d8>
 810193c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101940:	4b50      	ldr	r3, [pc, #320]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101948:	ee07 3a90 	vmov	s15, r3
 810194c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101950:	ed97 6a02 	vldr	s12, [r7, #8]
 8101954:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810195c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101968:	ee67 7a27 	vmul.f32	s15, s14, s15
 810196c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101970:	e065      	b.n	8101a3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101972:	693b      	ldr	r3, [r7, #16]
 8101974:	ee07 3a90 	vmov	s15, r3
 8101978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810197c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8101a9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8101980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101984:	4b3f      	ldr	r3, [pc, #252]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810198c:	ee07 3a90 	vmov	s15, r3
 8101990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101994:	ed97 6a02 	vldr	s12, [r7, #8]
 8101998:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 810199c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81019b4:	e043      	b.n	8101a3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81019b6:	693b      	ldr	r3, [r7, #16]
 81019b8:	ee07 3a90 	vmov	s15, r3
 81019bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8101aa0 <HAL_RCC_GetSysClockFreq+0x2e0>
 81019c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019c8:	4b2e      	ldr	r3, [pc, #184]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019d0:	ee07 3a90 	vmov	s15, r3
 81019d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019d8:	ed97 6a02 	vldr	s12, [r7, #8]
 81019dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 81019e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81019f8:	e021      	b.n	8101a3e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81019fa:	693b      	ldr	r3, [r7, #16]
 81019fc:	ee07 3a90 	vmov	s15, r3
 8101a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a04:	eddf 6a25 	vldr	s13, [pc, #148]	; 8101a9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8101a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a0c:	4b1d      	ldr	r3, [pc, #116]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a14:	ee07 3a90 	vmov	s15, r3
 8101a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a20:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a3c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101a3e:	4b11      	ldr	r3, [pc, #68]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a42:	0a5b      	lsrs	r3, r3, #9
 8101a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101a48:	3301      	adds	r3, #1
 8101a4a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101a4c:	683b      	ldr	r3, [r7, #0]
 8101a4e:	ee07 3a90 	vmov	s15, r3
 8101a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8101a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101a62:	ee17 3a90 	vmov	r3, s15
 8101a66:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101a68:	e005      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8101a6a:	2300      	movs	r3, #0
 8101a6c:	61bb      	str	r3, [r7, #24]
    break;
 8101a6e:	e002      	b.n	8101a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8101a70:	4b06      	ldr	r3, [pc, #24]	; (8101a8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101a72:	61bb      	str	r3, [r7, #24]
    break;
 8101a74:	bf00      	nop
  }

  return sysclockfreq;
 8101a76:	69bb      	ldr	r3, [r7, #24]
}
 8101a78:	4618      	mov	r0, r3
 8101a7a:	3724      	adds	r7, #36	; 0x24
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a82:	4770      	bx	lr
 8101a84:	58024400 	.word	0x58024400
 8101a88:	03d09000 	.word	0x03d09000
 8101a8c:	003d0900 	.word	0x003d0900
 8101a90:	017d7840 	.word	0x017d7840
 8101a94:	46000000 	.word	0x46000000
 8101a98:	4c742400 	.word	0x4c742400
 8101a9c:	4a742400 	.word	0x4a742400
 8101aa0:	4bbebc20 	.word	0x4bbebc20

08101aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101aa4:	b580      	push	{r7, lr}
 8101aa6:	b082      	sub	sp, #8
 8101aa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101aaa:	f7ff fe89 	bl	81017c0 <HAL_RCC_GetSysClockFreq>
 8101aae:	4601      	mov	r1, r0
 8101ab0:	4b11      	ldr	r3, [pc, #68]	; (8101af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101ab2:	699b      	ldr	r3, [r3, #24]
 8101ab4:	0a1b      	lsrs	r3, r3, #8
 8101ab6:	f003 030f 	and.w	r3, r3, #15
 8101aba:	4a10      	ldr	r2, [pc, #64]	; (8101afc <HAL_RCC_GetHCLKFreq+0x58>)
 8101abc:	5cd3      	ldrb	r3, [r2, r3]
 8101abe:	f003 031f 	and.w	r3, r3, #31
 8101ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8101ac6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ac8:	4b0b      	ldr	r3, [pc, #44]	; (8101af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101aca:	699b      	ldr	r3, [r3, #24]
 8101acc:	f003 030f 	and.w	r3, r3, #15
 8101ad0:	4a0a      	ldr	r2, [pc, #40]	; (8101afc <HAL_RCC_GetHCLKFreq+0x58>)
 8101ad2:	5cd3      	ldrb	r3, [r2, r3]
 8101ad4:	f003 031f 	and.w	r3, r3, #31
 8101ad8:	687a      	ldr	r2, [r7, #4]
 8101ada:	fa22 f303 	lsr.w	r3, r2, r3
 8101ade:	4a08      	ldr	r2, [pc, #32]	; (8101b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101ae0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ae2:	4b07      	ldr	r3, [pc, #28]	; (8101b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	4a07      	ldr	r2, [pc, #28]	; (8101b04 <HAL_RCC_GetHCLKFreq+0x60>)
 8101ae8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101aea:	4b05      	ldr	r3, [pc, #20]	; (8101b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101aec:	681b      	ldr	r3, [r3, #0]
}
 8101aee:	4618      	mov	r0, r3
 8101af0:	3708      	adds	r7, #8
 8101af2:	46bd      	mov	sp, r7
 8101af4:	bd80      	pop	{r7, pc}
 8101af6:	bf00      	nop
 8101af8:	58024400 	.word	0x58024400
 8101afc:	08104d48 	.word	0x08104d48
 8101b00:	10000004 	.word	0x10000004
 8101b04:	10000000 	.word	0x10000000

08101b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101b08:	b580      	push	{r7, lr}
 8101b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101b0c:	f7ff ffca 	bl	8101aa4 <HAL_RCC_GetHCLKFreq>
 8101b10:	4601      	mov	r1, r0
 8101b12:	4b06      	ldr	r3, [pc, #24]	; (8101b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8101b14:	69db      	ldr	r3, [r3, #28]
 8101b16:	0a1b      	lsrs	r3, r3, #8
 8101b18:	f003 0307 	and.w	r3, r3, #7
 8101b1c:	4a04      	ldr	r2, [pc, #16]	; (8101b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101b1e:	5cd3      	ldrb	r3, [r2, r3]
 8101b20:	f003 031f 	and.w	r3, r3, #31
 8101b24:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101b28:	4618      	mov	r0, r3
 8101b2a:	bd80      	pop	{r7, pc}
 8101b2c:	58024400 	.word	0x58024400
 8101b30:	08104d48 	.word	0x08104d48

08101b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101b34:	b480      	push	{r7}
 8101b36:	b083      	sub	sp, #12
 8101b38:	af00      	add	r7, sp, #0
 8101b3a:	6078      	str	r0, [r7, #4]
 8101b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	223f      	movs	r2, #63	; 0x3f
 8101b42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101b44:	4b1a      	ldr	r3, [pc, #104]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b46:	691b      	ldr	r3, [r3, #16]
 8101b48:	f003 0207 	and.w	r2, r3, #7
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101b50:	4b17      	ldr	r3, [pc, #92]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b52:	699b      	ldr	r3, [r3, #24]
 8101b54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101b5c:	4b14      	ldr	r3, [pc, #80]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b5e:	699b      	ldr	r3, [r3, #24]
 8101b60:	f003 020f 	and.w	r2, r3, #15
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101b68:	4b11      	ldr	r3, [pc, #68]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b6a:	699b      	ldr	r3, [r3, #24]
 8101b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101b74:	4b0e      	ldr	r3, [pc, #56]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b76:	69db      	ldr	r3, [r3, #28]
 8101b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101b80:	4b0b      	ldr	r3, [pc, #44]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b82:	69db      	ldr	r3, [r3, #28]
 8101b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101b8c:	4b08      	ldr	r3, [pc, #32]	; (8101bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8101b8e:	6a1b      	ldr	r3, [r3, #32]
 8101b90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101b98:	4b06      	ldr	r3, [pc, #24]	; (8101bb4 <HAL_RCC_GetClockConfig+0x80>)
 8101b9a:	681b      	ldr	r3, [r3, #0]
 8101b9c:	f003 020f 	and.w	r2, r3, #15
 8101ba0:	683b      	ldr	r3, [r7, #0]
 8101ba2:	601a      	str	r2, [r3, #0]
}
 8101ba4:	bf00      	nop
 8101ba6:	370c      	adds	r7, #12
 8101ba8:	46bd      	mov	sp, r7
 8101baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bae:	4770      	bx	lr
 8101bb0:	58024400 	.word	0x58024400
 8101bb4:	52002000 	.word	0x52002000

08101bb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8101bb8:	b580      	push	{r7, lr}
 8101bba:	b084      	sub	sp, #16
 8101bbc:	af00      	add	r7, sp, #0
 8101bbe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8101bc0:	2300      	movs	r3, #0
 8101bc2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d101      	bne.n	8101bce <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8101bca:	2301      	movs	r3, #1
 8101bcc:	e0e2      	b.n	8101d94 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	2200      	movs	r2, #0
 8101bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	4a70      	ldr	r2, [pc, #448]	; (8101d9c <HAL_SPI_Init+0x1e4>)
 8101bda:	4293      	cmp	r3, r2
 8101bdc:	d00f      	beq.n	8101bfe <HAL_SPI_Init+0x46>
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	4a6f      	ldr	r2, [pc, #444]	; (8101da0 <HAL_SPI_Init+0x1e8>)
 8101be4:	4293      	cmp	r3, r2
 8101be6:	d00a      	beq.n	8101bfe <HAL_SPI_Init+0x46>
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	4a6d      	ldr	r2, [pc, #436]	; (8101da4 <HAL_SPI_Init+0x1ec>)
 8101bee:	4293      	cmp	r3, r2
 8101bf0:	d005      	beq.n	8101bfe <HAL_SPI_Init+0x46>
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	68db      	ldr	r3, [r3, #12]
 8101bf6:	2b0f      	cmp	r3, #15
 8101bf8:	d901      	bls.n	8101bfe <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8101bfa:	2301      	movs	r3, #1
 8101bfc:	e0ca      	b.n	8101d94 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8101bfe:	6878      	ldr	r0, [r7, #4]
 8101c00:	f000 f8d2 	bl	8101da8 <SPI_GetPacketSize>
 8101c04:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4a64      	ldr	r2, [pc, #400]	; (8101d9c <HAL_SPI_Init+0x1e4>)
 8101c0c:	4293      	cmp	r3, r2
 8101c0e:	d00c      	beq.n	8101c2a <HAL_SPI_Init+0x72>
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	4a62      	ldr	r2, [pc, #392]	; (8101da0 <HAL_SPI_Init+0x1e8>)
 8101c16:	4293      	cmp	r3, r2
 8101c18:	d007      	beq.n	8101c2a <HAL_SPI_Init+0x72>
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	4a61      	ldr	r2, [pc, #388]	; (8101da4 <HAL_SPI_Init+0x1ec>)
 8101c20:	4293      	cmp	r3, r2
 8101c22:	d002      	beq.n	8101c2a <HAL_SPI_Init+0x72>
 8101c24:	68bb      	ldr	r3, [r7, #8]
 8101c26:	2b08      	cmp	r3, #8
 8101c28:	d811      	bhi.n	8101c4e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8101c2e:	4a5b      	ldr	r2, [pc, #364]	; (8101d9c <HAL_SPI_Init+0x1e4>)
 8101c30:	4293      	cmp	r3, r2
 8101c32:	d009      	beq.n	8101c48 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	4a59      	ldr	r2, [pc, #356]	; (8101da0 <HAL_SPI_Init+0x1e8>)
 8101c3a:	4293      	cmp	r3, r2
 8101c3c:	d004      	beq.n	8101c48 <HAL_SPI_Init+0x90>
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	681b      	ldr	r3, [r3, #0]
 8101c42:	4a58      	ldr	r2, [pc, #352]	; (8101da4 <HAL_SPI_Init+0x1ec>)
 8101c44:	4293      	cmp	r3, r2
 8101c46:	d104      	bne.n	8101c52 <HAL_SPI_Init+0x9a>
 8101c48:	68bb      	ldr	r3, [r7, #8]
 8101c4a:	2b10      	cmp	r3, #16
 8101c4c:	d901      	bls.n	8101c52 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8101c4e:	2301      	movs	r3, #1
 8101c50:	e0a0      	b.n	8101d94 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8101c58:	b2db      	uxtb	r3, r3
 8101c5a:	2b00      	cmp	r3, #0
 8101c5c:	d106      	bne.n	8101c6c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	2200      	movs	r2, #0
 8101c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8101c66:	6878      	ldr	r0, [r7, #4]
 8101c68:	f7fe fd3e 	bl	81006e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	2202      	movs	r2, #2
 8101c70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	681a      	ldr	r2, [r3, #0]
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	f022 0201 	bic.w	r2, r2, #1
 8101c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	699b      	ldr	r3, [r3, #24]
 8101c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101c8c:	d110      	bne.n	8101cb0 <HAL_SPI_Init+0xf8>
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	685b      	ldr	r3, [r3, #4]
 8101c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101c96:	d10b      	bne.n	8101cb0 <HAL_SPI_Init+0xf8>
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101c9c:	2b00      	cmp	r3, #0
 8101c9e:	d107      	bne.n	8101cb0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	681a      	ldr	r2, [r3, #0]
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8101cae:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	69da      	ldr	r2, [r3, #28]
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101cb8:	431a      	orrs	r2, r3
 8101cba:	68fb      	ldr	r3, [r7, #12]
 8101cbc:	431a      	orrs	r2, r3
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101cc2:	ea42 0103 	orr.w	r1, r2, r3
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	68da      	ldr	r2, [r3, #12]
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	681b      	ldr	r3, [r3, #0]
 8101cce:	430a      	orrs	r2, r1
 8101cd0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101cda:	431a      	orrs	r2, r3
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101ce0:	431a      	orrs	r2, r3
 8101ce2:	687b      	ldr	r3, [r7, #4]
 8101ce4:	699b      	ldr	r3, [r3, #24]
 8101ce6:	431a      	orrs	r2, r3
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	691b      	ldr	r3, [r3, #16]
 8101cec:	431a      	orrs	r2, r3
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	695b      	ldr	r3, [r3, #20]
 8101cf2:	431a      	orrs	r2, r3
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	6a1b      	ldr	r3, [r3, #32]
 8101cf8:	431a      	orrs	r2, r3
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	685b      	ldr	r3, [r3, #4]
 8101cfe:	431a      	orrs	r2, r3
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101d04:	431a      	orrs	r2, r3
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	689b      	ldr	r3, [r3, #8]
 8101d0a:	431a      	orrs	r2, r3
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101d10:	ea42 0103 	orr.w	r1, r2, r3
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	430a      	orrs	r2, r1
 8101d1e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	685b      	ldr	r3, [r3, #4]
 8101d24:	2b00      	cmp	r3, #0
 8101d26:	d113      	bne.n	8101d50 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	689b      	ldr	r3, [r3, #8]
 8101d2e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101d3a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	681b      	ldr	r3, [r3, #0]
 8101d40:	689b      	ldr	r3, [r3, #8]
 8101d42:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8101d4e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	681b      	ldr	r3, [r3, #0]
 8101d5a:	f022 0201 	bic.w	r2, r2, #1
 8101d5e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	685b      	ldr	r3, [r3, #4]
 8101d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d00a      	beq.n	8101d82 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	68db      	ldr	r3, [r3, #12]
 8101d72:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	681b      	ldr	r3, [r3, #0]
 8101d7e:	430a      	orrs	r2, r1
 8101d80:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	2200      	movs	r2, #0
 8101d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	2201      	movs	r2, #1
 8101d8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8101d92:	2300      	movs	r3, #0
}
 8101d94:	4618      	mov	r0, r3
 8101d96:	3710      	adds	r7, #16
 8101d98:	46bd      	mov	sp, r7
 8101d9a:	bd80      	pop	{r7, pc}
 8101d9c:	40013000 	.word	0x40013000
 8101da0:	40003800 	.word	0x40003800
 8101da4:	40003c00 	.word	0x40003c00

08101da8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8101da8:	b480      	push	{r7}
 8101daa:	b085      	sub	sp, #20
 8101dac:	af00      	add	r7, sp, #0
 8101dae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101db4:	095b      	lsrs	r3, r3, #5
 8101db6:	3301      	adds	r3, #1
 8101db8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	68db      	ldr	r3, [r3, #12]
 8101dbe:	3301      	adds	r3, #1
 8101dc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8101dc2:	68bb      	ldr	r3, [r7, #8]
 8101dc4:	3307      	adds	r3, #7
 8101dc6:	08db      	lsrs	r3, r3, #3
 8101dc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8101dca:	68bb      	ldr	r3, [r7, #8]
 8101dcc:	68fa      	ldr	r2, [r7, #12]
 8101dce:	fb02 f303 	mul.w	r3, r2, r3
}
 8101dd2:	4618      	mov	r0, r3
 8101dd4:	3714      	adds	r7, #20
 8101dd6:	46bd      	mov	sp, r7
 8101dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ddc:	4770      	bx	lr

08101dde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101dde:	b580      	push	{r7, lr}
 8101de0:	b082      	sub	sp, #8
 8101de2:	af00      	add	r7, sp, #0
 8101de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	2b00      	cmp	r3, #0
 8101dea:	d101      	bne.n	8101df0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101dec:	2301      	movs	r3, #1
 8101dee:	e049      	b.n	8101e84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101df6:	b2db      	uxtb	r3, r3
 8101df8:	2b00      	cmp	r3, #0
 8101dfa:	d106      	bne.n	8101e0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	2200      	movs	r2, #0
 8101e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101e04:	6878      	ldr	r0, [r7, #4]
 8101e06:	f000 f841 	bl	8101e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	2202      	movs	r2, #2
 8101e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101e12:	687b      	ldr	r3, [r7, #4]
 8101e14:	681a      	ldr	r2, [r3, #0]
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	3304      	adds	r3, #4
 8101e1a:	4619      	mov	r1, r3
 8101e1c:	4610      	mov	r0, r2
 8101e1e:	f000 f875 	bl	8101f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	2201      	movs	r2, #1
 8101e26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	2201      	movs	r2, #1
 8101e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	2201      	movs	r2, #1
 8101e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	2201      	movs	r2, #1
 8101e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	2201      	movs	r2, #1
 8101e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	2201      	movs	r2, #1
 8101e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	2201      	movs	r2, #1
 8101e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	2201      	movs	r2, #1
 8101e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	2201      	movs	r2, #1
 8101e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2201      	movs	r2, #1
 8101e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	2201      	movs	r2, #1
 8101e76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	2201      	movs	r2, #1
 8101e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101e82:	2300      	movs	r3, #0
}
 8101e84:	4618      	mov	r0, r3
 8101e86:	3708      	adds	r7, #8
 8101e88:	46bd      	mov	sp, r7
 8101e8a:	bd80      	pop	{r7, pc}

08101e8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8101e8c:	b480      	push	{r7}
 8101e8e:	b083      	sub	sp, #12
 8101e90:	af00      	add	r7, sp, #0
 8101e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8101e94:	bf00      	nop
 8101e96:	370c      	adds	r7, #12
 8101e98:	46bd      	mov	sp, r7
 8101e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e9e:	4770      	bx	lr

08101ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101ea0:	b480      	push	{r7}
 8101ea2:	b085      	sub	sp, #20
 8101ea4:	af00      	add	r7, sp, #0
 8101ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101eae:	b2db      	uxtb	r3, r3
 8101eb0:	2b01      	cmp	r3, #1
 8101eb2:	d001      	beq.n	8101eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101eb4:	2301      	movs	r3, #1
 8101eb6:	e021      	b.n	8101efc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	2202      	movs	r2, #2
 8101ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	68da      	ldr	r2, [r3, #12]
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	681b      	ldr	r3, [r3, #0]
 8101eca:	f042 0201 	orr.w	r2, r2, #1
 8101ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	681b      	ldr	r3, [r3, #0]
 8101ed4:	689a      	ldr	r2, [r3, #8]
 8101ed6:	4b0c      	ldr	r3, [pc, #48]	; (8101f08 <HAL_TIM_Base_Start_IT+0x68>)
 8101ed8:	4013      	ands	r3, r2
 8101eda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101edc:	68fb      	ldr	r3, [r7, #12]
 8101ede:	2b06      	cmp	r3, #6
 8101ee0:	d00b      	beq.n	8101efa <HAL_TIM_Base_Start_IT+0x5a>
 8101ee2:	68fb      	ldr	r3, [r7, #12]
 8101ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101ee8:	d007      	beq.n	8101efa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	681b      	ldr	r3, [r3, #0]
 8101eee:	681a      	ldr	r2, [r3, #0]
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	f042 0201 	orr.w	r2, r2, #1
 8101ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8101efa:	2300      	movs	r3, #0
}
 8101efc:	4618      	mov	r0, r3
 8101efe:	3714      	adds	r7, #20
 8101f00:	46bd      	mov	sp, r7
 8101f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f06:	4770      	bx	lr
 8101f08:	00010007 	.word	0x00010007

08101f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8101f0c:	b480      	push	{r7}
 8101f0e:	b085      	sub	sp, #20
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	6078      	str	r0, [r7, #4]
 8101f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	4a40      	ldr	r2, [pc, #256]	; (8102020 <TIM_Base_SetConfig+0x114>)
 8101f20:	4293      	cmp	r3, r2
 8101f22:	d013      	beq.n	8101f4c <TIM_Base_SetConfig+0x40>
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f2a:	d00f      	beq.n	8101f4c <TIM_Base_SetConfig+0x40>
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	4a3d      	ldr	r2, [pc, #244]	; (8102024 <TIM_Base_SetConfig+0x118>)
 8101f30:	4293      	cmp	r3, r2
 8101f32:	d00b      	beq.n	8101f4c <TIM_Base_SetConfig+0x40>
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	4a3c      	ldr	r2, [pc, #240]	; (8102028 <TIM_Base_SetConfig+0x11c>)
 8101f38:	4293      	cmp	r3, r2
 8101f3a:	d007      	beq.n	8101f4c <TIM_Base_SetConfig+0x40>
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	4a3b      	ldr	r2, [pc, #236]	; (810202c <TIM_Base_SetConfig+0x120>)
 8101f40:	4293      	cmp	r3, r2
 8101f42:	d003      	beq.n	8101f4c <TIM_Base_SetConfig+0x40>
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	4a3a      	ldr	r2, [pc, #232]	; (8102030 <TIM_Base_SetConfig+0x124>)
 8101f48:	4293      	cmp	r3, r2
 8101f4a:	d108      	bne.n	8101f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101f4c:	68fb      	ldr	r3, [r7, #12]
 8101f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101f54:	683b      	ldr	r3, [r7, #0]
 8101f56:	685b      	ldr	r3, [r3, #4]
 8101f58:	68fa      	ldr	r2, [r7, #12]
 8101f5a:	4313      	orrs	r3, r2
 8101f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	4a2f      	ldr	r2, [pc, #188]	; (8102020 <TIM_Base_SetConfig+0x114>)
 8101f62:	4293      	cmp	r3, r2
 8101f64:	d01f      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f6c:	d01b      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	4a2c      	ldr	r2, [pc, #176]	; (8102024 <TIM_Base_SetConfig+0x118>)
 8101f72:	4293      	cmp	r3, r2
 8101f74:	d017      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	4a2b      	ldr	r2, [pc, #172]	; (8102028 <TIM_Base_SetConfig+0x11c>)
 8101f7a:	4293      	cmp	r3, r2
 8101f7c:	d013      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	4a2a      	ldr	r2, [pc, #168]	; (810202c <TIM_Base_SetConfig+0x120>)
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d00f      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	4a29      	ldr	r2, [pc, #164]	; (8102030 <TIM_Base_SetConfig+0x124>)
 8101f8a:	4293      	cmp	r3, r2
 8101f8c:	d00b      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	4a28      	ldr	r2, [pc, #160]	; (8102034 <TIM_Base_SetConfig+0x128>)
 8101f92:	4293      	cmp	r3, r2
 8101f94:	d007      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	4a27      	ldr	r2, [pc, #156]	; (8102038 <TIM_Base_SetConfig+0x12c>)
 8101f9a:	4293      	cmp	r3, r2
 8101f9c:	d003      	beq.n	8101fa6 <TIM_Base_SetConfig+0x9a>
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	4a26      	ldr	r2, [pc, #152]	; (810203c <TIM_Base_SetConfig+0x130>)
 8101fa2:	4293      	cmp	r3, r2
 8101fa4:	d108      	bne.n	8101fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101fa6:	68fb      	ldr	r3, [r7, #12]
 8101fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101fae:	683b      	ldr	r3, [r7, #0]
 8101fb0:	68db      	ldr	r3, [r3, #12]
 8101fb2:	68fa      	ldr	r2, [r7, #12]
 8101fb4:	4313      	orrs	r3, r2
 8101fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101fb8:	68fb      	ldr	r3, [r7, #12]
 8101fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101fbe:	683b      	ldr	r3, [r7, #0]
 8101fc0:	695b      	ldr	r3, [r3, #20]
 8101fc2:	4313      	orrs	r3, r2
 8101fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	68fa      	ldr	r2, [r7, #12]
 8101fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101fcc:	683b      	ldr	r3, [r7, #0]
 8101fce:	689a      	ldr	r2, [r3, #8]
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101fd4:	683b      	ldr	r3, [r7, #0]
 8101fd6:	681a      	ldr	r2, [r3, #0]
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	4a10      	ldr	r2, [pc, #64]	; (8102020 <TIM_Base_SetConfig+0x114>)
 8101fe0:	4293      	cmp	r3, r2
 8101fe2:	d00f      	beq.n	8102004 <TIM_Base_SetConfig+0xf8>
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	4a12      	ldr	r2, [pc, #72]	; (8102030 <TIM_Base_SetConfig+0x124>)
 8101fe8:	4293      	cmp	r3, r2
 8101fea:	d00b      	beq.n	8102004 <TIM_Base_SetConfig+0xf8>
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	4a11      	ldr	r2, [pc, #68]	; (8102034 <TIM_Base_SetConfig+0x128>)
 8101ff0:	4293      	cmp	r3, r2
 8101ff2:	d007      	beq.n	8102004 <TIM_Base_SetConfig+0xf8>
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	4a10      	ldr	r2, [pc, #64]	; (8102038 <TIM_Base_SetConfig+0x12c>)
 8101ff8:	4293      	cmp	r3, r2
 8101ffa:	d003      	beq.n	8102004 <TIM_Base_SetConfig+0xf8>
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	4a0f      	ldr	r2, [pc, #60]	; (810203c <TIM_Base_SetConfig+0x130>)
 8102000:	4293      	cmp	r3, r2
 8102002:	d103      	bne.n	810200c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102004:	683b      	ldr	r3, [r7, #0]
 8102006:	691a      	ldr	r2, [r3, #16]
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	2201      	movs	r2, #1
 8102010:	615a      	str	r2, [r3, #20]
}
 8102012:	bf00      	nop
 8102014:	3714      	adds	r7, #20
 8102016:	46bd      	mov	sp, r7
 8102018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810201c:	4770      	bx	lr
 810201e:	bf00      	nop
 8102020:	40010000 	.word	0x40010000
 8102024:	40000400 	.word	0x40000400
 8102028:	40000800 	.word	0x40000800
 810202c:	40000c00 	.word	0x40000c00
 8102030:	40010400 	.word	0x40010400
 8102034:	40014000 	.word	0x40014000
 8102038:	40014400 	.word	0x40014400
 810203c:	40014800 	.word	0x40014800

08102040 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8102040:	b580      	push	{r7, lr}
 8102042:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8102044:	4904      	ldr	r1, [pc, #16]	; (8102058 <MX_FATFS_Init+0x18>)
 8102046:	4805      	ldr	r0, [pc, #20]	; (810205c <MX_FATFS_Init+0x1c>)
 8102048:	f000 f8b0 	bl	81021ac <FATFS_LinkDriver>
 810204c:	4603      	mov	r3, r0
 810204e:	461a      	mov	r2, r3
 8102050:	4b03      	ldr	r3, [pc, #12]	; (8102060 <MX_FATFS_Init+0x20>)
 8102052:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8102054:	bf00      	nop
 8102056:	bd80      	pop	{r7, pc}
 8102058:	10004ae0 	.word	0x10004ae0
 810205c:	1000000c 	.word	0x1000000c
 8102060:	10004ae4 	.word	0x10004ae4

08102064 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8102064:	b480      	push	{r7}
 8102066:	b083      	sub	sp, #12
 8102068:	af00      	add	r7, sp, #0
 810206a:	4603      	mov	r3, r0
 810206c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 810206e:	4b06      	ldr	r3, [pc, #24]	; (8102088 <USER_initialize+0x24>)
 8102070:	2201      	movs	r2, #1
 8102072:	701a      	strb	r2, [r3, #0]
    return Stat;
 8102074:	4b04      	ldr	r3, [pc, #16]	; (8102088 <USER_initialize+0x24>)
 8102076:	781b      	ldrb	r3, [r3, #0]
 8102078:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 810207a:	4618      	mov	r0, r3
 810207c:	370c      	adds	r7, #12
 810207e:	46bd      	mov	sp, r7
 8102080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102084:	4770      	bx	lr
 8102086:	bf00      	nop
 8102088:	10000008 	.word	0x10000008

0810208c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 810208c:	b480      	push	{r7}
 810208e:	b083      	sub	sp, #12
 8102090:	af00      	add	r7, sp, #0
 8102092:	4603      	mov	r3, r0
 8102094:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8102096:	4b06      	ldr	r3, [pc, #24]	; (81020b0 <USER_status+0x24>)
 8102098:	2201      	movs	r2, #1
 810209a:	701a      	strb	r2, [r3, #0]
    return Stat;
 810209c:	4b04      	ldr	r3, [pc, #16]	; (81020b0 <USER_status+0x24>)
 810209e:	781b      	ldrb	r3, [r3, #0]
 81020a0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 81020a2:	4618      	mov	r0, r3
 81020a4:	370c      	adds	r7, #12
 81020a6:	46bd      	mov	sp, r7
 81020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ac:	4770      	bx	lr
 81020ae:	bf00      	nop
 81020b0:	10000008 	.word	0x10000008

081020b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 81020b4:	b480      	push	{r7}
 81020b6:	b085      	sub	sp, #20
 81020b8:	af00      	add	r7, sp, #0
 81020ba:	60b9      	str	r1, [r7, #8]
 81020bc:	607a      	str	r2, [r7, #4]
 81020be:	603b      	str	r3, [r7, #0]
 81020c0:	4603      	mov	r3, r0
 81020c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 81020c4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 81020c6:	4618      	mov	r0, r3
 81020c8:	3714      	adds	r7, #20
 81020ca:	46bd      	mov	sp, r7
 81020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020d0:	4770      	bx	lr

081020d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 81020d2:	b480      	push	{r7}
 81020d4:	b085      	sub	sp, #20
 81020d6:	af00      	add	r7, sp, #0
 81020d8:	60b9      	str	r1, [r7, #8]
 81020da:	607a      	str	r2, [r7, #4]
 81020dc:	603b      	str	r3, [r7, #0]
 81020de:	4603      	mov	r3, r0
 81020e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 81020e2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 81020e4:	4618      	mov	r0, r3
 81020e6:	3714      	adds	r7, #20
 81020e8:	46bd      	mov	sp, r7
 81020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ee:	4770      	bx	lr

081020f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 81020f0:	b480      	push	{r7}
 81020f2:	b085      	sub	sp, #20
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	4603      	mov	r3, r0
 81020f8:	603a      	str	r2, [r7, #0]
 81020fa:	71fb      	strb	r3, [r7, #7]
 81020fc:	460b      	mov	r3, r1
 81020fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8102100:	2301      	movs	r3, #1
 8102102:	73fb      	strb	r3, [r7, #15]
    return res;
 8102104:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8102106:	4618      	mov	r0, r3
 8102108:	3714      	adds	r7, #20
 810210a:	46bd      	mov	sp, r7
 810210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102110:	4770      	bx	lr
	...

08102114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8102114:	b480      	push	{r7}
 8102116:	b087      	sub	sp, #28
 8102118:	af00      	add	r7, sp, #0
 810211a:	60f8      	str	r0, [r7, #12]
 810211c:	60b9      	str	r1, [r7, #8]
 810211e:	4613      	mov	r3, r2
 8102120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8102122:	2301      	movs	r3, #1
 8102124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8102126:	2300      	movs	r3, #0
 8102128:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 810212a:	4b1f      	ldr	r3, [pc, #124]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 810212c:	7a5b      	ldrb	r3, [r3, #9]
 810212e:	b2db      	uxtb	r3, r3
 8102130:	2b00      	cmp	r3, #0
 8102132:	d131      	bne.n	8102198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8102134:	4b1c      	ldr	r3, [pc, #112]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 8102136:	7a5b      	ldrb	r3, [r3, #9]
 8102138:	b2db      	uxtb	r3, r3
 810213a:	461a      	mov	r2, r3
 810213c:	4b1a      	ldr	r3, [pc, #104]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 810213e:	2100      	movs	r1, #0
 8102140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8102142:	4b19      	ldr	r3, [pc, #100]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 8102144:	7a5b      	ldrb	r3, [r3, #9]
 8102146:	b2db      	uxtb	r3, r3
 8102148:	4a17      	ldr	r2, [pc, #92]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 810214a:	009b      	lsls	r3, r3, #2
 810214c:	4413      	add	r3, r2
 810214e:	68fa      	ldr	r2, [r7, #12]
 8102150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8102152:	4b15      	ldr	r3, [pc, #84]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 8102154:	7a5b      	ldrb	r3, [r3, #9]
 8102156:	b2db      	uxtb	r3, r3
 8102158:	461a      	mov	r2, r3
 810215a:	4b13      	ldr	r3, [pc, #76]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 810215c:	4413      	add	r3, r2
 810215e:	79fa      	ldrb	r2, [r7, #7]
 8102160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8102162:	4b11      	ldr	r3, [pc, #68]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 8102164:	7a5b      	ldrb	r3, [r3, #9]
 8102166:	b2db      	uxtb	r3, r3
 8102168:	1c5a      	adds	r2, r3, #1
 810216a:	b2d1      	uxtb	r1, r2
 810216c:	4a0e      	ldr	r2, [pc, #56]	; (81021a8 <FATFS_LinkDriverEx+0x94>)
 810216e:	7251      	strb	r1, [r2, #9]
 8102170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8102172:	7dbb      	ldrb	r3, [r7, #22]
 8102174:	3330      	adds	r3, #48	; 0x30
 8102176:	b2da      	uxtb	r2, r3
 8102178:	68bb      	ldr	r3, [r7, #8]
 810217a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 810217c:	68bb      	ldr	r3, [r7, #8]
 810217e:	3301      	adds	r3, #1
 8102180:	223a      	movs	r2, #58	; 0x3a
 8102182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8102184:	68bb      	ldr	r3, [r7, #8]
 8102186:	3302      	adds	r3, #2
 8102188:	222f      	movs	r2, #47	; 0x2f
 810218a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 810218c:	68bb      	ldr	r3, [r7, #8]
 810218e:	3303      	adds	r3, #3
 8102190:	2200      	movs	r2, #0
 8102192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8102194:	2300      	movs	r3, #0
 8102196:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8102198:	7dfb      	ldrb	r3, [r7, #23]
}
 810219a:	4618      	mov	r0, r3
 810219c:	371c      	adds	r7, #28
 810219e:	46bd      	mov	sp, r7
 81021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021a4:	4770      	bx	lr
 81021a6:	bf00      	nop
 81021a8:	10000040 	.word	0x10000040

081021ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 81021ac:	b580      	push	{r7, lr}
 81021ae:	b082      	sub	sp, #8
 81021b0:	af00      	add	r7, sp, #0
 81021b2:	6078      	str	r0, [r7, #4]
 81021b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 81021b6:	2200      	movs	r2, #0
 81021b8:	6839      	ldr	r1, [r7, #0]
 81021ba:	6878      	ldr	r0, [r7, #4]
 81021bc:	f7ff ffaa 	bl	8102114 <FATFS_LinkDriverEx>
 81021c0:	4603      	mov	r3, r0
}
 81021c2:	4618      	mov	r0, r3
 81021c4:	3708      	adds	r7, #8
 81021c6:	46bd      	mov	sp, r7
 81021c8:	bd80      	pop	{r7, pc}

081021ca <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81021ca:	b480      	push	{r7}
 81021cc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81021ce:	bf00      	nop
 81021d0:	46bd      	mov	sp, r7
 81021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021d6:	4770      	bx	lr

081021d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81021d8:	b480      	push	{r7}
 81021da:	b085      	sub	sp, #20
 81021dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81021de:	f3ef 8305 	mrs	r3, IPSR
 81021e2:	60bb      	str	r3, [r7, #8]
  return(result);
 81021e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81021e6:	2b00      	cmp	r3, #0
 81021e8:	d10f      	bne.n	810220a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81021ea:	f3ef 8310 	mrs	r3, PRIMASK
 81021ee:	607b      	str	r3, [r7, #4]
  return(result);
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d105      	bne.n	8102202 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81021f6:	f3ef 8311 	mrs	r3, BASEPRI
 81021fa:	603b      	str	r3, [r7, #0]
  return(result);
 81021fc:	683b      	ldr	r3, [r7, #0]
 81021fe:	2b00      	cmp	r3, #0
 8102200:	d007      	beq.n	8102212 <osKernelInitialize+0x3a>
 8102202:	4b0e      	ldr	r3, [pc, #56]	; (810223c <osKernelInitialize+0x64>)
 8102204:	681b      	ldr	r3, [r3, #0]
 8102206:	2b02      	cmp	r3, #2
 8102208:	d103      	bne.n	8102212 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 810220a:	f06f 0305 	mvn.w	r3, #5
 810220e:	60fb      	str	r3, [r7, #12]
 8102210:	e00c      	b.n	810222c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8102212:	4b0a      	ldr	r3, [pc, #40]	; (810223c <osKernelInitialize+0x64>)
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	2b00      	cmp	r3, #0
 8102218:	d105      	bne.n	8102226 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810221a:	4b08      	ldr	r3, [pc, #32]	; (810223c <osKernelInitialize+0x64>)
 810221c:	2201      	movs	r2, #1
 810221e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8102220:	2300      	movs	r3, #0
 8102222:	60fb      	str	r3, [r7, #12]
 8102224:	e002      	b.n	810222c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8102226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810222a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 810222c:	68fb      	ldr	r3, [r7, #12]
}
 810222e:	4618      	mov	r0, r3
 8102230:	3714      	adds	r7, #20
 8102232:	46bd      	mov	sp, r7
 8102234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102238:	4770      	bx	lr
 810223a:	bf00      	nop
 810223c:	1000004c 	.word	0x1000004c

08102240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8102240:	b580      	push	{r7, lr}
 8102242:	b084      	sub	sp, #16
 8102244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102246:	f3ef 8305 	mrs	r3, IPSR
 810224a:	60bb      	str	r3, [r7, #8]
  return(result);
 810224c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810224e:	2b00      	cmp	r3, #0
 8102250:	d10f      	bne.n	8102272 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8102252:	f3ef 8310 	mrs	r3, PRIMASK
 8102256:	607b      	str	r3, [r7, #4]
  return(result);
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	2b00      	cmp	r3, #0
 810225c:	d105      	bne.n	810226a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810225e:	f3ef 8311 	mrs	r3, BASEPRI
 8102262:	603b      	str	r3, [r7, #0]
  return(result);
 8102264:	683b      	ldr	r3, [r7, #0]
 8102266:	2b00      	cmp	r3, #0
 8102268:	d007      	beq.n	810227a <osKernelStart+0x3a>
 810226a:	4b0f      	ldr	r3, [pc, #60]	; (81022a8 <osKernelStart+0x68>)
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	2b02      	cmp	r3, #2
 8102270:	d103      	bne.n	810227a <osKernelStart+0x3a>
    stat = osErrorISR;
 8102272:	f06f 0305 	mvn.w	r3, #5
 8102276:	60fb      	str	r3, [r7, #12]
 8102278:	e010      	b.n	810229c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 810227a:	4b0b      	ldr	r3, [pc, #44]	; (81022a8 <osKernelStart+0x68>)
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	2b01      	cmp	r3, #1
 8102280:	d109      	bne.n	8102296 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8102282:	f7ff ffa2 	bl	81021ca <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8102286:	4b08      	ldr	r3, [pc, #32]	; (81022a8 <osKernelStart+0x68>)
 8102288:	2202      	movs	r2, #2
 810228a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810228c:	f001 fc86 	bl	8103b9c <vTaskStartScheduler>
      stat = osOK;
 8102290:	2300      	movs	r3, #0
 8102292:	60fb      	str	r3, [r7, #12]
 8102294:	e002      	b.n	810229c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8102296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810229a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 810229c:	68fb      	ldr	r3, [r7, #12]
}
 810229e:	4618      	mov	r0, r3
 81022a0:	3710      	adds	r7, #16
 81022a2:	46bd      	mov	sp, r7
 81022a4:	bd80      	pop	{r7, pc}
 81022a6:	bf00      	nop
 81022a8:	1000004c 	.word	0x1000004c

081022ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81022ac:	b580      	push	{r7, lr}
 81022ae:	b090      	sub	sp, #64	; 0x40
 81022b0:	af04      	add	r7, sp, #16
 81022b2:	60f8      	str	r0, [r7, #12]
 81022b4:	60b9      	str	r1, [r7, #8]
 81022b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81022b8:	2300      	movs	r3, #0
 81022ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81022bc:	f3ef 8305 	mrs	r3, IPSR
 81022c0:	61fb      	str	r3, [r7, #28]
  return(result);
 81022c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81022c4:	2b00      	cmp	r3, #0
 81022c6:	f040 808f 	bne.w	81023e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81022ca:	f3ef 8310 	mrs	r3, PRIMASK
 81022ce:	61bb      	str	r3, [r7, #24]
  return(result);
 81022d0:	69bb      	ldr	r3, [r7, #24]
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	d105      	bne.n	81022e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81022d6:	f3ef 8311 	mrs	r3, BASEPRI
 81022da:	617b      	str	r3, [r7, #20]
  return(result);
 81022dc:	697b      	ldr	r3, [r7, #20]
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d003      	beq.n	81022ea <osThreadNew+0x3e>
 81022e2:	4b44      	ldr	r3, [pc, #272]	; (81023f4 <osThreadNew+0x148>)
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	2b02      	cmp	r3, #2
 81022e8:	d07e      	beq.n	81023e8 <osThreadNew+0x13c>
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d07b      	beq.n	81023e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 81022f0:	2380      	movs	r3, #128	; 0x80
 81022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 81022f4:	2318      	movs	r3, #24
 81022f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 81022f8:	2300      	movs	r3, #0
 81022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 81022fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8102300:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	2b00      	cmp	r3, #0
 8102306:	d045      	beq.n	8102394 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	2b00      	cmp	r3, #0
 810230e:	d002      	beq.n	8102316 <osThreadNew+0x6a>
        name = attr->name;
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	699b      	ldr	r3, [r3, #24]
 810231a:	2b00      	cmp	r3, #0
 810231c:	d002      	beq.n	8102324 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	699b      	ldr	r3, [r3, #24]
 8102322:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8102324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102326:	2b00      	cmp	r3, #0
 8102328:	d008      	beq.n	810233c <osThreadNew+0x90>
 810232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810232c:	2b38      	cmp	r3, #56	; 0x38
 810232e:	d805      	bhi.n	810233c <osThreadNew+0x90>
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	685b      	ldr	r3, [r3, #4]
 8102334:	f003 0301 	and.w	r3, r3, #1
 8102338:	2b00      	cmp	r3, #0
 810233a:	d001      	beq.n	8102340 <osThreadNew+0x94>
        return (NULL);
 810233c:	2300      	movs	r3, #0
 810233e:	e054      	b.n	81023ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	695b      	ldr	r3, [r3, #20]
 8102344:	2b00      	cmp	r3, #0
 8102346:	d003      	beq.n	8102350 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	695b      	ldr	r3, [r3, #20]
 810234c:	089b      	lsrs	r3, r3, #2
 810234e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	689b      	ldr	r3, [r3, #8]
 8102354:	2b00      	cmp	r3, #0
 8102356:	d00e      	beq.n	8102376 <osThreadNew+0xca>
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	68db      	ldr	r3, [r3, #12]
 810235c:	2b5b      	cmp	r3, #91	; 0x5b
 810235e:	d90a      	bls.n	8102376 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102364:	2b00      	cmp	r3, #0
 8102366:	d006      	beq.n	8102376 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	695b      	ldr	r3, [r3, #20]
 810236c:	2b00      	cmp	r3, #0
 810236e:	d002      	beq.n	8102376 <osThreadNew+0xca>
        mem = 1;
 8102370:	2301      	movs	r3, #1
 8102372:	623b      	str	r3, [r7, #32]
 8102374:	e010      	b.n	8102398 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	689b      	ldr	r3, [r3, #8]
 810237a:	2b00      	cmp	r3, #0
 810237c:	d10c      	bne.n	8102398 <osThreadNew+0xec>
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	68db      	ldr	r3, [r3, #12]
 8102382:	2b00      	cmp	r3, #0
 8102384:	d108      	bne.n	8102398 <osThreadNew+0xec>
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	691b      	ldr	r3, [r3, #16]
 810238a:	2b00      	cmp	r3, #0
 810238c:	d104      	bne.n	8102398 <osThreadNew+0xec>
          mem = 0;
 810238e:	2300      	movs	r3, #0
 8102390:	623b      	str	r3, [r7, #32]
 8102392:	e001      	b.n	8102398 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8102394:	2300      	movs	r3, #0
 8102396:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8102398:	6a3b      	ldr	r3, [r7, #32]
 810239a:	2b01      	cmp	r3, #1
 810239c:	d110      	bne.n	81023c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 81023a2:	687a      	ldr	r2, [r7, #4]
 81023a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81023a6:	9202      	str	r2, [sp, #8]
 81023a8:	9301      	str	r3, [sp, #4]
 81023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023ac:	9300      	str	r3, [sp, #0]
 81023ae:	68bb      	ldr	r3, [r7, #8]
 81023b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81023b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81023b4:	68f8      	ldr	r0, [r7, #12]
 81023b6:	f001 fa1f 	bl	81037f8 <xTaskCreateStatic>
 81023ba:	4603      	mov	r3, r0
 81023bc:	613b      	str	r3, [r7, #16]
 81023be:	e013      	b.n	81023e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81023c0:	6a3b      	ldr	r3, [r7, #32]
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d110      	bne.n	81023e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81023c8:	b29a      	uxth	r2, r3
 81023ca:	f107 0310 	add.w	r3, r7, #16
 81023ce:	9301      	str	r3, [sp, #4]
 81023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81023d2:	9300      	str	r3, [sp, #0]
 81023d4:	68bb      	ldr	r3, [r7, #8]
 81023d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81023d8:	68f8      	ldr	r0, [r7, #12]
 81023da:	f001 fa67 	bl	81038ac <xTaskCreate>
 81023de:	4603      	mov	r3, r0
 81023e0:	2b01      	cmp	r3, #1
 81023e2:	d001      	beq.n	81023e8 <osThreadNew+0x13c>
          hTask = NULL;
 81023e4:	2300      	movs	r3, #0
 81023e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81023e8:	693b      	ldr	r3, [r7, #16]
}
 81023ea:	4618      	mov	r0, r3
 81023ec:	3730      	adds	r7, #48	; 0x30
 81023ee:	46bd      	mov	sp, r7
 81023f0:	bd80      	pop	{r7, pc}
 81023f2:	bf00      	nop
 81023f4:	1000004c 	.word	0x1000004c

081023f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 81023f8:	b580      	push	{r7, lr}
 81023fa:	b086      	sub	sp, #24
 81023fc:	af00      	add	r7, sp, #0
 81023fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102400:	f3ef 8305 	mrs	r3, IPSR
 8102404:	613b      	str	r3, [r7, #16]
  return(result);
 8102406:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102408:	2b00      	cmp	r3, #0
 810240a:	d10f      	bne.n	810242c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810240c:	f3ef 8310 	mrs	r3, PRIMASK
 8102410:	60fb      	str	r3, [r7, #12]
  return(result);
 8102412:	68fb      	ldr	r3, [r7, #12]
 8102414:	2b00      	cmp	r3, #0
 8102416:	d105      	bne.n	8102424 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8102418:	f3ef 8311 	mrs	r3, BASEPRI
 810241c:	60bb      	str	r3, [r7, #8]
  return(result);
 810241e:	68bb      	ldr	r3, [r7, #8]
 8102420:	2b00      	cmp	r3, #0
 8102422:	d007      	beq.n	8102434 <osDelay+0x3c>
 8102424:	4b0a      	ldr	r3, [pc, #40]	; (8102450 <osDelay+0x58>)
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	2b02      	cmp	r3, #2
 810242a:	d103      	bne.n	8102434 <osDelay+0x3c>
    stat = osErrorISR;
 810242c:	f06f 0305 	mvn.w	r3, #5
 8102430:	617b      	str	r3, [r7, #20]
 8102432:	e007      	b.n	8102444 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8102434:	2300      	movs	r3, #0
 8102436:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	2b00      	cmp	r3, #0
 810243c:	d002      	beq.n	8102444 <osDelay+0x4c>
      vTaskDelay(ticks);
 810243e:	6878      	ldr	r0, [r7, #4]
 8102440:	f001 fb78 	bl	8103b34 <vTaskDelay>
    }
  }

  return (stat);
 8102444:	697b      	ldr	r3, [r7, #20]
}
 8102446:	4618      	mov	r0, r3
 8102448:	3718      	adds	r7, #24
 810244a:	46bd      	mov	sp, r7
 810244c:	bd80      	pop	{r7, pc}
 810244e:	bf00      	nop
 8102450:	1000004c 	.word	0x1000004c

08102454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8102454:	b480      	push	{r7}
 8102456:	b085      	sub	sp, #20
 8102458:	af00      	add	r7, sp, #0
 810245a:	60f8      	str	r0, [r7, #12]
 810245c:	60b9      	str	r1, [r7, #8]
 810245e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8102460:	68fb      	ldr	r3, [r7, #12]
 8102462:	4a07      	ldr	r2, [pc, #28]	; (8102480 <vApplicationGetIdleTaskMemory+0x2c>)
 8102464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8102466:	68bb      	ldr	r3, [r7, #8]
 8102468:	4a06      	ldr	r2, [pc, #24]	; (8102484 <vApplicationGetIdleTaskMemory+0x30>)
 810246a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	2280      	movs	r2, #128	; 0x80
 8102470:	601a      	str	r2, [r3, #0]
}
 8102472:	bf00      	nop
 8102474:	3714      	adds	r7, #20
 8102476:	46bd      	mov	sp, r7
 8102478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810247c:	4770      	bx	lr
 810247e:	bf00      	nop
 8102480:	10000050 	.word	0x10000050
 8102484:	100000ac 	.word	0x100000ac

08102488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8102488:	b480      	push	{r7}
 810248a:	b085      	sub	sp, #20
 810248c:	af00      	add	r7, sp, #0
 810248e:	60f8      	str	r0, [r7, #12]
 8102490:	60b9      	str	r1, [r7, #8]
 8102492:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	4a07      	ldr	r2, [pc, #28]	; (81024b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8102498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810249a:	68bb      	ldr	r3, [r7, #8]
 810249c:	4a06      	ldr	r2, [pc, #24]	; (81024b8 <vApplicationGetTimerTaskMemory+0x30>)
 810249e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81024a6:	601a      	str	r2, [r3, #0]
}
 81024a8:	bf00      	nop
 81024aa:	3714      	adds	r7, #20
 81024ac:	46bd      	mov	sp, r7
 81024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024b2:	4770      	bx	lr
 81024b4:	100002ac 	.word	0x100002ac
 81024b8:	10000308 	.word	0x10000308

081024bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81024bc:	b580      	push	{r7, lr}
 81024be:	b08a      	sub	sp, #40	; 0x28
 81024c0:	af00      	add	r7, sp, #0
 81024c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81024c4:	2300      	movs	r3, #0
 81024c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81024c8:	f001 fbcc 	bl	8103c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81024cc:	4b57      	ldr	r3, [pc, #348]	; (810262c <pvPortMalloc+0x170>)
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d101      	bne.n	81024d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81024d4:	f000 f90c 	bl	81026f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81024d8:	4b55      	ldr	r3, [pc, #340]	; (8102630 <pvPortMalloc+0x174>)
 81024da:	681a      	ldr	r2, [r3, #0]
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	4013      	ands	r3, r2
 81024e0:	2b00      	cmp	r3, #0
 81024e2:	f040 808c 	bne.w	81025fe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	2b00      	cmp	r3, #0
 81024ea:	d01c      	beq.n	8102526 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 81024ec:	2208      	movs	r2, #8
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	4413      	add	r3, r2
 81024f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	f003 0307 	and.w	r3, r3, #7
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	d013      	beq.n	8102526 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	f023 0307 	bic.w	r3, r3, #7
 8102504:	3308      	adds	r3, #8
 8102506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	f003 0307 	and.w	r3, r3, #7
 810250e:	2b00      	cmp	r3, #0
 8102510:	d009      	beq.n	8102526 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8102512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102516:	f383 8811 	msr	BASEPRI, r3
 810251a:	f3bf 8f6f 	isb	sy
 810251e:	f3bf 8f4f 	dsb	sy
 8102522:	617b      	str	r3, [r7, #20]
 8102524:	e7fe      	b.n	8102524 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	2b00      	cmp	r3, #0
 810252a:	d068      	beq.n	81025fe <pvPortMalloc+0x142>
 810252c:	4b41      	ldr	r3, [pc, #260]	; (8102634 <pvPortMalloc+0x178>)
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	687a      	ldr	r2, [r7, #4]
 8102532:	429a      	cmp	r2, r3
 8102534:	d863      	bhi.n	81025fe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8102536:	4b40      	ldr	r3, [pc, #256]	; (8102638 <pvPortMalloc+0x17c>)
 8102538:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810253a:	4b3f      	ldr	r3, [pc, #252]	; (8102638 <pvPortMalloc+0x17c>)
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102540:	e004      	b.n	810254c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8102542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102544:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8102546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810254e:	685b      	ldr	r3, [r3, #4]
 8102550:	687a      	ldr	r2, [r7, #4]
 8102552:	429a      	cmp	r2, r3
 8102554:	d903      	bls.n	810255e <pvPortMalloc+0xa2>
 8102556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	2b00      	cmp	r3, #0
 810255c:	d1f1      	bne.n	8102542 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810255e:	4b33      	ldr	r3, [pc, #204]	; (810262c <pvPortMalloc+0x170>)
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102564:	429a      	cmp	r2, r3
 8102566:	d04a      	beq.n	81025fe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8102568:	6a3b      	ldr	r3, [r7, #32]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	2208      	movs	r2, #8
 810256e:	4413      	add	r3, r2
 8102570:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8102572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102574:	681a      	ldr	r2, [r3, #0]
 8102576:	6a3b      	ldr	r3, [r7, #32]
 8102578:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810257c:	685a      	ldr	r2, [r3, #4]
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	1ad2      	subs	r2, r2, r3
 8102582:	2308      	movs	r3, #8
 8102584:	005b      	lsls	r3, r3, #1
 8102586:	429a      	cmp	r2, r3
 8102588:	d91e      	bls.n	81025c8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	4413      	add	r3, r2
 8102590:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102592:	69bb      	ldr	r3, [r7, #24]
 8102594:	f003 0307 	and.w	r3, r3, #7
 8102598:	2b00      	cmp	r3, #0
 810259a:	d009      	beq.n	81025b0 <pvPortMalloc+0xf4>
 810259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025a0:	f383 8811 	msr	BASEPRI, r3
 81025a4:	f3bf 8f6f 	isb	sy
 81025a8:	f3bf 8f4f 	dsb	sy
 81025ac:	613b      	str	r3, [r7, #16]
 81025ae:	e7fe      	b.n	81025ae <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025b2:	685a      	ldr	r2, [r3, #4]
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	1ad2      	subs	r2, r2, r3
 81025b8:	69bb      	ldr	r3, [r7, #24]
 81025ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025be:	687a      	ldr	r2, [r7, #4]
 81025c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81025c2:	69b8      	ldr	r0, [r7, #24]
 81025c4:	f000 f8f6 	bl	81027b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81025c8:	4b1a      	ldr	r3, [pc, #104]	; (8102634 <pvPortMalloc+0x178>)
 81025ca:	681a      	ldr	r2, [r3, #0]
 81025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025ce:	685b      	ldr	r3, [r3, #4]
 81025d0:	1ad3      	subs	r3, r2, r3
 81025d2:	4a18      	ldr	r2, [pc, #96]	; (8102634 <pvPortMalloc+0x178>)
 81025d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81025d6:	4b17      	ldr	r3, [pc, #92]	; (8102634 <pvPortMalloc+0x178>)
 81025d8:	681a      	ldr	r2, [r3, #0]
 81025da:	4b18      	ldr	r3, [pc, #96]	; (810263c <pvPortMalloc+0x180>)
 81025dc:	681b      	ldr	r3, [r3, #0]
 81025de:	429a      	cmp	r2, r3
 81025e0:	d203      	bcs.n	81025ea <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81025e2:	4b14      	ldr	r3, [pc, #80]	; (8102634 <pvPortMalloc+0x178>)
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	4a15      	ldr	r2, [pc, #84]	; (810263c <pvPortMalloc+0x180>)
 81025e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025ec:	685a      	ldr	r2, [r3, #4]
 81025ee:	4b10      	ldr	r3, [pc, #64]	; (8102630 <pvPortMalloc+0x174>)
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	431a      	orrs	r2, r3
 81025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025fa:	2200      	movs	r2, #0
 81025fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81025fe:	f001 fb3f 	bl	8103c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8102602:	69fb      	ldr	r3, [r7, #28]
 8102604:	f003 0307 	and.w	r3, r3, #7
 8102608:	2b00      	cmp	r3, #0
 810260a:	d009      	beq.n	8102620 <pvPortMalloc+0x164>
 810260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102610:	f383 8811 	msr	BASEPRI, r3
 8102614:	f3bf 8f6f 	isb	sy
 8102618:	f3bf 8f4f 	dsb	sy
 810261c:	60fb      	str	r3, [r7, #12]
 810261e:	e7fe      	b.n	810261e <pvPortMalloc+0x162>
	return pvReturn;
 8102620:	69fb      	ldr	r3, [r7, #28]
}
 8102622:	4618      	mov	r0, r3
 8102624:	3728      	adds	r7, #40	; 0x28
 8102626:	46bd      	mov	sp, r7
 8102628:	bd80      	pop	{r7, pc}
 810262a:	bf00      	nop
 810262c:	10004310 	.word	0x10004310
 8102630:	1000431c 	.word	0x1000431c
 8102634:	10004314 	.word	0x10004314
 8102638:	10004308 	.word	0x10004308
 810263c:	10004318 	.word	0x10004318

08102640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8102640:	b580      	push	{r7, lr}
 8102642:	b086      	sub	sp, #24
 8102644:	af00      	add	r7, sp, #0
 8102646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	2b00      	cmp	r3, #0
 8102650:	d046      	beq.n	81026e0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8102652:	2308      	movs	r3, #8
 8102654:	425b      	negs	r3, r3
 8102656:	697a      	ldr	r2, [r7, #20]
 8102658:	4413      	add	r3, r2
 810265a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810265c:	697b      	ldr	r3, [r7, #20]
 810265e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8102660:	693b      	ldr	r3, [r7, #16]
 8102662:	685a      	ldr	r2, [r3, #4]
 8102664:	4b20      	ldr	r3, [pc, #128]	; (81026e8 <vPortFree+0xa8>)
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	4013      	ands	r3, r2
 810266a:	2b00      	cmp	r3, #0
 810266c:	d109      	bne.n	8102682 <vPortFree+0x42>
 810266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102672:	f383 8811 	msr	BASEPRI, r3
 8102676:	f3bf 8f6f 	isb	sy
 810267a:	f3bf 8f4f 	dsb	sy
 810267e:	60fb      	str	r3, [r7, #12]
 8102680:	e7fe      	b.n	8102680 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8102682:	693b      	ldr	r3, [r7, #16]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	2b00      	cmp	r3, #0
 8102688:	d009      	beq.n	810269e <vPortFree+0x5e>
 810268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810268e:	f383 8811 	msr	BASEPRI, r3
 8102692:	f3bf 8f6f 	isb	sy
 8102696:	f3bf 8f4f 	dsb	sy
 810269a:	60bb      	str	r3, [r7, #8]
 810269c:	e7fe      	b.n	810269c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810269e:	693b      	ldr	r3, [r7, #16]
 81026a0:	685a      	ldr	r2, [r3, #4]
 81026a2:	4b11      	ldr	r3, [pc, #68]	; (81026e8 <vPortFree+0xa8>)
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	4013      	ands	r3, r2
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d019      	beq.n	81026e0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81026ac:	693b      	ldr	r3, [r7, #16]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d115      	bne.n	81026e0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81026b4:	693b      	ldr	r3, [r7, #16]
 81026b6:	685a      	ldr	r2, [r3, #4]
 81026b8:	4b0b      	ldr	r3, [pc, #44]	; (81026e8 <vPortFree+0xa8>)
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	43db      	mvns	r3, r3
 81026be:	401a      	ands	r2, r3
 81026c0:	693b      	ldr	r3, [r7, #16]
 81026c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81026c4:	f001 face 	bl	8103c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81026c8:	693b      	ldr	r3, [r7, #16]
 81026ca:	685a      	ldr	r2, [r3, #4]
 81026cc:	4b07      	ldr	r3, [pc, #28]	; (81026ec <vPortFree+0xac>)
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	4413      	add	r3, r2
 81026d2:	4a06      	ldr	r2, [pc, #24]	; (81026ec <vPortFree+0xac>)
 81026d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81026d6:	6938      	ldr	r0, [r7, #16]
 81026d8:	f000 f86c 	bl	81027b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 81026dc:	f001 fad0 	bl	8103c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81026e0:	bf00      	nop
 81026e2:	3718      	adds	r7, #24
 81026e4:	46bd      	mov	sp, r7
 81026e6:	bd80      	pop	{r7, pc}
 81026e8:	1000431c 	.word	0x1000431c
 81026ec:	10004314 	.word	0x10004314

081026f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81026f0:	b480      	push	{r7}
 81026f2:	b085      	sub	sp, #20
 81026f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81026f6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81026fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81026fc:	4b27      	ldr	r3, [pc, #156]	; (810279c <prvHeapInit+0xac>)
 81026fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	f003 0307 	and.w	r3, r3, #7
 8102706:	2b00      	cmp	r3, #0
 8102708:	d00c      	beq.n	8102724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810270a:	68fb      	ldr	r3, [r7, #12]
 810270c:	3307      	adds	r3, #7
 810270e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	f023 0307 	bic.w	r3, r3, #7
 8102716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8102718:	68ba      	ldr	r2, [r7, #8]
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	1ad3      	subs	r3, r2, r3
 810271e:	4a1f      	ldr	r2, [pc, #124]	; (810279c <prvHeapInit+0xac>)
 8102720:	4413      	add	r3, r2
 8102722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8102728:	4a1d      	ldr	r2, [pc, #116]	; (81027a0 <prvHeapInit+0xb0>)
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810272e:	4b1c      	ldr	r3, [pc, #112]	; (81027a0 <prvHeapInit+0xb0>)
 8102730:	2200      	movs	r2, #0
 8102732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	68ba      	ldr	r2, [r7, #8]
 8102738:	4413      	add	r3, r2
 810273a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810273c:	2208      	movs	r2, #8
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	1a9b      	subs	r3, r3, r2
 8102742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102744:	68fb      	ldr	r3, [r7, #12]
 8102746:	f023 0307 	bic.w	r3, r3, #7
 810274a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	4a15      	ldr	r2, [pc, #84]	; (81027a4 <prvHeapInit+0xb4>)
 8102750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8102752:	4b14      	ldr	r3, [pc, #80]	; (81027a4 <prvHeapInit+0xb4>)
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	2200      	movs	r2, #0
 8102758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810275a:	4b12      	ldr	r3, [pc, #72]	; (81027a4 <prvHeapInit+0xb4>)
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	2200      	movs	r2, #0
 8102760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8102766:	683b      	ldr	r3, [r7, #0]
 8102768:	68fa      	ldr	r2, [r7, #12]
 810276a:	1ad2      	subs	r2, r2, r3
 810276c:	683b      	ldr	r3, [r7, #0]
 810276e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8102770:	4b0c      	ldr	r3, [pc, #48]	; (81027a4 <prvHeapInit+0xb4>)
 8102772:	681a      	ldr	r2, [r3, #0]
 8102774:	683b      	ldr	r3, [r7, #0]
 8102776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8102778:	683b      	ldr	r3, [r7, #0]
 810277a:	685b      	ldr	r3, [r3, #4]
 810277c:	4a0a      	ldr	r2, [pc, #40]	; (81027a8 <prvHeapInit+0xb8>)
 810277e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8102780:	683b      	ldr	r3, [r7, #0]
 8102782:	685b      	ldr	r3, [r3, #4]
 8102784:	4a09      	ldr	r2, [pc, #36]	; (81027ac <prvHeapInit+0xbc>)
 8102786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8102788:	4b09      	ldr	r3, [pc, #36]	; (81027b0 <prvHeapInit+0xc0>)
 810278a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810278e:	601a      	str	r2, [r3, #0]
}
 8102790:	bf00      	nop
 8102792:	3714      	adds	r7, #20
 8102794:	46bd      	mov	sp, r7
 8102796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810279a:	4770      	bx	lr
 810279c:	10000708 	.word	0x10000708
 81027a0:	10004308 	.word	0x10004308
 81027a4:	10004310 	.word	0x10004310
 81027a8:	10004318 	.word	0x10004318
 81027ac:	10004314 	.word	0x10004314
 81027b0:	1000431c 	.word	0x1000431c

081027b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81027b4:	b480      	push	{r7}
 81027b6:	b085      	sub	sp, #20
 81027b8:	af00      	add	r7, sp, #0
 81027ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81027bc:	4b28      	ldr	r3, [pc, #160]	; (8102860 <prvInsertBlockIntoFreeList+0xac>)
 81027be:	60fb      	str	r3, [r7, #12]
 81027c0:	e002      	b.n	81027c8 <prvInsertBlockIntoFreeList+0x14>
 81027c2:	68fb      	ldr	r3, [r7, #12]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	60fb      	str	r3, [r7, #12]
 81027c8:	68fb      	ldr	r3, [r7, #12]
 81027ca:	681b      	ldr	r3, [r3, #0]
 81027cc:	687a      	ldr	r2, [r7, #4]
 81027ce:	429a      	cmp	r2, r3
 81027d0:	d8f7      	bhi.n	81027c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81027d2:	68fb      	ldr	r3, [r7, #12]
 81027d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	685b      	ldr	r3, [r3, #4]
 81027da:	68ba      	ldr	r2, [r7, #8]
 81027dc:	4413      	add	r3, r2
 81027de:	687a      	ldr	r2, [r7, #4]
 81027e0:	429a      	cmp	r2, r3
 81027e2:	d108      	bne.n	81027f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81027e4:	68fb      	ldr	r3, [r7, #12]
 81027e6:	685a      	ldr	r2, [r3, #4]
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	685b      	ldr	r3, [r3, #4]
 81027ec:	441a      	add	r2, r3
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81027f2:	68fb      	ldr	r3, [r7, #12]
 81027f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	685b      	ldr	r3, [r3, #4]
 81027fe:	68ba      	ldr	r2, [r7, #8]
 8102800:	441a      	add	r2, r3
 8102802:	68fb      	ldr	r3, [r7, #12]
 8102804:	681b      	ldr	r3, [r3, #0]
 8102806:	429a      	cmp	r2, r3
 8102808:	d118      	bne.n	810283c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	681a      	ldr	r2, [r3, #0]
 810280e:	4b15      	ldr	r3, [pc, #84]	; (8102864 <prvInsertBlockIntoFreeList+0xb0>)
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	429a      	cmp	r2, r3
 8102814:	d00d      	beq.n	8102832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	685a      	ldr	r2, [r3, #4]
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	685b      	ldr	r3, [r3, #4]
 8102820:	441a      	add	r2, r3
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	681a      	ldr	r2, [r3, #0]
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	601a      	str	r2, [r3, #0]
 8102830:	e008      	b.n	8102844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8102832:	4b0c      	ldr	r3, [pc, #48]	; (8102864 <prvInsertBlockIntoFreeList+0xb0>)
 8102834:	681a      	ldr	r2, [r3, #0]
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	601a      	str	r2, [r3, #0]
 810283a:	e003      	b.n	8102844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	681a      	ldr	r2, [r3, #0]
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8102844:	68fa      	ldr	r2, [r7, #12]
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	429a      	cmp	r2, r3
 810284a:	d002      	beq.n	8102852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810284c:	68fb      	ldr	r3, [r7, #12]
 810284e:	687a      	ldr	r2, [r7, #4]
 8102850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102852:	bf00      	nop
 8102854:	3714      	adds	r7, #20
 8102856:	46bd      	mov	sp, r7
 8102858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810285c:	4770      	bx	lr
 810285e:	bf00      	nop
 8102860:	10004308 	.word	0x10004308
 8102864:	10004310 	.word	0x10004310

08102868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8102868:	b480      	push	{r7}
 810286a:	b083      	sub	sp, #12
 810286c:	af00      	add	r7, sp, #0
 810286e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	f103 0208 	add.w	r2, r3, #8
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	f103 0208 	add.w	r2, r3, #8
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	f103 0208 	add.w	r2, r3, #8
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	2200      	movs	r2, #0
 810289a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810289c:	bf00      	nop
 810289e:	370c      	adds	r7, #12
 81028a0:	46bd      	mov	sp, r7
 81028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028a6:	4770      	bx	lr

081028a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81028a8:	b480      	push	{r7}
 81028aa:	b083      	sub	sp, #12
 81028ac:	af00      	add	r7, sp, #0
 81028ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	2200      	movs	r2, #0
 81028b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81028b6:	bf00      	nop
 81028b8:	370c      	adds	r7, #12
 81028ba:	46bd      	mov	sp, r7
 81028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c0:	4770      	bx	lr

081028c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81028c2:	b480      	push	{r7}
 81028c4:	b085      	sub	sp, #20
 81028c6:	af00      	add	r7, sp, #0
 81028c8:	6078      	str	r0, [r7, #4]
 81028ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	685b      	ldr	r3, [r3, #4]
 81028d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81028d2:	683b      	ldr	r3, [r7, #0]
 81028d4:	68fa      	ldr	r2, [r7, #12]
 81028d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	689a      	ldr	r2, [r3, #8]
 81028dc:	683b      	ldr	r3, [r7, #0]
 81028de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81028e0:	68fb      	ldr	r3, [r7, #12]
 81028e2:	689b      	ldr	r3, [r3, #8]
 81028e4:	683a      	ldr	r2, [r7, #0]
 81028e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81028e8:	68fb      	ldr	r3, [r7, #12]
 81028ea:	683a      	ldr	r2, [r7, #0]
 81028ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81028ee:	683b      	ldr	r3, [r7, #0]
 81028f0:	687a      	ldr	r2, [r7, #4]
 81028f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	1c5a      	adds	r2, r3, #1
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	601a      	str	r2, [r3, #0]
}
 81028fe:	bf00      	nop
 8102900:	3714      	adds	r7, #20
 8102902:	46bd      	mov	sp, r7
 8102904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102908:	4770      	bx	lr

0810290a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810290a:	b480      	push	{r7}
 810290c:	b085      	sub	sp, #20
 810290e:	af00      	add	r7, sp, #0
 8102910:	6078      	str	r0, [r7, #4]
 8102912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8102914:	683b      	ldr	r3, [r7, #0]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810291a:	68bb      	ldr	r3, [r7, #8]
 810291c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102920:	d103      	bne.n	810292a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	691b      	ldr	r3, [r3, #16]
 8102926:	60fb      	str	r3, [r7, #12]
 8102928:	e00c      	b.n	8102944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	3308      	adds	r3, #8
 810292e:	60fb      	str	r3, [r7, #12]
 8102930:	e002      	b.n	8102938 <vListInsert+0x2e>
 8102932:	68fb      	ldr	r3, [r7, #12]
 8102934:	685b      	ldr	r3, [r3, #4]
 8102936:	60fb      	str	r3, [r7, #12]
 8102938:	68fb      	ldr	r3, [r7, #12]
 810293a:	685b      	ldr	r3, [r3, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	68ba      	ldr	r2, [r7, #8]
 8102940:	429a      	cmp	r2, r3
 8102942:	d2f6      	bcs.n	8102932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8102944:	68fb      	ldr	r3, [r7, #12]
 8102946:	685a      	ldr	r2, [r3, #4]
 8102948:	683b      	ldr	r3, [r7, #0]
 810294a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810294c:	683b      	ldr	r3, [r7, #0]
 810294e:	685b      	ldr	r3, [r3, #4]
 8102950:	683a      	ldr	r2, [r7, #0]
 8102952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8102954:	683b      	ldr	r3, [r7, #0]
 8102956:	68fa      	ldr	r2, [r7, #12]
 8102958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810295a:	68fb      	ldr	r3, [r7, #12]
 810295c:	683a      	ldr	r2, [r7, #0]
 810295e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8102960:	683b      	ldr	r3, [r7, #0]
 8102962:	687a      	ldr	r2, [r7, #4]
 8102964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	1c5a      	adds	r2, r3, #1
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	601a      	str	r2, [r3, #0]
}
 8102970:	bf00      	nop
 8102972:	3714      	adds	r7, #20
 8102974:	46bd      	mov	sp, r7
 8102976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810297a:	4770      	bx	lr

0810297c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810297c:	b480      	push	{r7}
 810297e:	b085      	sub	sp, #20
 8102980:	af00      	add	r7, sp, #0
 8102982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	691b      	ldr	r3, [r3, #16]
 8102988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	685b      	ldr	r3, [r3, #4]
 810298e:	687a      	ldr	r2, [r7, #4]
 8102990:	6892      	ldr	r2, [r2, #8]
 8102992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	689b      	ldr	r3, [r3, #8]
 8102998:	687a      	ldr	r2, [r7, #4]
 810299a:	6852      	ldr	r2, [r2, #4]
 810299c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810299e:	68fb      	ldr	r3, [r7, #12]
 81029a0:	685b      	ldr	r3, [r3, #4]
 81029a2:	687a      	ldr	r2, [r7, #4]
 81029a4:	429a      	cmp	r2, r3
 81029a6:	d103      	bne.n	81029b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	689a      	ldr	r2, [r3, #8]
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	2200      	movs	r2, #0
 81029b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	1e5a      	subs	r2, r3, #1
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81029c0:	68fb      	ldr	r3, [r7, #12]
 81029c2:	681b      	ldr	r3, [r3, #0]
}
 81029c4:	4618      	mov	r0, r3
 81029c6:	3714      	adds	r7, #20
 81029c8:	46bd      	mov	sp, r7
 81029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ce:	4770      	bx	lr

081029d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81029d0:	b480      	push	{r7}
 81029d2:	b085      	sub	sp, #20
 81029d4:	af00      	add	r7, sp, #0
 81029d6:	60f8      	str	r0, [r7, #12]
 81029d8:	60b9      	str	r1, [r7, #8]
 81029da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81029dc:	68fb      	ldr	r3, [r7, #12]
 81029de:	3b04      	subs	r3, #4
 81029e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81029e2:	68fb      	ldr	r3, [r7, #12]
 81029e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81029e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	3b04      	subs	r3, #4
 81029ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81029f0:	68bb      	ldr	r3, [r7, #8]
 81029f2:	f023 0201 	bic.w	r2, r3, #1
 81029f6:	68fb      	ldr	r3, [r7, #12]
 81029f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81029fa:	68fb      	ldr	r3, [r7, #12]
 81029fc:	3b04      	subs	r3, #4
 81029fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8102a00:	4a0c      	ldr	r2, [pc, #48]	; (8102a34 <pxPortInitialiseStack+0x64>)
 8102a02:	68fb      	ldr	r3, [r7, #12]
 8102a04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8102a06:	68fb      	ldr	r3, [r7, #12]
 8102a08:	3b14      	subs	r3, #20
 8102a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8102a0c:	687a      	ldr	r2, [r7, #4]
 8102a0e:	68fb      	ldr	r3, [r7, #12]
 8102a10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8102a12:	68fb      	ldr	r3, [r7, #12]
 8102a14:	3b04      	subs	r3, #4
 8102a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8102a18:	68fb      	ldr	r3, [r7, #12]
 8102a1a:	f06f 0202 	mvn.w	r2, #2
 8102a1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8102a20:	68fb      	ldr	r3, [r7, #12]
 8102a22:	3b20      	subs	r3, #32
 8102a24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8102a26:	68fb      	ldr	r3, [r7, #12]
}
 8102a28:	4618      	mov	r0, r3
 8102a2a:	3714      	adds	r7, #20
 8102a2c:	46bd      	mov	sp, r7
 8102a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a32:	4770      	bx	lr
 8102a34:	08102a39 	.word	0x08102a39

08102a38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8102a38:	b480      	push	{r7}
 8102a3a:	b085      	sub	sp, #20
 8102a3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102a3e:	2300      	movs	r3, #0
 8102a40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102a42:	4b11      	ldr	r3, [pc, #68]	; (8102a88 <prvTaskExitError+0x50>)
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102a4a:	d009      	beq.n	8102a60 <prvTaskExitError+0x28>
 8102a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a50:	f383 8811 	msr	BASEPRI, r3
 8102a54:	f3bf 8f6f 	isb	sy
 8102a58:	f3bf 8f4f 	dsb	sy
 8102a5c:	60fb      	str	r3, [r7, #12]
 8102a5e:	e7fe      	b.n	8102a5e <prvTaskExitError+0x26>
 8102a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a64:	f383 8811 	msr	BASEPRI, r3
 8102a68:	f3bf 8f6f 	isb	sy
 8102a6c:	f3bf 8f4f 	dsb	sy
 8102a70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8102a72:	bf00      	nop
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	2b00      	cmp	r3, #0
 8102a78:	d0fc      	beq.n	8102a74 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8102a7a:	bf00      	nop
 8102a7c:	3714      	adds	r7, #20
 8102a7e:	46bd      	mov	sp, r7
 8102a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a84:	4770      	bx	lr
 8102a86:	bf00      	nop
 8102a88:	10000020 	.word	0x10000020
 8102a8c:	00000000 	.word	0x00000000

08102a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102a90:	4b07      	ldr	r3, [pc, #28]	; (8102ab0 <pxCurrentTCBConst2>)
 8102a92:	6819      	ldr	r1, [r3, #0]
 8102a94:	6808      	ldr	r0, [r1, #0]
 8102a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102a9a:	f380 8809 	msr	PSP, r0
 8102a9e:	f3bf 8f6f 	isb	sy
 8102aa2:	f04f 0000 	mov.w	r0, #0
 8102aa6:	f380 8811 	msr	BASEPRI, r0
 8102aaa:	4770      	bx	lr
 8102aac:	f3af 8000 	nop.w

08102ab0 <pxCurrentTCBConst2>:
 8102ab0:	10004328 	.word	0x10004328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8102ab4:	bf00      	nop
 8102ab6:	bf00      	nop

08102ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8102ab8:	4808      	ldr	r0, [pc, #32]	; (8102adc <prvPortStartFirstTask+0x24>)
 8102aba:	6800      	ldr	r0, [r0, #0]
 8102abc:	6800      	ldr	r0, [r0, #0]
 8102abe:	f380 8808 	msr	MSP, r0
 8102ac2:	f04f 0000 	mov.w	r0, #0
 8102ac6:	f380 8814 	msr	CONTROL, r0
 8102aca:	b662      	cpsie	i
 8102acc:	b661      	cpsie	f
 8102ace:	f3bf 8f4f 	dsb	sy
 8102ad2:	f3bf 8f6f 	isb	sy
 8102ad6:	df00      	svc	0
 8102ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8102ada:	bf00      	nop
 8102adc:	e000ed08 	.word	0xe000ed08

08102ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8102ae0:	b580      	push	{r7, lr}
 8102ae2:	b086      	sub	sp, #24
 8102ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8102ae6:	4b44      	ldr	r3, [pc, #272]	; (8102bf8 <xPortStartScheduler+0x118>)
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a44      	ldr	r2, [pc, #272]	; (8102bfc <xPortStartScheduler+0x11c>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	d109      	bne.n	8102b04 <xPortStartScheduler+0x24>
 8102af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102af4:	f383 8811 	msr	BASEPRI, r3
 8102af8:	f3bf 8f6f 	isb	sy
 8102afc:	f3bf 8f4f 	dsb	sy
 8102b00:	613b      	str	r3, [r7, #16]
 8102b02:	e7fe      	b.n	8102b02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8102b04:	4b3c      	ldr	r3, [pc, #240]	; (8102bf8 <xPortStartScheduler+0x118>)
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	4a3d      	ldr	r2, [pc, #244]	; (8102c00 <xPortStartScheduler+0x120>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d109      	bne.n	8102b22 <xPortStartScheduler+0x42>
 8102b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b12:	f383 8811 	msr	BASEPRI, r3
 8102b16:	f3bf 8f6f 	isb	sy
 8102b1a:	f3bf 8f4f 	dsb	sy
 8102b1e:	60fb      	str	r3, [r7, #12]
 8102b20:	e7fe      	b.n	8102b20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102b22:	4b38      	ldr	r3, [pc, #224]	; (8102c04 <xPortStartScheduler+0x124>)
 8102b24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8102b26:	697b      	ldr	r3, [r7, #20]
 8102b28:	781b      	ldrb	r3, [r3, #0]
 8102b2a:	b2db      	uxtb	r3, r3
 8102b2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102b2e:	697b      	ldr	r3, [r7, #20]
 8102b30:	22ff      	movs	r2, #255	; 0xff
 8102b32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102b34:	697b      	ldr	r3, [r7, #20]
 8102b36:	781b      	ldrb	r3, [r3, #0]
 8102b38:	b2db      	uxtb	r3, r3
 8102b3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102b3c:	78fb      	ldrb	r3, [r7, #3]
 8102b3e:	b2db      	uxtb	r3, r3
 8102b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102b44:	b2da      	uxtb	r2, r3
 8102b46:	4b30      	ldr	r3, [pc, #192]	; (8102c08 <xPortStartScheduler+0x128>)
 8102b48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8102b4a:	4b30      	ldr	r3, [pc, #192]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b4c:	2207      	movs	r2, #7
 8102b4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102b50:	e009      	b.n	8102b66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8102b52:	4b2e      	ldr	r3, [pc, #184]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	3b01      	subs	r3, #1
 8102b58:	4a2c      	ldr	r2, [pc, #176]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8102b5c:	78fb      	ldrb	r3, [r7, #3]
 8102b5e:	b2db      	uxtb	r3, r3
 8102b60:	005b      	lsls	r3, r3, #1
 8102b62:	b2db      	uxtb	r3, r3
 8102b64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102b66:	78fb      	ldrb	r3, [r7, #3]
 8102b68:	b2db      	uxtb	r3, r3
 8102b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102b6e:	2b80      	cmp	r3, #128	; 0x80
 8102b70:	d0ef      	beq.n	8102b52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8102b72:	4b26      	ldr	r3, [pc, #152]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	f1c3 0307 	rsb	r3, r3, #7
 8102b7a:	2b04      	cmp	r3, #4
 8102b7c:	d009      	beq.n	8102b92 <xPortStartScheduler+0xb2>
 8102b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b82:	f383 8811 	msr	BASEPRI, r3
 8102b86:	f3bf 8f6f 	isb	sy
 8102b8a:	f3bf 8f4f 	dsb	sy
 8102b8e:	60bb      	str	r3, [r7, #8]
 8102b90:	e7fe      	b.n	8102b90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8102b92:	4b1e      	ldr	r3, [pc, #120]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	021b      	lsls	r3, r3, #8
 8102b98:	4a1c      	ldr	r2, [pc, #112]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8102b9c:	4b1b      	ldr	r3, [pc, #108]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8102ba4:	4a19      	ldr	r2, [pc, #100]	; (8102c0c <xPortStartScheduler+0x12c>)
 8102ba6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	b2da      	uxtb	r2, r3
 8102bac:	697b      	ldr	r3, [r7, #20]
 8102bae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8102bb0:	4b17      	ldr	r3, [pc, #92]	; (8102c10 <xPortStartScheduler+0x130>)
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	4a16      	ldr	r2, [pc, #88]	; (8102c10 <xPortStartScheduler+0x130>)
 8102bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8102bba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8102bbc:	4b14      	ldr	r3, [pc, #80]	; (8102c10 <xPortStartScheduler+0x130>)
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	4a13      	ldr	r2, [pc, #76]	; (8102c10 <xPortStartScheduler+0x130>)
 8102bc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8102bc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8102bc8:	f000 f8d6 	bl	8102d78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8102bcc:	4b11      	ldr	r3, [pc, #68]	; (8102c14 <xPortStartScheduler+0x134>)
 8102bce:	2200      	movs	r2, #0
 8102bd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8102bd2:	f000 f8f5 	bl	8102dc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8102bd6:	4b10      	ldr	r3, [pc, #64]	; (8102c18 <xPortStartScheduler+0x138>)
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	4a0f      	ldr	r2, [pc, #60]	; (8102c18 <xPortStartScheduler+0x138>)
 8102bdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8102be0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8102be2:	f7ff ff69 	bl	8102ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8102be6:	f001 f9af 	bl	8103f48 <vTaskSwitchContext>
	prvTaskExitError();
 8102bea:	f7ff ff25 	bl	8102a38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8102bee:	2300      	movs	r3, #0
}
 8102bf0:	4618      	mov	r0, r3
 8102bf2:	3718      	adds	r7, #24
 8102bf4:	46bd      	mov	sp, r7
 8102bf6:	bd80      	pop	{r7, pc}
 8102bf8:	e000ed00 	.word	0xe000ed00
 8102bfc:	410fc271 	.word	0x410fc271
 8102c00:	410fc270 	.word	0x410fc270
 8102c04:	e000e400 	.word	0xe000e400
 8102c08:	10004320 	.word	0x10004320
 8102c0c:	10004324 	.word	0x10004324
 8102c10:	e000ed20 	.word	0xe000ed20
 8102c14:	10000020 	.word	0x10000020
 8102c18:	e000ef34 	.word	0xe000ef34

08102c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102c1c:	b480      	push	{r7}
 8102c1e:	b083      	sub	sp, #12
 8102c20:	af00      	add	r7, sp, #0
 8102c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c26:	f383 8811 	msr	BASEPRI, r3
 8102c2a:	f3bf 8f6f 	isb	sy
 8102c2e:	f3bf 8f4f 	dsb	sy
 8102c32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102c34:	4b0e      	ldr	r3, [pc, #56]	; (8102c70 <vPortEnterCritical+0x54>)
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	3301      	adds	r3, #1
 8102c3a:	4a0d      	ldr	r2, [pc, #52]	; (8102c70 <vPortEnterCritical+0x54>)
 8102c3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8102c3e:	4b0c      	ldr	r3, [pc, #48]	; (8102c70 <vPortEnterCritical+0x54>)
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	2b01      	cmp	r3, #1
 8102c44:	d10e      	bne.n	8102c64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102c46:	4b0b      	ldr	r3, [pc, #44]	; (8102c74 <vPortEnterCritical+0x58>)
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	b2db      	uxtb	r3, r3
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d009      	beq.n	8102c64 <vPortEnterCritical+0x48>
 8102c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c54:	f383 8811 	msr	BASEPRI, r3
 8102c58:	f3bf 8f6f 	isb	sy
 8102c5c:	f3bf 8f4f 	dsb	sy
 8102c60:	603b      	str	r3, [r7, #0]
 8102c62:	e7fe      	b.n	8102c62 <vPortEnterCritical+0x46>
	}
}
 8102c64:	bf00      	nop
 8102c66:	370c      	adds	r7, #12
 8102c68:	46bd      	mov	sp, r7
 8102c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6e:	4770      	bx	lr
 8102c70:	10000020 	.word	0x10000020
 8102c74:	e000ed04 	.word	0xe000ed04

08102c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8102c78:	b480      	push	{r7}
 8102c7a:	b083      	sub	sp, #12
 8102c7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8102c7e:	4b11      	ldr	r3, [pc, #68]	; (8102cc4 <vPortExitCritical+0x4c>)
 8102c80:	681b      	ldr	r3, [r3, #0]
 8102c82:	2b00      	cmp	r3, #0
 8102c84:	d109      	bne.n	8102c9a <vPortExitCritical+0x22>
 8102c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102c8a:	f383 8811 	msr	BASEPRI, r3
 8102c8e:	f3bf 8f6f 	isb	sy
 8102c92:	f3bf 8f4f 	dsb	sy
 8102c96:	607b      	str	r3, [r7, #4]
 8102c98:	e7fe      	b.n	8102c98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8102c9a:	4b0a      	ldr	r3, [pc, #40]	; (8102cc4 <vPortExitCritical+0x4c>)
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	3b01      	subs	r3, #1
 8102ca0:	4a08      	ldr	r2, [pc, #32]	; (8102cc4 <vPortExitCritical+0x4c>)
 8102ca2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8102ca4:	4b07      	ldr	r3, [pc, #28]	; (8102cc4 <vPortExitCritical+0x4c>)
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d104      	bne.n	8102cb6 <vPortExitCritical+0x3e>
 8102cac:	2300      	movs	r3, #0
 8102cae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8102cb0:	683b      	ldr	r3, [r7, #0]
 8102cb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8102cb6:	bf00      	nop
 8102cb8:	370c      	adds	r7, #12
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc0:	4770      	bx	lr
 8102cc2:	bf00      	nop
 8102cc4:	10000020 	.word	0x10000020
	...

08102cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8102cd0:	f3ef 8009 	mrs	r0, PSP
 8102cd4:	f3bf 8f6f 	isb	sy
 8102cd8:	4b15      	ldr	r3, [pc, #84]	; (8102d30 <pxCurrentTCBConst>)
 8102cda:	681a      	ldr	r2, [r3, #0]
 8102cdc:	f01e 0f10 	tst.w	lr, #16
 8102ce0:	bf08      	it	eq
 8102ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8102ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102cea:	6010      	str	r0, [r2, #0]
 8102cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8102cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8102cf4:	f380 8811 	msr	BASEPRI, r0
 8102cf8:	f3bf 8f4f 	dsb	sy
 8102cfc:	f3bf 8f6f 	isb	sy
 8102d00:	f001 f922 	bl	8103f48 <vTaskSwitchContext>
 8102d04:	f04f 0000 	mov.w	r0, #0
 8102d08:	f380 8811 	msr	BASEPRI, r0
 8102d0c:	bc09      	pop	{r0, r3}
 8102d0e:	6819      	ldr	r1, [r3, #0]
 8102d10:	6808      	ldr	r0, [r1, #0]
 8102d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102d16:	f01e 0f10 	tst.w	lr, #16
 8102d1a:	bf08      	it	eq
 8102d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102d20:	f380 8809 	msr	PSP, r0
 8102d24:	f3bf 8f6f 	isb	sy
 8102d28:	4770      	bx	lr
 8102d2a:	bf00      	nop
 8102d2c:	f3af 8000 	nop.w

08102d30 <pxCurrentTCBConst>:
 8102d30:	10004328 	.word	0x10004328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102d34:	bf00      	nop
 8102d36:	bf00      	nop

08102d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102d38:	b580      	push	{r7, lr}
 8102d3a:	b082      	sub	sp, #8
 8102d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8102d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102d42:	f383 8811 	msr	BASEPRI, r3
 8102d46:	f3bf 8f6f 	isb	sy
 8102d4a:	f3bf 8f4f 	dsb	sy
 8102d4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102d50:	f001 f842 	bl	8103dd8 <xTaskIncrementTick>
 8102d54:	4603      	mov	r3, r0
 8102d56:	2b00      	cmp	r3, #0
 8102d58:	d003      	beq.n	8102d62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8102d5a:	4b06      	ldr	r3, [pc, #24]	; (8102d74 <SysTick_Handler+0x3c>)
 8102d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102d60:	601a      	str	r2, [r3, #0]
 8102d62:	2300      	movs	r3, #0
 8102d64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102d66:	683b      	ldr	r3, [r7, #0]
 8102d68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8102d6c:	bf00      	nop
 8102d6e:	3708      	adds	r7, #8
 8102d70:	46bd      	mov	sp, r7
 8102d72:	bd80      	pop	{r7, pc}
 8102d74:	e000ed04 	.word	0xe000ed04

08102d78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8102d78:	b480      	push	{r7}
 8102d7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8102d7c:	4b0b      	ldr	r3, [pc, #44]	; (8102dac <vPortSetupTimerInterrupt+0x34>)
 8102d7e:	2200      	movs	r2, #0
 8102d80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102d82:	4b0b      	ldr	r3, [pc, #44]	; (8102db0 <vPortSetupTimerInterrupt+0x38>)
 8102d84:	2200      	movs	r2, #0
 8102d86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8102d88:	4b0a      	ldr	r3, [pc, #40]	; (8102db4 <vPortSetupTimerInterrupt+0x3c>)
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a0a      	ldr	r2, [pc, #40]	; (8102db8 <vPortSetupTimerInterrupt+0x40>)
 8102d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8102d92:	099b      	lsrs	r3, r3, #6
 8102d94:	4a09      	ldr	r2, [pc, #36]	; (8102dbc <vPortSetupTimerInterrupt+0x44>)
 8102d96:	3b01      	subs	r3, #1
 8102d98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8102d9a:	4b04      	ldr	r3, [pc, #16]	; (8102dac <vPortSetupTimerInterrupt+0x34>)
 8102d9c:	2207      	movs	r2, #7
 8102d9e:	601a      	str	r2, [r3, #0]
}
 8102da0:	bf00      	nop
 8102da2:	46bd      	mov	sp, r7
 8102da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102da8:	4770      	bx	lr
 8102daa:	bf00      	nop
 8102dac:	e000e010 	.word	0xe000e010
 8102db0:	e000e018 	.word	0xe000e018
 8102db4:	10000004 	.word	0x10000004
 8102db8:	10624dd3 	.word	0x10624dd3
 8102dbc:	e000e014 	.word	0xe000e014

08102dc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8102dc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8102dd0 <vPortEnableVFP+0x10>
 8102dc4:	6801      	ldr	r1, [r0, #0]
 8102dc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8102dca:	6001      	str	r1, [r0, #0]
 8102dcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8102dce:	bf00      	nop
 8102dd0:	e000ed88 	.word	0xe000ed88

08102dd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8102dd4:	b480      	push	{r7}
 8102dd6:	b085      	sub	sp, #20
 8102dd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8102dda:	f3ef 8305 	mrs	r3, IPSR
 8102dde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	2b0f      	cmp	r3, #15
 8102de4:	d913      	bls.n	8102e0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8102de6:	4a16      	ldr	r2, [pc, #88]	; (8102e40 <vPortValidateInterruptPriority+0x6c>)
 8102de8:	68fb      	ldr	r3, [r7, #12]
 8102dea:	4413      	add	r3, r2
 8102dec:	781b      	ldrb	r3, [r3, #0]
 8102dee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8102df0:	4b14      	ldr	r3, [pc, #80]	; (8102e44 <vPortValidateInterruptPriority+0x70>)
 8102df2:	781b      	ldrb	r3, [r3, #0]
 8102df4:	7afa      	ldrb	r2, [r7, #11]
 8102df6:	429a      	cmp	r2, r3
 8102df8:	d209      	bcs.n	8102e0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8102dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102dfe:	f383 8811 	msr	BASEPRI, r3
 8102e02:	f3bf 8f6f 	isb	sy
 8102e06:	f3bf 8f4f 	dsb	sy
 8102e0a:	607b      	str	r3, [r7, #4]
 8102e0c:	e7fe      	b.n	8102e0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102e0e:	4b0e      	ldr	r3, [pc, #56]	; (8102e48 <vPortValidateInterruptPriority+0x74>)
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8102e16:	4b0d      	ldr	r3, [pc, #52]	; (8102e4c <vPortValidateInterruptPriority+0x78>)
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	429a      	cmp	r2, r3
 8102e1c:	d909      	bls.n	8102e32 <vPortValidateInterruptPriority+0x5e>
 8102e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e22:	f383 8811 	msr	BASEPRI, r3
 8102e26:	f3bf 8f6f 	isb	sy
 8102e2a:	f3bf 8f4f 	dsb	sy
 8102e2e:	603b      	str	r3, [r7, #0]
 8102e30:	e7fe      	b.n	8102e30 <vPortValidateInterruptPriority+0x5c>
	}
 8102e32:	bf00      	nop
 8102e34:	3714      	adds	r7, #20
 8102e36:	46bd      	mov	sp, r7
 8102e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e3c:	4770      	bx	lr
 8102e3e:	bf00      	nop
 8102e40:	e000e3f0 	.word	0xe000e3f0
 8102e44:	10004320 	.word	0x10004320
 8102e48:	e000ed0c 	.word	0xe000ed0c
 8102e4c:	10004324 	.word	0x10004324

08102e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8102e50:	b580      	push	{r7, lr}
 8102e52:	b084      	sub	sp, #16
 8102e54:	af00      	add	r7, sp, #0
 8102e56:	6078      	str	r0, [r7, #4]
 8102e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8102e5e:	68fb      	ldr	r3, [r7, #12]
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	d109      	bne.n	8102e78 <xQueueGenericReset+0x28>
 8102e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e68:	f383 8811 	msr	BASEPRI, r3
 8102e6c:	f3bf 8f6f 	isb	sy
 8102e70:	f3bf 8f4f 	dsb	sy
 8102e74:	60bb      	str	r3, [r7, #8]
 8102e76:	e7fe      	b.n	8102e76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8102e78:	f7ff fed0 	bl	8102c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	681a      	ldr	r2, [r3, #0]
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e84:	68f9      	ldr	r1, [r7, #12]
 8102e86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102e88:	fb01 f303 	mul.w	r3, r1, r3
 8102e8c:	441a      	add	r2, r3
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8102e92:	68fb      	ldr	r3, [r7, #12]
 8102e94:	2200      	movs	r2, #0
 8102e96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681a      	ldr	r2, [r3, #0]
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	681a      	ldr	r2, [r3, #0]
 8102ea4:	68fb      	ldr	r3, [r7, #12]
 8102ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ea8:	3b01      	subs	r3, #1
 8102eaa:	68f9      	ldr	r1, [r7, #12]
 8102eac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102eae:	fb01 f303 	mul.w	r3, r1, r3
 8102eb2:	441a      	add	r2, r3
 8102eb4:	68fb      	ldr	r3, [r7, #12]
 8102eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8102eb8:	68fb      	ldr	r3, [r7, #12]
 8102eba:	22ff      	movs	r2, #255	; 0xff
 8102ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	22ff      	movs	r2, #255	; 0xff
 8102ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8102ec8:	683b      	ldr	r3, [r7, #0]
 8102eca:	2b00      	cmp	r3, #0
 8102ecc:	d114      	bne.n	8102ef8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	691b      	ldr	r3, [r3, #16]
 8102ed2:	2b00      	cmp	r3, #0
 8102ed4:	d01a      	beq.n	8102f0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102ed6:	68fb      	ldr	r3, [r7, #12]
 8102ed8:	3310      	adds	r3, #16
 8102eda:	4618      	mov	r0, r3
 8102edc:	f001 f8de 	bl	810409c <xTaskRemoveFromEventList>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d012      	beq.n	8102f0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8102ee6:	4b0d      	ldr	r3, [pc, #52]	; (8102f1c <xQueueGenericReset+0xcc>)
 8102ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102eec:	601a      	str	r2, [r3, #0]
 8102eee:	f3bf 8f4f 	dsb	sy
 8102ef2:	f3bf 8f6f 	isb	sy
 8102ef6:	e009      	b.n	8102f0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	3310      	adds	r3, #16
 8102efc:	4618      	mov	r0, r3
 8102efe:	f7ff fcb3 	bl	8102868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8102f02:	68fb      	ldr	r3, [r7, #12]
 8102f04:	3324      	adds	r3, #36	; 0x24
 8102f06:	4618      	mov	r0, r3
 8102f08:	f7ff fcae 	bl	8102868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8102f0c:	f7ff feb4 	bl	8102c78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8102f10:	2301      	movs	r3, #1
}
 8102f12:	4618      	mov	r0, r3
 8102f14:	3710      	adds	r7, #16
 8102f16:	46bd      	mov	sp, r7
 8102f18:	bd80      	pop	{r7, pc}
 8102f1a:	bf00      	nop
 8102f1c:	e000ed04 	.word	0xe000ed04

08102f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102f20:	b580      	push	{r7, lr}
 8102f22:	b08e      	sub	sp, #56	; 0x38
 8102f24:	af02      	add	r7, sp, #8
 8102f26:	60f8      	str	r0, [r7, #12]
 8102f28:	60b9      	str	r1, [r7, #8]
 8102f2a:	607a      	str	r2, [r7, #4]
 8102f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d109      	bne.n	8102f48 <xQueueGenericCreateStatic+0x28>
 8102f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f38:	f383 8811 	msr	BASEPRI, r3
 8102f3c:	f3bf 8f6f 	isb	sy
 8102f40:	f3bf 8f4f 	dsb	sy
 8102f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8102f46:	e7fe      	b.n	8102f46 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8102f48:	683b      	ldr	r3, [r7, #0]
 8102f4a:	2b00      	cmp	r3, #0
 8102f4c:	d109      	bne.n	8102f62 <xQueueGenericCreateStatic+0x42>
 8102f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f52:	f383 8811 	msr	BASEPRI, r3
 8102f56:	f3bf 8f6f 	isb	sy
 8102f5a:	f3bf 8f4f 	dsb	sy
 8102f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8102f60:	e7fe      	b.n	8102f60 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	2b00      	cmp	r3, #0
 8102f66:	d002      	beq.n	8102f6e <xQueueGenericCreateStatic+0x4e>
 8102f68:	68bb      	ldr	r3, [r7, #8]
 8102f6a:	2b00      	cmp	r3, #0
 8102f6c:	d001      	beq.n	8102f72 <xQueueGenericCreateStatic+0x52>
 8102f6e:	2301      	movs	r3, #1
 8102f70:	e000      	b.n	8102f74 <xQueueGenericCreateStatic+0x54>
 8102f72:	2300      	movs	r3, #0
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d109      	bne.n	8102f8c <xQueueGenericCreateStatic+0x6c>
 8102f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f7c:	f383 8811 	msr	BASEPRI, r3
 8102f80:	f3bf 8f6f 	isb	sy
 8102f84:	f3bf 8f4f 	dsb	sy
 8102f88:	623b      	str	r3, [r7, #32]
 8102f8a:	e7fe      	b.n	8102f8a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	2b00      	cmp	r3, #0
 8102f90:	d102      	bne.n	8102f98 <xQueueGenericCreateStatic+0x78>
 8102f92:	68bb      	ldr	r3, [r7, #8]
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	d101      	bne.n	8102f9c <xQueueGenericCreateStatic+0x7c>
 8102f98:	2301      	movs	r3, #1
 8102f9a:	e000      	b.n	8102f9e <xQueueGenericCreateStatic+0x7e>
 8102f9c:	2300      	movs	r3, #0
 8102f9e:	2b00      	cmp	r3, #0
 8102fa0:	d109      	bne.n	8102fb6 <xQueueGenericCreateStatic+0x96>
 8102fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102fa6:	f383 8811 	msr	BASEPRI, r3
 8102faa:	f3bf 8f6f 	isb	sy
 8102fae:	f3bf 8f4f 	dsb	sy
 8102fb2:	61fb      	str	r3, [r7, #28]
 8102fb4:	e7fe      	b.n	8102fb4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8102fb6:	2350      	movs	r3, #80	; 0x50
 8102fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8102fba:	697b      	ldr	r3, [r7, #20]
 8102fbc:	2b50      	cmp	r3, #80	; 0x50
 8102fbe:	d009      	beq.n	8102fd4 <xQueueGenericCreateStatic+0xb4>
 8102fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102fc4:	f383 8811 	msr	BASEPRI, r3
 8102fc8:	f3bf 8f6f 	isb	sy
 8102fcc:	f3bf 8f4f 	dsb	sy
 8102fd0:	61bb      	str	r3, [r7, #24]
 8102fd2:	e7fe      	b.n	8102fd2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8102fd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102fd6:	683b      	ldr	r3, [r7, #0]
 8102fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8102fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d00d      	beq.n	8102ffc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8102fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102fe2:	2201      	movs	r2, #1
 8102fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8102fe8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8102fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102fee:	9300      	str	r3, [sp, #0]
 8102ff0:	4613      	mov	r3, r2
 8102ff2:	687a      	ldr	r2, [r7, #4]
 8102ff4:	68b9      	ldr	r1, [r7, #8]
 8102ff6:	68f8      	ldr	r0, [r7, #12]
 8102ff8:	f000 f805 	bl	8103006 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8102ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8102ffe:	4618      	mov	r0, r3
 8103000:	3730      	adds	r7, #48	; 0x30
 8103002:	46bd      	mov	sp, r7
 8103004:	bd80      	pop	{r7, pc}

08103006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8103006:	b580      	push	{r7, lr}
 8103008:	b084      	sub	sp, #16
 810300a:	af00      	add	r7, sp, #0
 810300c:	60f8      	str	r0, [r7, #12]
 810300e:	60b9      	str	r1, [r7, #8]
 8103010:	607a      	str	r2, [r7, #4]
 8103012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8103014:	68bb      	ldr	r3, [r7, #8]
 8103016:	2b00      	cmp	r3, #0
 8103018:	d103      	bne.n	8103022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810301a:	69bb      	ldr	r3, [r7, #24]
 810301c:	69ba      	ldr	r2, [r7, #24]
 810301e:	601a      	str	r2, [r3, #0]
 8103020:	e002      	b.n	8103028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8103022:	69bb      	ldr	r3, [r7, #24]
 8103024:	687a      	ldr	r2, [r7, #4]
 8103026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8103028:	69bb      	ldr	r3, [r7, #24]
 810302a:	68fa      	ldr	r2, [r7, #12]
 810302c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810302e:	69bb      	ldr	r3, [r7, #24]
 8103030:	68ba      	ldr	r2, [r7, #8]
 8103032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8103034:	2101      	movs	r1, #1
 8103036:	69b8      	ldr	r0, [r7, #24]
 8103038:	f7ff ff0a 	bl	8102e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810303c:	69bb      	ldr	r3, [r7, #24]
 810303e:	78fa      	ldrb	r2, [r7, #3]
 8103040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8103044:	bf00      	nop
 8103046:	3710      	adds	r7, #16
 8103048:	46bd      	mov	sp, r7
 810304a:	bd80      	pop	{r7, pc}

0810304c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810304c:	b580      	push	{r7, lr}
 810304e:	b08e      	sub	sp, #56	; 0x38
 8103050:	af00      	add	r7, sp, #0
 8103052:	60f8      	str	r0, [r7, #12]
 8103054:	60b9      	str	r1, [r7, #8]
 8103056:	607a      	str	r2, [r7, #4]
 8103058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810305a:	2300      	movs	r3, #0
 810305c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8103062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103064:	2b00      	cmp	r3, #0
 8103066:	d109      	bne.n	810307c <xQueueGenericSend+0x30>
 8103068:	f04f 0350 	mov.w	r3, #80	; 0x50
 810306c:	f383 8811 	msr	BASEPRI, r3
 8103070:	f3bf 8f6f 	isb	sy
 8103074:	f3bf 8f4f 	dsb	sy
 8103078:	62bb      	str	r3, [r7, #40]	; 0x28
 810307a:	e7fe      	b.n	810307a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810307c:	68bb      	ldr	r3, [r7, #8]
 810307e:	2b00      	cmp	r3, #0
 8103080:	d103      	bne.n	810308a <xQueueGenericSend+0x3e>
 8103082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103086:	2b00      	cmp	r3, #0
 8103088:	d101      	bne.n	810308e <xQueueGenericSend+0x42>
 810308a:	2301      	movs	r3, #1
 810308c:	e000      	b.n	8103090 <xQueueGenericSend+0x44>
 810308e:	2300      	movs	r3, #0
 8103090:	2b00      	cmp	r3, #0
 8103092:	d109      	bne.n	81030a8 <xQueueGenericSend+0x5c>
 8103094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103098:	f383 8811 	msr	BASEPRI, r3
 810309c:	f3bf 8f6f 	isb	sy
 81030a0:	f3bf 8f4f 	dsb	sy
 81030a4:	627b      	str	r3, [r7, #36]	; 0x24
 81030a6:	e7fe      	b.n	81030a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81030a8:	683b      	ldr	r3, [r7, #0]
 81030aa:	2b02      	cmp	r3, #2
 81030ac:	d103      	bne.n	81030b6 <xQueueGenericSend+0x6a>
 81030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030b2:	2b01      	cmp	r3, #1
 81030b4:	d101      	bne.n	81030ba <xQueueGenericSend+0x6e>
 81030b6:	2301      	movs	r3, #1
 81030b8:	e000      	b.n	81030bc <xQueueGenericSend+0x70>
 81030ba:	2300      	movs	r3, #0
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d109      	bne.n	81030d4 <xQueueGenericSend+0x88>
 81030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030c4:	f383 8811 	msr	BASEPRI, r3
 81030c8:	f3bf 8f6f 	isb	sy
 81030cc:	f3bf 8f4f 	dsb	sy
 81030d0:	623b      	str	r3, [r7, #32]
 81030d2:	e7fe      	b.n	81030d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81030d4:	f001 f998 	bl	8104408 <xTaskGetSchedulerState>
 81030d8:	4603      	mov	r3, r0
 81030da:	2b00      	cmp	r3, #0
 81030dc:	d102      	bne.n	81030e4 <xQueueGenericSend+0x98>
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	2b00      	cmp	r3, #0
 81030e2:	d101      	bne.n	81030e8 <xQueueGenericSend+0x9c>
 81030e4:	2301      	movs	r3, #1
 81030e6:	e000      	b.n	81030ea <xQueueGenericSend+0x9e>
 81030e8:	2300      	movs	r3, #0
 81030ea:	2b00      	cmp	r3, #0
 81030ec:	d109      	bne.n	8103102 <xQueueGenericSend+0xb6>
 81030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030f2:	f383 8811 	msr	BASEPRI, r3
 81030f6:	f3bf 8f6f 	isb	sy
 81030fa:	f3bf 8f4f 	dsb	sy
 81030fe:	61fb      	str	r3, [r7, #28]
 8103100:	e7fe      	b.n	8103100 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103102:	f7ff fd8b 	bl	8102c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810310e:	429a      	cmp	r2, r3
 8103110:	d302      	bcc.n	8103118 <xQueueGenericSend+0xcc>
 8103112:	683b      	ldr	r3, [r7, #0]
 8103114:	2b02      	cmp	r3, #2
 8103116:	d129      	bne.n	810316c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103118:	683a      	ldr	r2, [r7, #0]
 810311a:	68b9      	ldr	r1, [r7, #8]
 810311c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810311e:	f000 f9ff 	bl	8103520 <prvCopyDataToQueue>
 8103122:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103128:	2b00      	cmp	r3, #0
 810312a:	d010      	beq.n	810314e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810312e:	3324      	adds	r3, #36	; 0x24
 8103130:	4618      	mov	r0, r3
 8103132:	f000 ffb3 	bl	810409c <xTaskRemoveFromEventList>
 8103136:	4603      	mov	r3, r0
 8103138:	2b00      	cmp	r3, #0
 810313a:	d013      	beq.n	8103164 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810313c:	4b3f      	ldr	r3, [pc, #252]	; (810323c <xQueueGenericSend+0x1f0>)
 810313e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103142:	601a      	str	r2, [r3, #0]
 8103144:	f3bf 8f4f 	dsb	sy
 8103148:	f3bf 8f6f 	isb	sy
 810314c:	e00a      	b.n	8103164 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103150:	2b00      	cmp	r3, #0
 8103152:	d007      	beq.n	8103164 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8103154:	4b39      	ldr	r3, [pc, #228]	; (810323c <xQueueGenericSend+0x1f0>)
 8103156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810315a:	601a      	str	r2, [r3, #0]
 810315c:	f3bf 8f4f 	dsb	sy
 8103160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8103164:	f7ff fd88 	bl	8102c78 <vPortExitCritical>
				return pdPASS;
 8103168:	2301      	movs	r3, #1
 810316a:	e063      	b.n	8103234 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	2b00      	cmp	r3, #0
 8103170:	d103      	bne.n	810317a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103172:	f7ff fd81 	bl	8102c78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8103176:	2300      	movs	r3, #0
 8103178:	e05c      	b.n	8103234 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810317c:	2b00      	cmp	r3, #0
 810317e:	d106      	bne.n	810318e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103180:	f107 0314 	add.w	r3, r7, #20
 8103184:	4618      	mov	r0, r3
 8103186:	f000 ffeb 	bl	8104160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810318a:	2301      	movs	r3, #1
 810318c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810318e:	f7ff fd73 	bl	8102c78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103192:	f000 fd67 	bl	8103c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103196:	f7ff fd41 	bl	8102c1c <vPortEnterCritical>
 810319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810319c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81031a0:	b25b      	sxtb	r3, r3
 81031a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81031a6:	d103      	bne.n	81031b0 <xQueueGenericSend+0x164>
 81031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031aa:	2200      	movs	r2, #0
 81031ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81031b6:	b25b      	sxtb	r3, r3
 81031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81031bc:	d103      	bne.n	81031c6 <xQueueGenericSend+0x17a>
 81031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031c0:	2200      	movs	r2, #0
 81031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81031c6:	f7ff fd57 	bl	8102c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81031ca:	1d3a      	adds	r2, r7, #4
 81031cc:	f107 0314 	add.w	r3, r7, #20
 81031d0:	4611      	mov	r1, r2
 81031d2:	4618      	mov	r0, r3
 81031d4:	f000 ffda 	bl	810418c <xTaskCheckForTimeOut>
 81031d8:	4603      	mov	r3, r0
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d124      	bne.n	8103228 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81031de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81031e0:	f000 fa96 	bl	8103710 <prvIsQueueFull>
 81031e4:	4603      	mov	r3, r0
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d018      	beq.n	810321c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031ec:	3310      	adds	r3, #16
 81031ee:	687a      	ldr	r2, [r7, #4]
 81031f0:	4611      	mov	r1, r2
 81031f2:	4618      	mov	r0, r3
 81031f4:	f000 ff04 	bl	8104000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81031f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81031fa:	f000 fa21 	bl	8103640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81031fe:	f000 fd3f 	bl	8103c80 <xTaskResumeAll>
 8103202:	4603      	mov	r3, r0
 8103204:	2b00      	cmp	r3, #0
 8103206:	f47f af7c 	bne.w	8103102 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810320a:	4b0c      	ldr	r3, [pc, #48]	; (810323c <xQueueGenericSend+0x1f0>)
 810320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103210:	601a      	str	r2, [r3, #0]
 8103212:	f3bf 8f4f 	dsb	sy
 8103216:	f3bf 8f6f 	isb	sy
 810321a:	e772      	b.n	8103102 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810321c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810321e:	f000 fa0f 	bl	8103640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103222:	f000 fd2d 	bl	8103c80 <xTaskResumeAll>
 8103226:	e76c      	b.n	8103102 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8103228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810322a:	f000 fa09 	bl	8103640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810322e:	f000 fd27 	bl	8103c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8103232:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8103234:	4618      	mov	r0, r3
 8103236:	3738      	adds	r7, #56	; 0x38
 8103238:	46bd      	mov	sp, r7
 810323a:	bd80      	pop	{r7, pc}
 810323c:	e000ed04 	.word	0xe000ed04

08103240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8103240:	b580      	push	{r7, lr}
 8103242:	b08e      	sub	sp, #56	; 0x38
 8103244:	af00      	add	r7, sp, #0
 8103246:	60f8      	str	r0, [r7, #12]
 8103248:	60b9      	str	r1, [r7, #8]
 810324a:	607a      	str	r2, [r7, #4]
 810324c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8103252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103254:	2b00      	cmp	r3, #0
 8103256:	d109      	bne.n	810326c <xQueueGenericSendFromISR+0x2c>
 8103258:	f04f 0350 	mov.w	r3, #80	; 0x50
 810325c:	f383 8811 	msr	BASEPRI, r3
 8103260:	f3bf 8f6f 	isb	sy
 8103264:	f3bf 8f4f 	dsb	sy
 8103268:	627b      	str	r3, [r7, #36]	; 0x24
 810326a:	e7fe      	b.n	810326a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810326c:	68bb      	ldr	r3, [r7, #8]
 810326e:	2b00      	cmp	r3, #0
 8103270:	d103      	bne.n	810327a <xQueueGenericSendFromISR+0x3a>
 8103272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103276:	2b00      	cmp	r3, #0
 8103278:	d101      	bne.n	810327e <xQueueGenericSendFromISR+0x3e>
 810327a:	2301      	movs	r3, #1
 810327c:	e000      	b.n	8103280 <xQueueGenericSendFromISR+0x40>
 810327e:	2300      	movs	r3, #0
 8103280:	2b00      	cmp	r3, #0
 8103282:	d109      	bne.n	8103298 <xQueueGenericSendFromISR+0x58>
 8103284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103288:	f383 8811 	msr	BASEPRI, r3
 810328c:	f3bf 8f6f 	isb	sy
 8103290:	f3bf 8f4f 	dsb	sy
 8103294:	623b      	str	r3, [r7, #32]
 8103296:	e7fe      	b.n	8103296 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8103298:	683b      	ldr	r3, [r7, #0]
 810329a:	2b02      	cmp	r3, #2
 810329c:	d103      	bne.n	81032a6 <xQueueGenericSendFromISR+0x66>
 810329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032a2:	2b01      	cmp	r3, #1
 81032a4:	d101      	bne.n	81032aa <xQueueGenericSendFromISR+0x6a>
 81032a6:	2301      	movs	r3, #1
 81032a8:	e000      	b.n	81032ac <xQueueGenericSendFromISR+0x6c>
 81032aa:	2300      	movs	r3, #0
 81032ac:	2b00      	cmp	r3, #0
 81032ae:	d109      	bne.n	81032c4 <xQueueGenericSendFromISR+0x84>
 81032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81032b4:	f383 8811 	msr	BASEPRI, r3
 81032b8:	f3bf 8f6f 	isb	sy
 81032bc:	f3bf 8f4f 	dsb	sy
 81032c0:	61fb      	str	r3, [r7, #28]
 81032c2:	e7fe      	b.n	81032c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81032c4:	f7ff fd86 	bl	8102dd4 <vPortValidateInterruptPriority>
	__asm volatile
 81032c8:	f3ef 8211 	mrs	r2, BASEPRI
 81032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81032d0:	f383 8811 	msr	BASEPRI, r3
 81032d4:	f3bf 8f6f 	isb	sy
 81032d8:	f3bf 8f4f 	dsb	sy
 81032dc:	61ba      	str	r2, [r7, #24]
 81032de:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81032e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032ec:	429a      	cmp	r2, r3
 81032ee:	d302      	bcc.n	81032f6 <xQueueGenericSendFromISR+0xb6>
 81032f0:	683b      	ldr	r3, [r7, #0]
 81032f2:	2b02      	cmp	r3, #2
 81032f4:	d12c      	bne.n	8103350 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81032f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81032fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103300:	683a      	ldr	r2, [r7, #0]
 8103302:	68b9      	ldr	r1, [r7, #8]
 8103304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103306:	f000 f90b 	bl	8103520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810330a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810330e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103312:	d112      	bne.n	810333a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103318:	2b00      	cmp	r3, #0
 810331a:	d016      	beq.n	810334a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810331e:	3324      	adds	r3, #36	; 0x24
 8103320:	4618      	mov	r0, r3
 8103322:	f000 febb 	bl	810409c <xTaskRemoveFromEventList>
 8103326:	4603      	mov	r3, r0
 8103328:	2b00      	cmp	r3, #0
 810332a:	d00e      	beq.n	810334a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	2b00      	cmp	r3, #0
 8103330:	d00b      	beq.n	810334a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	2201      	movs	r2, #1
 8103336:	601a      	str	r2, [r3, #0]
 8103338:	e007      	b.n	810334a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810333a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810333e:	3301      	adds	r3, #1
 8103340:	b2db      	uxtb	r3, r3
 8103342:	b25a      	sxtb	r2, r3
 8103344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810334a:	2301      	movs	r3, #1
 810334c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 810334e:	e001      	b.n	8103354 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8103350:	2300      	movs	r3, #0
 8103352:	637b      	str	r3, [r7, #52]	; 0x34
 8103354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103356:	613b      	str	r3, [r7, #16]
	__asm volatile
 8103358:	693b      	ldr	r3, [r7, #16]
 810335a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8103360:	4618      	mov	r0, r3
 8103362:	3738      	adds	r7, #56	; 0x38
 8103364:	46bd      	mov	sp, r7
 8103366:	bd80      	pop	{r7, pc}

08103368 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8103368:	b580      	push	{r7, lr}
 810336a:	b08c      	sub	sp, #48	; 0x30
 810336c:	af00      	add	r7, sp, #0
 810336e:	60f8      	str	r0, [r7, #12]
 8103370:	60b9      	str	r1, [r7, #8]
 8103372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8103374:	2300      	movs	r3, #0
 8103376:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810337e:	2b00      	cmp	r3, #0
 8103380:	d109      	bne.n	8103396 <xQueueReceive+0x2e>
	__asm volatile
 8103382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103386:	f383 8811 	msr	BASEPRI, r3
 810338a:	f3bf 8f6f 	isb	sy
 810338e:	f3bf 8f4f 	dsb	sy
 8103392:	623b      	str	r3, [r7, #32]
 8103394:	e7fe      	b.n	8103394 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103396:	68bb      	ldr	r3, [r7, #8]
 8103398:	2b00      	cmp	r3, #0
 810339a:	d103      	bne.n	81033a4 <xQueueReceive+0x3c>
 810339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81033a0:	2b00      	cmp	r3, #0
 81033a2:	d101      	bne.n	81033a8 <xQueueReceive+0x40>
 81033a4:	2301      	movs	r3, #1
 81033a6:	e000      	b.n	81033aa <xQueueReceive+0x42>
 81033a8:	2300      	movs	r3, #0
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d109      	bne.n	81033c2 <xQueueReceive+0x5a>
 81033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81033b2:	f383 8811 	msr	BASEPRI, r3
 81033b6:	f3bf 8f6f 	isb	sy
 81033ba:	f3bf 8f4f 	dsb	sy
 81033be:	61fb      	str	r3, [r7, #28]
 81033c0:	e7fe      	b.n	81033c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81033c2:	f001 f821 	bl	8104408 <xTaskGetSchedulerState>
 81033c6:	4603      	mov	r3, r0
 81033c8:	2b00      	cmp	r3, #0
 81033ca:	d102      	bne.n	81033d2 <xQueueReceive+0x6a>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	2b00      	cmp	r3, #0
 81033d0:	d101      	bne.n	81033d6 <xQueueReceive+0x6e>
 81033d2:	2301      	movs	r3, #1
 81033d4:	e000      	b.n	81033d8 <xQueueReceive+0x70>
 81033d6:	2300      	movs	r3, #0
 81033d8:	2b00      	cmp	r3, #0
 81033da:	d109      	bne.n	81033f0 <xQueueReceive+0x88>
 81033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81033e0:	f383 8811 	msr	BASEPRI, r3
 81033e4:	f3bf 8f6f 	isb	sy
 81033e8:	f3bf 8f4f 	dsb	sy
 81033ec:	61bb      	str	r3, [r7, #24]
 81033ee:	e7fe      	b.n	81033ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81033f0:	f7ff fc14 	bl	8102c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81033f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	d01f      	beq.n	8103440 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8103400:	68b9      	ldr	r1, [r7, #8]
 8103402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103404:	f000 f8f6 	bl	81035f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8103408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810340a:	1e5a      	subs	r2, r3, #1
 810340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810340e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8103410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103412:	691b      	ldr	r3, [r3, #16]
 8103414:	2b00      	cmp	r3, #0
 8103416:	d00f      	beq.n	8103438 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810341a:	3310      	adds	r3, #16
 810341c:	4618      	mov	r0, r3
 810341e:	f000 fe3d 	bl	810409c <xTaskRemoveFromEventList>
 8103422:	4603      	mov	r3, r0
 8103424:	2b00      	cmp	r3, #0
 8103426:	d007      	beq.n	8103438 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8103428:	4b3c      	ldr	r3, [pc, #240]	; (810351c <xQueueReceive+0x1b4>)
 810342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810342e:	601a      	str	r2, [r3, #0]
 8103430:	f3bf 8f4f 	dsb	sy
 8103434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8103438:	f7ff fc1e 	bl	8102c78 <vPortExitCritical>
				return pdPASS;
 810343c:	2301      	movs	r3, #1
 810343e:	e069      	b.n	8103514 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	2b00      	cmp	r3, #0
 8103444:	d103      	bne.n	810344e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103446:	f7ff fc17 	bl	8102c78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810344a:	2300      	movs	r3, #0
 810344c:	e062      	b.n	8103514 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 810344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103450:	2b00      	cmp	r3, #0
 8103452:	d106      	bne.n	8103462 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103454:	f107 0310 	add.w	r3, r7, #16
 8103458:	4618      	mov	r0, r3
 810345a:	f000 fe81 	bl	8104160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810345e:	2301      	movs	r3, #1
 8103460:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103462:	f7ff fc09 	bl	8102c78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103466:	f000 fbfd 	bl	8103c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810346a:	f7ff fbd7 	bl	8102c1c <vPortEnterCritical>
 810346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103474:	b25b      	sxtb	r3, r3
 8103476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810347a:	d103      	bne.n	8103484 <xQueueReceive+0x11c>
 810347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810347e:	2200      	movs	r2, #0
 8103480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810348a:	b25b      	sxtb	r3, r3
 810348c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103490:	d103      	bne.n	810349a <xQueueReceive+0x132>
 8103492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103494:	2200      	movs	r2, #0
 8103496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810349a:	f7ff fbed 	bl	8102c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810349e:	1d3a      	adds	r2, r7, #4
 81034a0:	f107 0310 	add.w	r3, r7, #16
 81034a4:	4611      	mov	r1, r2
 81034a6:	4618      	mov	r0, r3
 81034a8:	f000 fe70 	bl	810418c <xTaskCheckForTimeOut>
 81034ac:	4603      	mov	r3, r0
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d123      	bne.n	81034fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81034b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81034b4:	f000 f916 	bl	81036e4 <prvIsQueueEmpty>
 81034b8:	4603      	mov	r3, r0
 81034ba:	2b00      	cmp	r3, #0
 81034bc:	d017      	beq.n	81034ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81034c0:	3324      	adds	r3, #36	; 0x24
 81034c2:	687a      	ldr	r2, [r7, #4]
 81034c4:	4611      	mov	r1, r2
 81034c6:	4618      	mov	r0, r3
 81034c8:	f000 fd9a 	bl	8104000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81034cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81034ce:	f000 f8b7 	bl	8103640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81034d2:	f000 fbd5 	bl	8103c80 <xTaskResumeAll>
 81034d6:	4603      	mov	r3, r0
 81034d8:	2b00      	cmp	r3, #0
 81034da:	d189      	bne.n	81033f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 81034dc:	4b0f      	ldr	r3, [pc, #60]	; (810351c <xQueueReceive+0x1b4>)
 81034de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81034e2:	601a      	str	r2, [r3, #0]
 81034e4:	f3bf 8f4f 	dsb	sy
 81034e8:	f3bf 8f6f 	isb	sy
 81034ec:	e780      	b.n	81033f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81034ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81034f0:	f000 f8a6 	bl	8103640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81034f4:	f000 fbc4 	bl	8103c80 <xTaskResumeAll>
 81034f8:	e77a      	b.n	81033f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81034fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81034fc:	f000 f8a0 	bl	8103640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103500:	f000 fbbe 	bl	8103c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103506:	f000 f8ed 	bl	81036e4 <prvIsQueueEmpty>
 810350a:	4603      	mov	r3, r0
 810350c:	2b00      	cmp	r3, #0
 810350e:	f43f af6f 	beq.w	81033f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8103514:	4618      	mov	r0, r3
 8103516:	3730      	adds	r7, #48	; 0x30
 8103518:	46bd      	mov	sp, r7
 810351a:	bd80      	pop	{r7, pc}
 810351c:	e000ed04 	.word	0xe000ed04

08103520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8103520:	b580      	push	{r7, lr}
 8103522:	b086      	sub	sp, #24
 8103524:	af00      	add	r7, sp, #0
 8103526:	60f8      	str	r0, [r7, #12]
 8103528:	60b9      	str	r1, [r7, #8]
 810352a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810352c:	2300      	movs	r3, #0
 810352e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8103536:	68fb      	ldr	r3, [r7, #12]
 8103538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810353a:	2b00      	cmp	r3, #0
 810353c:	d10d      	bne.n	810355a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810353e:	68fb      	ldr	r3, [r7, #12]
 8103540:	681b      	ldr	r3, [r3, #0]
 8103542:	2b00      	cmp	r3, #0
 8103544:	d14d      	bne.n	81035e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8103546:	68fb      	ldr	r3, [r7, #12]
 8103548:	689b      	ldr	r3, [r3, #8]
 810354a:	4618      	mov	r0, r3
 810354c:	f000 ff7a 	bl	8104444 <xTaskPriorityDisinherit>
 8103550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8103552:	68fb      	ldr	r3, [r7, #12]
 8103554:	2200      	movs	r2, #0
 8103556:	609a      	str	r2, [r3, #8]
 8103558:	e043      	b.n	81035e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	2b00      	cmp	r3, #0
 810355e:	d119      	bne.n	8103594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8103560:	68fb      	ldr	r3, [r7, #12]
 8103562:	6858      	ldr	r0, [r3, #4]
 8103564:	68fb      	ldr	r3, [r7, #12]
 8103566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103568:	461a      	mov	r2, r3
 810356a:	68b9      	ldr	r1, [r7, #8]
 810356c:	f001 fb94 	bl	8104c98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8103570:	68fb      	ldr	r3, [r7, #12]
 8103572:	685a      	ldr	r2, [r3, #4]
 8103574:	68fb      	ldr	r3, [r7, #12]
 8103576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103578:	441a      	add	r2, r3
 810357a:	68fb      	ldr	r3, [r7, #12]
 810357c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810357e:	68fb      	ldr	r3, [r7, #12]
 8103580:	685a      	ldr	r2, [r3, #4]
 8103582:	68fb      	ldr	r3, [r7, #12]
 8103584:	689b      	ldr	r3, [r3, #8]
 8103586:	429a      	cmp	r2, r3
 8103588:	d32b      	bcc.n	81035e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810358a:	68fb      	ldr	r3, [r7, #12]
 810358c:	681a      	ldr	r2, [r3, #0]
 810358e:	68fb      	ldr	r3, [r7, #12]
 8103590:	605a      	str	r2, [r3, #4]
 8103592:	e026      	b.n	81035e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8103594:	68fb      	ldr	r3, [r7, #12]
 8103596:	68d8      	ldr	r0, [r3, #12]
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810359c:	461a      	mov	r2, r3
 810359e:	68b9      	ldr	r1, [r7, #8]
 81035a0:	f001 fb7a 	bl	8104c98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81035a4:	68fb      	ldr	r3, [r7, #12]
 81035a6:	68da      	ldr	r2, [r3, #12]
 81035a8:	68fb      	ldr	r3, [r7, #12]
 81035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035ac:	425b      	negs	r3, r3
 81035ae:	441a      	add	r2, r3
 81035b0:	68fb      	ldr	r3, [r7, #12]
 81035b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81035b4:	68fb      	ldr	r3, [r7, #12]
 81035b6:	68da      	ldr	r2, [r3, #12]
 81035b8:	68fb      	ldr	r3, [r7, #12]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	429a      	cmp	r2, r3
 81035be:	d207      	bcs.n	81035d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81035c0:	68fb      	ldr	r3, [r7, #12]
 81035c2:	689a      	ldr	r2, [r3, #8]
 81035c4:	68fb      	ldr	r3, [r7, #12]
 81035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035c8:	425b      	negs	r3, r3
 81035ca:	441a      	add	r2, r3
 81035cc:	68fb      	ldr	r3, [r7, #12]
 81035ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	2b02      	cmp	r3, #2
 81035d4:	d105      	bne.n	81035e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81035d6:	693b      	ldr	r3, [r7, #16]
 81035d8:	2b00      	cmp	r3, #0
 81035da:	d002      	beq.n	81035e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81035dc:	693b      	ldr	r3, [r7, #16]
 81035de:	3b01      	subs	r3, #1
 81035e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81035e2:	693b      	ldr	r3, [r7, #16]
 81035e4:	1c5a      	adds	r2, r3, #1
 81035e6:	68fb      	ldr	r3, [r7, #12]
 81035e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 81035ea:	697b      	ldr	r3, [r7, #20]
}
 81035ec:	4618      	mov	r0, r3
 81035ee:	3718      	adds	r7, #24
 81035f0:	46bd      	mov	sp, r7
 81035f2:	bd80      	pop	{r7, pc}

081035f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81035f4:	b580      	push	{r7, lr}
 81035f6:	b082      	sub	sp, #8
 81035f8:	af00      	add	r7, sp, #0
 81035fa:	6078      	str	r0, [r7, #4]
 81035fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103602:	2b00      	cmp	r3, #0
 8103604:	d018      	beq.n	8103638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	68da      	ldr	r2, [r3, #12]
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810360e:	441a      	add	r2, r3
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	68da      	ldr	r2, [r3, #12]
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	689b      	ldr	r3, [r3, #8]
 810361c:	429a      	cmp	r2, r3
 810361e:	d303      	bcc.n	8103628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681a      	ldr	r2, [r3, #0]
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	68d9      	ldr	r1, [r3, #12]
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103630:	461a      	mov	r2, r3
 8103632:	6838      	ldr	r0, [r7, #0]
 8103634:	f001 fb30 	bl	8104c98 <memcpy>
	}
}
 8103638:	bf00      	nop
 810363a:	3708      	adds	r7, #8
 810363c:	46bd      	mov	sp, r7
 810363e:	bd80      	pop	{r7, pc}

08103640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8103640:	b580      	push	{r7, lr}
 8103642:	b084      	sub	sp, #16
 8103644:	af00      	add	r7, sp, #0
 8103646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8103648:	f7ff fae8 	bl	8102c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8103654:	e011      	b.n	810367a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810365a:	2b00      	cmp	r3, #0
 810365c:	d012      	beq.n	8103684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	3324      	adds	r3, #36	; 0x24
 8103662:	4618      	mov	r0, r3
 8103664:	f000 fd1a 	bl	810409c <xTaskRemoveFromEventList>
 8103668:	4603      	mov	r3, r0
 810366a:	2b00      	cmp	r3, #0
 810366c:	d001      	beq.n	8103672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810366e:	f000 fded 	bl	810424c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8103672:	7bfb      	ldrb	r3, [r7, #15]
 8103674:	3b01      	subs	r3, #1
 8103676:	b2db      	uxtb	r3, r3
 8103678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810367e:	2b00      	cmp	r3, #0
 8103680:	dce9      	bgt.n	8103656 <prvUnlockQueue+0x16>
 8103682:	e000      	b.n	8103686 <prvUnlockQueue+0x46>
					break;
 8103684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	22ff      	movs	r2, #255	; 0xff
 810368a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810368e:	f7ff faf3 	bl	8102c78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8103692:	f7ff fac3 	bl	8102c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810369c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810369e:	e011      	b.n	81036c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	691b      	ldr	r3, [r3, #16]
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d012      	beq.n	81036ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	3310      	adds	r3, #16
 81036ac:	4618      	mov	r0, r3
 81036ae:	f000 fcf5 	bl	810409c <xTaskRemoveFromEventList>
 81036b2:	4603      	mov	r3, r0
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d001      	beq.n	81036bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81036b8:	f000 fdc8 	bl	810424c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81036bc:	7bbb      	ldrb	r3, [r7, #14]
 81036be:	3b01      	subs	r3, #1
 81036c0:	b2db      	uxtb	r3, r3
 81036c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81036c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81036c8:	2b00      	cmp	r3, #0
 81036ca:	dce9      	bgt.n	81036a0 <prvUnlockQueue+0x60>
 81036cc:	e000      	b.n	81036d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81036ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	22ff      	movs	r2, #255	; 0xff
 81036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81036d8:	f7ff face 	bl	8102c78 <vPortExitCritical>
}
 81036dc:	bf00      	nop
 81036de:	3710      	adds	r7, #16
 81036e0:	46bd      	mov	sp, r7
 81036e2:	bd80      	pop	{r7, pc}

081036e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81036e4:	b580      	push	{r7, lr}
 81036e6:	b084      	sub	sp, #16
 81036e8:	af00      	add	r7, sp, #0
 81036ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81036ec:	f7ff fa96 	bl	8102c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81036f4:	2b00      	cmp	r3, #0
 81036f6:	d102      	bne.n	81036fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81036f8:	2301      	movs	r3, #1
 81036fa:	60fb      	str	r3, [r7, #12]
 81036fc:	e001      	b.n	8103702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81036fe:	2300      	movs	r3, #0
 8103700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103702:	f7ff fab9 	bl	8102c78 <vPortExitCritical>

	return xReturn;
 8103706:	68fb      	ldr	r3, [r7, #12]
}
 8103708:	4618      	mov	r0, r3
 810370a:	3710      	adds	r7, #16
 810370c:	46bd      	mov	sp, r7
 810370e:	bd80      	pop	{r7, pc}

08103710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8103710:	b580      	push	{r7, lr}
 8103712:	b084      	sub	sp, #16
 8103714:	af00      	add	r7, sp, #0
 8103716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103718:	f7ff fa80 	bl	8102c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103724:	429a      	cmp	r2, r3
 8103726:	d102      	bne.n	810372e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8103728:	2301      	movs	r3, #1
 810372a:	60fb      	str	r3, [r7, #12]
 810372c:	e001      	b.n	8103732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810372e:	2300      	movs	r3, #0
 8103730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103732:	f7ff faa1 	bl	8102c78 <vPortExitCritical>

	return xReturn;
 8103736:	68fb      	ldr	r3, [r7, #12]
}
 8103738:	4618      	mov	r0, r3
 810373a:	3710      	adds	r7, #16
 810373c:	46bd      	mov	sp, r7
 810373e:	bd80      	pop	{r7, pc}

08103740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8103740:	b480      	push	{r7}
 8103742:	b085      	sub	sp, #20
 8103744:	af00      	add	r7, sp, #0
 8103746:	6078      	str	r0, [r7, #4]
 8103748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810374a:	2300      	movs	r3, #0
 810374c:	60fb      	str	r3, [r7, #12]
 810374e:	e014      	b.n	810377a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8103750:	4a0e      	ldr	r2, [pc, #56]	; (810378c <vQueueAddToRegistry+0x4c>)
 8103752:	68fb      	ldr	r3, [r7, #12]
 8103754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8103758:	2b00      	cmp	r3, #0
 810375a:	d10b      	bne.n	8103774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810375c:	490b      	ldr	r1, [pc, #44]	; (810378c <vQueueAddToRegistry+0x4c>)
 810375e:	68fb      	ldr	r3, [r7, #12]
 8103760:	683a      	ldr	r2, [r7, #0]
 8103762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8103766:	4a09      	ldr	r2, [pc, #36]	; (810378c <vQueueAddToRegistry+0x4c>)
 8103768:	68fb      	ldr	r3, [r7, #12]
 810376a:	00db      	lsls	r3, r3, #3
 810376c:	4413      	add	r3, r2
 810376e:	687a      	ldr	r2, [r7, #4]
 8103770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8103772:	e005      	b.n	8103780 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8103774:	68fb      	ldr	r3, [r7, #12]
 8103776:	3301      	adds	r3, #1
 8103778:	60fb      	str	r3, [r7, #12]
 810377a:	68fb      	ldr	r3, [r7, #12]
 810377c:	2b07      	cmp	r3, #7
 810377e:	d9e7      	bls.n	8103750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8103780:	bf00      	nop
 8103782:	3714      	adds	r7, #20
 8103784:	46bd      	mov	sp, r7
 8103786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810378a:	4770      	bx	lr
 810378c:	10004f4c 	.word	0x10004f4c

08103790 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8103790:	b580      	push	{r7, lr}
 8103792:	b086      	sub	sp, #24
 8103794:	af00      	add	r7, sp, #0
 8103796:	60f8      	str	r0, [r7, #12]
 8103798:	60b9      	str	r1, [r7, #8]
 810379a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810379c:	68fb      	ldr	r3, [r7, #12]
 810379e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81037a0:	f7ff fa3c 	bl	8102c1c <vPortEnterCritical>
 81037a4:	697b      	ldr	r3, [r7, #20]
 81037a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81037aa:	b25b      	sxtb	r3, r3
 81037ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81037b0:	d103      	bne.n	81037ba <vQueueWaitForMessageRestricted+0x2a>
 81037b2:	697b      	ldr	r3, [r7, #20]
 81037b4:	2200      	movs	r2, #0
 81037b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81037ba:	697b      	ldr	r3, [r7, #20]
 81037bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81037c0:	b25b      	sxtb	r3, r3
 81037c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81037c6:	d103      	bne.n	81037d0 <vQueueWaitForMessageRestricted+0x40>
 81037c8:	697b      	ldr	r3, [r7, #20]
 81037ca:	2200      	movs	r2, #0
 81037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81037d0:	f7ff fa52 	bl	8102c78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81037d4:	697b      	ldr	r3, [r7, #20]
 81037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81037d8:	2b00      	cmp	r3, #0
 81037da:	d106      	bne.n	81037ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81037dc:	697b      	ldr	r3, [r7, #20]
 81037de:	3324      	adds	r3, #36	; 0x24
 81037e0:	687a      	ldr	r2, [r7, #4]
 81037e2:	68b9      	ldr	r1, [r7, #8]
 81037e4:	4618      	mov	r0, r3
 81037e6:	f000 fc2f 	bl	8104048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 81037ea:	6978      	ldr	r0, [r7, #20]
 81037ec:	f7ff ff28 	bl	8103640 <prvUnlockQueue>
	}
 81037f0:	bf00      	nop
 81037f2:	3718      	adds	r7, #24
 81037f4:	46bd      	mov	sp, r7
 81037f6:	bd80      	pop	{r7, pc}

081037f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81037f8:	b580      	push	{r7, lr}
 81037fa:	b08e      	sub	sp, #56	; 0x38
 81037fc:	af04      	add	r7, sp, #16
 81037fe:	60f8      	str	r0, [r7, #12]
 8103800:	60b9      	str	r1, [r7, #8]
 8103802:	607a      	str	r2, [r7, #4]
 8103804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8103806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103808:	2b00      	cmp	r3, #0
 810380a:	d109      	bne.n	8103820 <xTaskCreateStatic+0x28>
 810380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103810:	f383 8811 	msr	BASEPRI, r3
 8103814:	f3bf 8f6f 	isb	sy
 8103818:	f3bf 8f4f 	dsb	sy
 810381c:	623b      	str	r3, [r7, #32]
 810381e:	e7fe      	b.n	810381e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8103820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103822:	2b00      	cmp	r3, #0
 8103824:	d109      	bne.n	810383a <xTaskCreateStatic+0x42>
 8103826:	f04f 0350 	mov.w	r3, #80	; 0x50
 810382a:	f383 8811 	msr	BASEPRI, r3
 810382e:	f3bf 8f6f 	isb	sy
 8103832:	f3bf 8f4f 	dsb	sy
 8103836:	61fb      	str	r3, [r7, #28]
 8103838:	e7fe      	b.n	8103838 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810383a:	235c      	movs	r3, #92	; 0x5c
 810383c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810383e:	693b      	ldr	r3, [r7, #16]
 8103840:	2b5c      	cmp	r3, #92	; 0x5c
 8103842:	d009      	beq.n	8103858 <xTaskCreateStatic+0x60>
 8103844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103848:	f383 8811 	msr	BASEPRI, r3
 810384c:	f3bf 8f6f 	isb	sy
 8103850:	f3bf 8f4f 	dsb	sy
 8103854:	61bb      	str	r3, [r7, #24]
 8103856:	e7fe      	b.n	8103856 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8103858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810385c:	2b00      	cmp	r3, #0
 810385e:	d01e      	beq.n	810389e <xTaskCreateStatic+0xa6>
 8103860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103862:	2b00      	cmp	r3, #0
 8103864:	d01b      	beq.n	810389e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8103866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103868:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810386e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8103870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103872:	2202      	movs	r2, #2
 8103874:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8103878:	2300      	movs	r3, #0
 810387a:	9303      	str	r3, [sp, #12]
 810387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810387e:	9302      	str	r3, [sp, #8]
 8103880:	f107 0314 	add.w	r3, r7, #20
 8103884:	9301      	str	r3, [sp, #4]
 8103886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103888:	9300      	str	r3, [sp, #0]
 810388a:	683b      	ldr	r3, [r7, #0]
 810388c:	687a      	ldr	r2, [r7, #4]
 810388e:	68b9      	ldr	r1, [r7, #8]
 8103890:	68f8      	ldr	r0, [r7, #12]
 8103892:	f000 f850 	bl	8103936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8103896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8103898:	f000 f8dc 	bl	8103a54 <prvAddNewTaskToReadyList>
 810389c:	e001      	b.n	81038a2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810389e:	2300      	movs	r3, #0
 81038a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81038a2:	697b      	ldr	r3, [r7, #20]
	}
 81038a4:	4618      	mov	r0, r3
 81038a6:	3728      	adds	r7, #40	; 0x28
 81038a8:	46bd      	mov	sp, r7
 81038aa:	bd80      	pop	{r7, pc}

081038ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81038ac:	b580      	push	{r7, lr}
 81038ae:	b08c      	sub	sp, #48	; 0x30
 81038b0:	af04      	add	r7, sp, #16
 81038b2:	60f8      	str	r0, [r7, #12]
 81038b4:	60b9      	str	r1, [r7, #8]
 81038b6:	603b      	str	r3, [r7, #0]
 81038b8:	4613      	mov	r3, r2
 81038ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81038bc:	88fb      	ldrh	r3, [r7, #6]
 81038be:	009b      	lsls	r3, r3, #2
 81038c0:	4618      	mov	r0, r3
 81038c2:	f7fe fdfb 	bl	81024bc <pvPortMalloc>
 81038c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81038c8:	697b      	ldr	r3, [r7, #20]
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d00e      	beq.n	81038ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81038ce:	205c      	movs	r0, #92	; 0x5c
 81038d0:	f7fe fdf4 	bl	81024bc <pvPortMalloc>
 81038d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81038d6:	69fb      	ldr	r3, [r7, #28]
 81038d8:	2b00      	cmp	r3, #0
 81038da:	d003      	beq.n	81038e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81038dc:	69fb      	ldr	r3, [r7, #28]
 81038de:	697a      	ldr	r2, [r7, #20]
 81038e0:	631a      	str	r2, [r3, #48]	; 0x30
 81038e2:	e005      	b.n	81038f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81038e4:	6978      	ldr	r0, [r7, #20]
 81038e6:	f7fe feab 	bl	8102640 <vPortFree>
 81038ea:	e001      	b.n	81038f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81038ec:	2300      	movs	r3, #0
 81038ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81038f0:	69fb      	ldr	r3, [r7, #28]
 81038f2:	2b00      	cmp	r3, #0
 81038f4:	d017      	beq.n	8103926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81038f6:	69fb      	ldr	r3, [r7, #28]
 81038f8:	2200      	movs	r2, #0
 81038fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81038fe:	88fa      	ldrh	r2, [r7, #6]
 8103900:	2300      	movs	r3, #0
 8103902:	9303      	str	r3, [sp, #12]
 8103904:	69fb      	ldr	r3, [r7, #28]
 8103906:	9302      	str	r3, [sp, #8]
 8103908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810390a:	9301      	str	r3, [sp, #4]
 810390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810390e:	9300      	str	r3, [sp, #0]
 8103910:	683b      	ldr	r3, [r7, #0]
 8103912:	68b9      	ldr	r1, [r7, #8]
 8103914:	68f8      	ldr	r0, [r7, #12]
 8103916:	f000 f80e 	bl	8103936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810391a:	69f8      	ldr	r0, [r7, #28]
 810391c:	f000 f89a 	bl	8103a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8103920:	2301      	movs	r3, #1
 8103922:	61bb      	str	r3, [r7, #24]
 8103924:	e002      	b.n	810392c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8103926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810392a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810392c:	69bb      	ldr	r3, [r7, #24]
	}
 810392e:	4618      	mov	r0, r3
 8103930:	3720      	adds	r7, #32
 8103932:	46bd      	mov	sp, r7
 8103934:	bd80      	pop	{r7, pc}

08103936 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8103936:	b580      	push	{r7, lr}
 8103938:	b088      	sub	sp, #32
 810393a:	af00      	add	r7, sp, #0
 810393c:	60f8      	str	r0, [r7, #12]
 810393e:	60b9      	str	r1, [r7, #8]
 8103940:	607a      	str	r2, [r7, #4]
 8103942:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8103944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103946:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	009b      	lsls	r3, r3, #2
 810394c:	461a      	mov	r2, r3
 810394e:	21a5      	movs	r1, #165	; 0xa5
 8103950:	f001 f9ad 	bl	8104cae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8103954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810395e:	3b01      	subs	r3, #1
 8103960:	009b      	lsls	r3, r3, #2
 8103962:	4413      	add	r3, r2
 8103964:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8103966:	69bb      	ldr	r3, [r7, #24]
 8103968:	f023 0307 	bic.w	r3, r3, #7
 810396c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810396e:	69bb      	ldr	r3, [r7, #24]
 8103970:	f003 0307 	and.w	r3, r3, #7
 8103974:	2b00      	cmp	r3, #0
 8103976:	d009      	beq.n	810398c <prvInitialiseNewTask+0x56>
 8103978:	f04f 0350 	mov.w	r3, #80	; 0x50
 810397c:	f383 8811 	msr	BASEPRI, r3
 8103980:	f3bf 8f6f 	isb	sy
 8103984:	f3bf 8f4f 	dsb	sy
 8103988:	617b      	str	r3, [r7, #20]
 810398a:	e7fe      	b.n	810398a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810398c:	68bb      	ldr	r3, [r7, #8]
 810398e:	2b00      	cmp	r3, #0
 8103990:	d01f      	beq.n	81039d2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103992:	2300      	movs	r3, #0
 8103994:	61fb      	str	r3, [r7, #28]
 8103996:	e012      	b.n	81039be <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8103998:	68ba      	ldr	r2, [r7, #8]
 810399a:	69fb      	ldr	r3, [r7, #28]
 810399c:	4413      	add	r3, r2
 810399e:	7819      	ldrb	r1, [r3, #0]
 81039a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81039a2:	69fb      	ldr	r3, [r7, #28]
 81039a4:	4413      	add	r3, r2
 81039a6:	3334      	adds	r3, #52	; 0x34
 81039a8:	460a      	mov	r2, r1
 81039aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81039ac:	68ba      	ldr	r2, [r7, #8]
 81039ae:	69fb      	ldr	r3, [r7, #28]
 81039b0:	4413      	add	r3, r2
 81039b2:	781b      	ldrb	r3, [r3, #0]
 81039b4:	2b00      	cmp	r3, #0
 81039b6:	d006      	beq.n	81039c6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81039b8:	69fb      	ldr	r3, [r7, #28]
 81039ba:	3301      	adds	r3, #1
 81039bc:	61fb      	str	r3, [r7, #28]
 81039be:	69fb      	ldr	r3, [r7, #28]
 81039c0:	2b0f      	cmp	r3, #15
 81039c2:	d9e9      	bls.n	8103998 <prvInitialiseNewTask+0x62>
 81039c4:	e000      	b.n	81039c8 <prvInitialiseNewTask+0x92>
			{
				break;
 81039c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039ca:	2200      	movs	r2, #0
 81039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 81039d0:	e003      	b.n	81039da <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039d4:	2200      	movs	r2, #0
 81039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039dc:	2b37      	cmp	r3, #55	; 0x37
 81039de:	d901      	bls.n	81039e4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81039e0:	2337      	movs	r3, #55	; 0x37
 81039e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81039e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81039ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039f2:	2200      	movs	r2, #0
 81039f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039f8:	3304      	adds	r3, #4
 81039fa:	4618      	mov	r0, r3
 81039fc:	f7fe ff54 	bl	81028a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8103a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a02:	3318      	adds	r3, #24
 8103a04:	4618      	mov	r0, r3
 8103a06:	f7fe ff4f 	bl	81028a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8103a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8103a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103a1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8103a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a22:	2200      	movs	r2, #0
 8103a24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8103a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a28:	2200      	movs	r2, #0
 8103a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8103a2e:	683a      	ldr	r2, [r7, #0]
 8103a30:	68f9      	ldr	r1, [r7, #12]
 8103a32:	69b8      	ldr	r0, [r7, #24]
 8103a34:	f7fe ffcc 	bl	81029d0 <pxPortInitialiseStack>
 8103a38:	4602      	mov	r2, r0
 8103a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8103a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d002      	beq.n	8103a4a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8103a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103a4a:	bf00      	nop
 8103a4c:	3720      	adds	r7, #32
 8103a4e:	46bd      	mov	sp, r7
 8103a50:	bd80      	pop	{r7, pc}
	...

08103a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8103a54:	b580      	push	{r7, lr}
 8103a56:	b082      	sub	sp, #8
 8103a58:	af00      	add	r7, sp, #0
 8103a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8103a5c:	f7ff f8de 	bl	8102c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8103a60:	4b2d      	ldr	r3, [pc, #180]	; (8103b18 <prvAddNewTaskToReadyList+0xc4>)
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	3301      	adds	r3, #1
 8103a66:	4a2c      	ldr	r2, [pc, #176]	; (8103b18 <prvAddNewTaskToReadyList+0xc4>)
 8103a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8103a6a:	4b2c      	ldr	r3, [pc, #176]	; (8103b1c <prvAddNewTaskToReadyList+0xc8>)
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	2b00      	cmp	r3, #0
 8103a70:	d109      	bne.n	8103a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8103a72:	4a2a      	ldr	r2, [pc, #168]	; (8103b1c <prvAddNewTaskToReadyList+0xc8>)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8103a78:	4b27      	ldr	r3, [pc, #156]	; (8103b18 <prvAddNewTaskToReadyList+0xc4>)
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	2b01      	cmp	r3, #1
 8103a7e:	d110      	bne.n	8103aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8103a80:	f000 fc08 	bl	8104294 <prvInitialiseTaskLists>
 8103a84:	e00d      	b.n	8103aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8103a86:	4b26      	ldr	r3, [pc, #152]	; (8103b20 <prvAddNewTaskToReadyList+0xcc>)
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d109      	bne.n	8103aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8103a8e:	4b23      	ldr	r3, [pc, #140]	; (8103b1c <prvAddNewTaskToReadyList+0xc8>)
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a98:	429a      	cmp	r2, r3
 8103a9a:	d802      	bhi.n	8103aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8103a9c:	4a1f      	ldr	r2, [pc, #124]	; (8103b1c <prvAddNewTaskToReadyList+0xc8>)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8103aa2:	4b20      	ldr	r3, [pc, #128]	; (8103b24 <prvAddNewTaskToReadyList+0xd0>)
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	3301      	adds	r3, #1
 8103aa8:	4a1e      	ldr	r2, [pc, #120]	; (8103b24 <prvAddNewTaskToReadyList+0xd0>)
 8103aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103aac:	4b1d      	ldr	r3, [pc, #116]	; (8103b24 <prvAddNewTaskToReadyList+0xd0>)
 8103aae:	681a      	ldr	r2, [r3, #0]
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103ab8:	4b1b      	ldr	r3, [pc, #108]	; (8103b28 <prvAddNewTaskToReadyList+0xd4>)
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	429a      	cmp	r2, r3
 8103abe:	d903      	bls.n	8103ac8 <prvAddNewTaskToReadyList+0x74>
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ac4:	4a18      	ldr	r2, [pc, #96]	; (8103b28 <prvAddNewTaskToReadyList+0xd4>)
 8103ac6:	6013      	str	r3, [r2, #0]
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103acc:	4613      	mov	r3, r2
 8103ace:	009b      	lsls	r3, r3, #2
 8103ad0:	4413      	add	r3, r2
 8103ad2:	009b      	lsls	r3, r3, #2
 8103ad4:	4a15      	ldr	r2, [pc, #84]	; (8103b2c <prvAddNewTaskToReadyList+0xd8>)
 8103ad6:	441a      	add	r2, r3
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	3304      	adds	r3, #4
 8103adc:	4619      	mov	r1, r3
 8103ade:	4610      	mov	r0, r2
 8103ae0:	f7fe feef 	bl	81028c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8103ae4:	f7ff f8c8 	bl	8102c78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103ae8:	4b0d      	ldr	r3, [pc, #52]	; (8103b20 <prvAddNewTaskToReadyList+0xcc>)
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d00e      	beq.n	8103b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8103af0:	4b0a      	ldr	r3, [pc, #40]	; (8103b1c <prvAddNewTaskToReadyList+0xc8>)
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103afa:	429a      	cmp	r2, r3
 8103afc:	d207      	bcs.n	8103b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8103afe:	4b0c      	ldr	r3, [pc, #48]	; (8103b30 <prvAddNewTaskToReadyList+0xdc>)
 8103b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103b04:	601a      	str	r2, [r3, #0]
 8103b06:	f3bf 8f4f 	dsb	sy
 8103b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103b0e:	bf00      	nop
 8103b10:	3708      	adds	r7, #8
 8103b12:	46bd      	mov	sp, r7
 8103b14:	bd80      	pop	{r7, pc}
 8103b16:	bf00      	nop
 8103b18:	100047fc 	.word	0x100047fc
 8103b1c:	10004328 	.word	0x10004328
 8103b20:	10004808 	.word	0x10004808
 8103b24:	10004818 	.word	0x10004818
 8103b28:	10004804 	.word	0x10004804
 8103b2c:	1000432c 	.word	0x1000432c
 8103b30:	e000ed04 	.word	0xe000ed04

08103b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8103b34:	b580      	push	{r7, lr}
 8103b36:	b084      	sub	sp, #16
 8103b38:	af00      	add	r7, sp, #0
 8103b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8103b3c:	2300      	movs	r3, #0
 8103b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d016      	beq.n	8103b74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8103b46:	4b13      	ldr	r3, [pc, #76]	; (8103b94 <vTaskDelay+0x60>)
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d009      	beq.n	8103b62 <vTaskDelay+0x2e>
 8103b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b52:	f383 8811 	msr	BASEPRI, r3
 8103b56:	f3bf 8f6f 	isb	sy
 8103b5a:	f3bf 8f4f 	dsb	sy
 8103b5e:	60bb      	str	r3, [r7, #8]
 8103b60:	e7fe      	b.n	8103b60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8103b62:	f000 f87f 	bl	8103c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8103b66:	2100      	movs	r1, #0
 8103b68:	6878      	ldr	r0, [r7, #4]
 8103b6a:	f000 fcd7 	bl	810451c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8103b6e:	f000 f887 	bl	8103c80 <xTaskResumeAll>
 8103b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8103b74:	68fb      	ldr	r3, [r7, #12]
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d107      	bne.n	8103b8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8103b7a:	4b07      	ldr	r3, [pc, #28]	; (8103b98 <vTaskDelay+0x64>)
 8103b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103b80:	601a      	str	r2, [r3, #0]
 8103b82:	f3bf 8f4f 	dsb	sy
 8103b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8103b8a:	bf00      	nop
 8103b8c:	3710      	adds	r7, #16
 8103b8e:	46bd      	mov	sp, r7
 8103b90:	bd80      	pop	{r7, pc}
 8103b92:	bf00      	nop
 8103b94:	10004824 	.word	0x10004824
 8103b98:	e000ed04 	.word	0xe000ed04

08103b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8103b9c:	b580      	push	{r7, lr}
 8103b9e:	b08a      	sub	sp, #40	; 0x28
 8103ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8103ba2:	2300      	movs	r3, #0
 8103ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8103ba6:	2300      	movs	r3, #0
 8103ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8103baa:	463a      	mov	r2, r7
 8103bac:	1d39      	adds	r1, r7, #4
 8103bae:	f107 0308 	add.w	r3, r7, #8
 8103bb2:	4618      	mov	r0, r3
 8103bb4:	f7fe fc4e 	bl	8102454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8103bb8:	6839      	ldr	r1, [r7, #0]
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	68ba      	ldr	r2, [r7, #8]
 8103bbe:	9202      	str	r2, [sp, #8]
 8103bc0:	9301      	str	r3, [sp, #4]
 8103bc2:	2300      	movs	r3, #0
 8103bc4:	9300      	str	r3, [sp, #0]
 8103bc6:	2300      	movs	r3, #0
 8103bc8:	460a      	mov	r2, r1
 8103bca:	4920      	ldr	r1, [pc, #128]	; (8103c4c <vTaskStartScheduler+0xb0>)
 8103bcc:	4820      	ldr	r0, [pc, #128]	; (8103c50 <vTaskStartScheduler+0xb4>)
 8103bce:	f7ff fe13 	bl	81037f8 <xTaskCreateStatic>
 8103bd2:	4602      	mov	r2, r0
 8103bd4:	4b1f      	ldr	r3, [pc, #124]	; (8103c54 <vTaskStartScheduler+0xb8>)
 8103bd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8103bd8:	4b1e      	ldr	r3, [pc, #120]	; (8103c54 <vTaskStartScheduler+0xb8>)
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	2b00      	cmp	r3, #0
 8103bde:	d002      	beq.n	8103be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8103be0:	2301      	movs	r3, #1
 8103be2:	617b      	str	r3, [r7, #20]
 8103be4:	e001      	b.n	8103bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8103be6:	2300      	movs	r3, #0
 8103be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8103bea:	697b      	ldr	r3, [r7, #20]
 8103bec:	2b01      	cmp	r3, #1
 8103bee:	d102      	bne.n	8103bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8103bf0:	f000 fce8 	bl	81045c4 <xTimerCreateTimerTask>
 8103bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8103bf6:	697b      	ldr	r3, [r7, #20]
 8103bf8:	2b01      	cmp	r3, #1
 8103bfa:	d115      	bne.n	8103c28 <vTaskStartScheduler+0x8c>
 8103bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c00:	f383 8811 	msr	BASEPRI, r3
 8103c04:	f3bf 8f6f 	isb	sy
 8103c08:	f3bf 8f4f 	dsb	sy
 8103c0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8103c0e:	4b12      	ldr	r3, [pc, #72]	; (8103c58 <vTaskStartScheduler+0xbc>)
 8103c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8103c16:	4b11      	ldr	r3, [pc, #68]	; (8103c5c <vTaskStartScheduler+0xc0>)
 8103c18:	2201      	movs	r2, #1
 8103c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8103c1c:	4b10      	ldr	r3, [pc, #64]	; (8103c60 <vTaskStartScheduler+0xc4>)
 8103c1e:	2200      	movs	r2, #0
 8103c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8103c22:	f7fe ff5d 	bl	8102ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8103c26:	e00d      	b.n	8103c44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8103c28:	697b      	ldr	r3, [r7, #20]
 8103c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103c2e:	d109      	bne.n	8103c44 <vTaskStartScheduler+0xa8>
 8103c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c34:	f383 8811 	msr	BASEPRI, r3
 8103c38:	f3bf 8f6f 	isb	sy
 8103c3c:	f3bf 8f4f 	dsb	sy
 8103c40:	60fb      	str	r3, [r7, #12]
 8103c42:	e7fe      	b.n	8103c42 <vTaskStartScheduler+0xa6>
}
 8103c44:	bf00      	nop
 8103c46:	3718      	adds	r7, #24
 8103c48:	46bd      	mov	sp, r7
 8103c4a:	bd80      	pop	{r7, pc}
 8103c4c:	08104d30 	.word	0x08104d30
 8103c50:	08104265 	.word	0x08104265
 8103c54:	10004820 	.word	0x10004820
 8103c58:	1000481c 	.word	0x1000481c
 8103c5c:	10004808 	.word	0x10004808
 8103c60:	10004800 	.word	0x10004800

08103c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8103c64:	b480      	push	{r7}
 8103c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8103c68:	4b04      	ldr	r3, [pc, #16]	; (8103c7c <vTaskSuspendAll+0x18>)
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	3301      	adds	r3, #1
 8103c6e:	4a03      	ldr	r2, [pc, #12]	; (8103c7c <vTaskSuspendAll+0x18>)
 8103c70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8103c72:	bf00      	nop
 8103c74:	46bd      	mov	sp, r7
 8103c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c7a:	4770      	bx	lr
 8103c7c:	10004824 	.word	0x10004824

08103c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8103c80:	b580      	push	{r7, lr}
 8103c82:	b084      	sub	sp, #16
 8103c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8103c86:	2300      	movs	r3, #0
 8103c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8103c8a:	2300      	movs	r3, #0
 8103c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8103c8e:	4b41      	ldr	r3, [pc, #260]	; (8103d94 <xTaskResumeAll+0x114>)
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	2b00      	cmp	r3, #0
 8103c94:	d109      	bne.n	8103caa <xTaskResumeAll+0x2a>
 8103c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c9a:	f383 8811 	msr	BASEPRI, r3
 8103c9e:	f3bf 8f6f 	isb	sy
 8103ca2:	f3bf 8f4f 	dsb	sy
 8103ca6:	603b      	str	r3, [r7, #0]
 8103ca8:	e7fe      	b.n	8103ca8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8103caa:	f7fe ffb7 	bl	8102c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8103cae:	4b39      	ldr	r3, [pc, #228]	; (8103d94 <xTaskResumeAll+0x114>)
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	3b01      	subs	r3, #1
 8103cb4:	4a37      	ldr	r2, [pc, #220]	; (8103d94 <xTaskResumeAll+0x114>)
 8103cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103cb8:	4b36      	ldr	r3, [pc, #216]	; (8103d94 <xTaskResumeAll+0x114>)
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	2b00      	cmp	r3, #0
 8103cbe:	d162      	bne.n	8103d86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8103cc0:	4b35      	ldr	r3, [pc, #212]	; (8103d98 <xTaskResumeAll+0x118>)
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d05e      	beq.n	8103d86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103cc8:	e02f      	b.n	8103d2a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103cca:	4b34      	ldr	r3, [pc, #208]	; (8103d9c <xTaskResumeAll+0x11c>)
 8103ccc:	68db      	ldr	r3, [r3, #12]
 8103cce:	68db      	ldr	r3, [r3, #12]
 8103cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8103cd2:	68fb      	ldr	r3, [r7, #12]
 8103cd4:	3318      	adds	r3, #24
 8103cd6:	4618      	mov	r0, r3
 8103cd8:	f7fe fe50 	bl	810297c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	3304      	adds	r3, #4
 8103ce0:	4618      	mov	r0, r3
 8103ce2:	f7fe fe4b 	bl	810297c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8103ce6:	68fb      	ldr	r3, [r7, #12]
 8103ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103cea:	4b2d      	ldr	r3, [pc, #180]	; (8103da0 <xTaskResumeAll+0x120>)
 8103cec:	681b      	ldr	r3, [r3, #0]
 8103cee:	429a      	cmp	r2, r3
 8103cf0:	d903      	bls.n	8103cfa <xTaskResumeAll+0x7a>
 8103cf2:	68fb      	ldr	r3, [r7, #12]
 8103cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cf6:	4a2a      	ldr	r2, [pc, #168]	; (8103da0 <xTaskResumeAll+0x120>)
 8103cf8:	6013      	str	r3, [r2, #0]
 8103cfa:	68fb      	ldr	r3, [r7, #12]
 8103cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103cfe:	4613      	mov	r3, r2
 8103d00:	009b      	lsls	r3, r3, #2
 8103d02:	4413      	add	r3, r2
 8103d04:	009b      	lsls	r3, r3, #2
 8103d06:	4a27      	ldr	r2, [pc, #156]	; (8103da4 <xTaskResumeAll+0x124>)
 8103d08:	441a      	add	r2, r3
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	3304      	adds	r3, #4
 8103d0e:	4619      	mov	r1, r3
 8103d10:	4610      	mov	r0, r2
 8103d12:	f7fe fdd6 	bl	81028c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103d16:	68fb      	ldr	r3, [r7, #12]
 8103d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103d1a:	4b23      	ldr	r3, [pc, #140]	; (8103da8 <xTaskResumeAll+0x128>)
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d20:	429a      	cmp	r2, r3
 8103d22:	d302      	bcc.n	8103d2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8103d24:	4b21      	ldr	r3, [pc, #132]	; (8103dac <xTaskResumeAll+0x12c>)
 8103d26:	2201      	movs	r2, #1
 8103d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103d2a:	4b1c      	ldr	r3, [pc, #112]	; (8103d9c <xTaskResumeAll+0x11c>)
 8103d2c:	681b      	ldr	r3, [r3, #0]
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d1cb      	bne.n	8103cca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8103d32:	68fb      	ldr	r3, [r7, #12]
 8103d34:	2b00      	cmp	r3, #0
 8103d36:	d001      	beq.n	8103d3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8103d38:	f000 fb46 	bl	81043c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8103d3c:	4b1c      	ldr	r3, [pc, #112]	; (8103db0 <xTaskResumeAll+0x130>)
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d010      	beq.n	8103d6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8103d48:	f000 f846 	bl	8103dd8 <xTaskIncrementTick>
 8103d4c:	4603      	mov	r3, r0
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d002      	beq.n	8103d58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8103d52:	4b16      	ldr	r3, [pc, #88]	; (8103dac <xTaskResumeAll+0x12c>)
 8103d54:	2201      	movs	r2, #1
 8103d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	3b01      	subs	r3, #1
 8103d5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d1f1      	bne.n	8103d48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8103d64:	4b12      	ldr	r3, [pc, #72]	; (8103db0 <xTaskResumeAll+0x130>)
 8103d66:	2200      	movs	r2, #0
 8103d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8103d6a:	4b10      	ldr	r3, [pc, #64]	; (8103dac <xTaskResumeAll+0x12c>)
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	2b00      	cmp	r3, #0
 8103d70:	d009      	beq.n	8103d86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8103d72:	2301      	movs	r3, #1
 8103d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8103d76:	4b0f      	ldr	r3, [pc, #60]	; (8103db4 <xTaskResumeAll+0x134>)
 8103d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103d7c:	601a      	str	r2, [r3, #0]
 8103d7e:	f3bf 8f4f 	dsb	sy
 8103d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8103d86:	f7fe ff77 	bl	8102c78 <vPortExitCritical>

	return xAlreadyYielded;
 8103d8a:	68bb      	ldr	r3, [r7, #8]
}
 8103d8c:	4618      	mov	r0, r3
 8103d8e:	3710      	adds	r7, #16
 8103d90:	46bd      	mov	sp, r7
 8103d92:	bd80      	pop	{r7, pc}
 8103d94:	10004824 	.word	0x10004824
 8103d98:	100047fc 	.word	0x100047fc
 8103d9c:	100047bc 	.word	0x100047bc
 8103da0:	10004804 	.word	0x10004804
 8103da4:	1000432c 	.word	0x1000432c
 8103da8:	10004328 	.word	0x10004328
 8103dac:	10004810 	.word	0x10004810
 8103db0:	1000480c 	.word	0x1000480c
 8103db4:	e000ed04 	.word	0xe000ed04

08103db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103db8:	b480      	push	{r7}
 8103dba:	b083      	sub	sp, #12
 8103dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8103dbe:	4b05      	ldr	r3, [pc, #20]	; (8103dd4 <xTaskGetTickCount+0x1c>)
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8103dc4:	687b      	ldr	r3, [r7, #4]
}
 8103dc6:	4618      	mov	r0, r3
 8103dc8:	370c      	adds	r7, #12
 8103dca:	46bd      	mov	sp, r7
 8103dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dd0:	4770      	bx	lr
 8103dd2:	bf00      	nop
 8103dd4:	10004800 	.word	0x10004800

08103dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103dd8:	b580      	push	{r7, lr}
 8103dda:	b086      	sub	sp, #24
 8103ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8103dde:	2300      	movs	r3, #0
 8103de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103de2:	4b4e      	ldr	r3, [pc, #312]	; (8103f1c <xTaskIncrementTick+0x144>)
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	f040 8088 	bne.w	8103efc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103dec:	4b4c      	ldr	r3, [pc, #304]	; (8103f20 <xTaskIncrementTick+0x148>)
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	3301      	adds	r3, #1
 8103df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8103df4:	4a4a      	ldr	r2, [pc, #296]	; (8103f20 <xTaskIncrementTick+0x148>)
 8103df6:	693b      	ldr	r3, [r7, #16]
 8103df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8103dfa:	693b      	ldr	r3, [r7, #16]
 8103dfc:	2b00      	cmp	r3, #0
 8103dfe:	d11f      	bne.n	8103e40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8103e00:	4b48      	ldr	r3, [pc, #288]	; (8103f24 <xTaskIncrementTick+0x14c>)
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d009      	beq.n	8103e1e <xTaskIncrementTick+0x46>
 8103e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103e0e:	f383 8811 	msr	BASEPRI, r3
 8103e12:	f3bf 8f6f 	isb	sy
 8103e16:	f3bf 8f4f 	dsb	sy
 8103e1a:	603b      	str	r3, [r7, #0]
 8103e1c:	e7fe      	b.n	8103e1c <xTaskIncrementTick+0x44>
 8103e1e:	4b41      	ldr	r3, [pc, #260]	; (8103f24 <xTaskIncrementTick+0x14c>)
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	60fb      	str	r3, [r7, #12]
 8103e24:	4b40      	ldr	r3, [pc, #256]	; (8103f28 <xTaskIncrementTick+0x150>)
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a3e      	ldr	r2, [pc, #248]	; (8103f24 <xTaskIncrementTick+0x14c>)
 8103e2a:	6013      	str	r3, [r2, #0]
 8103e2c:	4a3e      	ldr	r2, [pc, #248]	; (8103f28 <xTaskIncrementTick+0x150>)
 8103e2e:	68fb      	ldr	r3, [r7, #12]
 8103e30:	6013      	str	r3, [r2, #0]
 8103e32:	4b3e      	ldr	r3, [pc, #248]	; (8103f2c <xTaskIncrementTick+0x154>)
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	3301      	adds	r3, #1
 8103e38:	4a3c      	ldr	r2, [pc, #240]	; (8103f2c <xTaskIncrementTick+0x154>)
 8103e3a:	6013      	str	r3, [r2, #0]
 8103e3c:	f000 fac4 	bl	81043c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8103e40:	4b3b      	ldr	r3, [pc, #236]	; (8103f30 <xTaskIncrementTick+0x158>)
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	693a      	ldr	r2, [r7, #16]
 8103e46:	429a      	cmp	r2, r3
 8103e48:	d349      	bcc.n	8103ede <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103e4a:	4b36      	ldr	r3, [pc, #216]	; (8103f24 <xTaskIncrementTick+0x14c>)
 8103e4c:	681b      	ldr	r3, [r3, #0]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d104      	bne.n	8103e5e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103e54:	4b36      	ldr	r3, [pc, #216]	; (8103f30 <xTaskIncrementTick+0x158>)
 8103e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103e5a:	601a      	str	r2, [r3, #0]
					break;
 8103e5c:	e03f      	b.n	8103ede <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103e5e:	4b31      	ldr	r3, [pc, #196]	; (8103f24 <xTaskIncrementTick+0x14c>)
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	68db      	ldr	r3, [r3, #12]
 8103e64:	68db      	ldr	r3, [r3, #12]
 8103e66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8103e68:	68bb      	ldr	r3, [r7, #8]
 8103e6a:	685b      	ldr	r3, [r3, #4]
 8103e6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8103e6e:	693a      	ldr	r2, [r7, #16]
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	429a      	cmp	r2, r3
 8103e74:	d203      	bcs.n	8103e7e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8103e76:	4a2e      	ldr	r2, [pc, #184]	; (8103f30 <xTaskIncrementTick+0x158>)
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8103e7c:	e02f      	b.n	8103ede <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103e7e:	68bb      	ldr	r3, [r7, #8]
 8103e80:	3304      	adds	r3, #4
 8103e82:	4618      	mov	r0, r3
 8103e84:	f7fe fd7a 	bl	810297c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103e88:	68bb      	ldr	r3, [r7, #8]
 8103e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d004      	beq.n	8103e9a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8103e90:	68bb      	ldr	r3, [r7, #8]
 8103e92:	3318      	adds	r3, #24
 8103e94:	4618      	mov	r0, r3
 8103e96:	f7fe fd71 	bl	810297c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103e9a:	68bb      	ldr	r3, [r7, #8]
 8103e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103e9e:	4b25      	ldr	r3, [pc, #148]	; (8103f34 <xTaskIncrementTick+0x15c>)
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	429a      	cmp	r2, r3
 8103ea4:	d903      	bls.n	8103eae <xTaskIncrementTick+0xd6>
 8103ea6:	68bb      	ldr	r3, [r7, #8]
 8103ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eaa:	4a22      	ldr	r2, [pc, #136]	; (8103f34 <xTaskIncrementTick+0x15c>)
 8103eac:	6013      	str	r3, [r2, #0]
 8103eae:	68bb      	ldr	r3, [r7, #8]
 8103eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103eb2:	4613      	mov	r3, r2
 8103eb4:	009b      	lsls	r3, r3, #2
 8103eb6:	4413      	add	r3, r2
 8103eb8:	009b      	lsls	r3, r3, #2
 8103eba:	4a1f      	ldr	r2, [pc, #124]	; (8103f38 <xTaskIncrementTick+0x160>)
 8103ebc:	441a      	add	r2, r3
 8103ebe:	68bb      	ldr	r3, [r7, #8]
 8103ec0:	3304      	adds	r3, #4
 8103ec2:	4619      	mov	r1, r3
 8103ec4:	4610      	mov	r0, r2
 8103ec6:	f7fe fcfc 	bl	81028c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103eca:	68bb      	ldr	r3, [r7, #8]
 8103ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103ece:	4b1b      	ldr	r3, [pc, #108]	; (8103f3c <xTaskIncrementTick+0x164>)
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ed4:	429a      	cmp	r2, r3
 8103ed6:	d3b8      	bcc.n	8103e4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8103ed8:	2301      	movs	r3, #1
 8103eda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103edc:	e7b5      	b.n	8103e4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8103ede:	4b17      	ldr	r3, [pc, #92]	; (8103f3c <xTaskIncrementTick+0x164>)
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103ee4:	4914      	ldr	r1, [pc, #80]	; (8103f38 <xTaskIncrementTick+0x160>)
 8103ee6:	4613      	mov	r3, r2
 8103ee8:	009b      	lsls	r3, r3, #2
 8103eea:	4413      	add	r3, r2
 8103eec:	009b      	lsls	r3, r3, #2
 8103eee:	440b      	add	r3, r1
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	2b01      	cmp	r3, #1
 8103ef4:	d907      	bls.n	8103f06 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8103ef6:	2301      	movs	r3, #1
 8103ef8:	617b      	str	r3, [r7, #20]
 8103efa:	e004      	b.n	8103f06 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8103efc:	4b10      	ldr	r3, [pc, #64]	; (8103f40 <xTaskIncrementTick+0x168>)
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	3301      	adds	r3, #1
 8103f02:	4a0f      	ldr	r2, [pc, #60]	; (8103f40 <xTaskIncrementTick+0x168>)
 8103f04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8103f06:	4b0f      	ldr	r3, [pc, #60]	; (8103f44 <xTaskIncrementTick+0x16c>)
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	2b00      	cmp	r3, #0
 8103f0c:	d001      	beq.n	8103f12 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8103f0e:	2301      	movs	r3, #1
 8103f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8103f12:	697b      	ldr	r3, [r7, #20]
}
 8103f14:	4618      	mov	r0, r3
 8103f16:	3718      	adds	r7, #24
 8103f18:	46bd      	mov	sp, r7
 8103f1a:	bd80      	pop	{r7, pc}
 8103f1c:	10004824 	.word	0x10004824
 8103f20:	10004800 	.word	0x10004800
 8103f24:	100047b4 	.word	0x100047b4
 8103f28:	100047b8 	.word	0x100047b8
 8103f2c:	10004814 	.word	0x10004814
 8103f30:	1000481c 	.word	0x1000481c
 8103f34:	10004804 	.word	0x10004804
 8103f38:	1000432c 	.word	0x1000432c
 8103f3c:	10004328 	.word	0x10004328
 8103f40:	1000480c 	.word	0x1000480c
 8103f44:	10004810 	.word	0x10004810

08103f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8103f48:	b480      	push	{r7}
 8103f4a:	b085      	sub	sp, #20
 8103f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8103f4e:	4b27      	ldr	r3, [pc, #156]	; (8103fec <vTaskSwitchContext+0xa4>)
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d003      	beq.n	8103f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8103f56:	4b26      	ldr	r3, [pc, #152]	; (8103ff0 <vTaskSwitchContext+0xa8>)
 8103f58:	2201      	movs	r2, #1
 8103f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8103f5c:	e040      	b.n	8103fe0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8103f5e:	4b24      	ldr	r3, [pc, #144]	; (8103ff0 <vTaskSwitchContext+0xa8>)
 8103f60:	2200      	movs	r2, #0
 8103f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103f64:	4b23      	ldr	r3, [pc, #140]	; (8103ff4 <vTaskSwitchContext+0xac>)
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	60fb      	str	r3, [r7, #12]
 8103f6a:	e00f      	b.n	8103f8c <vTaskSwitchContext+0x44>
 8103f6c:	68fb      	ldr	r3, [r7, #12]
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d109      	bne.n	8103f86 <vTaskSwitchContext+0x3e>
 8103f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f76:	f383 8811 	msr	BASEPRI, r3
 8103f7a:	f3bf 8f6f 	isb	sy
 8103f7e:	f3bf 8f4f 	dsb	sy
 8103f82:	607b      	str	r3, [r7, #4]
 8103f84:	e7fe      	b.n	8103f84 <vTaskSwitchContext+0x3c>
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	3b01      	subs	r3, #1
 8103f8a:	60fb      	str	r3, [r7, #12]
 8103f8c:	491a      	ldr	r1, [pc, #104]	; (8103ff8 <vTaskSwitchContext+0xb0>)
 8103f8e:	68fa      	ldr	r2, [r7, #12]
 8103f90:	4613      	mov	r3, r2
 8103f92:	009b      	lsls	r3, r3, #2
 8103f94:	4413      	add	r3, r2
 8103f96:	009b      	lsls	r3, r3, #2
 8103f98:	440b      	add	r3, r1
 8103f9a:	681b      	ldr	r3, [r3, #0]
 8103f9c:	2b00      	cmp	r3, #0
 8103f9e:	d0e5      	beq.n	8103f6c <vTaskSwitchContext+0x24>
 8103fa0:	68fa      	ldr	r2, [r7, #12]
 8103fa2:	4613      	mov	r3, r2
 8103fa4:	009b      	lsls	r3, r3, #2
 8103fa6:	4413      	add	r3, r2
 8103fa8:	009b      	lsls	r3, r3, #2
 8103faa:	4a13      	ldr	r2, [pc, #76]	; (8103ff8 <vTaskSwitchContext+0xb0>)
 8103fac:	4413      	add	r3, r2
 8103fae:	60bb      	str	r3, [r7, #8]
 8103fb0:	68bb      	ldr	r3, [r7, #8]
 8103fb2:	685b      	ldr	r3, [r3, #4]
 8103fb4:	685a      	ldr	r2, [r3, #4]
 8103fb6:	68bb      	ldr	r3, [r7, #8]
 8103fb8:	605a      	str	r2, [r3, #4]
 8103fba:	68bb      	ldr	r3, [r7, #8]
 8103fbc:	685a      	ldr	r2, [r3, #4]
 8103fbe:	68bb      	ldr	r3, [r7, #8]
 8103fc0:	3308      	adds	r3, #8
 8103fc2:	429a      	cmp	r2, r3
 8103fc4:	d104      	bne.n	8103fd0 <vTaskSwitchContext+0x88>
 8103fc6:	68bb      	ldr	r3, [r7, #8]
 8103fc8:	685b      	ldr	r3, [r3, #4]
 8103fca:	685a      	ldr	r2, [r3, #4]
 8103fcc:	68bb      	ldr	r3, [r7, #8]
 8103fce:	605a      	str	r2, [r3, #4]
 8103fd0:	68bb      	ldr	r3, [r7, #8]
 8103fd2:	685b      	ldr	r3, [r3, #4]
 8103fd4:	68db      	ldr	r3, [r3, #12]
 8103fd6:	4a09      	ldr	r2, [pc, #36]	; (8103ffc <vTaskSwitchContext+0xb4>)
 8103fd8:	6013      	str	r3, [r2, #0]
 8103fda:	4a06      	ldr	r2, [pc, #24]	; (8103ff4 <vTaskSwitchContext+0xac>)
 8103fdc:	68fb      	ldr	r3, [r7, #12]
 8103fde:	6013      	str	r3, [r2, #0]
}
 8103fe0:	bf00      	nop
 8103fe2:	3714      	adds	r7, #20
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fea:	4770      	bx	lr
 8103fec:	10004824 	.word	0x10004824
 8103ff0:	10004810 	.word	0x10004810
 8103ff4:	10004804 	.word	0x10004804
 8103ff8:	1000432c 	.word	0x1000432c
 8103ffc:	10004328 	.word	0x10004328

08104000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8104000:	b580      	push	{r7, lr}
 8104002:	b084      	sub	sp, #16
 8104004:	af00      	add	r7, sp, #0
 8104006:	6078      	str	r0, [r7, #4]
 8104008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	2b00      	cmp	r3, #0
 810400e:	d109      	bne.n	8104024 <vTaskPlaceOnEventList+0x24>
 8104010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104014:	f383 8811 	msr	BASEPRI, r3
 8104018:	f3bf 8f6f 	isb	sy
 810401c:	f3bf 8f4f 	dsb	sy
 8104020:	60fb      	str	r3, [r7, #12]
 8104022:	e7fe      	b.n	8104022 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8104024:	4b07      	ldr	r3, [pc, #28]	; (8104044 <vTaskPlaceOnEventList+0x44>)
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	3318      	adds	r3, #24
 810402a:	4619      	mov	r1, r3
 810402c:	6878      	ldr	r0, [r7, #4]
 810402e:	f7fe fc6c 	bl	810290a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8104032:	2101      	movs	r1, #1
 8104034:	6838      	ldr	r0, [r7, #0]
 8104036:	f000 fa71 	bl	810451c <prvAddCurrentTaskToDelayedList>
}
 810403a:	bf00      	nop
 810403c:	3710      	adds	r7, #16
 810403e:	46bd      	mov	sp, r7
 8104040:	bd80      	pop	{r7, pc}
 8104042:	bf00      	nop
 8104044:	10004328 	.word	0x10004328

08104048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8104048:	b580      	push	{r7, lr}
 810404a:	b086      	sub	sp, #24
 810404c:	af00      	add	r7, sp, #0
 810404e:	60f8      	str	r0, [r7, #12]
 8104050:	60b9      	str	r1, [r7, #8]
 8104052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8104054:	68fb      	ldr	r3, [r7, #12]
 8104056:	2b00      	cmp	r3, #0
 8104058:	d109      	bne.n	810406e <vTaskPlaceOnEventListRestricted+0x26>
 810405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810405e:	f383 8811 	msr	BASEPRI, r3
 8104062:	f3bf 8f6f 	isb	sy
 8104066:	f3bf 8f4f 	dsb	sy
 810406a:	617b      	str	r3, [r7, #20]
 810406c:	e7fe      	b.n	810406c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810406e:	4b0a      	ldr	r3, [pc, #40]	; (8104098 <vTaskPlaceOnEventListRestricted+0x50>)
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	3318      	adds	r3, #24
 8104074:	4619      	mov	r1, r3
 8104076:	68f8      	ldr	r0, [r7, #12]
 8104078:	f7fe fc23 	bl	81028c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	2b00      	cmp	r3, #0
 8104080:	d002      	beq.n	8104088 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8104082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8104086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8104088:	6879      	ldr	r1, [r7, #4]
 810408a:	68b8      	ldr	r0, [r7, #8]
 810408c:	f000 fa46 	bl	810451c <prvAddCurrentTaskToDelayedList>
	}
 8104090:	bf00      	nop
 8104092:	3718      	adds	r7, #24
 8104094:	46bd      	mov	sp, r7
 8104096:	bd80      	pop	{r7, pc}
 8104098:	10004328 	.word	0x10004328

0810409c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810409c:	b580      	push	{r7, lr}
 810409e:	b086      	sub	sp, #24
 81040a0:	af00      	add	r7, sp, #0
 81040a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	68db      	ldr	r3, [r3, #12]
 81040a8:	68db      	ldr	r3, [r3, #12]
 81040aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81040ac:	693b      	ldr	r3, [r7, #16]
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d109      	bne.n	81040c6 <xTaskRemoveFromEventList+0x2a>
 81040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81040b6:	f383 8811 	msr	BASEPRI, r3
 81040ba:	f3bf 8f6f 	isb	sy
 81040be:	f3bf 8f4f 	dsb	sy
 81040c2:	60fb      	str	r3, [r7, #12]
 81040c4:	e7fe      	b.n	81040c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81040c6:	693b      	ldr	r3, [r7, #16]
 81040c8:	3318      	adds	r3, #24
 81040ca:	4618      	mov	r0, r3
 81040cc:	f7fe fc56 	bl	810297c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81040d0:	4b1d      	ldr	r3, [pc, #116]	; (8104148 <xTaskRemoveFromEventList+0xac>)
 81040d2:	681b      	ldr	r3, [r3, #0]
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d11d      	bne.n	8104114 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81040d8:	693b      	ldr	r3, [r7, #16]
 81040da:	3304      	adds	r3, #4
 81040dc:	4618      	mov	r0, r3
 81040de:	f7fe fc4d 	bl	810297c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81040e2:	693b      	ldr	r3, [r7, #16]
 81040e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81040e6:	4b19      	ldr	r3, [pc, #100]	; (810414c <xTaskRemoveFromEventList+0xb0>)
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	429a      	cmp	r2, r3
 81040ec:	d903      	bls.n	81040f6 <xTaskRemoveFromEventList+0x5a>
 81040ee:	693b      	ldr	r3, [r7, #16]
 81040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040f2:	4a16      	ldr	r2, [pc, #88]	; (810414c <xTaskRemoveFromEventList+0xb0>)
 81040f4:	6013      	str	r3, [r2, #0]
 81040f6:	693b      	ldr	r3, [r7, #16]
 81040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81040fa:	4613      	mov	r3, r2
 81040fc:	009b      	lsls	r3, r3, #2
 81040fe:	4413      	add	r3, r2
 8104100:	009b      	lsls	r3, r3, #2
 8104102:	4a13      	ldr	r2, [pc, #76]	; (8104150 <xTaskRemoveFromEventList+0xb4>)
 8104104:	441a      	add	r2, r3
 8104106:	693b      	ldr	r3, [r7, #16]
 8104108:	3304      	adds	r3, #4
 810410a:	4619      	mov	r1, r3
 810410c:	4610      	mov	r0, r2
 810410e:	f7fe fbd8 	bl	81028c2 <vListInsertEnd>
 8104112:	e005      	b.n	8104120 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8104114:	693b      	ldr	r3, [r7, #16]
 8104116:	3318      	adds	r3, #24
 8104118:	4619      	mov	r1, r3
 810411a:	480e      	ldr	r0, [pc, #56]	; (8104154 <xTaskRemoveFromEventList+0xb8>)
 810411c:	f7fe fbd1 	bl	81028c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8104120:	693b      	ldr	r3, [r7, #16]
 8104122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104124:	4b0c      	ldr	r3, [pc, #48]	; (8104158 <xTaskRemoveFromEventList+0xbc>)
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810412a:	429a      	cmp	r2, r3
 810412c:	d905      	bls.n	810413a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810412e:	2301      	movs	r3, #1
 8104130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8104132:	4b0a      	ldr	r3, [pc, #40]	; (810415c <xTaskRemoveFromEventList+0xc0>)
 8104134:	2201      	movs	r2, #1
 8104136:	601a      	str	r2, [r3, #0]
 8104138:	e001      	b.n	810413e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810413a:	2300      	movs	r3, #0
 810413c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810413e:	697b      	ldr	r3, [r7, #20]
}
 8104140:	4618      	mov	r0, r3
 8104142:	3718      	adds	r7, #24
 8104144:	46bd      	mov	sp, r7
 8104146:	bd80      	pop	{r7, pc}
 8104148:	10004824 	.word	0x10004824
 810414c:	10004804 	.word	0x10004804
 8104150:	1000432c 	.word	0x1000432c
 8104154:	100047bc 	.word	0x100047bc
 8104158:	10004328 	.word	0x10004328
 810415c:	10004810 	.word	0x10004810

08104160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8104160:	b480      	push	{r7}
 8104162:	b083      	sub	sp, #12
 8104164:	af00      	add	r7, sp, #0
 8104166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8104168:	4b06      	ldr	r3, [pc, #24]	; (8104184 <vTaskInternalSetTimeOutState+0x24>)
 810416a:	681a      	ldr	r2, [r3, #0]
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8104170:	4b05      	ldr	r3, [pc, #20]	; (8104188 <vTaskInternalSetTimeOutState+0x28>)
 8104172:	681a      	ldr	r2, [r3, #0]
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	605a      	str	r2, [r3, #4]
}
 8104178:	bf00      	nop
 810417a:	370c      	adds	r7, #12
 810417c:	46bd      	mov	sp, r7
 810417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104182:	4770      	bx	lr
 8104184:	10004814 	.word	0x10004814
 8104188:	10004800 	.word	0x10004800

0810418c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810418c:	b580      	push	{r7, lr}
 810418e:	b088      	sub	sp, #32
 8104190:	af00      	add	r7, sp, #0
 8104192:	6078      	str	r0, [r7, #4]
 8104194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	2b00      	cmp	r3, #0
 810419a:	d109      	bne.n	81041b0 <xTaskCheckForTimeOut+0x24>
 810419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81041a0:	f383 8811 	msr	BASEPRI, r3
 81041a4:	f3bf 8f6f 	isb	sy
 81041a8:	f3bf 8f4f 	dsb	sy
 81041ac:	613b      	str	r3, [r7, #16]
 81041ae:	e7fe      	b.n	81041ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 81041b0:	683b      	ldr	r3, [r7, #0]
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d109      	bne.n	81041ca <xTaskCheckForTimeOut+0x3e>
 81041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81041ba:	f383 8811 	msr	BASEPRI, r3
 81041be:	f3bf 8f6f 	isb	sy
 81041c2:	f3bf 8f4f 	dsb	sy
 81041c6:	60fb      	str	r3, [r7, #12]
 81041c8:	e7fe      	b.n	81041c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 81041ca:	f7fe fd27 	bl	8102c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 81041ce:	4b1d      	ldr	r3, [pc, #116]	; (8104244 <xTaskCheckForTimeOut+0xb8>)
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	685b      	ldr	r3, [r3, #4]
 81041d8:	69ba      	ldr	r2, [r7, #24]
 81041da:	1ad3      	subs	r3, r2, r3
 81041dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81041de:	683b      	ldr	r3, [r7, #0]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81041e6:	d102      	bne.n	81041ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81041e8:	2300      	movs	r3, #0
 81041ea:	61fb      	str	r3, [r7, #28]
 81041ec:	e023      	b.n	8104236 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	681a      	ldr	r2, [r3, #0]
 81041f2:	4b15      	ldr	r3, [pc, #84]	; (8104248 <xTaskCheckForTimeOut+0xbc>)
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	429a      	cmp	r2, r3
 81041f8:	d007      	beq.n	810420a <xTaskCheckForTimeOut+0x7e>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	685b      	ldr	r3, [r3, #4]
 81041fe:	69ba      	ldr	r2, [r7, #24]
 8104200:	429a      	cmp	r2, r3
 8104202:	d302      	bcc.n	810420a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8104204:	2301      	movs	r3, #1
 8104206:	61fb      	str	r3, [r7, #28]
 8104208:	e015      	b.n	8104236 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810420a:	683b      	ldr	r3, [r7, #0]
 810420c:	681b      	ldr	r3, [r3, #0]
 810420e:	697a      	ldr	r2, [r7, #20]
 8104210:	429a      	cmp	r2, r3
 8104212:	d20b      	bcs.n	810422c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8104214:	683b      	ldr	r3, [r7, #0]
 8104216:	681a      	ldr	r2, [r3, #0]
 8104218:	697b      	ldr	r3, [r7, #20]
 810421a:	1ad2      	subs	r2, r2, r3
 810421c:	683b      	ldr	r3, [r7, #0]
 810421e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8104220:	6878      	ldr	r0, [r7, #4]
 8104222:	f7ff ff9d 	bl	8104160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8104226:	2300      	movs	r3, #0
 8104228:	61fb      	str	r3, [r7, #28]
 810422a:	e004      	b.n	8104236 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810422c:	683b      	ldr	r3, [r7, #0]
 810422e:	2200      	movs	r2, #0
 8104230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8104232:	2301      	movs	r3, #1
 8104234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8104236:	f7fe fd1f 	bl	8102c78 <vPortExitCritical>

	return xReturn;
 810423a:	69fb      	ldr	r3, [r7, #28]
}
 810423c:	4618      	mov	r0, r3
 810423e:	3720      	adds	r7, #32
 8104240:	46bd      	mov	sp, r7
 8104242:	bd80      	pop	{r7, pc}
 8104244:	10004800 	.word	0x10004800
 8104248:	10004814 	.word	0x10004814

0810424c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810424c:	b480      	push	{r7}
 810424e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8104250:	4b03      	ldr	r3, [pc, #12]	; (8104260 <vTaskMissedYield+0x14>)
 8104252:	2201      	movs	r2, #1
 8104254:	601a      	str	r2, [r3, #0]
}
 8104256:	bf00      	nop
 8104258:	46bd      	mov	sp, r7
 810425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810425e:	4770      	bx	lr
 8104260:	10004810 	.word	0x10004810

08104264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8104264:	b580      	push	{r7, lr}
 8104266:	b082      	sub	sp, #8
 8104268:	af00      	add	r7, sp, #0
 810426a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810426c:	f000 f852 	bl	8104314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8104270:	4b06      	ldr	r3, [pc, #24]	; (810428c <prvIdleTask+0x28>)
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	2b01      	cmp	r3, #1
 8104276:	d9f9      	bls.n	810426c <prvIdleTask+0x8>
			{
				taskYIELD();
 8104278:	4b05      	ldr	r3, [pc, #20]	; (8104290 <prvIdleTask+0x2c>)
 810427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810427e:	601a      	str	r2, [r3, #0]
 8104280:	f3bf 8f4f 	dsb	sy
 8104284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8104288:	e7f0      	b.n	810426c <prvIdleTask+0x8>
 810428a:	bf00      	nop
 810428c:	1000432c 	.word	0x1000432c
 8104290:	e000ed04 	.word	0xe000ed04

08104294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8104294:	b580      	push	{r7, lr}
 8104296:	b082      	sub	sp, #8
 8104298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810429a:	2300      	movs	r3, #0
 810429c:	607b      	str	r3, [r7, #4]
 810429e:	e00c      	b.n	81042ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 81042a0:	687a      	ldr	r2, [r7, #4]
 81042a2:	4613      	mov	r3, r2
 81042a4:	009b      	lsls	r3, r3, #2
 81042a6:	4413      	add	r3, r2
 81042a8:	009b      	lsls	r3, r3, #2
 81042aa:	4a12      	ldr	r2, [pc, #72]	; (81042f4 <prvInitialiseTaskLists+0x60>)
 81042ac:	4413      	add	r3, r2
 81042ae:	4618      	mov	r0, r3
 81042b0:	f7fe fada 	bl	8102868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	3301      	adds	r3, #1
 81042b8:	607b      	str	r3, [r7, #4]
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	2b37      	cmp	r3, #55	; 0x37
 81042be:	d9ef      	bls.n	81042a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 81042c0:	480d      	ldr	r0, [pc, #52]	; (81042f8 <prvInitialiseTaskLists+0x64>)
 81042c2:	f7fe fad1 	bl	8102868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 81042c6:	480d      	ldr	r0, [pc, #52]	; (81042fc <prvInitialiseTaskLists+0x68>)
 81042c8:	f7fe face 	bl	8102868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 81042cc:	480c      	ldr	r0, [pc, #48]	; (8104300 <prvInitialiseTaskLists+0x6c>)
 81042ce:	f7fe facb 	bl	8102868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 81042d2:	480c      	ldr	r0, [pc, #48]	; (8104304 <prvInitialiseTaskLists+0x70>)
 81042d4:	f7fe fac8 	bl	8102868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81042d8:	480b      	ldr	r0, [pc, #44]	; (8104308 <prvInitialiseTaskLists+0x74>)
 81042da:	f7fe fac5 	bl	8102868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81042de:	4b0b      	ldr	r3, [pc, #44]	; (810430c <prvInitialiseTaskLists+0x78>)
 81042e0:	4a05      	ldr	r2, [pc, #20]	; (81042f8 <prvInitialiseTaskLists+0x64>)
 81042e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81042e4:	4b0a      	ldr	r3, [pc, #40]	; (8104310 <prvInitialiseTaskLists+0x7c>)
 81042e6:	4a05      	ldr	r2, [pc, #20]	; (81042fc <prvInitialiseTaskLists+0x68>)
 81042e8:	601a      	str	r2, [r3, #0]
}
 81042ea:	bf00      	nop
 81042ec:	3708      	adds	r7, #8
 81042ee:	46bd      	mov	sp, r7
 81042f0:	bd80      	pop	{r7, pc}
 81042f2:	bf00      	nop
 81042f4:	1000432c 	.word	0x1000432c
 81042f8:	1000478c 	.word	0x1000478c
 81042fc:	100047a0 	.word	0x100047a0
 8104300:	100047bc 	.word	0x100047bc
 8104304:	100047d0 	.word	0x100047d0
 8104308:	100047e8 	.word	0x100047e8
 810430c:	100047b4 	.word	0x100047b4
 8104310:	100047b8 	.word	0x100047b8

08104314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8104314:	b580      	push	{r7, lr}
 8104316:	b082      	sub	sp, #8
 8104318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810431a:	e019      	b.n	8104350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810431c:	f7fe fc7e 	bl	8102c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104320:	4b0f      	ldr	r3, [pc, #60]	; (8104360 <prvCheckTasksWaitingTermination+0x4c>)
 8104322:	68db      	ldr	r3, [r3, #12]
 8104324:	68db      	ldr	r3, [r3, #12]
 8104326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	3304      	adds	r3, #4
 810432c:	4618      	mov	r0, r3
 810432e:	f7fe fb25 	bl	810297c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8104332:	4b0c      	ldr	r3, [pc, #48]	; (8104364 <prvCheckTasksWaitingTermination+0x50>)
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	3b01      	subs	r3, #1
 8104338:	4a0a      	ldr	r2, [pc, #40]	; (8104364 <prvCheckTasksWaitingTermination+0x50>)
 810433a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810433c:	4b0a      	ldr	r3, [pc, #40]	; (8104368 <prvCheckTasksWaitingTermination+0x54>)
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	3b01      	subs	r3, #1
 8104342:	4a09      	ldr	r2, [pc, #36]	; (8104368 <prvCheckTasksWaitingTermination+0x54>)
 8104344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8104346:	f7fe fc97 	bl	8102c78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810434a:	6878      	ldr	r0, [r7, #4]
 810434c:	f000 f80e 	bl	810436c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104350:	4b05      	ldr	r3, [pc, #20]	; (8104368 <prvCheckTasksWaitingTermination+0x54>)
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	2b00      	cmp	r3, #0
 8104356:	d1e1      	bne.n	810431c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8104358:	bf00      	nop
 810435a:	3708      	adds	r7, #8
 810435c:	46bd      	mov	sp, r7
 810435e:	bd80      	pop	{r7, pc}
 8104360:	100047d0 	.word	0x100047d0
 8104364:	100047fc 	.word	0x100047fc
 8104368:	100047e4 	.word	0x100047e4

0810436c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810436c:	b580      	push	{r7, lr}
 810436e:	b084      	sub	sp, #16
 8104370:	af00      	add	r7, sp, #0
 8104372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810437a:	2b00      	cmp	r3, #0
 810437c:	d108      	bne.n	8104390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104382:	4618      	mov	r0, r3
 8104384:	f7fe f95c 	bl	8102640 <vPortFree>
				vPortFree( pxTCB );
 8104388:	6878      	ldr	r0, [r7, #4]
 810438a:	f7fe f959 	bl	8102640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810438e:	e017      	b.n	81043c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8104396:	2b01      	cmp	r3, #1
 8104398:	d103      	bne.n	81043a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810439a:	6878      	ldr	r0, [r7, #4]
 810439c:	f7fe f950 	bl	8102640 <vPortFree>
	}
 81043a0:	e00e      	b.n	81043c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 81043a8:	2b02      	cmp	r3, #2
 81043aa:	d009      	beq.n	81043c0 <prvDeleteTCB+0x54>
 81043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81043b0:	f383 8811 	msr	BASEPRI, r3
 81043b4:	f3bf 8f6f 	isb	sy
 81043b8:	f3bf 8f4f 	dsb	sy
 81043bc:	60fb      	str	r3, [r7, #12]
 81043be:	e7fe      	b.n	81043be <prvDeleteTCB+0x52>
	}
 81043c0:	bf00      	nop
 81043c2:	3710      	adds	r7, #16
 81043c4:	46bd      	mov	sp, r7
 81043c6:	bd80      	pop	{r7, pc}

081043c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81043c8:	b480      	push	{r7}
 81043ca:	b083      	sub	sp, #12
 81043cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81043ce:	4b0c      	ldr	r3, [pc, #48]	; (8104400 <prvResetNextTaskUnblockTime+0x38>)
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d104      	bne.n	81043e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81043d8:	4b0a      	ldr	r3, [pc, #40]	; (8104404 <prvResetNextTaskUnblockTime+0x3c>)
 81043da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81043de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81043e0:	e008      	b.n	81043f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81043e2:	4b07      	ldr	r3, [pc, #28]	; (8104400 <prvResetNextTaskUnblockTime+0x38>)
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	68db      	ldr	r3, [r3, #12]
 81043e8:	68db      	ldr	r3, [r3, #12]
 81043ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	685b      	ldr	r3, [r3, #4]
 81043f0:	4a04      	ldr	r2, [pc, #16]	; (8104404 <prvResetNextTaskUnblockTime+0x3c>)
 81043f2:	6013      	str	r3, [r2, #0]
}
 81043f4:	bf00      	nop
 81043f6:	370c      	adds	r7, #12
 81043f8:	46bd      	mov	sp, r7
 81043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043fe:	4770      	bx	lr
 8104400:	100047b4 	.word	0x100047b4
 8104404:	1000481c 	.word	0x1000481c

08104408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8104408:	b480      	push	{r7}
 810440a:	b083      	sub	sp, #12
 810440c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810440e:	4b0b      	ldr	r3, [pc, #44]	; (810443c <xTaskGetSchedulerState+0x34>)
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	2b00      	cmp	r3, #0
 8104414:	d102      	bne.n	810441c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8104416:	2301      	movs	r3, #1
 8104418:	607b      	str	r3, [r7, #4]
 810441a:	e008      	b.n	810442e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810441c:	4b08      	ldr	r3, [pc, #32]	; (8104440 <xTaskGetSchedulerState+0x38>)
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	2b00      	cmp	r3, #0
 8104422:	d102      	bne.n	810442a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8104424:	2302      	movs	r3, #2
 8104426:	607b      	str	r3, [r7, #4]
 8104428:	e001      	b.n	810442e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810442a:	2300      	movs	r3, #0
 810442c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810442e:	687b      	ldr	r3, [r7, #4]
	}
 8104430:	4618      	mov	r0, r3
 8104432:	370c      	adds	r7, #12
 8104434:	46bd      	mov	sp, r7
 8104436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810443a:	4770      	bx	lr
 810443c:	10004808 	.word	0x10004808
 8104440:	10004824 	.word	0x10004824

08104444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8104444:	b580      	push	{r7, lr}
 8104446:	b086      	sub	sp, #24
 8104448:	af00      	add	r7, sp, #0
 810444a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8104450:	2300      	movs	r3, #0
 8104452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	2b00      	cmp	r3, #0
 8104458:	d054      	beq.n	8104504 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810445a:	4b2d      	ldr	r3, [pc, #180]	; (8104510 <xTaskPriorityDisinherit+0xcc>)
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	693a      	ldr	r2, [r7, #16]
 8104460:	429a      	cmp	r2, r3
 8104462:	d009      	beq.n	8104478 <xTaskPriorityDisinherit+0x34>
 8104464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104468:	f383 8811 	msr	BASEPRI, r3
 810446c:	f3bf 8f6f 	isb	sy
 8104470:	f3bf 8f4f 	dsb	sy
 8104474:	60fb      	str	r3, [r7, #12]
 8104476:	e7fe      	b.n	8104476 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8104478:	693b      	ldr	r3, [r7, #16]
 810447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810447c:	2b00      	cmp	r3, #0
 810447e:	d109      	bne.n	8104494 <xTaskPriorityDisinherit+0x50>
 8104480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104484:	f383 8811 	msr	BASEPRI, r3
 8104488:	f3bf 8f6f 	isb	sy
 810448c:	f3bf 8f4f 	dsb	sy
 8104490:	60bb      	str	r3, [r7, #8]
 8104492:	e7fe      	b.n	8104492 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8104494:	693b      	ldr	r3, [r7, #16]
 8104496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104498:	1e5a      	subs	r2, r3, #1
 810449a:	693b      	ldr	r3, [r7, #16]
 810449c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810449e:	693b      	ldr	r3, [r7, #16]
 81044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81044a2:	693b      	ldr	r3, [r7, #16]
 81044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81044a6:	429a      	cmp	r2, r3
 81044a8:	d02c      	beq.n	8104504 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 81044aa:	693b      	ldr	r3, [r7, #16]
 81044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81044ae:	2b00      	cmp	r3, #0
 81044b0:	d128      	bne.n	8104504 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81044b2:	693b      	ldr	r3, [r7, #16]
 81044b4:	3304      	adds	r3, #4
 81044b6:	4618      	mov	r0, r3
 81044b8:	f7fe fa60 	bl	810297c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 81044bc:	693b      	ldr	r3, [r7, #16]
 81044be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81044c0:	693b      	ldr	r3, [r7, #16]
 81044c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81044c4:	693b      	ldr	r3, [r7, #16]
 81044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81044cc:	693b      	ldr	r3, [r7, #16]
 81044ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 81044d0:	693b      	ldr	r3, [r7, #16]
 81044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81044d4:	4b0f      	ldr	r3, [pc, #60]	; (8104514 <xTaskPriorityDisinherit+0xd0>)
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	429a      	cmp	r2, r3
 81044da:	d903      	bls.n	81044e4 <xTaskPriorityDisinherit+0xa0>
 81044dc:	693b      	ldr	r3, [r7, #16]
 81044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044e0:	4a0c      	ldr	r2, [pc, #48]	; (8104514 <xTaskPriorityDisinherit+0xd0>)
 81044e2:	6013      	str	r3, [r2, #0]
 81044e4:	693b      	ldr	r3, [r7, #16]
 81044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81044e8:	4613      	mov	r3, r2
 81044ea:	009b      	lsls	r3, r3, #2
 81044ec:	4413      	add	r3, r2
 81044ee:	009b      	lsls	r3, r3, #2
 81044f0:	4a09      	ldr	r2, [pc, #36]	; (8104518 <xTaskPriorityDisinherit+0xd4>)
 81044f2:	441a      	add	r2, r3
 81044f4:	693b      	ldr	r3, [r7, #16]
 81044f6:	3304      	adds	r3, #4
 81044f8:	4619      	mov	r1, r3
 81044fa:	4610      	mov	r0, r2
 81044fc:	f7fe f9e1 	bl	81028c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8104500:	2301      	movs	r3, #1
 8104502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104504:	697b      	ldr	r3, [r7, #20]
	}
 8104506:	4618      	mov	r0, r3
 8104508:	3718      	adds	r7, #24
 810450a:	46bd      	mov	sp, r7
 810450c:	bd80      	pop	{r7, pc}
 810450e:	bf00      	nop
 8104510:	10004328 	.word	0x10004328
 8104514:	10004804 	.word	0x10004804
 8104518:	1000432c 	.word	0x1000432c

0810451c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810451c:	b580      	push	{r7, lr}
 810451e:	b084      	sub	sp, #16
 8104520:	af00      	add	r7, sp, #0
 8104522:	6078      	str	r0, [r7, #4]
 8104524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8104526:	4b21      	ldr	r3, [pc, #132]	; (81045ac <prvAddCurrentTaskToDelayedList+0x90>)
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810452c:	4b20      	ldr	r3, [pc, #128]	; (81045b0 <prvAddCurrentTaskToDelayedList+0x94>)
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	3304      	adds	r3, #4
 8104532:	4618      	mov	r0, r3
 8104534:	f7fe fa22 	bl	810297c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810453e:	d10a      	bne.n	8104556 <prvAddCurrentTaskToDelayedList+0x3a>
 8104540:	683b      	ldr	r3, [r7, #0]
 8104542:	2b00      	cmp	r3, #0
 8104544:	d007      	beq.n	8104556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8104546:	4b1a      	ldr	r3, [pc, #104]	; (81045b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	3304      	adds	r3, #4
 810454c:	4619      	mov	r1, r3
 810454e:	4819      	ldr	r0, [pc, #100]	; (81045b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8104550:	f7fe f9b7 	bl	81028c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8104554:	e026      	b.n	81045a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8104556:	68fa      	ldr	r2, [r7, #12]
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	4413      	add	r3, r2
 810455c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810455e:	4b14      	ldr	r3, [pc, #80]	; (81045b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	68ba      	ldr	r2, [r7, #8]
 8104564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8104566:	68ba      	ldr	r2, [r7, #8]
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	429a      	cmp	r2, r3
 810456c:	d209      	bcs.n	8104582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810456e:	4b12      	ldr	r3, [pc, #72]	; (81045b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8104570:	681a      	ldr	r2, [r3, #0]
 8104572:	4b0f      	ldr	r3, [pc, #60]	; (81045b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	3304      	adds	r3, #4
 8104578:	4619      	mov	r1, r3
 810457a:	4610      	mov	r0, r2
 810457c:	f7fe f9c5 	bl	810290a <vListInsert>
}
 8104580:	e010      	b.n	81045a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8104582:	4b0e      	ldr	r3, [pc, #56]	; (81045bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8104584:	681a      	ldr	r2, [r3, #0]
 8104586:	4b0a      	ldr	r3, [pc, #40]	; (81045b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	3304      	adds	r3, #4
 810458c:	4619      	mov	r1, r3
 810458e:	4610      	mov	r0, r2
 8104590:	f7fe f9bb 	bl	810290a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8104594:	4b0a      	ldr	r3, [pc, #40]	; (81045c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	68ba      	ldr	r2, [r7, #8]
 810459a:	429a      	cmp	r2, r3
 810459c:	d202      	bcs.n	81045a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810459e:	4a08      	ldr	r2, [pc, #32]	; (81045c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 81045a0:	68bb      	ldr	r3, [r7, #8]
 81045a2:	6013      	str	r3, [r2, #0]
}
 81045a4:	bf00      	nop
 81045a6:	3710      	adds	r7, #16
 81045a8:	46bd      	mov	sp, r7
 81045aa:	bd80      	pop	{r7, pc}
 81045ac:	10004800 	.word	0x10004800
 81045b0:	10004328 	.word	0x10004328
 81045b4:	100047e8 	.word	0x100047e8
 81045b8:	100047b8 	.word	0x100047b8
 81045bc:	100047b4 	.word	0x100047b4
 81045c0:	1000481c 	.word	0x1000481c

081045c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81045c4:	b580      	push	{r7, lr}
 81045c6:	b08a      	sub	sp, #40	; 0x28
 81045c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81045ca:	2300      	movs	r3, #0
 81045cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81045ce:	f000 faff 	bl	8104bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81045d2:	4b1c      	ldr	r3, [pc, #112]	; (8104644 <xTimerCreateTimerTask+0x80>)
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	2b00      	cmp	r3, #0
 81045d8:	d021      	beq.n	810461e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81045da:	2300      	movs	r3, #0
 81045dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81045de:	2300      	movs	r3, #0
 81045e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81045e2:	1d3a      	adds	r2, r7, #4
 81045e4:	f107 0108 	add.w	r1, r7, #8
 81045e8:	f107 030c 	add.w	r3, r7, #12
 81045ec:	4618      	mov	r0, r3
 81045ee:	f7fd ff4b 	bl	8102488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81045f2:	6879      	ldr	r1, [r7, #4]
 81045f4:	68bb      	ldr	r3, [r7, #8]
 81045f6:	68fa      	ldr	r2, [r7, #12]
 81045f8:	9202      	str	r2, [sp, #8]
 81045fa:	9301      	str	r3, [sp, #4]
 81045fc:	2302      	movs	r3, #2
 81045fe:	9300      	str	r3, [sp, #0]
 8104600:	2300      	movs	r3, #0
 8104602:	460a      	mov	r2, r1
 8104604:	4910      	ldr	r1, [pc, #64]	; (8104648 <xTimerCreateTimerTask+0x84>)
 8104606:	4811      	ldr	r0, [pc, #68]	; (810464c <xTimerCreateTimerTask+0x88>)
 8104608:	f7ff f8f6 	bl	81037f8 <xTaskCreateStatic>
 810460c:	4602      	mov	r2, r0
 810460e:	4b10      	ldr	r3, [pc, #64]	; (8104650 <xTimerCreateTimerTask+0x8c>)
 8104610:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8104612:	4b0f      	ldr	r3, [pc, #60]	; (8104650 <xTimerCreateTimerTask+0x8c>)
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	2b00      	cmp	r3, #0
 8104618:	d001      	beq.n	810461e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810461a:	2301      	movs	r3, #1
 810461c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810461e:	697b      	ldr	r3, [r7, #20]
 8104620:	2b00      	cmp	r3, #0
 8104622:	d109      	bne.n	8104638 <xTimerCreateTimerTask+0x74>
 8104624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104628:	f383 8811 	msr	BASEPRI, r3
 810462c:	f3bf 8f6f 	isb	sy
 8104630:	f3bf 8f4f 	dsb	sy
 8104634:	613b      	str	r3, [r7, #16]
 8104636:	e7fe      	b.n	8104636 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8104638:	697b      	ldr	r3, [r7, #20]
}
 810463a:	4618      	mov	r0, r3
 810463c:	3718      	adds	r7, #24
 810463e:	46bd      	mov	sp, r7
 8104640:	bd80      	pop	{r7, pc}
 8104642:	bf00      	nop
 8104644:	10004858 	.word	0x10004858
 8104648:	08104d38 	.word	0x08104d38
 810464c:	08104785 	.word	0x08104785
 8104650:	1000485c 	.word	0x1000485c

08104654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8104654:	b580      	push	{r7, lr}
 8104656:	b08a      	sub	sp, #40	; 0x28
 8104658:	af00      	add	r7, sp, #0
 810465a:	60f8      	str	r0, [r7, #12]
 810465c:	60b9      	str	r1, [r7, #8]
 810465e:	607a      	str	r2, [r7, #4]
 8104660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8104662:	2300      	movs	r3, #0
 8104664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	2b00      	cmp	r3, #0
 810466a:	d109      	bne.n	8104680 <xTimerGenericCommand+0x2c>
 810466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104670:	f383 8811 	msr	BASEPRI, r3
 8104674:	f3bf 8f6f 	isb	sy
 8104678:	f3bf 8f4f 	dsb	sy
 810467c:	623b      	str	r3, [r7, #32]
 810467e:	e7fe      	b.n	810467e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8104680:	4b19      	ldr	r3, [pc, #100]	; (81046e8 <xTimerGenericCommand+0x94>)
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	2b00      	cmp	r3, #0
 8104686:	d02a      	beq.n	81046de <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8104688:	68bb      	ldr	r3, [r7, #8]
 810468a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8104694:	68bb      	ldr	r3, [r7, #8]
 8104696:	2b05      	cmp	r3, #5
 8104698:	dc18      	bgt.n	81046cc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810469a:	f7ff feb5 	bl	8104408 <xTaskGetSchedulerState>
 810469e:	4603      	mov	r3, r0
 81046a0:	2b02      	cmp	r3, #2
 81046a2:	d109      	bne.n	81046b8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81046a4:	4b10      	ldr	r3, [pc, #64]	; (81046e8 <xTimerGenericCommand+0x94>)
 81046a6:	6818      	ldr	r0, [r3, #0]
 81046a8:	f107 0110 	add.w	r1, r7, #16
 81046ac:	2300      	movs	r3, #0
 81046ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81046b0:	f7fe fccc 	bl	810304c <xQueueGenericSend>
 81046b4:	6278      	str	r0, [r7, #36]	; 0x24
 81046b6:	e012      	b.n	81046de <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 81046b8:	4b0b      	ldr	r3, [pc, #44]	; (81046e8 <xTimerGenericCommand+0x94>)
 81046ba:	6818      	ldr	r0, [r3, #0]
 81046bc:	f107 0110 	add.w	r1, r7, #16
 81046c0:	2300      	movs	r3, #0
 81046c2:	2200      	movs	r2, #0
 81046c4:	f7fe fcc2 	bl	810304c <xQueueGenericSend>
 81046c8:	6278      	str	r0, [r7, #36]	; 0x24
 81046ca:	e008      	b.n	81046de <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 81046cc:	4b06      	ldr	r3, [pc, #24]	; (81046e8 <xTimerGenericCommand+0x94>)
 81046ce:	6818      	ldr	r0, [r3, #0]
 81046d0:	f107 0110 	add.w	r1, r7, #16
 81046d4:	2300      	movs	r3, #0
 81046d6:	683a      	ldr	r2, [r7, #0]
 81046d8:	f7fe fdb2 	bl	8103240 <xQueueGenericSendFromISR>
 81046dc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81046e0:	4618      	mov	r0, r3
 81046e2:	3728      	adds	r7, #40	; 0x28
 81046e4:	46bd      	mov	sp, r7
 81046e6:	bd80      	pop	{r7, pc}
 81046e8:	10004858 	.word	0x10004858

081046ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81046ec:	b580      	push	{r7, lr}
 81046ee:	b088      	sub	sp, #32
 81046f0:	af02      	add	r7, sp, #8
 81046f2:	6078      	str	r0, [r7, #4]
 81046f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81046f6:	4b22      	ldr	r3, [pc, #136]	; (8104780 <prvProcessExpiredTimer+0x94>)
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	68db      	ldr	r3, [r3, #12]
 81046fc:	68db      	ldr	r3, [r3, #12]
 81046fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8104700:	697b      	ldr	r3, [r7, #20]
 8104702:	3304      	adds	r3, #4
 8104704:	4618      	mov	r0, r3
 8104706:	f7fe f939 	bl	810297c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810470a:	697b      	ldr	r3, [r7, #20]
 810470c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104710:	f003 0304 	and.w	r3, r3, #4
 8104714:	2b00      	cmp	r3, #0
 8104716:	d021      	beq.n	810475c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8104718:	697b      	ldr	r3, [r7, #20]
 810471a:	699a      	ldr	r2, [r3, #24]
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	18d1      	adds	r1, r2, r3
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	683a      	ldr	r2, [r7, #0]
 8104724:	6978      	ldr	r0, [r7, #20]
 8104726:	f000 f8d1 	bl	81048cc <prvInsertTimerInActiveList>
 810472a:	4603      	mov	r3, r0
 810472c:	2b00      	cmp	r3, #0
 810472e:	d01e      	beq.n	810476e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8104730:	2300      	movs	r3, #0
 8104732:	9300      	str	r3, [sp, #0]
 8104734:	2300      	movs	r3, #0
 8104736:	687a      	ldr	r2, [r7, #4]
 8104738:	2100      	movs	r1, #0
 810473a:	6978      	ldr	r0, [r7, #20]
 810473c:	f7ff ff8a 	bl	8104654 <xTimerGenericCommand>
 8104740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8104742:	693b      	ldr	r3, [r7, #16]
 8104744:	2b00      	cmp	r3, #0
 8104746:	d112      	bne.n	810476e <prvProcessExpiredTimer+0x82>
 8104748:	f04f 0350 	mov.w	r3, #80	; 0x50
 810474c:	f383 8811 	msr	BASEPRI, r3
 8104750:	f3bf 8f6f 	isb	sy
 8104754:	f3bf 8f4f 	dsb	sy
 8104758:	60fb      	str	r3, [r7, #12]
 810475a:	e7fe      	b.n	810475a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810475c:	697b      	ldr	r3, [r7, #20]
 810475e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104762:	f023 0301 	bic.w	r3, r3, #1
 8104766:	b2da      	uxtb	r2, r3
 8104768:	697b      	ldr	r3, [r7, #20]
 810476a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810476e:	697b      	ldr	r3, [r7, #20]
 8104770:	6a1b      	ldr	r3, [r3, #32]
 8104772:	6978      	ldr	r0, [r7, #20]
 8104774:	4798      	blx	r3
}
 8104776:	bf00      	nop
 8104778:	3718      	adds	r7, #24
 810477a:	46bd      	mov	sp, r7
 810477c:	bd80      	pop	{r7, pc}
 810477e:	bf00      	nop
 8104780:	10004850 	.word	0x10004850

08104784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8104784:	b580      	push	{r7, lr}
 8104786:	b084      	sub	sp, #16
 8104788:	af00      	add	r7, sp, #0
 810478a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810478c:	f107 0308 	add.w	r3, r7, #8
 8104790:	4618      	mov	r0, r3
 8104792:	f000 f857 	bl	8104844 <prvGetNextExpireTime>
 8104796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8104798:	68bb      	ldr	r3, [r7, #8]
 810479a:	4619      	mov	r1, r3
 810479c:	68f8      	ldr	r0, [r7, #12]
 810479e:	f000 f803 	bl	81047a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81047a2:	f000 f8d5 	bl	8104950 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81047a6:	e7f1      	b.n	810478c <prvTimerTask+0x8>

081047a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81047a8:	b580      	push	{r7, lr}
 81047aa:	b084      	sub	sp, #16
 81047ac:	af00      	add	r7, sp, #0
 81047ae:	6078      	str	r0, [r7, #4]
 81047b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 81047b2:	f7ff fa57 	bl	8103c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81047b6:	f107 0308 	add.w	r3, r7, #8
 81047ba:	4618      	mov	r0, r3
 81047bc:	f000 f866 	bl	810488c <prvSampleTimeNow>
 81047c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81047c2:	68bb      	ldr	r3, [r7, #8]
 81047c4:	2b00      	cmp	r3, #0
 81047c6:	d130      	bne.n	810482a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81047c8:	683b      	ldr	r3, [r7, #0]
 81047ca:	2b00      	cmp	r3, #0
 81047cc:	d10a      	bne.n	81047e4 <prvProcessTimerOrBlockTask+0x3c>
 81047ce:	687a      	ldr	r2, [r7, #4]
 81047d0:	68fb      	ldr	r3, [r7, #12]
 81047d2:	429a      	cmp	r2, r3
 81047d4:	d806      	bhi.n	81047e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81047d6:	f7ff fa53 	bl	8103c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81047da:	68f9      	ldr	r1, [r7, #12]
 81047dc:	6878      	ldr	r0, [r7, #4]
 81047de:	f7ff ff85 	bl	81046ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81047e2:	e024      	b.n	810482e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81047e4:	683b      	ldr	r3, [r7, #0]
 81047e6:	2b00      	cmp	r3, #0
 81047e8:	d008      	beq.n	81047fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81047ea:	4b13      	ldr	r3, [pc, #76]	; (8104838 <prvProcessTimerOrBlockTask+0x90>)
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	681b      	ldr	r3, [r3, #0]
 81047f0:	2b00      	cmp	r3, #0
 81047f2:	d101      	bne.n	81047f8 <prvProcessTimerOrBlockTask+0x50>
 81047f4:	2301      	movs	r3, #1
 81047f6:	e000      	b.n	81047fa <prvProcessTimerOrBlockTask+0x52>
 81047f8:	2300      	movs	r3, #0
 81047fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81047fc:	4b0f      	ldr	r3, [pc, #60]	; (810483c <prvProcessTimerOrBlockTask+0x94>)
 81047fe:	6818      	ldr	r0, [r3, #0]
 8104800:	687a      	ldr	r2, [r7, #4]
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	1ad3      	subs	r3, r2, r3
 8104806:	683a      	ldr	r2, [r7, #0]
 8104808:	4619      	mov	r1, r3
 810480a:	f7fe ffc1 	bl	8103790 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810480e:	f7ff fa37 	bl	8103c80 <xTaskResumeAll>
 8104812:	4603      	mov	r3, r0
 8104814:	2b00      	cmp	r3, #0
 8104816:	d10a      	bne.n	810482e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8104818:	4b09      	ldr	r3, [pc, #36]	; (8104840 <prvProcessTimerOrBlockTask+0x98>)
 810481a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810481e:	601a      	str	r2, [r3, #0]
 8104820:	f3bf 8f4f 	dsb	sy
 8104824:	f3bf 8f6f 	isb	sy
}
 8104828:	e001      	b.n	810482e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810482a:	f7ff fa29 	bl	8103c80 <xTaskResumeAll>
}
 810482e:	bf00      	nop
 8104830:	3710      	adds	r7, #16
 8104832:	46bd      	mov	sp, r7
 8104834:	bd80      	pop	{r7, pc}
 8104836:	bf00      	nop
 8104838:	10004854 	.word	0x10004854
 810483c:	10004858 	.word	0x10004858
 8104840:	e000ed04 	.word	0xe000ed04

08104844 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8104844:	b480      	push	{r7}
 8104846:	b085      	sub	sp, #20
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810484c:	4b0e      	ldr	r3, [pc, #56]	; (8104888 <prvGetNextExpireTime+0x44>)
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	2b00      	cmp	r3, #0
 8104854:	d101      	bne.n	810485a <prvGetNextExpireTime+0x16>
 8104856:	2201      	movs	r2, #1
 8104858:	e000      	b.n	810485c <prvGetNextExpireTime+0x18>
 810485a:	2200      	movs	r2, #0
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	2b00      	cmp	r3, #0
 8104866:	d105      	bne.n	8104874 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8104868:	4b07      	ldr	r3, [pc, #28]	; (8104888 <prvGetNextExpireTime+0x44>)
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	68db      	ldr	r3, [r3, #12]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	60fb      	str	r3, [r7, #12]
 8104872:	e001      	b.n	8104878 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8104874:	2300      	movs	r3, #0
 8104876:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8104878:	68fb      	ldr	r3, [r7, #12]
}
 810487a:	4618      	mov	r0, r3
 810487c:	3714      	adds	r7, #20
 810487e:	46bd      	mov	sp, r7
 8104880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104884:	4770      	bx	lr
 8104886:	bf00      	nop
 8104888:	10004850 	.word	0x10004850

0810488c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810488c:	b580      	push	{r7, lr}
 810488e:	b084      	sub	sp, #16
 8104890:	af00      	add	r7, sp, #0
 8104892:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8104894:	f7ff fa90 	bl	8103db8 <xTaskGetTickCount>
 8104898:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810489a:	4b0b      	ldr	r3, [pc, #44]	; (81048c8 <prvSampleTimeNow+0x3c>)
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	68fa      	ldr	r2, [r7, #12]
 81048a0:	429a      	cmp	r2, r3
 81048a2:	d205      	bcs.n	81048b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 81048a4:	f000 f930 	bl	8104b08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	2201      	movs	r2, #1
 81048ac:	601a      	str	r2, [r3, #0]
 81048ae:	e002      	b.n	81048b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	2200      	movs	r2, #0
 81048b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 81048b6:	4a04      	ldr	r2, [pc, #16]	; (81048c8 <prvSampleTimeNow+0x3c>)
 81048b8:	68fb      	ldr	r3, [r7, #12]
 81048ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 81048bc:	68fb      	ldr	r3, [r7, #12]
}
 81048be:	4618      	mov	r0, r3
 81048c0:	3710      	adds	r7, #16
 81048c2:	46bd      	mov	sp, r7
 81048c4:	bd80      	pop	{r7, pc}
 81048c6:	bf00      	nop
 81048c8:	10004860 	.word	0x10004860

081048cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81048cc:	b580      	push	{r7, lr}
 81048ce:	b086      	sub	sp, #24
 81048d0:	af00      	add	r7, sp, #0
 81048d2:	60f8      	str	r0, [r7, #12]
 81048d4:	60b9      	str	r1, [r7, #8]
 81048d6:	607a      	str	r2, [r7, #4]
 81048d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81048da:	2300      	movs	r3, #0
 81048dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81048de:	68fb      	ldr	r3, [r7, #12]
 81048e0:	68ba      	ldr	r2, [r7, #8]
 81048e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81048e4:	68fb      	ldr	r3, [r7, #12]
 81048e6:	68fa      	ldr	r2, [r7, #12]
 81048e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81048ea:	68ba      	ldr	r2, [r7, #8]
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	429a      	cmp	r2, r3
 81048f0:	d812      	bhi.n	8104918 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81048f2:	687a      	ldr	r2, [r7, #4]
 81048f4:	683b      	ldr	r3, [r7, #0]
 81048f6:	1ad2      	subs	r2, r2, r3
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	699b      	ldr	r3, [r3, #24]
 81048fc:	429a      	cmp	r2, r3
 81048fe:	d302      	bcc.n	8104906 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8104900:	2301      	movs	r3, #1
 8104902:	617b      	str	r3, [r7, #20]
 8104904:	e01b      	b.n	810493e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8104906:	4b10      	ldr	r3, [pc, #64]	; (8104948 <prvInsertTimerInActiveList+0x7c>)
 8104908:	681a      	ldr	r2, [r3, #0]
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	3304      	adds	r3, #4
 810490e:	4619      	mov	r1, r3
 8104910:	4610      	mov	r0, r2
 8104912:	f7fd fffa 	bl	810290a <vListInsert>
 8104916:	e012      	b.n	810493e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8104918:	687a      	ldr	r2, [r7, #4]
 810491a:	683b      	ldr	r3, [r7, #0]
 810491c:	429a      	cmp	r2, r3
 810491e:	d206      	bcs.n	810492e <prvInsertTimerInActiveList+0x62>
 8104920:	68ba      	ldr	r2, [r7, #8]
 8104922:	683b      	ldr	r3, [r7, #0]
 8104924:	429a      	cmp	r2, r3
 8104926:	d302      	bcc.n	810492e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8104928:	2301      	movs	r3, #1
 810492a:	617b      	str	r3, [r7, #20]
 810492c:	e007      	b.n	810493e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810492e:	4b07      	ldr	r3, [pc, #28]	; (810494c <prvInsertTimerInActiveList+0x80>)
 8104930:	681a      	ldr	r2, [r3, #0]
 8104932:	68fb      	ldr	r3, [r7, #12]
 8104934:	3304      	adds	r3, #4
 8104936:	4619      	mov	r1, r3
 8104938:	4610      	mov	r0, r2
 810493a:	f7fd ffe6 	bl	810290a <vListInsert>
		}
	}

	return xProcessTimerNow;
 810493e:	697b      	ldr	r3, [r7, #20]
}
 8104940:	4618      	mov	r0, r3
 8104942:	3718      	adds	r7, #24
 8104944:	46bd      	mov	sp, r7
 8104946:	bd80      	pop	{r7, pc}
 8104948:	10004854 	.word	0x10004854
 810494c:	10004850 	.word	0x10004850

08104950 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8104950:	b580      	push	{r7, lr}
 8104952:	b08e      	sub	sp, #56	; 0x38
 8104954:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8104956:	e0c6      	b.n	8104ae6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	2b00      	cmp	r3, #0
 810495c:	da17      	bge.n	810498e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810495e:	1d3b      	adds	r3, r7, #4
 8104960:	3304      	adds	r3, #4
 8104962:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8104964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104966:	2b00      	cmp	r3, #0
 8104968:	d109      	bne.n	810497e <prvProcessReceivedCommands+0x2e>
 810496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810496e:	f383 8811 	msr	BASEPRI, r3
 8104972:	f3bf 8f6f 	isb	sy
 8104976:	f3bf 8f4f 	dsb	sy
 810497a:	61fb      	str	r3, [r7, #28]
 810497c:	e7fe      	b.n	810497c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8104984:	6850      	ldr	r0, [r2, #4]
 8104986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8104988:	6892      	ldr	r2, [r2, #8]
 810498a:	4611      	mov	r1, r2
 810498c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	2b00      	cmp	r3, #0
 8104992:	f2c0 80a7 	blt.w	8104ae4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810499c:	695b      	ldr	r3, [r3, #20]
 810499e:	2b00      	cmp	r3, #0
 81049a0:	d004      	beq.n	81049ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049a4:	3304      	adds	r3, #4
 81049a6:	4618      	mov	r0, r3
 81049a8:	f7fd ffe8 	bl	810297c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81049ac:	463b      	mov	r3, r7
 81049ae:	4618      	mov	r0, r3
 81049b0:	f7ff ff6c 	bl	810488c <prvSampleTimeNow>
 81049b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	2b09      	cmp	r3, #9
 81049ba:	f200 8094 	bhi.w	8104ae6 <prvProcessReceivedCommands+0x196>
 81049be:	a201      	add	r2, pc, #4	; (adr r2, 81049c4 <prvProcessReceivedCommands+0x74>)
 81049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049c4:	081049ed 	.word	0x081049ed
 81049c8:	081049ed 	.word	0x081049ed
 81049cc:	081049ed 	.word	0x081049ed
 81049d0:	08104a5f 	.word	0x08104a5f
 81049d4:	08104a73 	.word	0x08104a73
 81049d8:	08104abb 	.word	0x08104abb
 81049dc:	081049ed 	.word	0x081049ed
 81049e0:	081049ed 	.word	0x081049ed
 81049e4:	08104a5f 	.word	0x08104a5f
 81049e8:	08104a73 	.word	0x08104a73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81049f2:	f043 0301 	orr.w	r3, r3, #1
 81049f6:	b2da      	uxtb	r2, r3
 81049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81049fe:	68ba      	ldr	r2, [r7, #8]
 8104a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a02:	699b      	ldr	r3, [r3, #24]
 8104a04:	18d1      	adds	r1, r2, r3
 8104a06:	68bb      	ldr	r3, [r7, #8]
 8104a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104a0c:	f7ff ff5e 	bl	81048cc <prvInsertTimerInActiveList>
 8104a10:	4603      	mov	r3, r0
 8104a12:	2b00      	cmp	r3, #0
 8104a14:	d067      	beq.n	8104ae6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8104a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a18:	6a1b      	ldr	r3, [r3, #32]
 8104a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104a1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8104a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104a24:	f003 0304 	and.w	r3, r3, #4
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	d05c      	beq.n	8104ae6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8104a2c:	68ba      	ldr	r2, [r7, #8]
 8104a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a30:	699b      	ldr	r3, [r3, #24]
 8104a32:	441a      	add	r2, r3
 8104a34:	2300      	movs	r3, #0
 8104a36:	9300      	str	r3, [sp, #0]
 8104a38:	2300      	movs	r3, #0
 8104a3a:	2100      	movs	r1, #0
 8104a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104a3e:	f7ff fe09 	bl	8104654 <xTimerGenericCommand>
 8104a42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8104a44:	6a3b      	ldr	r3, [r7, #32]
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d14d      	bne.n	8104ae6 <prvProcessReceivedCommands+0x196>
 8104a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a4e:	f383 8811 	msr	BASEPRI, r3
 8104a52:	f3bf 8f6f 	isb	sy
 8104a56:	f3bf 8f4f 	dsb	sy
 8104a5a:	61bb      	str	r3, [r7, #24]
 8104a5c:	e7fe      	b.n	8104a5c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104a64:	f023 0301 	bic.w	r3, r3, #1
 8104a68:	b2da      	uxtb	r2, r3
 8104a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8104a70:	e039      	b.n	8104ae6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8104a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104a78:	f043 0301 	orr.w	r3, r3, #1
 8104a7c:	b2da      	uxtb	r2, r3
 8104a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8104a84:	68ba      	ldr	r2, [r7, #8]
 8104a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8104a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a8c:	699b      	ldr	r3, [r3, #24]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d109      	bne.n	8104aa6 <prvProcessReceivedCommands+0x156>
 8104a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a96:	f383 8811 	msr	BASEPRI, r3
 8104a9a:	f3bf 8f6f 	isb	sy
 8104a9e:	f3bf 8f4f 	dsb	sy
 8104aa2:	617b      	str	r3, [r7, #20]
 8104aa4:	e7fe      	b.n	8104aa4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8104aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104aa8:	699a      	ldr	r2, [r3, #24]
 8104aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104aac:	18d1      	adds	r1, r2, r3
 8104aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104ab4:	f7ff ff0a 	bl	81048cc <prvInsertTimerInActiveList>
					break;
 8104ab8:	e015      	b.n	8104ae6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8104aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104ac0:	f003 0302 	and.w	r3, r3, #2
 8104ac4:	2b00      	cmp	r3, #0
 8104ac6:	d103      	bne.n	8104ad0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8104ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104aca:	f7fd fdb9 	bl	8102640 <vPortFree>
 8104ace:	e00a      	b.n	8104ae6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104ad6:	f023 0301 	bic.w	r3, r3, #1
 8104ada:	b2da      	uxtb	r2, r3
 8104adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8104ae2:	e000      	b.n	8104ae6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8104ae4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8104ae6:	4b07      	ldr	r3, [pc, #28]	; (8104b04 <prvProcessReceivedCommands+0x1b4>)
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	1d39      	adds	r1, r7, #4
 8104aec:	2200      	movs	r2, #0
 8104aee:	4618      	mov	r0, r3
 8104af0:	f7fe fc3a 	bl	8103368 <xQueueReceive>
 8104af4:	4603      	mov	r3, r0
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	f47f af2e 	bne.w	8104958 <prvProcessReceivedCommands+0x8>
	}
}
 8104afc:	bf00      	nop
 8104afe:	3730      	adds	r7, #48	; 0x30
 8104b00:	46bd      	mov	sp, r7
 8104b02:	bd80      	pop	{r7, pc}
 8104b04:	10004858 	.word	0x10004858

08104b08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8104b08:	b580      	push	{r7, lr}
 8104b0a:	b088      	sub	sp, #32
 8104b0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8104b0e:	e047      	b.n	8104ba0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8104b10:	4b2d      	ldr	r3, [pc, #180]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	68db      	ldr	r3, [r3, #12]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104b1a:	4b2b      	ldr	r3, [pc, #172]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	68db      	ldr	r3, [r3, #12]
 8104b20:	68db      	ldr	r3, [r3, #12]
 8104b22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	3304      	adds	r3, #4
 8104b28:	4618      	mov	r0, r3
 8104b2a:	f7fd ff27 	bl	810297c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8104b2e:	68fb      	ldr	r3, [r7, #12]
 8104b30:	6a1b      	ldr	r3, [r3, #32]
 8104b32:	68f8      	ldr	r0, [r7, #12]
 8104b34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104b3c:	f003 0304 	and.w	r3, r3, #4
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d02d      	beq.n	8104ba0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	699b      	ldr	r3, [r3, #24]
 8104b48:	693a      	ldr	r2, [r7, #16]
 8104b4a:	4413      	add	r3, r2
 8104b4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8104b4e:	68ba      	ldr	r2, [r7, #8]
 8104b50:	693b      	ldr	r3, [r7, #16]
 8104b52:	429a      	cmp	r2, r3
 8104b54:	d90e      	bls.n	8104b74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	68ba      	ldr	r2, [r7, #8]
 8104b5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104b5c:	68fb      	ldr	r3, [r7, #12]
 8104b5e:	68fa      	ldr	r2, [r7, #12]
 8104b60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8104b62:	4b19      	ldr	r3, [pc, #100]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104b64:	681a      	ldr	r2, [r3, #0]
 8104b66:	68fb      	ldr	r3, [r7, #12]
 8104b68:	3304      	adds	r3, #4
 8104b6a:	4619      	mov	r1, r3
 8104b6c:	4610      	mov	r0, r2
 8104b6e:	f7fd fecc 	bl	810290a <vListInsert>
 8104b72:	e015      	b.n	8104ba0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8104b74:	2300      	movs	r3, #0
 8104b76:	9300      	str	r3, [sp, #0]
 8104b78:	2300      	movs	r3, #0
 8104b7a:	693a      	ldr	r2, [r7, #16]
 8104b7c:	2100      	movs	r1, #0
 8104b7e:	68f8      	ldr	r0, [r7, #12]
 8104b80:	f7ff fd68 	bl	8104654 <xTimerGenericCommand>
 8104b84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	2b00      	cmp	r3, #0
 8104b8a:	d109      	bne.n	8104ba0 <prvSwitchTimerLists+0x98>
 8104b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b90:	f383 8811 	msr	BASEPRI, r3
 8104b94:	f3bf 8f6f 	isb	sy
 8104b98:	f3bf 8f4f 	dsb	sy
 8104b9c:	603b      	str	r3, [r7, #0]
 8104b9e:	e7fe      	b.n	8104b9e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8104ba0:	4b09      	ldr	r3, [pc, #36]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d1b2      	bne.n	8104b10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8104baa:	4b07      	ldr	r3, [pc, #28]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8104bb0:	4b06      	ldr	r3, [pc, #24]	; (8104bcc <prvSwitchTimerLists+0xc4>)
 8104bb2:	681b      	ldr	r3, [r3, #0]
 8104bb4:	4a04      	ldr	r2, [pc, #16]	; (8104bc8 <prvSwitchTimerLists+0xc0>)
 8104bb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8104bb8:	4a04      	ldr	r2, [pc, #16]	; (8104bcc <prvSwitchTimerLists+0xc4>)
 8104bba:	697b      	ldr	r3, [r7, #20]
 8104bbc:	6013      	str	r3, [r2, #0]
}
 8104bbe:	bf00      	nop
 8104bc0:	3718      	adds	r7, #24
 8104bc2:	46bd      	mov	sp, r7
 8104bc4:	bd80      	pop	{r7, pc}
 8104bc6:	bf00      	nop
 8104bc8:	10004850 	.word	0x10004850
 8104bcc:	10004854 	.word	0x10004854

08104bd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8104bd0:	b580      	push	{r7, lr}
 8104bd2:	b082      	sub	sp, #8
 8104bd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8104bd6:	f7fe f821 	bl	8102c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8104bda:	4b15      	ldr	r3, [pc, #84]	; (8104c30 <prvCheckForValidListAndQueue+0x60>)
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	2b00      	cmp	r3, #0
 8104be0:	d120      	bne.n	8104c24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8104be2:	4814      	ldr	r0, [pc, #80]	; (8104c34 <prvCheckForValidListAndQueue+0x64>)
 8104be4:	f7fd fe40 	bl	8102868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8104be8:	4813      	ldr	r0, [pc, #76]	; (8104c38 <prvCheckForValidListAndQueue+0x68>)
 8104bea:	f7fd fe3d 	bl	8102868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8104bee:	4b13      	ldr	r3, [pc, #76]	; (8104c3c <prvCheckForValidListAndQueue+0x6c>)
 8104bf0:	4a10      	ldr	r2, [pc, #64]	; (8104c34 <prvCheckForValidListAndQueue+0x64>)
 8104bf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8104bf4:	4b12      	ldr	r3, [pc, #72]	; (8104c40 <prvCheckForValidListAndQueue+0x70>)
 8104bf6:	4a10      	ldr	r2, [pc, #64]	; (8104c38 <prvCheckForValidListAndQueue+0x68>)
 8104bf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8104bfa:	2300      	movs	r3, #0
 8104bfc:	9300      	str	r3, [sp, #0]
 8104bfe:	4b11      	ldr	r3, [pc, #68]	; (8104c44 <prvCheckForValidListAndQueue+0x74>)
 8104c00:	4a11      	ldr	r2, [pc, #68]	; (8104c48 <prvCheckForValidListAndQueue+0x78>)
 8104c02:	2110      	movs	r1, #16
 8104c04:	200a      	movs	r0, #10
 8104c06:	f7fe f98b 	bl	8102f20 <xQueueGenericCreateStatic>
 8104c0a:	4602      	mov	r2, r0
 8104c0c:	4b08      	ldr	r3, [pc, #32]	; (8104c30 <prvCheckForValidListAndQueue+0x60>)
 8104c0e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8104c10:	4b07      	ldr	r3, [pc, #28]	; (8104c30 <prvCheckForValidListAndQueue+0x60>)
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d005      	beq.n	8104c24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8104c18:	4b05      	ldr	r3, [pc, #20]	; (8104c30 <prvCheckForValidListAndQueue+0x60>)
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	490b      	ldr	r1, [pc, #44]	; (8104c4c <prvCheckForValidListAndQueue+0x7c>)
 8104c1e:	4618      	mov	r0, r3
 8104c20:	f7fe fd8e 	bl	8103740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8104c24:	f7fe f828 	bl	8102c78 <vPortExitCritical>
}
 8104c28:	bf00      	nop
 8104c2a:	46bd      	mov	sp, r7
 8104c2c:	bd80      	pop	{r7, pc}
 8104c2e:	bf00      	nop
 8104c30:	10004858 	.word	0x10004858
 8104c34:	10004828 	.word	0x10004828
 8104c38:	1000483c 	.word	0x1000483c
 8104c3c:	10004850 	.word	0x10004850
 8104c40:	10004854 	.word	0x10004854
 8104c44:	10004904 	.word	0x10004904
 8104c48:	10004864 	.word	0x10004864
 8104c4c:	08104d40 	.word	0x08104d40

08104c50 <__libc_init_array>:
 8104c50:	b570      	push	{r4, r5, r6, lr}
 8104c52:	4e0d      	ldr	r6, [pc, #52]	; (8104c88 <__libc_init_array+0x38>)
 8104c54:	4c0d      	ldr	r4, [pc, #52]	; (8104c8c <__libc_init_array+0x3c>)
 8104c56:	1ba4      	subs	r4, r4, r6
 8104c58:	10a4      	asrs	r4, r4, #2
 8104c5a:	2500      	movs	r5, #0
 8104c5c:	42a5      	cmp	r5, r4
 8104c5e:	d109      	bne.n	8104c74 <__libc_init_array+0x24>
 8104c60:	4e0b      	ldr	r6, [pc, #44]	; (8104c90 <__libc_init_array+0x40>)
 8104c62:	4c0c      	ldr	r4, [pc, #48]	; (8104c94 <__libc_init_array+0x44>)
 8104c64:	f000 f82c 	bl	8104cc0 <_init>
 8104c68:	1ba4      	subs	r4, r4, r6
 8104c6a:	10a4      	asrs	r4, r4, #2
 8104c6c:	2500      	movs	r5, #0
 8104c6e:	42a5      	cmp	r5, r4
 8104c70:	d105      	bne.n	8104c7e <__libc_init_array+0x2e>
 8104c72:	bd70      	pop	{r4, r5, r6, pc}
 8104c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8104c78:	4798      	blx	r3
 8104c7a:	3501      	adds	r5, #1
 8104c7c:	e7ee      	b.n	8104c5c <__libc_init_array+0xc>
 8104c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8104c82:	4798      	blx	r3
 8104c84:	3501      	adds	r5, #1
 8104c86:	e7f2      	b.n	8104c6e <__libc_init_array+0x1e>
 8104c88:	08104d7c 	.word	0x08104d7c
 8104c8c:	08104d7c 	.word	0x08104d7c
 8104c90:	08104d7c 	.word	0x08104d7c
 8104c94:	08104d80 	.word	0x08104d80

08104c98 <memcpy>:
 8104c98:	b510      	push	{r4, lr}
 8104c9a:	1e43      	subs	r3, r0, #1
 8104c9c:	440a      	add	r2, r1
 8104c9e:	4291      	cmp	r1, r2
 8104ca0:	d100      	bne.n	8104ca4 <memcpy+0xc>
 8104ca2:	bd10      	pop	{r4, pc}
 8104ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104cac:	e7f7      	b.n	8104c9e <memcpy+0x6>

08104cae <memset>:
 8104cae:	4402      	add	r2, r0
 8104cb0:	4603      	mov	r3, r0
 8104cb2:	4293      	cmp	r3, r2
 8104cb4:	d100      	bne.n	8104cb8 <memset+0xa>
 8104cb6:	4770      	bx	lr
 8104cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8104cbc:	e7f9      	b.n	8104cb2 <memset+0x4>
	...

08104cc0 <_init>:
 8104cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104cc2:	bf00      	nop
 8104cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104cc6:	bc08      	pop	{r3}
 8104cc8:	469e      	mov	lr, r3
 8104cca:	4770      	bx	lr

08104ccc <_fini>:
 8104ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104cce:	bf00      	nop
 8104cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104cd2:	bc08      	pop	{r3}
 8104cd4:	469e      	mov	lr, r3
 8104cd6:	4770      	bx	lr
