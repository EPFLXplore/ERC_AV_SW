
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d640  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033b0  0801d8e0  0801d8e0  0002d8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020c90  08020c90  00030c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020c98  08020c98  00030c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020c9c  08020c9c  00030c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08020ca0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2000009c  08020d3c  0004009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000fc  08020d9c  000400fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  2000015c  08020dfc  0004015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00009e34  2000192c  080225cc  0004192c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b760  080225cc  0004b760  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004192c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007164c  00000000  00000000  0004195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000b503  00000000  00000000  000b2fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00003278  00000000  00000000  000be4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002f70  00000000  00000000  000c1728  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00050a3c  00000000  00000000  000c4698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00043dd2  00000000  00000000  001150d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001b9c2c  00000000  00000000  00158ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00312ad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d61c  00000000  00000000  00312b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000192c 	.word	0x2000192c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d8c8 	.word	0x0801d8c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20001930 	.word	0x20001930
 80002dc:	0801d8c8 	.word	0x0801d8c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <MX_CRC_Init+0x40>)
 80007bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007d8:	2201      	movs	r2, #1
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_CRC_Init+0x3c>)
 80007de:	f002 fcb1 	bl	8003144 <HAL_CRC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007e8:	f000 fdb0 	bl	800134c <Error_Handler>
  }

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20007600 	.word	0x20007600
 80007f4:	58024c00 	.word	0x58024c00

080007f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <HAL_CRC_MspInit+0x3c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10e      	bne.n	8000828 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_CRC_MspInit+0x40>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_CRC_MspInit+0x40>)
 8000812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_CRC_MspInit+0x40>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	58024c00 	.word	0x58024c00
 8000838:	58024400 	.word	0x58024400

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <MX_DMA_Init+0x14c>)
 8000844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000848:	4a4f      	ldr	r2, [pc, #316]	; (8000988 <MX_DMA_Init+0x14c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000852:	4b4d      	ldr	r3, [pc, #308]	; (8000988 <MX_DMA_Init+0x14c>)
 8000854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000860:	4b49      	ldr	r3, [pc, #292]	; (8000988 <MX_DMA_Init+0x14c>)
 8000862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000866:	4a48      	ldr	r2, [pc, #288]	; (8000988 <MX_DMA_Init+0x14c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000870:	4b45      	ldr	r3, [pc, #276]	; (8000988 <MX_DMA_Init+0x14c>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	200b      	movs	r0, #11
 8000884:	f002 fbaa 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000888:	200b      	movs	r0, #11
 800088a:	f002 fbc1 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	200c      	movs	r0, #12
 8000894:	f002 fba2 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000898:	200c      	movs	r0, #12
 800089a:	f002 fbb9 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200d      	movs	r0, #13
 80008a4:	f002 fb9a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008a8:	200d      	movs	r0, #13
 80008aa:	f002 fbb1 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200e      	movs	r0, #14
 80008b4:	f002 fb92 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008b8:	200e      	movs	r0, #14
 80008ba:	f002 fba9 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	200f      	movs	r0, #15
 80008c4:	f002 fb8a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008c8:	200f      	movs	r0, #15
 80008ca:	f002 fba1 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	2010      	movs	r0, #16
 80008d4:	f002 fb82 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008d8:	2010      	movs	r0, #16
 80008da:	f002 fb99 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	2011      	movs	r0, #17
 80008e4:	f002 fb7a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008e8:	2011      	movs	r0, #17
 80008ea:	f002 fb91 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	202f      	movs	r0, #47	; 0x2f
 80008f4:	f002 fb72 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008f8:	202f      	movs	r0, #47	; 0x2f
 80008fa:	f002 fb89 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2038      	movs	r0, #56	; 0x38
 8000904:	f002 fb6a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000908:	2038      	movs	r0, #56	; 0x38
 800090a:	f002 fb81 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2039      	movs	r0, #57	; 0x39
 8000914:	f002 fb62 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000918:	2039      	movs	r0, #57	; 0x39
 800091a:	f002 fb79 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	203a      	movs	r0, #58	; 0x3a
 8000924:	f002 fb5a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000928:	203a      	movs	r0, #58	; 0x3a
 800092a:	f002 fb71 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	203b      	movs	r0, #59	; 0x3b
 8000934:	f002 fb52 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000938:	203b      	movs	r0, #59	; 0x3b
 800093a:	f002 fb69 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	203c      	movs	r0, #60	; 0x3c
 8000944:	f002 fb4a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000948:	203c      	movs	r0, #60	; 0x3c
 800094a:	f002 fb61 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2044      	movs	r0, #68	; 0x44
 8000954:	f002 fb42 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000958:	2044      	movs	r0, #68	; 0x44
 800095a:	f002 fb59 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2045      	movs	r0, #69	; 0x45
 8000964:	f002 fb3a 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000968:	2045      	movs	r0, #69	; 0x45
 800096a:	f002 fb51 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2046      	movs	r0, #70	; 0x46
 8000974:	f002 fb32 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000978:	2046      	movs	r0, #70	; 0x46
 800097a:	f002 fb49 	bl	8003010 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58024400 	.word	0x58024400

0800098c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <MX_FREERTOS_Init+0x18>)
 8000992:	2100      	movs	r1, #0
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_FREERTOS_Init+0x1c>)
 8000996:	f00b ff31 	bl	800c7fc <osThreadNew>
 800099a:	4602      	mov	r2, r0
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <MX_FREERTOS_Init+0x20>)
 800099e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08020a70 	.word	0x08020a70
 80009a8:	080009b1 	.word	0x080009b1
 80009ac:	20007624 	.word	0x20007624

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009b8:	f00b f9a2 	bl	800bd00 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f00b ffc3 	bl	800c948 <osDelay>
 80009c2:	e7fb      	b.n	80009bc <StartDefaultTask+0xc>

080009c4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a36      	ldr	r2, [pc, #216]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0x104>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

}
 8000aba:	bf00      	nop
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400

08000acc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <MX_I2C1_Init+0x7c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C1_Init+0x80>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000b08:	f006 fb7c 	bl	8007204 <HAL_I2C_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 fc1b 	bl	800134c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	480a      	ldr	r0, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000b1a:	f006 fc03 	bl	8007324 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 fc12 	bl	800134c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000b2c:	f006 fc45 	bl	80073ba <HAL_I2CEx_ConfigDigitalFilter>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fc09 	bl	800134c <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f006 fc8a 	bl	8007454 <HAL_I2CEx_EnableFastModePlus>

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200076c0 	.word	0x200076c0
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	00401242 	.word	0x00401242

08000b50 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C2_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b8c:	f006 fb3a 	bl	8007204 <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 fbd9 	bl	800134c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000b9e:	f006 fbc1 	bl	8007324 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 fbd0 	bl	800134c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_I2C2_Init+0x74>)
 8000bb0:	f006 fc03 	bl	80073ba <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fbc7 	bl	800134c <Error_Handler>
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000770c 	.word	0x2000770c
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	10c0ecff 	.word	0x10c0ecff

08000bd0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_I2C3_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_I2C3_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000c0c:	f006 fafa 	bl	8007204 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 fb99 	bl	800134c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000c1e:	f006 fb81 	bl	8007324 <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 fb90 	bl	800134c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_I2C3_Init+0x74>)
 8000c30:	f006 fbc3 	bl	80073ba <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fb87 	bl	800134c <Error_Handler>
  }

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20007628 	.word	0x20007628
 8000c48:	40005c00 	.word	0x40005c00
 8000c4c:	10c0ecff 	.word	0x10c0ecff

08000c50 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <MX_I2C4_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <MX_I2C4_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c8c:	f006 faba 	bl	8007204 <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c96:	f000 fb59 	bl	800134c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000c9e:	f006 fb41 	bl	8007324 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 fb50 	bl	800134c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_I2C4_Init+0x74>)
 8000cb0:	f006 fb83 	bl	80073ba <HAL_I2CEx_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 fb47 	bl	800134c <Error_Handler>
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20007674 	.word	0x20007674
 8000cc8:	58001c00 	.word	0x58001c00
 8000ccc:	10c0ecff 	.word	0x10c0ecff

08000cd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b090      	sub	sp, #64	; 0x40
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a7a      	ldr	r2, [pc, #488]	; (8000ed8 <HAL_I2C_MspInit+0x208>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12f      	bne.n	8000d52 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b7a      	ldr	r3, [pc, #488]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a78      	ldr	r2, [pc, #480]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b76      	ldr	r3, [pc, #472]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	486c      	ldr	r0, [pc, #432]	; (8000ee0 <HAL_I2C_MspInit+0x210>)
 8000d2e:	f006 f88b 	bl	8006e48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d38:	4a68      	ldr	r2, [pc, #416]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d42:	4b66      	ldr	r3, [pc, #408]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d50:	e0bd      	b.n	8000ece <HAL_I2C_MspInit+0x1fe>
  else if(i2cHandle->Instance==I2C2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a63      	ldr	r2, [pc, #396]	; (8000ee4 <HAL_I2C_MspInit+0x214>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12f      	bne.n	8000dbc <HAL_I2C_MspInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a5e      	ldr	r2, [pc, #376]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b5b      	ldr	r3, [pc, #364]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4852      	ldr	r0, [pc, #328]	; (8000ee0 <HAL_I2C_MspInit+0x210>)
 8000d98:	f006 f856 	bl	8006e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d9c:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dac:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
}
 8000dba:	e088      	b.n	8000ece <HAL_I2C_MspInit+0x1fe>
  else if(i2cHandle->Instance==I2C3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_I2C_MspInit+0x218>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d14f      	bne.n	8000e66 <HAL_I2C_MspInit+0x196>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a43      	ldr	r2, [pc, #268]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b41      	ldr	r3, [pc, #260]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a3c      	ldr	r2, [pc, #240]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b39      	ldr	r3, [pc, #228]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e14:	2304      	movs	r3, #4
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4833      	ldr	r0, [pc, #204]	; (8000eec <HAL_I2C_MspInit+0x21c>)
 8000e20:	f006 f812 	bl	8006e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e36:	2304      	movs	r3, #4
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <HAL_I2C_MspInit+0x220>)
 8000e42:	f006 f801 	bl	8006e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e4c:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
}
 8000e64:	e033      	b.n	8000ece <HAL_I2C_MspInit+0x1fe>
  else if(i2cHandle->Instance==I2C4)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_I2C_MspInit+0x224>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d12e      	bne.n	8000ece <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a19      	ldr	r2, [pc, #100]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <HAL_I2C_MspInit+0x228>)
 8000eac:	f005 ffcc 	bl	8006e48 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_I2C_MspInit+0x20c>)
 8000ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
}
 8000ece:	bf00      	nop
 8000ed0:	3740      	adds	r7, #64	; 0x40
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020000 	.word	0x58020000
 8000ef4:	58001c00 	.word	0x58001c00
 8000ef8:	58021400 	.word	0x58021400

08000efc <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_IWDG1_Init+0x34>)
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <MX_IWDG1_Init+0x38>)
 8000f04:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_IWDG1_Init+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_IWDG1_Init+0x34>)
 8000f0e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f12:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_IWDG1_Init+0x34>)
 8000f16:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f1a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_IWDG1_Init+0x34>)
 8000f1e:	f006 fabd 	bl	800749c <HAL_IWDG_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000f28:	f000 fa10 	bl	800134c <Error_Handler>
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20007758 	.word	0x20007758
 8000f34:	58004800 	.word	0x58004800

08000f38 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f40:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <SCB_EnableICache+0x3c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f50:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <SCB_EnableICache+0x3c>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <SCB_EnableICache+0x3c>)
 8000f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f64:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <SCB_EnableDCache+0x7c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <SCB_EnableDCache+0x7c>)
 8000f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f90:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0b5b      	lsrs	r3, r3, #13
 8000f96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f9a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fa4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	015a      	lsls	r2, r3, #5
 8000faa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <SCB_EnableDCache+0x7c>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1ef      	bne.n	8000fa6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60fa      	str	r2, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e5      	bne.n	8000f9c <SCB_EnableDCache+0x24>
 8000fd0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <SCB_EnableDCache+0x7c>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <SCB_EnableDCache+0x7c>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6153      	str	r3, [r2, #20]
 8000fe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fe4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ffe:	f000 f94b 	bl	8001298 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001002:	f7ff ff99 	bl	8000f38 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001006:	f7ff ffb7 	bl	8000f78 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001010:	bf00      	nop
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <main+0xec>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <main+0x30>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dcf4      	bgt.n	8001012 <main+0x1a>
  if ( timeout < 0 )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da01      	bge.n	8001032 <main+0x3a>
  {
  Error_Handler();
 800102e:	f000 f98d 	bl	800134c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f001 fe9f 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f857 	bl	80010e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <main+0xec>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <main+0xec>)
 8001042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <main+0xec>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001058:	2000      	movs	r0, #0
 800105a:	f006 f8a5 	bl	80071a8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f006 f8bb 	bl	80071dc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800106c:	bf00      	nop
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0xec>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <main+0x8c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	dcf4      	bgt.n	800106e <main+0x76>
if ( timeout < 0 )
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da01      	bge.n	800108e <main+0x96>
{
Error_Handler();
 800108a:	f000 f95f 	bl	800134c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f7ff fc99 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001092:	f7ff fbd3 	bl	800083c <MX_DMA_Init>
  MX_CRC_Init();
 8001096:	f7ff fb8d 	bl	80007b4 <MX_CRC_Init>
  MX_I2C1_Init();
 800109a:	f7ff fd17 	bl	8000acc <MX_I2C1_Init>
  MX_I2C2_Init();
 800109e:	f7ff fd57 	bl	8000b50 <MX_I2C2_Init>
  MX_I2C3_Init();
 80010a2:	f7ff fd95 	bl	8000bd0 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 80010a6:	f000 f959 	bl	800135c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 80010aa:	f000 fa85 	bl	80015b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80010ae:	f000 fad9 	bl	8001664 <MX_SPI2_Init>
  MX_SPI3_Init();
 80010b2:	f000 fb2d 	bl	8001710 <MX_SPI3_Init>
  MX_SPI4_Init();
 80010b6:	f000 fb81 	bl	80017bc <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80010ba:	f001 f8f9 	bl	80022b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010be:	f001 f943 	bl	8002348 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010c2:	f001 f98d 	bl	80023e0 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 80010c6:	f7ff fdc3 	bl	8000c50 <MX_I2C4_Init>
  MX_IWDG1_Init();
 80010ca:	f7ff ff17 	bl	8000efc <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 80010ce:	f001 f9d3 	bl	8002478 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80010d2:	f000 fa2f 	bl	8001534 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80010d6:	f00b faff 	bl	800c6d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80010da:	f7ff fc57 	bl	800098c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80010de:	f00b fb2f 	bl	800c740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0xea>
 80010e4:	58024400 	.word	0x58024400

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0cc      	sub	sp, #304	; 0x130
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010f2:	224c      	movs	r2, #76	; 0x4c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f01b fcbe 	bl	801ca78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001100:	2220      	movs	r2, #32
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f01b fcb7 	bl	801ca78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	23bc      	movs	r3, #188	; 0xbc
 8001112:	461a      	mov	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f01b fcaf 	bl	801ca78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800111a:	2004      	movs	r0, #4
 800111c:	f006 fa04 	bl	8007528 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	4b59      	ldr	r3, [pc, #356]	; (800128c <SystemClock_Config+0x1a4>)
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	4a58      	ldr	r2, [pc, #352]	; (800128c <SystemClock_Config+0x1a4>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001132:	4b56      	ldr	r3, [pc, #344]	; (800128c <SystemClock_Config+0x1a4>)
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <SystemClock_Config+0x1a8>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a53      	ldr	r2, [pc, #332]	; (8001290 <SystemClock_Config+0x1a8>)
 8001144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <SystemClock_Config+0x1a8>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800115a:	bf00      	nop
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <SystemClock_Config+0x1a8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001168:	d1f8      	bne.n	800115c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800116a:	2309      	movs	r3, #9
 800116c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001170:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001174:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011a8:	230c      	movs	r3, #12
 80011aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fac6 	bl	8007750 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80011ca:	f000 f8bf 	bl	800134c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	233f      	movs	r3, #63	; 0x3f
 80011d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011e0:	2308      	movs	r3, #8
 80011e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001200:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001204:	2102      	movs	r1, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f006 feb2 	bl	8007f70 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001212:	f000 f89b 	bl	800134c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <SystemClock_Config+0x1ac>)
 800121c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2200      	movs	r2, #0
 8001224:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fa42 	bl	80086fc <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x19a>
  {
    Error_Handler();
 800127e:	f000 f865 	bl	800134c <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58000400 	.word	0x58000400
 8001290:	58024800 	.word	0x58024800
 8001294:	0240b01b 	.word	0x0240b01b

08001298 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012aa:	f001 febf 	bl	800302c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MPU_Config+0x8c>)
 80012b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80012ba:	230e      	movs	r3, #14
 80012bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012be:	2300      	movs	r3, #0
 80012c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012c6:	2303      	movs	r3, #3
 80012c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ca:	2301      	movs	r3, #1
 80012cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012da:	463b      	mov	r3, r7
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fed9 	bl	8003094 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MPU_Config+0x8c>)
 80012ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80012ee:	2307      	movs	r3, #7
 80012f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012fa:	2303      	movs	r3, #3
 80012fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001302:	2301      	movs	r3, #1
 8001304:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800130e:	463b      	mov	r3, r7
 8001310:	4618      	mov	r0, r3
 8001312:	f001 febf 	bl	8003094 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001316:	2004      	movs	r0, #4
 8001318:	f001 fe9e 	bl	8003058 <HAL_MPU_Enable>

}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	30040000 	.word	0x30040000

08001328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133a:	f001 fd57 	bl	8002dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40001400 	.word	0x40001400

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <MX_QUADSPI_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_QUADSPI_Init+0x50>)
 800136e:	2201      	movs	r2, #1
 8001370:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_QUADSPI_Init+0x50>)
 800137a:	2201      	movs	r2, #1
 800137c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_QUADSPI_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_QUADSPI_Init+0x50>)
 8001398:	f006 f920 	bl	80075dc <HAL_QSPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f7ff ffd3 	bl	800134c <Error_Handler>
  }

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20007768 	.word	0x20007768
 80013b0:	52005000 	.word	0x52005000

080013b4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_QSPI_MspInit+0x168>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f040 809e 	bne.w	8001514 <HAL_QSPI_MspInit+0x160>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013d8:	4b51      	ldr	r3, [pc, #324]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 80013da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013de:	4a50      	ldr	r2, [pc, #320]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 80013ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a41      	ldr	r2, [pc, #260]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a39      	ldr	r2, [pc, #228]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_QSPI_MspInit+0x16c>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146e:	2304      	movs	r3, #4
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800147e:	2309      	movs	r3, #9
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4826      	ldr	r0, [pc, #152]	; (8001524 <HAL_QSPI_MspInit+0x170>)
 800148a:	f005 fcdd 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 800148e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014a0:	2309      	movs	r3, #9
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481f      	ldr	r0, [pc, #124]	; (8001528 <HAL_QSPI_MspInit+0x174>)
 80014ac:	f005 fccc 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c2:	230a      	movs	r3, #10
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <HAL_QSPI_MspInit+0x174>)
 80014ce:	f005 fcbb 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014e4:	2309      	movs	r3, #9
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <HAL_QSPI_MspInit+0x178>)
 80014f0:	f005 fcaa 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001504:	230a      	movs	r3, #10
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <HAL_QSPI_MspInit+0x17c>)
 8001510:	f005 fc9a 	bl	8006e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	52005000 	.word	0x52005000
 8001520:	58024400 	.word	0x58024400
 8001524:	58021000 	.word	0x58021000
 8001528:	58021400 	.word	0x58021400
 800152c:	58020c00 	.word	0x58020c00
 8001530:	58021800 	.word	0x58021800

08001534 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_RTC_Init+0x48>)
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <MX_RTC_Init+0x4c>)
 800153c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_RTC_Init+0x48>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_RTC_Init+0x48>)
 8001546:	227f      	movs	r2, #127	; 0x7f
 8001548:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_RTC_Init+0x48>)
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_RTC_Init+0x48>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_RTC_Init+0x48>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_RTC_Init+0x48>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_RTC_Init+0x48>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_RTC_Init+0x48>)
 800156a:	f008 fbc7 	bl	8009cfc <HAL_RTC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001574:	f7ff feea 	bl	800134c <Error_Handler>
  }

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200077b4 	.word	0x200077b4
 8001580:	58004000 	.word	0x58004000

08001584 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_RTC_MspInit+0x2c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d105      	bne.n	80015a2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_RTC_MspInit+0x30>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_RTC_MspInit+0x30>)
 800159c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	58004000 	.word	0x58004000
 80015b4:	58024400 	.word	0x58024400

080015b8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_SPI1_Init+0xa4>)
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <MX_SPI1_Init+0xa8>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_SPI1_Init+0xa4>)
 80015c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_SPI1_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_SPI1_Init+0xa4>)
 80015d2:	2203      	movs	r2, #3
 80015d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_SPI1_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_SPI1_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_SPI1_Init+0xa4>)
 80015e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_SPI1_Init+0xa4>)
 80015ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_SPI1_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_SPI1_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_SPI1_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_SPI1_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI1_Init+0xa4>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_SPI1_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_SPI1_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI1_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_SPI1_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI1_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_SPI1_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI1_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_SPI1_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI1_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_SPI1_Init+0xa4>)
 800164a:	f008 fc63 	bl	8009f14 <HAL_SPI_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001654:	f7ff fe7a 	bl	800134c <Error_Handler>
  }

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20007b50 	.word	0x20007b50
 8001660:	40013000 	.word	0x40013000

08001664 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <MX_SPI2_Init+0xa4>)
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <MX_SPI2_Init+0xa8>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_SPI2_Init+0xa4>)
 8001670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001674:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <MX_SPI2_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_SPI2_Init+0xa4>)
 800167e:	2203      	movs	r2, #3
 8001680:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_SPI2_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_SPI2_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_SPI2_Init+0xa4>)
 8001690:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001694:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_SPI2_Init+0xa4>)
 8001698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800169c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_SPI2_Init+0xa4>)
 80016f6:	f008 fc0d 	bl	8009f14 <HAL_SPI_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001700:	f7ff fe24 	bl	800134c <Error_Handler>
  }

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200077d8 	.word	0x200077d8
 800170c:	40003800 	.word	0x40003800

08001710 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <MX_SPI3_Init+0xa8>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800171c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001720:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800172a:	2203      	movs	r2, #3
 800172c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800173c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001740:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001748:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001790:	2200      	movs	r2, #0
 8001792:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_SPI3_Init+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI3_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_SPI3_Init+0xa4>)
 80017a2:	f008 fbb7 	bl	8009f14 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80017ac:	f7ff fdce 	bl	800134c <Error_Handler>
  }

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20007950 	.word	0x20007950
 80017b8:	40003c00 	.word	0x40003c00

080017bc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <MX_SPI4_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017d6:	2203      	movs	r2, #3
 80017d8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_SPI4_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI4_Init+0xa4>)
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI4_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI4_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI4_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI4_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_SPI4_Init+0xa4>)
 800184c:	f008 fb62 	bl	8009f14 <HAL_SPI_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001856:	f7ff fd79 	bl	800134c <Error_Handler>
  }

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20007ac8 	.word	0x20007ac8
 8001864:	40013400 	.word	0x40013400

08001868 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b092      	sub	sp, #72	; 0x48
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_SPI_MspInit+0x188>)
 8001886:	4293      	cmp	r3, r2
 8001888:	f040 80c2 	bne.w	8001a10 <HAL_SPI_MspInit+0x1a8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 800188e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001892:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 8001894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001898:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 800189e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a49      	ldr	r2, [pc, #292]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_SPI_MspInit+0x18c>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018e6:	2360      	movs	r3, #96	; 0x60
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f6:	2305      	movs	r3, #5
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018fe:	4619      	mov	r1, r3
 8001900:	483d      	ldr	r0, [pc, #244]	; (80019f8 <HAL_SPI_MspInit+0x190>)
 8001902:	f005 faa1 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001916:	2305      	movs	r3, #5
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191e:	4619      	mov	r1, r3
 8001920:	4836      	ldr	r0, [pc, #216]	; (80019fc <HAL_SPI_MspInit+0x194>)
 8001922:	f005 fa91 	bl	8006e48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001928:	4a36      	ldr	r2, [pc, #216]	; (8001a04 <HAL_SPI_MspInit+0x19c>)
 800192a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800192e:	2225      	movs	r2, #37	; 0x25
 8001930:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001944:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800195a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800195e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 8001968:	f001 fcd6 	bl	8003318 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001972:	f7ff fceb 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800197a:	67da      	str	r2, [r3, #124]	; 0x7c
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_SPI_MspInit+0x198>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 8001984:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_SPI_MspInit+0x1a4>)
 8001986:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 800198a:	2226      	movs	r2, #38	; 0x26
 800198c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 8001990:	2240      	movs	r2, #64	; 0x40
 8001992:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 800199c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019ba:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019c2:	4811      	ldr	r0, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019c4:	f001 fca8 	bl	8003318 <HAL_DMA_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 80019ce:	f7ff fcbd 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019d6:	679a      	str	r2, [r3, #120]	; 0x78
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_SPI_MspInit+0x1a0>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	2023      	movs	r0, #35	; 0x23
 80019e4:	f001 fafa 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019e8:	2023      	movs	r0, #35	; 0x23
 80019ea:	f001 fb11 	bl	8003010 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80019ee:	e229      	b.n	8001e44 <HAL_SPI_MspInit+0x5dc>
 80019f0:	40013000 	.word	0x40013000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58020000 	.word	0x58020000
 80019fc:	58020c00 	.word	0x58020c00
 8001a00:	20007bd8 	.word	0x20007bd8
 8001a04:	40020010 	.word	0x40020010
 8001a08:	20007cc8 	.word	0x20007cc8
 8001a0c:	40020028 	.word	0x40020028
  else if(spiHandle->Instance==SPI2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_SPI_MspInit+0x31c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	f040 80c4 	bne.w	8001ba4 <HAL_SPI_MspInit+0x33c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a22:	4a59      	ldr	r2, [pc, #356]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_SPI_MspInit+0x320>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a76:	230c      	movs	r3, #12
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a86:	2305      	movs	r3, #5
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a8e:	4619      	mov	r1, r3
 8001a90:	483e      	ldr	r0, [pc, #248]	; (8001b8c <HAL_SPI_MspInit+0x324>)
 8001a92:	f005 f9d9 	bl	8006e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4837      	ldr	r0, [pc, #220]	; (8001b90 <HAL_SPI_MspInit+0x328>)
 8001ab4:	f005 f9c8 	bl	8006e48 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001aba:	4a37      	ldr	r2, [pc, #220]	; (8001b98 <HAL_SPI_MspInit+0x330>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001abe:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ac0:	2227      	movs	r2, #39	; 0x27
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac4:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001aec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001af8:	4826      	ldr	r0, [pc, #152]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001afa:	f001 fc0d 	bl	8003318 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 8001b04:	f7ff fc22 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001b0c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <HAL_SPI_MspInit+0x32c>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_SPI_MspInit+0x338>)
 8001b18:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b1c:	2228      	movs	r2, #40	; 0x28
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b56:	f001 fbdf 	bl	8003318 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_SPI_MspInit+0x2fc>
      Error_Handler();
 8001b60:	f7ff fbf4 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b68:	679a      	str	r2, [r3, #120]	; 0x78
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_SPI_MspInit+0x334>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2105      	movs	r1, #5
 8001b74:	2024      	movs	r0, #36	; 0x24
 8001b76:	f001 fa31 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b7a:	2024      	movs	r0, #36	; 0x24
 8001b7c:	f001 fa48 	bl	8003010 <HAL_NVIC_EnableIRQ>
}
 8001b80:	e160      	b.n	8001e44 <HAL_SPI_MspInit+0x5dc>
 8001b82:	bf00      	nop
 8001b84:	40003800 	.word	0x40003800
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020800 	.word	0x58020800
 8001b90:	58020000 	.word	0x58020000
 8001b94:	20007860 	.word	0x20007860
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	20007c50 	.word	0x20007c50
 8001ba0:	40020058 	.word	0x40020058
  else if(spiHandle->Instance==SPI3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4aa8      	ldr	r2, [pc, #672]	; (8001e4c <HAL_SPI_MspInit+0x5e4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f040 80b3 	bne.w	8001d16 <HAL_SPI_MspInit+0x4ae>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bb0:	4ba7      	ldr	r3, [pc, #668]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb6:	4aa6      	ldr	r2, [pc, #664]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bc0:	4ba3      	ldr	r3, [pc, #652]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	4a9e      	ldr	r2, [pc, #632]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bde:	4b9c      	ldr	r3, [pc, #624]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b98      	ldr	r3, [pc, #608]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	4a97      	ldr	r2, [pc, #604]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfc:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c22:	4619      	mov	r1, r3
 8001c24:	488b      	ldr	r0, [pc, #556]	; (8001e54 <HAL_SPI_MspInit+0x5ec>)
 8001c26:	f005 f90f 	bl	8006e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c3c:	2306      	movs	r3, #6
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c44:	4619      	mov	r1, r3
 8001c46:	4884      	ldr	r0, [pc, #528]	; (8001e58 <HAL_SPI_MspInit+0x5f0>)
 8001c48:	f005 f8fe 	bl	8006e48 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream4;
 8001c4c:	4b83      	ldr	r3, [pc, #524]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c4e:	4a84      	ldr	r2, [pc, #528]	; (8001e60 <HAL_SPI_MspInit+0x5f8>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c54:	223d      	movs	r2, #61	; 0x3d
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c58:	4b80      	ldr	r3, [pc, #512]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c7e:	4b77      	ldr	r3, [pc, #476]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001c8c:	4873      	ldr	r0, [pc, #460]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001c8e:	f001 fb43 	bl	8003318 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_SPI_MspInit+0x434>
      Error_Handler();
 8001c98:	f7ff fb58 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001ca0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_SPI_MspInit+0x5f4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001ca8:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001caa:	4a6f      	ldr	r2, [pc, #444]	; (8001e68 <HAL_SPI_MspInit+0x600>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cb0:	223e      	movs	r2, #62	; 0x3e
 8001cb2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb4:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc0:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cce:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce2:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001ce8:	485e      	ldr	r0, [pc, #376]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cea:	f001 fb15 	bl	8003318 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_SPI_MspInit+0x490>
      Error_Handler();
 8001cf4:	f7ff fb2a 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001cfc:	679a      	str	r2, [r3, #120]	; 0x78
 8001cfe:	4a59      	ldr	r2, [pc, #356]	; (8001e64 <HAL_SPI_MspInit+0x5fc>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2105      	movs	r1, #5
 8001d08:	2033      	movs	r0, #51	; 0x33
 8001d0a:	f001 f967 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001d0e:	2033      	movs	r0, #51	; 0x33
 8001d10:	f001 f97e 	bl	8003010 <HAL_NVIC_EnableIRQ>
}
 8001d14:	e096      	b.n	8001e44 <HAL_SPI_MspInit+0x5dc>
  else if(spiHandle->Instance==SPI4)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <HAL_SPI_MspInit+0x604>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f040 8091 	bne.w	8001e44 <HAL_SPI_MspInit+0x5dc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	4a42      	ldr	r2, [pc, #264]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_SPI_MspInit+0x5e8>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001d5e:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d70:	2305      	movs	r3, #5
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d78:	4619      	mov	r1, r3
 8001d7a:	483d      	ldr	r0, [pc, #244]	; (8001e70 <HAL_SPI_MspInit+0x608>)
 8001d7c:	f005 f864 	bl	8006e48 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream6;
 8001d80:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001d82:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <HAL_SPI_MspInit+0x610>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001d88:	2253      	movs	r2, #83	; 0x53
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001dbe:	482d      	ldr	r0, [pc, #180]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001dc0:	f001 faaa 	bl	8003318 <HAL_DMA_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_SPI_MspInit+0x566>
      Error_Handler();
 8001dca:	f7ff fabf 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001dd2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001dd4:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_SPI_MspInit+0x60c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream7;
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001ddc:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <HAL_SPI_MspInit+0x618>)
 8001dde:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001de2:	2254      	movs	r2, #84	; 0x54
 8001de4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001e18:	4818      	ldr	r0, [pc, #96]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e1a:	f001 fa7d 	bl	8003318 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_SPI_MspInit+0x5c0>
      Error_Handler();
 8001e24:	f7ff fa92 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e2c:	679a      	str	r2, [r3, #120]	; 0x78
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_SPI_MspInit+0x614>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2105      	movs	r1, #5
 8001e38:	2054      	movs	r0, #84	; 0x54
 8001e3a:	f001 f8cf 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001e3e:	2054      	movs	r0, #84	; 0x54
 8001e40:	f001 f8e6 	bl	8003010 <HAL_NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	3748      	adds	r7, #72	; 0x48
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40003c00 	.word	0x40003c00
 8001e50:	58024400 	.word	0x58024400
 8001e54:	58020400 	.word	0x58020400
 8001e58:	58020800 	.word	0x58020800
 8001e5c:	20007d40 	.word	0x20007d40
 8001e60:	40020070 	.word	0x40020070
 8001e64:	200079d8 	.word	0x200079d8
 8001e68:	40020088 	.word	0x40020088
 8001e6c:	40013400 	.word	0x40013400
 8001e70:	58021000 	.word	0x58021000
 8001e74:	200078d8 	.word	0x200078d8
 8001e78:	400200a0 	.word	0x400200a0
 8001e7c:	20007a50 	.word	0x20007a50
 8001e80:	400200b8 	.word	0x400200b8

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_MspInit+0x38>)
 8001e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_MspInit+0x38>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_MspInit+0x38>)
 8001e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f06f 0001 	mvn.w	r0, #1
 8001eb0:	f001 f894 	bl	8002fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	58024400 	.word	0x58024400

08001ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	2037      	movs	r0, #55	; 0x37
 8001ed6:	f001 f881 	bl	8002fdc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001eda:	2037      	movs	r0, #55	; 0x37
 8001edc:	f001 f898 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_InitTick+0xa8>)
 8001ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_InitTick+0xa8>)
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_InitTick+0xa8>)
 8001ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f006 fbb5 	bl	8008678 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f0e:	f006 fb87 	bl	8008620 <HAL_RCC_GetPCLK1Freq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_InitTick+0xac>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	3b01      	subs	r3, #1
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_InitTick+0xb4>)
 8001f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f32:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f46:	480a      	ldr	r0, [pc, #40]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f48:	f008 fbbb 	bl	800a6c2 <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d104      	bne.n	8001f5c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <HAL_InitTick+0xb0>)
 8001f54:	f008 fc16 	bl	800a784 <HAL_TIM_Base_Start_IT>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	e000      	b.n	8001f5e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3738      	adds	r7, #56	; 0x38
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	20007db8 	.word	0x20007db8
 8001f74:	40001400 	.word	0x40001400

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA1_Stream0_IRQHandler+0x10>)
 8001fb2:	f001 ff51 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20007bd8 	.word	0x20007bd8

08001fc0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA1_Stream1_IRQHandler+0x10>)
 8001fc6:	f001 ff47 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20007cc8 	.word	0x20007cc8

08001fd4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA1_Stream2_IRQHandler+0x10>)
 8001fda:	f001 ff3d 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20007860 	.word	0x20007860

08001fe8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA1_Stream3_IRQHandler+0x10>)
 8001fee:	f001 ff33 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20007c50 	.word	0x20007c50

08001ffc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Stream4_IRQHandler+0x10>)
 8002002:	f001 ff29 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20007d40 	.word	0x20007d40

08002010 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Stream5_IRQHandler+0x10>)
 8002016:	f001 ff1f 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200079d8 	.word	0x200079d8

08002024 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <DMA1_Stream6_IRQHandler+0x10>)
 800202a:	f001 ff15 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200078d8 	.word	0x200078d8

08002038 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <SPI1_IRQHandler+0x10>)
 800203e:	f008 f861 	bl	800a104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20007b50 	.word	0x20007b50

0800204c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <SPI2_IRQHandler+0x10>)
 8002052:	f008 f857 	bl	800a104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200077d8 	.word	0x200077d8

08002060 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <DMA1_Stream7_IRQHandler+0x10>)
 8002066:	f001 fef7 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20007a50 	.word	0x20007a50

08002074 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SPI3_IRQHandler+0x10>)
 800207a:	f008 f843 	bl	800a104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20007950 	.word	0x20007950

08002088 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM7_IRQHandler+0x10>)
 800208e:	f008 fbaf 	bl	800a7f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20007db8 	.word	0x20007db8

0800209c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA2_Stream0_IRQHandler+0x10>)
 80020a2:	f001 fed9 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20008160 	.word	0x20008160

080020b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <DMA2_Stream1_IRQHandler+0x10>)
 80020b6:	f001 fecf 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20008070 	.word	0x20008070

080020c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA2_Stream2_IRQHandler+0x10>)
 80020ca:	f001 fec5 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20007ef4 	.word	0x20007ef4

080020d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA2_Stream3_IRQHandler+0x10>)
 80020de:	f001 febb 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20007ff8 	.word	0x20007ff8

080020ec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <DMA2_Stream4_IRQHandler+0x10>)
 80020f2:	f001 feb1 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20007e04 	.word	0x20007e04

08002100 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <ETH_IRQHandler+0x10>)
 8002106:	f003 fce7 	bl	8005ad8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000854c 	.word	0x2000854c

08002114 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA2_Stream5_IRQHandler+0x10>)
 800211a:	f001 fe9d 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200081d8 	.word	0x200081d8

08002128 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA2_Stream6_IRQHandler+0x10>)
 800212e:	f001 fe93 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20007e7c 	.word	0x20007e7c

0800213c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <DMA2_Stream7_IRQHandler+0x10>)
 8002142:	f001 fe89 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200080e8 	.word	0x200080e8

08002150 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <SPI4_IRQHandler+0x10>)
 8002156:	f007 ffd5 	bl	800a104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20007ac8 	.word	0x20007ac8

08002164 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e00a      	b.n	800218c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002176:	f3af 8000 	nop.w
 800217a:	4601      	mov	r1, r0
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	b2ca      	uxtb	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf0      	blt.n	8002176 <_read+0x12>
	}

return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e009      	b.n	80021c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf1      	blt.n	80021b0 <_write+0x12>
	}
	return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_close>:

int _close(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_isatty>:

int _isatty(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return 1;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <_sbrk+0x5c>)
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <_sbrk+0x60>)
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <_sbrk+0x64>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <_sbrk+0x68>)
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	429a      	cmp	r2, r3
 800226e:	d205      	bcs.n	800227c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <_sbrk+0x6c>)
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227a:	e009      	b.n	8002290 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20020000 	.word	0x20020000
 80022a0:	00000400 	.word	0x00000400
 80022a4:	20001948 	.word	0x20001948
 80022a8:	2000b760 	.word	0x2000b760
 80022ac:	2000b734 	.word	0x2000b734

080022b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <MX_USART1_UART_Init+0x94>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f8:	4811      	ldr	r0, [pc, #68]	; (8002340 <MX_USART1_UART_Init+0x90>)
 80022fa:	f008 fc79 	bl	800abf0 <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002304:	f7ff f822 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002308:	2100      	movs	r1, #0
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_USART1_UART_Init+0x90>)
 800230c:	f009 fc13 	bl	800bb36 <HAL_UARTEx_SetTxFifoThreshold>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002316:	f7ff f819 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231a:	2100      	movs	r1, #0
 800231c:	4808      	ldr	r0, [pc, #32]	; (8002340 <MX_USART1_UART_Init+0x90>)
 800231e:	f009 fc48 	bl	800bbb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002328:	f7ff f810 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	; (8002340 <MX_USART1_UART_Init+0x90>)
 800232e:	f009 fbc9 	bl	800bac4 <HAL_UARTEx_DisableFifoMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002338:	f7ff f808 	bl	800134c <Error_Handler>
  }

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20008250 	.word	0x20008250
 8002344:	40011000 	.word	0x40011000

08002348 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <MX_USART2_UART_Init+0x94>)
 8002350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002390:	4811      	ldr	r0, [pc, #68]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 8002392:	f008 fc2d 	bl	800abf0 <HAL_UART_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800239c:	f7fe ffd6 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 80023a4:	f009 fbc7 	bl	800bb36 <HAL_UARTEx_SetTxFifoThreshold>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80023ae:	f7fe ffcd 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b2:	2100      	movs	r1, #0
 80023b4:	4808      	ldr	r0, [pc, #32]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 80023b6:	f009 fbfc 	bl	800bbb2 <HAL_UARTEx_SetRxFifoThreshold>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f7fe ffc4 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_USART2_UART_Init+0x90>)
 80023c6:	f009 fb7d 	bl	800bac4 <HAL_UARTEx_DisableFifoMode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80023d0:	f7fe ffbc 	bl	800134c <Error_Handler>
  }

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20008368 	.word	0x20008368
 80023dc:	40004400 	.word	0x40004400

080023e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <MX_USART3_UART_Init+0x90>)
 80023e6:	4a23      	ldr	r2, [pc, #140]	; (8002474 <MX_USART3_UART_Init+0x94>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <MX_USART3_UART_Init+0x90>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MX_USART3_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <MX_USART3_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <MX_USART3_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <MX_USART3_UART_Init+0x90>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <MX_USART3_UART_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_USART3_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <MX_USART3_UART_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002428:	4811      	ldr	r0, [pc, #68]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800242a:	f008 fbe1 	bl	800abf0 <HAL_UART_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002434:	f7fe ff8a 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002438:	2100      	movs	r1, #0
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800243c:	f009 fb7b 	bl	800bb36 <HAL_UARTEx_SetTxFifoThreshold>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002446:	f7fe ff81 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244a:	2100      	movs	r1, #0
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800244e:	f009 fbb0 	bl	800bbb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002458:	f7fe ff78 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_USART3_UART_Init+0x90>)
 800245e:	f009 fb31 	bl	800bac4 <HAL_UARTEx_DisableFifoMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002468:	f7fe ff70 	bl	800134c <Error_Handler>
  }

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20007f6c 	.word	0x20007f6c
 8002474:	40004800 	.word	0x40004800

08002478 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_USART6_UART_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <MX_USART6_UART_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_USART6_UART_Init+0x90>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_USART6_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_USART6_UART_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_USART6_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_USART6_UART_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024c2:	f008 fb95 	bl	800abf0 <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7fe ff3e 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024d4:	f009 fb2f 	bl	800bb36 <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7fe ff35 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024e6:	f009 fb64 	bl	800bbb2 <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7fe ff2c 	bl	800134c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_USART6_UART_Init+0x90>)
 80024f6:	f009 fae5 	bl	800bac4 <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002500:	f7fe ff24 	bl	800134c <Error_Handler>
  }

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200082dc 	.word	0x200082dc
 800250c:	40011400 	.word	0x40011400

08002510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b090      	sub	sp, #64	; 0x40
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a9f      	ldr	r2, [pc, #636]	; (80027ac <HAL_UART_MspInit+0x29c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 808c 	bne.w	800264c <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002534:	4b9e      	ldr	r3, [pc, #632]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800253a:	4a9d      	ldr	r2, [pc, #628]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002544:	4b9a      	ldr	r3, [pc, #616]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b97      	ldr	r3, [pc, #604]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	4a95      	ldr	r2, [pc, #596]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002562:	4b93      	ldr	r3, [pc, #588]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002570:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002582:	2304      	movs	r3, #4
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	4889      	ldr	r0, [pc, #548]	; (80027b4 <HAL_UART_MspInit+0x2a4>)
 800258e:	f004 fc5b 	bl	8006e48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 8002594:	4a89      	ldr	r2, [pc, #548]	; (80027bc <HAL_UART_MspInit+0x2ac>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002598:	4b87      	ldr	r3, [pc, #540]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 800259a:	2229      	movs	r2, #41	; 0x29
 800259c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800259e:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b84      	ldr	r3, [pc, #528]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b83      	ldr	r3, [pc, #524]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b2:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b8:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025be:	4b7e      	ldr	r3, [pc, #504]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025c4:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025cc:	4b7a      	ldr	r3, [pc, #488]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025d2:	4879      	ldr	r0, [pc, #484]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025d4:	f000 fea0 	bl	8003318 <HAL_DMA_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80025de:	f7fe feb5 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a74      	ldr	r2, [pc, #464]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025e6:	679a      	str	r2, [r3, #120]	; 0x78
 80025e8:	4a73      	ldr	r2, [pc, #460]	; (80027b8 <HAL_UART_MspInit+0x2a8>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80025ee:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 80025f0:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <HAL_UART_MspInit+0x2b4>)
 80025f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025f4:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 80025f6:	222a      	movs	r2, #42	; 0x2a
 80025f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025fa:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260e:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002620:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002622:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002626:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002628:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800262e:	4864      	ldr	r0, [pc, #400]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002630:	f000 fe72 	bl	8003318 <HAL_DMA_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800263a:	f7fe fe87 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a5f      	ldr	r2, [pc, #380]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002642:	675a      	str	r2, [r3, #116]	; 0x74
 8002644:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <HAL_UART_MspInit+0x2b0>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800264a:	e1eb      	b.n	8002a24 <HAL_UART_MspInit+0x514>
  else if(uartHandle->Instance==USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_UART_MspInit+0x2b8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f040 80c6 	bne.w	80027e4 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800265a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800265e:	4a54      	ldr	r2, [pc, #336]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002668:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800266a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	4a45      	ldr	r2, [pc, #276]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_UART_MspInit+0x2a0>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026b2:	2308      	movs	r3, #8
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c2:	2307      	movs	r3, #7
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ca:	4619      	mov	r1, r3
 80026cc:	483f      	ldr	r0, [pc, #252]	; (80027cc <HAL_UART_MspInit+0x2bc>)
 80026ce:	f004 fbbb 	bl	8006e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026d2:	2320      	movs	r3, #32
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e2:	2307      	movs	r3, #7
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ea:	4619      	mov	r1, r3
 80026ec:	4838      	ldr	r0, [pc, #224]	; (80027d0 <HAL_UART_MspInit+0x2c0>)
 80026ee:	f004 fbab 	bl	8006e48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 80026f4:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_UART_MspInit+0x2c8>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 80026fa:	222b      	movs	r2, #43	; 0x2b
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 800270c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002710:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002720:	2200      	movs	r2, #0
 8002722:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002732:	4828      	ldr	r0, [pc, #160]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002734:	f000 fdf0 	bl	8003318 <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_UART_MspInit+0x232>
      Error_Handler();
 800273e:	f7fe fe05 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 8002746:	679a      	str	r2, [r3, #120]	; 0x78
 8002748:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_UART_MspInit+0x2c4>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002750:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_UART_MspInit+0x2d0>)
 8002752:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002756:	222c      	movs	r2, #44	; 0x2c
 8002758:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 800275c:	2240      	movs	r2, #64	; 0x40
 800275e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002786:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800278e:	4813      	ldr	r0, [pc, #76]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 8002790:	f000 fdc2 	bl	8003318 <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x28e>
      Error_Handler();
 800279a:	f7fe fdd7 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 80027a2:	675a      	str	r2, [r3, #116]	; 0x74
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_UART_MspInit+0x2cc>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027aa:	e13b      	b.n	8002a24 <HAL_UART_MspInit+0x514>
 80027ac:	40011000 	.word	0x40011000
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58020400 	.word	0x58020400
 80027b8:	20008160 	.word	0x20008160
 80027bc:	40020410 	.word	0x40020410
 80027c0:	20008070 	.word	0x20008070
 80027c4:	40020428 	.word	0x40020428
 80027c8:	40004400 	.word	0x40004400
 80027cc:	58020000 	.word	0x58020000
 80027d0:	58020c00 	.word	0x58020c00
 80027d4:	20007e04 	.word	0x20007e04
 80027d8:	40020470 	.word	0x40020470
 80027dc:	200081d8 	.word	0x200081d8
 80027e0:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a90      	ldr	r2, [pc, #576]	; (8002a2c <HAL_UART_MspInit+0x51c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 808c 	bne.w	8002908 <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027f0:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_UART_MspInit+0x520>)
 80027f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f6:	4a8e      	ldr	r2, [pc, #568]	; (8002a30 <HAL_UART_MspInit+0x520>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002800:	4b8b      	ldr	r3, [pc, #556]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002814:	4a86      	ldr	r2, [pc, #536]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281e:	4b84      	ldr	r3, [pc, #528]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800282c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800283e:	2307      	movs	r3, #7
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002846:	4619      	mov	r1, r3
 8002848:	487a      	ldr	r0, [pc, #488]	; (8002a34 <HAL_UART_MspInit+0x524>)
 800284a:	f004 fafd 	bl	8006e48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 800284e:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002850:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <HAL_UART_MspInit+0x52c>)
 8002852:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002854:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002856:	222d      	movs	r2, #45	; 0x2d
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <HAL_UART_MspInit+0x528>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800287a:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_UART_MspInit+0x528>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002880:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002886:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002888:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <HAL_UART_MspInit+0x528>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800288e:	486a      	ldr	r0, [pc, #424]	; (8002a38 <HAL_UART_MspInit+0x528>)
 8002890:	f000 fd42 	bl	8003318 <HAL_DMA_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0x38e>
      Error_Handler();
 800289a:	f7fe fd57 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_UART_MspInit+0x528>)
 80028a2:	679a      	str	r2, [r3, #120]	; 0x78
 80028a4:	4a64      	ldr	r2, [pc, #400]	; (8002a38 <HAL_UART_MspInit+0x528>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_UART_MspInit+0x534>)
 80028ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028b2:	222e      	movs	r2, #46	; 0x2e
 80028b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b6:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028b8:	2240      	movs	r2, #64	; 0x40
 80028ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028d8:	2200      	movs	r2, #0
 80028da:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028dc:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028ea:	4855      	ldr	r0, [pc, #340]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028ec:	f000 fd14 	bl	8003318 <HAL_DMA_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_UART_MspInit+0x3ea>
      Error_Handler();
 80028f6:	f7fe fd29 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a50      	ldr	r2, [pc, #320]	; (8002a40 <HAL_UART_MspInit+0x530>)
 80028fe:	675a      	str	r2, [r3, #116]	; 0x74
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_UART_MspInit+0x530>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002906:	e08d      	b.n	8002a24 <HAL_UART_MspInit+0x514>
  else if(uartHandle->Instance==USART6)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_UART_MspInit+0x538>)
 800290e:	4293      	cmp	r3, r2
 8002910:	f040 8088 	bne.w	8002a24 <HAL_UART_MspInit+0x514>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800291a:	4a45      	ldr	r2, [pc, #276]	; (8002a30 <HAL_UART_MspInit+0x520>)
 800291c:	f043 0320 	orr.w	r3, r3, #32
 8002920:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002938:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <HAL_UART_MspInit+0x520>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_UART_MspInit+0x520>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002950:	23c0      	movs	r3, #192	; 0xc0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002960:	2307      	movs	r3, #7
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002968:	4619      	mov	r1, r3
 800296a:	4838      	ldr	r0, [pc, #224]	; (8002a4c <HAL_UART_MspInit+0x53c>)
 800296c:	f004 fa6c 	bl	8006e48 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_UART_MspInit+0x540>)
 8002972:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_UART_MspInit+0x544>)
 8002974:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_UART_MspInit+0x540>)
 8002978:	2247      	movs	r2, #71	; 0x47
 800297a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_UART_MspInit+0x540>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_UART_MspInit+0x540>)
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_UART_MspInit+0x540>)
 800298a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002990:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_UART_MspInit+0x540>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_UART_MspInit+0x540>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_UART_MspInit+0x540>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_UART_MspInit+0x540>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a8:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_UART_MspInit+0x540>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80029ae:	4828      	ldr	r0, [pc, #160]	; (8002a50 <HAL_UART_MspInit+0x540>)
 80029b0:	f000 fcb2 	bl	8003318 <HAL_DMA_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 80029ba:	f7fe fcc7 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_UART_MspInit+0x540>)
 80029c2:	679a      	str	r2, [r3, #120]	; 0x78
 80029c4:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <HAL_UART_MspInit+0x540>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <HAL_UART_MspInit+0x54c>)
 80029ce:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029d2:	2248      	movs	r2, #72	; 0x48
 80029d4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029d8:	2240      	movs	r2, #64	; 0x40
 80029da:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_UART_MspInit+0x548>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_UART_MspInit+0x548>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002a08:	4813      	ldr	r0, [pc, #76]	; (8002a58 <HAL_UART_MspInit+0x548>)
 8002a0a:	f000 fc85 	bl	8003318 <HAL_DMA_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_MspInit+0x508>
      Error_Handler();
 8002a14:	f7fe fc9a 	bl	800134c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_UART_MspInit+0x548>)
 8002a1c:	675a      	str	r2, [r3, #116]	; 0x74
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <HAL_UART_MspInit+0x548>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a24:	bf00      	nop
 8002a26:	3740      	adds	r7, #64	; 0x40
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020c00 	.word	0x58020c00
 8002a38:	20007ef4 	.word	0x20007ef4
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	20007ff8 	.word	0x20007ff8
 8002a44:	40020458 	.word	0x40020458
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	58020800 	.word	0x58020800
 8002a50:	20007e7c 	.word	0x20007e7c
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	200080e8 	.word	0x200080e8
 8002a5c:	400204b8 	.word	0x400204b8

08002a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a64:	f7fd fe0c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a6a:	e003      	b.n	8002a74 <LoopCopyDataInit>

08002a6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002a6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a72:	3104      	adds	r1, #4

08002a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002a78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a7c:	d3f6      	bcc.n	8002a6c <CopyDataInit>
  ldr  r2, =_sbss
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002a80:	e002      	b.n	8002a88 <LoopFillZerobss>

08002a82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a84:	f842 3b04 	str.w	r3, [r2], #4

08002a88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002a8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a8c:	d3f9      	bcc.n	8002a82 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f019 ffb5 	bl	801c9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a92:	f7fe fab1 	bl	8000ff8 <main>
  bx  lr    
 8002a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a9c:	08020ca0 	.word	0x08020ca0
  ldr  r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002aa4:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8002aa8:	2000192c 	.word	0x2000192c
  ldr  r3, = _ebss
 8002aac:	2000b760 	.word	0x2000b760

08002ab0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC3_IRQHandler>

08002ab2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <LAN8742_RegisterBusIO+0x28>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <LAN8742_RegisterBusIO+0x28>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <LAN8742_RegisterBusIO+0x28>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ade:	e014      	b.n	8002b0a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d17c      	bne.n	8002c30 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e01c      	b.n	8002b8a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f107 0208 	add.w	r2, r7, #8
 8002b58:	2112      	movs	r1, #18
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	4798      	blx	r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da03      	bge.n	8002b6c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002b64:	f06f 0304 	mvn.w	r3, #4
 8002b68:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002b6a:	e00b      	b.n	8002b84 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d105      	bne.n	8002b84 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
         break;
 8002b82:	e005      	b.n	8002b90 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b1f      	cmp	r3, #31
 8002b8e:	d9df      	bls.n	8002b50 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b1f      	cmp	r3, #31
 8002b96:	d902      	bls.n	8002b9e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002b98:	f06f 0302 	mvn.w	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d145      	bne.n	8002c30 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6810      	ldr	r0, [r2, #0]
 8002bac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4798      	blx	r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db37      	blt.n	8002c2a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6810      	ldr	r0, [r2, #0]
 8002bc2:	f107 0208 	add.w	r2, r7, #8
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4798      	blx	r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db28      	blt.n	8002c22 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4798      	blx	r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002bda:	e01c      	b.n	8002c16 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4798      	blx	r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bee:	d80e      	bhi.n	8002c0e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6810      	ldr	r0, [r2, #0]
 8002bf8:	f107 0208 	add.w	r2, r7, #8
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4798      	blx	r3
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da07      	bge.n	8002c16 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002c06:	f06f 0304 	mvn.w	r3, #4
 8002c0a:	613b      	str	r3, [r7, #16]
                 break;
 8002c0c:	e010      	b.n	8002c30 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002c0e:	f06f 0301 	mvn.w	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
               break;
 8002c14:	e00c      	b.n	8002c30 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1dd      	bne.n	8002bdc <LAN8742_Init+0xc6>
 8002c20:	e006      	b.n	8002c30 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002c22:	f06f 0304 	mvn.w	r3, #4
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	e002      	b.n	8002c30 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002c2a:	f06f 0303 	mvn.w	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d112      	bne.n	8002c5c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	4798      	blx	r3
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002c40:	bf00      	nop
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4798      	blx	r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c54:	d9f5      	bls.n	8002c42 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 }
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6810      	ldr	r0, [r2, #0]
 8002c7a:	f107 020c 	add.w	r2, r7, #12
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4798      	blx	r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da02      	bge.n	8002c8e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002c88:	f06f 0304 	mvn.w	r3, #4
 8002c8c:	e06e      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6810      	ldr	r0, [r2, #0]
 8002c96:	f107 020c 	add.w	r2, r7, #12
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4798      	blx	r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da02      	bge.n	8002caa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002ca4:	f06f 0304 	mvn.w	r3, #4
 8002ca8:	e060      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e059      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6810      	ldr	r0, [r2, #0]
 8002cc0:	f107 020c 	add.w	r2, r7, #12
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4798      	blx	r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da02      	bge.n	8002cd4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002cce:	f06f 0304 	mvn.w	r3, #4
 8002cd2:	e04b      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11b      	bne.n	8002d16 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <LAN8742_GetLinkState+0x90>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e03a      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e033      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e02c      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002d12:	2305      	movs	r3, #5
 8002d14:	e02a      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6810      	ldr	r0, [r2, #0]
 8002d1e:	f107 020c 	add.w	r2, r7, #12
 8002d22:	211f      	movs	r1, #31
 8002d24:	4798      	blx	r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da02      	bge.n	8002d32 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002d2c:	f06f 0304 	mvn.w	r3, #4
 8002d30:	e01c      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	e015      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 031c 	and.w	r3, r3, #28
 8002d46:	2b18      	cmp	r3, #24
 8002d48:	d101      	bne.n	8002d4e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e00e      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 031c 	and.w	r3, r3, #28
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d101      	bne.n	8002d5c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e007      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 031c 	and.w	r3, r3, #28
 8002d62:	2b14      	cmp	r3, #20
 8002d64:	d101      	bne.n	8002d6a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002d66:	2304      	movs	r3, #4
 8002d68:	e000      	b.n	8002d6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002d6a:	2305      	movs	r3, #5
    }				
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7a:	2003      	movs	r0, #3
 8002d7c:	f000 f923 	bl	8002fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d80:	f005 faac 	bl	80082dc <HAL_RCC_GetSysClockFreq>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_Init+0x68>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_Init+0x6c>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_Init+0x68>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_Init+0x6c>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <HAL_Init+0x70>)
 8002db6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_Init+0x74>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7ff f87e 	bl	8001ec0 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e002      	b.n	8002dd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dce:	f7ff f859 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	08020a60 	.word	0x08020a60
 8002de4:	20000004 	.word	0x20000004
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_IncTick+0x20>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x24>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_IncTick+0x24>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c
 8002e10:	200083f4 	.word	0x200083f4

08002e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return uwTick;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_GetTick+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	200083f4 	.word	0x200083f4

08002e2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_GetREVID+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0c1b      	lsrs	r3, r3, #16
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	5c001000 	.word	0x5c001000

08002e44 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	58000400 	.word	0x58000400

08002e6c <__NVIC_SetPriorityGrouping>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <__NVIC_SetPriorityGrouping+0x40>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	; (8002eac <__NVIC_SetPriorityGrouping+0x40>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00
 8002eb0:	05fa0000 	.word	0x05fa0000

08002eb4 <__NVIC_GetPriorityGrouping>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff4c 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fea:	f7ff ff63 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8002fee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f7ff ffb3 	bl	8002f60 <NVIC_EncodePriority>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff82 	bl	8002f0c <__NVIC_SetPriority>
}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff56 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003030:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_MPU_Disable+0x24>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_MPU_Disable+0x24>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_MPU_Disable+0x28>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	e000ed90 	.word	0xe000ed90

08003058 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_MPU_Enable+0x34>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_MPU_Enable+0x38>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <HAL_MPU_Enable+0x38>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800307a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed90 	.word	0xe000ed90
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	785a      	ldrb	r2, [r3, #1]
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_MPU_ConfigRegion+0x84>)
 80030a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d029      	beq.n	8003100 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_MPU_ConfigRegion+0x84>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7b1b      	ldrb	r3, [r3, #12]
 80030b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7adb      	ldrb	r3, [r3, #11]
 80030be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a9b      	ldrb	r3, [r3, #10]
 80030c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7b5b      	ldrb	r3, [r3, #13]
 80030ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7b9b      	ldrb	r3, [r3, #14]
 80030d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7bdb      	ldrb	r3, [r3, #15]
 80030de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7a5b      	ldrb	r3, [r3, #9]
 80030e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7a1b      	ldrb	r3, [r3, #8]
 80030ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80030fe:	e005      	b.n	800310c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_MPU_ConfigRegion+0x84>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_MPU_ConfigRegion+0x84>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed90 	.word	0xe000ed90

0800311c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_GetCurrentCPUID+0x24>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2b07      	cmp	r3, #7
 800312c:	d101      	bne.n	8003132 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800312e:	2303      	movs	r3, #3
 8003130:	e000      	b.n	8003134 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003132:	2301      	movs	r3, #1
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e054      	b.n	8003200 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7f5b      	ldrb	r3, [r3, #29]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fb46 	bl	80007f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	791b      	ldrb	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_CRC_Init+0xc4>)
 8003180:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0218 	bic.w	r2, r2, #24
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	e00c      	b.n	80031ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	461a      	mov	r2, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f834 	bl	800320c <HAL_CRCEx_Polynomial_Set>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e028      	b.n	8003200 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	795b      	ldrb	r3, [r3, #5]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	e004      	b.n	80031cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6912      	ldr	r2, [r2, #16]
 80031ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	04c11db7 	.word	0x04c11db7

0800320c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800321c:	231f      	movs	r3, #31
 800321e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003220:	bf00      	nop
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1e5a      	subs	r2, r3, #1
 8003226:	613a      	str	r2, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_CRCEx_Polynomial_Set+0x34>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b18      	cmp	r3, #24
 8003244:	d846      	bhi.n	80032d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	080032db 	.word	0x080032db
 8003250:	080032d5 	.word	0x080032d5
 8003254:	080032d5 	.word	0x080032d5
 8003258:	080032d5 	.word	0x080032d5
 800325c:	080032d5 	.word	0x080032d5
 8003260:	080032d5 	.word	0x080032d5
 8003264:	080032d5 	.word	0x080032d5
 8003268:	080032d5 	.word	0x080032d5
 800326c:	080032c9 	.word	0x080032c9
 8003270:	080032d5 	.word	0x080032d5
 8003274:	080032d5 	.word	0x080032d5
 8003278:	080032d5 	.word	0x080032d5
 800327c:	080032d5 	.word	0x080032d5
 8003280:	080032d5 	.word	0x080032d5
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080032d5 	.word	0x080032d5
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032d5 	.word	0x080032d5
 8003294:	080032d5 	.word	0x080032d5
 8003298:	080032d5 	.word	0x080032d5
 800329c:	080032d5 	.word	0x080032d5
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032d5 	.word	0x080032d5
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	080032b1 	.word	0x080032b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d913      	bls.n	80032de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032ba:	e010      	b.n	80032de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d90f      	bls.n	80032e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032c6:	e00c      	b.n	80032e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	d90b      	bls.n	80032e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80032d2:	e008      	b.n	80032e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
      break;
 80032d8:	e006      	b.n	80032e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10d      	bne.n	800330a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 0118 	bic.w	r1, r3, #24
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fd78 	bl	8002e14 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e316      	b.n	800395e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_DMA_Init+0x1b8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d04a      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_DMA_Init+0x1bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d045      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_DMA_Init+0x1c0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d040      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a62      	ldr	r2, [pc, #392]	; (80034dc <HAL_DMA_Init+0x1c4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d03b      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a60      	ldr	r2, [pc, #384]	; (80034e0 <HAL_DMA_Init+0x1c8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d036      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5f      	ldr	r2, [pc, #380]	; (80034e4 <HAL_DMA_Init+0x1cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d031      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_DMA_Init+0x1d0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02c      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_DMA_Init+0x1d4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d027      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <HAL_DMA_Init+0x1d8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a59      	ldr	r2, [pc, #356]	; (80034f4 <HAL_DMA_Init+0x1dc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_DMA_Init+0x1e0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_DMA_Init+0x1e4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_DMA_Init+0x1e8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a53      	ldr	r2, [pc, #332]	; (8003504 <HAL_DMA_Init+0x1ec>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_DMA_Init+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Init+0xb8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_DMA_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Init+0xbc>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_DMA_Init+0xbe>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 813b 	beq.w	8003652 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_DMA_Init+0x1b8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d04a      	beq.n	800348c <HAL_DMA_Init+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_DMA_Init+0x1bc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d045      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_DMA_Init+0x1c0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d040      	beq.n	800348c <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_DMA_Init+0x1c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d03b      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_DMA_Init+0x1c8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d036      	beq.n	800348c <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_DMA_Init+0x1cc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d031      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_DMA_Init+0x1d0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02c      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DMA_Init+0x1d4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d027      	beq.n	800348c <HAL_DMA_Init+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_DMA_Init+0x1d8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_DMA_Init+0x1dc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_DMA_Init+0x1e0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_Init+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_DMA_Init+0x1e4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_DMA_Init+0x1e8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_Init+0x174>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Init+0x1ec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Init+0x1f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Init+0x174>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Init+0x1f4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <HAL_DMA_Init+0x186>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <HAL_DMA_Init+0x196>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ae:	e02f      	b.n	8003510 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b0:	f7ff fcb0 	bl	8002e14 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d928      	bls.n	8003510 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e246      	b.n	800395e <HAL_DMA_Init+0x646>
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1c8      	bne.n	80034b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_DMA_Init+0x420>)
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003536:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b04      	cmp	r3, #4
 8003562:	d107      	bne.n	8003574 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4313      	orrs	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_DMA_Init+0x424>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b71      	ldr	r3, [pc, #452]	; (8003740 <HAL_DMA_Init+0x428>)
 800357a:	4013      	ands	r3, r2
 800357c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003580:	d328      	bcc.n	80035d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b28      	cmp	r3, #40	; 0x28
 8003588:	d903      	bls.n	8003592 <HAL_DMA_Init+0x27a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b2e      	cmp	r3, #46	; 0x2e
 8003590:	d917      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b3e      	cmp	r3, #62	; 0x3e
 8003598:	d903      	bls.n	80035a2 <HAL_DMA_Init+0x28a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b42      	cmp	r3, #66	; 0x42
 80035a0:	d90f      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b46      	cmp	r3, #70	; 0x46
 80035a8:	d903      	bls.n	80035b2 <HAL_DMA_Init+0x29a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b48      	cmp	r3, #72	; 0x48
 80035b0:	d907      	bls.n	80035c2 <HAL_DMA_Init+0x2aa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b4e      	cmp	r3, #78	; 0x4e
 80035b8:	d905      	bls.n	80035c6 <HAL_DMA_Init+0x2ae>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b52      	cmp	r3, #82	; 0x52
 80035c0:	d801      	bhi.n	80035c6 <HAL_DMA_Init+0x2ae>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_Init+0x2b0>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fbfd 	bl	8004e10 <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e197      	b.n	800395e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 fb38 	bl	8004cac <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e0cd      	b.n	80037ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_DMA_Init+0x42c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <HAL_DMA_Init+0x430>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_DMA_Init+0x434>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a36      	ldr	r2, [pc, #216]	; (8003750 <HAL_DMA_Init+0x438>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a35      	ldr	r2, [pc, #212]	; (8003754 <HAL_DMA_Init+0x43c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_DMA_Init+0x440>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_DMA_Init+0x444>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Init+0x38a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_DMA_Init+0x448>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_DMA_Init+0x38e>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_Init+0x390>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <HAL_DMA_Init+0x42c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d021      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_Init+0x430>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01c      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <HAL_DMA_Init+0x434>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d017      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_DMA_Init+0x438>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d012      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_DMA_Init+0x43c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00d      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_DMA_Init+0x440>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_DMA_Init+0x444>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <HAL_DMA_Init+0x3e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_DMA_Init+0x448>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_DMA_Init+0x44c>)
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d020      	beq.n	8003768 <HAL_DMA_Init+0x450>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d102      	bne.n	8003734 <HAL_DMA_Init+0x41c>
 800372e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003732:	e01a      	b.n	800376a <HAL_DMA_Init+0x452>
 8003734:	2300      	movs	r3, #0
 8003736:	e018      	b.n	800376a <HAL_DMA_Init+0x452>
 8003738:	fe10803f 	.word	0xfe10803f
 800373c:	5c001000 	.word	0x5c001000
 8003740:	ffff0000 	.word	0xffff0000
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494
 8003764:	fffe000f 	.word	0xfffe000f
 8003768:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003798:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b6e      	ldr	r3, [pc, #440]	; (8003968 <HAL_DMA_Init+0x650>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4a6e      	ldr	r2, [pc, #440]	; (800396c <HAL_DMA_Init+0x654>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f001 fa73 	bl	8004cac <DMA_CalcBaseAndBitshift>
 80037c6:	4603      	mov	r3, r0
 80037c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e008      	b.n	80037ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2203      	movs	r2, #3
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0b7      	b.n	800395e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5f      	ldr	r2, [pc, #380]	; (8003970 <HAL_DMA_Init+0x658>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d072      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_DMA_Init+0x65c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d06d      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_DMA_Init+0x660>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d068      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5a      	ldr	r2, [pc, #360]	; (800397c <HAL_DMA_Init+0x664>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d063      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a59      	ldr	r2, [pc, #356]	; (8003980 <HAL_DMA_Init+0x668>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d05e      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a57      	ldr	r2, [pc, #348]	; (8003984 <HAL_DMA_Init+0x66c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d059      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_DMA_Init+0x670>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d054      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_DMA_Init+0x674>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04f      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_DMA_Init+0x678>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d04a      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_DMA_Init+0x67c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d045      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_DMA_Init+0x680>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d040      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4e      	ldr	r2, [pc, #312]	; (800399c <HAL_DMA_Init+0x684>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d03b      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4d      	ldr	r2, [pc, #308]	; (80039a0 <HAL_DMA_Init+0x688>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d036      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_DMA_Init+0x68c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d031      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_DMA_Init+0x690>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d02c      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a48      	ldr	r2, [pc, #288]	; (80039ac <HAL_DMA_Init+0x694>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d027      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a47      	ldr	r2, [pc, #284]	; (80039b0 <HAL_DMA_Init+0x698>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a45      	ldr	r2, [pc, #276]	; (80039b4 <HAL_DMA_Init+0x69c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01d      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a44      	ldr	r2, [pc, #272]	; (80039b8 <HAL_DMA_Init+0x6a0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a42      	ldr	r2, [pc, #264]	; (80039bc <HAL_DMA_Init+0x6a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_DMA_Init+0x6a8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_DMA_Init+0x6ac>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3e      	ldr	r2, [pc, #248]	; (80039c8 <HAL_DMA_Init+0x6b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_DMA_Init+0x5c6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <HAL_DMA_Init+0x6b4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Init+0x5ca>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_Init+0x5cc>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d032      	beq.n	800394e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 fb0d 	bl	8004f08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d102      	bne.n	80038fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003910:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d010      	beq.n	800393c <HAL_DMA_Init+0x624>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b08      	cmp	r3, #8
 8003920:	d80c      	bhi.n	800393c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f001 fb8a 	bl	800503c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e008      	b.n	800394e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	a7fdabf8 	.word	0xa7fdabf8
 800396c:	cccccccd 	.word	0xcccccccd
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	58025408 	.word	0x58025408
 80039b4:	5802541c 	.word	0x5802541c
 80039b8:	58025430 	.word	0x58025430
 80039bc:	58025444 	.word	0x58025444
 80039c0:	58025458 	.word	0x58025458
 80039c4:	5802546c 	.word	0x5802546c
 80039c8:	58025480 	.word	0x58025480
 80039cc:	58025494 	.word	0x58025494

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e205      	b.n	8003dee <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e1fa      	b.n	8003dee <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a8c      	ldr	r2, [pc, #560]	; (8003c30 <HAL_DMA_Abort_IT+0x260>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04a      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a8b      	ldr	r2, [pc, #556]	; (8003c34 <HAL_DMA_Abort_IT+0x264>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a89      	ldr	r2, [pc, #548]	; (8003c38 <HAL_DMA_Abort_IT+0x268>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d040      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a88      	ldr	r2, [pc, #544]	; (8003c3c <HAL_DMA_Abort_IT+0x26c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03b      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a86      	ldr	r2, [pc, #536]	; (8003c40 <HAL_DMA_Abort_IT+0x270>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a85      	ldr	r2, [pc, #532]	; (8003c44 <HAL_DMA_Abort_IT+0x274>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a83      	ldr	r2, [pc, #524]	; (8003c48 <HAL_DMA_Abort_IT+0x278>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02c      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a82      	ldr	r2, [pc, #520]	; (8003c4c <HAL_DMA_Abort_IT+0x27c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d027      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a80      	ldr	r2, [pc, #512]	; (8003c50 <HAL_DMA_Abort_IT+0x280>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7f      	ldr	r2, [pc, #508]	; (8003c54 <HAL_DMA_Abort_IT+0x284>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <HAL_DMA_Abort_IT+0x288>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	; (8003c5c <HAL_DMA_Abort_IT+0x28c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <HAL_DMA_Abort_IT+0x290>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a79      	ldr	r2, [pc, #484]	; (8003c64 <HAL_DMA_Abort_IT+0x294>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a77      	ldr	r2, [pc, #476]	; (8003c68 <HAL_DMA_Abort_IT+0x298>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <HAL_DMA_Abort_IT+0x29c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_DMA_Abort_IT+0xcc>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_Abort_IT+0xce>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d065      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a60      	ldr	r2, [pc, #384]	; (8003c30 <HAL_DMA_Abort_IT+0x260>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04a      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_DMA_Abort_IT+0x264>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d045      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5d      	ldr	r2, [pc, #372]	; (8003c38 <HAL_DMA_Abort_IT+0x268>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d040      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5b      	ldr	r2, [pc, #364]	; (8003c3c <HAL_DMA_Abort_IT+0x26c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d03b      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_DMA_Abort_IT+0x270>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_DMA_Abort_IT+0x274>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_DMA_Abort_IT+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d02c      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a55      	ldr	r2, [pc, #340]	; (8003c4c <HAL_DMA_Abort_IT+0x27c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a54      	ldr	r2, [pc, #336]	; (8003c50 <HAL_DMA_Abort_IT+0x280>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_DMA_Abort_IT+0x284>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_DMA_Abort_IT+0x288>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4f      	ldr	r2, [pc, #316]	; (8003c5c <HAL_DMA_Abort_IT+0x28c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4e      	ldr	r2, [pc, #312]	; (8003c60 <HAL_DMA_Abort_IT+0x290>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a4c      	ldr	r2, [pc, #304]	; (8003c64 <HAL_DMA_Abort_IT+0x294>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <HAL_DMA_Abort_IT+0x298>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x17a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a49      	ldr	r2, [pc, #292]	; (8003c6c <HAL_DMA_Abort_IT+0x29c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <HAL_DMA_Abort_IT+0x18c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e147      	b.n	8003dec <HAL_DMA_Abort_IT+0x41c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e13e      	b.n	8003dec <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 020e 	bic.w	r2, r2, #14
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <HAL_DMA_Abort_IT+0x260>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <HAL_DMA_Abort_IT+0x264>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a28      	ldr	r2, [pc, #160]	; (8003c38 <HAL_DMA_Abort_IT+0x268>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <HAL_DMA_Abort_IT+0x26c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_DMA_Abort_IT+0x270>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <HAL_DMA_Abort_IT+0x274>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_DMA_Abort_IT+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <HAL_DMA_Abort_IT+0x27c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_DMA_Abort_IT+0x280>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <HAL_DMA_Abort_IT+0x284>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_DMA_Abort_IT+0x288>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <HAL_DMA_Abort_IT+0x28c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <HAL_DMA_Abort_IT+0x290>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <HAL_DMA_Abort_IT+0x294>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_DMA_Abort_IT+0x298>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x24e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_DMA_Abort_IT+0x29c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d128      	bne.n	8003c70 <HAL_DMA_Abort_IT+0x2a0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e027      	b.n	8003c80 <HAL_DMA_Abort_IT+0x2b0>
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_DMA_Abort_IT+0x428>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d072      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_DMA_Abort_IT+0x42c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d06d      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a59      	ldr	r2, [pc, #356]	; (8003e00 <HAL_DMA_Abort_IT+0x430>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d068      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_DMA_Abort_IT+0x434>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d063      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_DMA_Abort_IT+0x438>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d05e      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <HAL_DMA_Abort_IT+0x43c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d059      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a53      	ldr	r2, [pc, #332]	; (8003e10 <HAL_DMA_Abort_IT+0x440>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d054      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_DMA_Abort_IT+0x444>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d04f      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a50      	ldr	r2, [pc, #320]	; (8003e18 <HAL_DMA_Abort_IT+0x448>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d04a      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <HAL_DMA_Abort_IT+0x44c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d045      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_DMA_Abort_IT+0x450>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d040      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4c      	ldr	r2, [pc, #304]	; (8003e24 <HAL_DMA_Abort_IT+0x454>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d03b      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_DMA_Abort_IT+0x458>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d036      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_DMA_Abort_IT+0x45c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d031      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a47      	ldr	r2, [pc, #284]	; (8003e30 <HAL_DMA_Abort_IT+0x460>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02c      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_DMA_Abort_IT+0x464>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d027      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a44      	ldr	r2, [pc, #272]	; (8003e38 <HAL_DMA_Abort_IT+0x468>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d022      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_DMA_Abort_IT+0x46c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d01d      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <HAL_DMA_Abort_IT+0x470>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d018      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <HAL_DMA_Abort_IT+0x474>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_DMA_Abort_IT+0x478>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_DMA_Abort_IT+0x47c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_DMA_Abort_IT+0x480>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x3a0>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_DMA_Abort_IT+0x484>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_DMA_Abort_IT+0x3a4>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_Abort_IT+0x3a6>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d028      	beq.n	8003dcc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003da8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40020010 	.word	0x40020010
 8003dfc:	40020028 	.word	0x40020028
 8003e00:	40020040 	.word	0x40020040
 8003e04:	40020058 	.word	0x40020058
 8003e08:	40020070 	.word	0x40020070
 8003e0c:	40020088 	.word	0x40020088
 8003e10:	400200a0 	.word	0x400200a0
 8003e14:	400200b8 	.word	0x400200b8
 8003e18:	40020410 	.word	0x40020410
 8003e1c:	40020428 	.word	0x40020428
 8003e20:	40020440 	.word	0x40020440
 8003e24:	40020458 	.word	0x40020458
 8003e28:	40020470 	.word	0x40020470
 8003e2c:	40020488 	.word	0x40020488
 8003e30:	400204a0 	.word	0x400204a0
 8003e34:	400204b8 	.word	0x400204b8
 8003e38:	58025408 	.word	0x58025408
 8003e3c:	5802541c 	.word	0x5802541c
 8003e40:	58025430 	.word	0x58025430
 8003e44:	58025444 	.word	0x58025444
 8003e48:	58025458 	.word	0x58025458
 8003e4c:	5802546c 	.word	0x5802546c
 8003e50:	58025480 	.word	0x58025480
 8003e54:	58025494 	.word	0x58025494

08003e58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e64:	4b67      	ldr	r3, [pc, #412]	; (8004004 <HAL_DMA_IRQHandler+0x1ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_DMA_IRQHandler+0x1b0>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5f      	ldr	r2, [pc, #380]	; (800400c <HAL_DMA_IRQHandler+0x1b4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5d      	ldr	r2, [pc, #372]	; (8004010 <HAL_DMA_IRQHandler+0x1b8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5c      	ldr	r2, [pc, #368]	; (8004014 <HAL_DMA_IRQHandler+0x1bc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5a      	ldr	r2, [pc, #360]	; (8004018 <HAL_DMA_IRQHandler+0x1c0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_DMA_IRQHandler+0x1c4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_DMA_IRQHandler+0x1c8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <HAL_DMA_IRQHandler+0x1cc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_DMA_IRQHandler+0x1d0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a53      	ldr	r2, [pc, #332]	; (800402c <HAL_DMA_IRQHandler+0x1d4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	; (8004030 <HAL_DMA_IRQHandler+0x1d8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_DMA_IRQHandler+0x1dc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <HAL_DMA_IRQHandler+0x1e0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4d      	ldr	r2, [pc, #308]	; (800403c <HAL_DMA_IRQHandler+0x1e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_DMA_IRQHandler+0x1e8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_DMA_IRQHandler+0x1ec>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a48      	ldr	r2, [pc, #288]	; (8004048 <HAL_DMA_IRQHandler+0x1f0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_DMA_IRQHandler+0xd6>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 842b 	beq.w	800478c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2208      	movs	r2, #8
 8003f40:	409a      	lsls	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a2 	beq.w	8004090 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2e      	ldr	r2, [pc, #184]	; (800400c <HAL_DMA_IRQHandler+0x1b4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04a      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_DMA_IRQHandler+0x1b8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d045      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <HAL_DMA_IRQHandler+0x1bc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <HAL_DMA_IRQHandler+0x1c0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d03b      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a28      	ldr	r2, [pc, #160]	; (800401c <HAL_DMA_IRQHandler+0x1c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a27      	ldr	r2, [pc, #156]	; (8004020 <HAL_DMA_IRQHandler+0x1c8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <HAL_DMA_IRQHandler+0x1cc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_DMA_IRQHandler+0x1d0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d027      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_DMA_IRQHandler+0x1d4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_DMA_IRQHandler+0x1d8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_DMA_IRQHandler+0x1dc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <HAL_DMA_IRQHandler+0x1e0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_DMA_IRQHandler+0x1e4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_DMA_IRQHandler+0x1e8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_DMA_IRQHandler+0x1ec>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_DMA_IRQHandler+0x1f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d12f      	bne.n	800404c <HAL_DMA_IRQHandler+0x1f4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf14      	ite	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	2300      	moveq	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e02e      	b.n	8004060 <HAL_DMA_IRQHandler+0x208>
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000
 8004008:	1b4e81b5 	.word	0x1b4e81b5
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0204 	bic.w	r2, r2, #4
 8004072:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2208      	movs	r2, #8
 800407e:	409a      	lsls	r2, r3
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d06e      	beq.n	8004184 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a69      	ldr	r2, [pc, #420]	; (8004250 <HAL_DMA_IRQHandler+0x3f8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a67      	ldr	r2, [pc, #412]	; (8004254 <HAL_DMA_IRQHandler+0x3fc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a66      	ldr	r2, [pc, #408]	; (8004258 <HAL_DMA_IRQHandler+0x400>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a64      	ldr	r2, [pc, #400]	; (800425c <HAL_DMA_IRQHandler+0x404>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_DMA_IRQHandler+0x408>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a61      	ldr	r2, [pc, #388]	; (8004264 <HAL_DMA_IRQHandler+0x40c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a60      	ldr	r2, [pc, #384]	; (8004268 <HAL_DMA_IRQHandler+0x410>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_DMA_IRQHandler+0x414>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <HAL_DMA_IRQHandler+0x418>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_DMA_IRQHandler+0x41c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5a      	ldr	r2, [pc, #360]	; (8004278 <HAL_DMA_IRQHandler+0x420>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_DMA_IRQHandler+0x424>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a57      	ldr	r2, [pc, #348]	; (8004280 <HAL_DMA_IRQHandler+0x428>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_DMA_IRQHandler+0x42c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a54      	ldr	r2, [pc, #336]	; (8004288 <HAL_DMA_IRQHandler+0x430>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_DMA_IRQHandler+0x434>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10a      	bne.n	800415c <HAL_DMA_IRQHandler+0x304>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e003      	b.n	8004164 <HAL_DMA_IRQHandler+0x30c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2201      	movs	r2, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2204      	movs	r2, #4
 800418e:	409a      	lsls	r2, r3
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 808f 	beq.w	80042b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_DMA_IRQHandler+0x3f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMA_IRQHandler+0x3fc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a29      	ldr	r2, [pc, #164]	; (8004258 <HAL_DMA_IRQHandler+0x400>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMA_IRQHandler+0x404>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_DMA_IRQHandler+0x408>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_DMA_IRQHandler+0x40c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_DMA_IRQHandler+0x410>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <HAL_DMA_IRQHandler+0x414>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a20      	ldr	r2, [pc, #128]	; (8004270 <HAL_DMA_IRQHandler+0x418>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_DMA_IRQHandler+0x41c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_DMA_IRQHandler+0x420>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_DMA_IRQHandler+0x424>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_DMA_IRQHandler+0x428>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_DMA_IRQHandler+0x42c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_DMA_IRQHandler+0x430>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <HAL_DMA_IRQHandler+0x434>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d12a      	bne.n	8004290 <HAL_DMA_IRQHandler+0x438>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e023      	b.n	8004298 <HAL_DMA_IRQHandler+0x440>
 8004250:	40020010 	.word	0x40020010
 8004254:	40020028 	.word	0x40020028
 8004258:	40020040 	.word	0x40020040
 800425c:	40020058 	.word	0x40020058
 8004260:	40020070 	.word	0x40020070
 8004264:	40020088 	.word	0x40020088
 8004268:	400200a0 	.word	0x400200a0
 800426c:	400200b8 	.word	0x400200b8
 8004270:	40020410 	.word	0x40020410
 8004274:	40020428 	.word	0x40020428
 8004278:	40020440 	.word	0x40020440
 800427c:	40020458 	.word	0x40020458
 8004280:	40020470 	.word	0x40020470
 8004284:	40020488 	.word	0x40020488
 8004288:	400204a0 	.word	0x400204a0
 800428c:	400204b8 	.word	0x400204b8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2204      	movs	r2, #4
 80042a6:	409a      	lsls	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f043 0204 	orr.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2210      	movs	r2, #16
 80042c2:	409a      	lsls	r2, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a6 	beq.w	800441a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a85      	ldr	r2, [pc, #532]	; (80044e8 <HAL_DMA_IRQHandler+0x690>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a83      	ldr	r2, [pc, #524]	; (80044ec <HAL_DMA_IRQHandler+0x694>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <HAL_DMA_IRQHandler+0x698>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a80      	ldr	r2, [pc, #512]	; (80044f4 <HAL_DMA_IRQHandler+0x69c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <HAL_DMA_IRQHandler+0x6a0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7d      	ldr	r2, [pc, #500]	; (80044fc <HAL_DMA_IRQHandler+0x6a4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7c      	ldr	r2, [pc, #496]	; (8004500 <HAL_DMA_IRQHandler+0x6a8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7a      	ldr	r2, [pc, #488]	; (8004504 <HAL_DMA_IRQHandler+0x6ac>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a79      	ldr	r2, [pc, #484]	; (8004508 <HAL_DMA_IRQHandler+0x6b0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a77      	ldr	r2, [pc, #476]	; (800450c <HAL_DMA_IRQHandler+0x6b4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a76      	ldr	r2, [pc, #472]	; (8004510 <HAL_DMA_IRQHandler+0x6b8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_DMA_IRQHandler+0x6bc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	; (8004518 <HAL_DMA_IRQHandler+0x6c0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a71      	ldr	r2, [pc, #452]	; (800451c <HAL_DMA_IRQHandler+0x6c4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a70      	ldr	r2, [pc, #448]	; (8004520 <HAL_DMA_IRQHandler+0x6c8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_DMA_IRQHandler+0x6cc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10a      	bne.n	8004384 <HAL_DMA_IRQHandler+0x52c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e009      	b.n	8004398 <HAL_DMA_IRQHandler+0x540>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d03e      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2210      	movs	r2, #16
 80043a6:	409a      	lsls	r2, r3
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d024      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
 80043d8:	e01f      	b.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01b      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
 80043ea:	e016      	b.n	800441a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2220      	movs	r2, #32
 8004424:	409a      	lsls	r2, r3
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8110 	beq.w	8004650 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_DMA_IRQHandler+0x690>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_DMA_IRQHandler+0x694>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_DMA_IRQHandler+0x698>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_DMA_IRQHandler+0x69c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_DMA_IRQHandler+0x6a0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_DMA_IRQHandler+0x6a4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <HAL_DMA_IRQHandler+0x6a8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_DMA_IRQHandler+0x6ac>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <HAL_DMA_IRQHandler+0x6b0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_DMA_IRQHandler+0x6b4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_DMA_IRQHandler+0x6b8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_DMA_IRQHandler+0x6bc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_DMA_IRQHandler+0x6c0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_DMA_IRQHandler+0x6c4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_DMA_IRQHandler+0x6c8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_DMA_IRQHandler+0x6cc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d12b      	bne.n	8004528 <HAL_DMA_IRQHandler+0x6d0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e02a      	b.n	800453c <HAL_DMA_IRQHandler+0x6e4>
 80044e6:	bf00      	nop
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8087 	beq.w	8004650 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b04      	cmp	r3, #4
 800455c:	d139      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0216 	bic.w	r2, r2, #22
 800456c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_DMA_IRQHandler+0x736>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0208 	bic.w	r2, r2, #8
 800459c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	223f      	movs	r2, #63	; 0x3f
 80045a8:	409a      	lsls	r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 834a 	beq.w	8004c5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
          }
          return;
 80045d0:	e344      	b.n	8004c5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d018      	beq.n	8004612 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02c      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e027      	b.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e01e      	b.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8306 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8088 	beq.w	8004778 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2204      	movs	r2, #4
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7a      	ldr	r2, [pc, #488]	; (8004860 <HAL_DMA_IRQHandler+0xa08>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a79      	ldr	r2, [pc, #484]	; (8004864 <HAL_DMA_IRQHandler+0xa0c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a77      	ldr	r2, [pc, #476]	; (8004868 <HAL_DMA_IRQHandler+0xa10>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_DMA_IRQHandler+0xa14>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a74      	ldr	r2, [pc, #464]	; (8004870 <HAL_DMA_IRQHandler+0xa18>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a73      	ldr	r2, [pc, #460]	; (8004874 <HAL_DMA_IRQHandler+0xa1c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a71      	ldr	r2, [pc, #452]	; (8004878 <HAL_DMA_IRQHandler+0xa20>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a70      	ldr	r2, [pc, #448]	; (800487c <HAL_DMA_IRQHandler+0xa24>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_DMA_IRQHandler+0xa28>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6d      	ldr	r2, [pc, #436]	; (8004884 <HAL_DMA_IRQHandler+0xa2c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6b      	ldr	r2, [pc, #428]	; (8004888 <HAL_DMA_IRQHandler+0xa30>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_DMA_IRQHandler+0xa34>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a68      	ldr	r2, [pc, #416]	; (8004890 <HAL_DMA_IRQHandler+0xa38>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a67      	ldr	r2, [pc, #412]	; (8004894 <HAL_DMA_IRQHandler+0xa3c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_DMA_IRQHandler+0xa40>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a64      	ldr	r2, [pc, #400]	; (800489c <HAL_DMA_IRQHandler+0xa44>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d108      	bne.n	8004722 <HAL_DMA_IRQHandler+0x8ca>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e007      	b.n	8004732 <HAL_DMA_IRQHandler+0x8da>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	429a      	cmp	r2, r3
 800473c:	d307      	bcc.n	800474e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f2      	bne.n	8004732 <HAL_DMA_IRQHandler+0x8da>
 800474c:	e000      	b.n	8004750 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800474e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800476e:	e003      	b.n	8004778 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8272 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
 800478a:	e26c      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_DMA_IRQHandler+0xa48>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <HAL_DMA_IRQHandler+0xa4c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <HAL_DMA_IRQHandler+0xa50>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <HAL_DMA_IRQHandler+0xa54>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_DMA_IRQHandler+0xa58>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_DMA_IRQHandler+0xa5c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <HAL_DMA_IRQHandler+0xa60>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a39      	ldr	r2, [pc, #228]	; (80048bc <HAL_DMA_IRQHandler+0xa64>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x988>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_DMA_IRQHandler+0x98a>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 823f 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80cd 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xb48>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80c7 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2204      	movs	r2, #4
 800481c:	409a      	lsls	r2, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d049      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8210 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004848:	e20a      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8206 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485c:	e200      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
 800485e:	bf00      	nop
 8004860:	40020010 	.word	0x40020010
 8004864:	40020028 	.word	0x40020028
 8004868:	40020040 	.word	0x40020040
 800486c:	40020058 	.word	0x40020058
 8004870:	40020070 	.word	0x40020070
 8004874:	40020088 	.word	0x40020088
 8004878:	400200a0 	.word	0x400200a0
 800487c:	400200b8 	.word	0x400200b8
 8004880:	40020410 	.word	0x40020410
 8004884:	40020428 	.word	0x40020428
 8004888:	40020440 	.word	0x40020440
 800488c:	40020458 	.word	0x40020458
 8004890:	40020470 	.word	0x40020470
 8004894:	40020488 	.word	0x40020488
 8004898:	400204a0 	.word	0x400204a0
 800489c:	400204b8 	.word	0x400204b8
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	58025444 	.word	0x58025444
 80048b0:	58025458 	.word	0x58025458
 80048b4:	5802546c 	.word	0x5802546c
 80048b8:	58025480 	.word	0x58025480
 80048bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d160      	bne.n	800498c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a8c      	ldr	r2, [pc, #560]	; (8004b00 <HAL_DMA_IRQHandler+0xca8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04a      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a8a      	ldr	r2, [pc, #552]	; (8004b04 <HAL_DMA_IRQHandler+0xcac>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d045      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a89      	ldr	r2, [pc, #548]	; (8004b08 <HAL_DMA_IRQHandler+0xcb0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a87      	ldr	r2, [pc, #540]	; (8004b0c <HAL_DMA_IRQHandler+0xcb4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a86      	ldr	r2, [pc, #536]	; (8004b10 <HAL_DMA_IRQHandler+0xcb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d036      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a84      	ldr	r2, [pc, #528]	; (8004b14 <HAL_DMA_IRQHandler+0xcbc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_DMA_IRQHandler+0xcc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02c      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a81      	ldr	r2, [pc, #516]	; (8004b1c <HAL_DMA_IRQHandler+0xcc4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a80      	ldr	r2, [pc, #512]	; (8004b20 <HAL_DMA_IRQHandler+0xcc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a7e      	ldr	r2, [pc, #504]	; (8004b24 <HAL_DMA_IRQHandler+0xccc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01d      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_DMA_IRQHandler+0xcd0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7b      	ldr	r2, [pc, #492]	; (8004b2c <HAL_DMA_IRQHandler+0xcd4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7a      	ldr	r2, [pc, #488]	; (8004b30 <HAL_DMA_IRQHandler+0xcd8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a78      	ldr	r2, [pc, #480]	; (8004b34 <HAL_DMA_IRQHandler+0xcdc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a77      	ldr	r2, [pc, #476]	; (8004b38 <HAL_DMA_IRQHandler+0xce0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_DMA_IRQHandler+0xce4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <HAL_DMA_IRQHandler+0xb24>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e007      	b.n	800498c <HAL_DMA_IRQHandler+0xb34>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8165 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499e:	e15f      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2202      	movs	r2, #2
 80049aa:	409a      	lsls	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80c5 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xce8>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80bf 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2202      	movs	r2, #2
 80049cc:	409a      	lsls	r2, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 813a 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f8:	e134      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8130 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0c:	e12a      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d168      	bne.n	8004aea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <HAL_DMA_IRQHandler+0xca8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04a      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a37      	ldr	r2, [pc, #220]	; (8004b04 <HAL_DMA_IRQHandler+0xcac>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d045      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <HAL_DMA_IRQHandler+0xcb0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d040      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_DMA_IRQHandler+0xcb4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d03b      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a32      	ldr	r2, [pc, #200]	; (8004b10 <HAL_DMA_IRQHandler+0xcb8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d036      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a31      	ldr	r2, [pc, #196]	; (8004b14 <HAL_DMA_IRQHandler+0xcbc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d031      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_DMA_IRQHandler+0xcc0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <HAL_DMA_IRQHandler+0xcc4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d027      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2c      	ldr	r2, [pc, #176]	; (8004b20 <HAL_DMA_IRQHandler+0xcc8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_DMA_IRQHandler+0xccc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_DMA_IRQHandler+0xcd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <HAL_DMA_IRQHandler+0xcd4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <HAL_DMA_IRQHandler+0xcd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_DMA_IRQHandler+0xcdc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <HAL_DMA_IRQHandler+0xce0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_DMA_IRQHandler+0xce4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_DMA_IRQHandler+0xc72>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0214 	bic.w	r2, r2, #20
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e007      	b.n	8004ada <HAL_DMA_IRQHandler+0xc82>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 020a 	bic.w	r2, r2, #10
 8004ad8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80b8 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	e0b2      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
 8004afe:	bf00      	nop
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2208      	movs	r2, #8
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8088 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8082 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a41      	ldr	r2, [pc, #260]	; (8004c6c <HAL_DMA_IRQHandler+0xe14>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d04a      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3f      	ldr	r2, [pc, #252]	; (8004c70 <HAL_DMA_IRQHandler+0xe18>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d045      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <HAL_DMA_IRQHandler+0xe1c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d040      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <HAL_DMA_IRQHandler+0xe20>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d03b      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <HAL_DMA_IRQHandler+0xe24>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d036      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <HAL_DMA_IRQHandler+0xe28>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a38      	ldr	r2, [pc, #224]	; (8004c84 <HAL_DMA_IRQHandler+0xe2c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d02c      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a36      	ldr	r2, [pc, #216]	; (8004c88 <HAL_DMA_IRQHandler+0xe30>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d027      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <HAL_DMA_IRQHandler+0xe34>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a33      	ldr	r2, [pc, #204]	; (8004c90 <HAL_DMA_IRQHandler+0xe38>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a32      	ldr	r2, [pc, #200]	; (8004c94 <HAL_DMA_IRQHandler+0xe3c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <HAL_DMA_IRQHandler+0xe40>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2f      	ldr	r2, [pc, #188]	; (8004c9c <HAL_DMA_IRQHandler+0xe44>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2d      	ldr	r2, [pc, #180]	; (8004ca0 <HAL_DMA_IRQHandler+0xe48>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <HAL_DMA_IRQHandler+0xe4c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <HAL_DMA_IRQHandler+0xe50>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <HAL_DMA_IRQHandler+0xdbc>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 021c 	bic.w	r2, r2, #28
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e007      	b.n	8004c24 <HAL_DMA_IRQHandler+0xdcc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 020e 	bic.w	r2, r2, #14
 8004c22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e004      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c66:	3728      	adds	r7, #40	; 0x28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8

08004cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a42      	ldr	r2, [pc, #264]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d04a      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d045      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <DMA_CalcBaseAndBitshift+0x120>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d040      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d03b      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3c      	ldr	r2, [pc, #240]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d036      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3b      	ldr	r2, [pc, #236]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d031      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a39      	ldr	r2, [pc, #228]	; (8004ddc <DMA_CalcBaseAndBitshift+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d02c      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <DMA_CalcBaseAndBitshift+0x134>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d027      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	; (8004de4 <DMA_CalcBaseAndBitshift+0x138>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d022      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d01d      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a33      	ldr	r2, [pc, #204]	; (8004dec <DMA_CalcBaseAndBitshift+0x140>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <DMA_CalcBaseAndBitshift+0x144>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	; (8004df4 <DMA_CalcBaseAndBitshift+0x148>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	; (8004dfc <DMA_CalcBaseAndBitshift+0x150>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <DMA_CalcBaseAndBitshift+0x154>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <DMA_CalcBaseAndBitshift+0xac>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <DMA_CalcBaseAndBitshift+0xae>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d024      	beq.n	8004da8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	3b10      	subs	r3, #16
 8004d66:	4a27      	ldr	r2, [pc, #156]	; (8004e04 <DMA_CalcBaseAndBitshift+0x158>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d908      	bls.n	8004d98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <DMA_CalcBaseAndBitshift+0x160>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58
 8004d96:	e00d      	b.n	8004db4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <DMA_CalcBaseAndBitshift+0x160>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6593      	str	r3, [r2, #88]	; 0x58
 8004da6:	e005      	b.n	8004db4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	aaaaaaab 	.word	0xaaaaaaab
 8004e08:	08020a94 	.word	0x08020a94
 8004e0c:	fffffc00 	.word	0xfffffc00

08004e10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d120      	bne.n	8004e66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d858      	bhi.n	8004ede <DMA_CheckFifoParam+0xce>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <DMA_CheckFifoParam+0x24>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e57 	.word	0x08004e57
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004edf 	.word	0x08004edf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d048      	beq.n	8004ee2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e54:	e045      	b.n	8004ee2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e5e:	d142      	bne.n	8004ee6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e64:	e03f      	b.n	8004ee6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d123      	bne.n	8004eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d838      	bhi.n	8004eea <DMA_CheckFifoParam+0xda>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <DMA_CheckFifoParam+0x70>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004e97 	.word	0x08004e97
 8004e88:	08004e91 	.word	0x08004e91
 8004e8c:	08004ea9 	.word	0x08004ea9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
        break;
 8004e94:	e030      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d025      	beq.n	8004eee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ea6:	e022      	b.n	8004eee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb0:	d11f      	bne.n	8004ef2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eb6:	e01c      	b.n	8004ef2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d902      	bls.n	8004ec6 <DMA_CheckFifoParam+0xb6>
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d003      	beq.n	8004ecc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ec4:	e018      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eca:	e015      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
    break;
 8004edc:	e00b      	b.n	8004ef6 <DMA_CheckFifoParam+0xe6>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e00a      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e008      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e006      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e004      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ef6:	bf00      	nop
    }
  }

  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a35      	ldr	r2, [pc, #212]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a33      	ldr	r2, [pc, #204]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a30      	ldr	r2, [pc, #192]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	3b08      	subs	r3, #8
 8004f78:	4a28      	ldr	r2, [pc, #160]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4b26      	ldr	r3, [pc, #152]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a24      	ldr	r2, [pc, #144]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fa4:	e024      	b.n	8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3b10      	subs	r3, #16
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d806      	bhi.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d902      	bls.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a16      	ldr	r2, [pc, #88]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fe0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	58025408 	.word	0x58025408
 8005000:	5802541c 	.word	0x5802541c
 8005004:	58025430 	.word	0x58025430
 8005008:	58025444 	.word	0x58025444
 800500c:	58025458 	.word	0x58025458
 8005010:	5802546c 	.word	0x5802546c
 8005014:	58025480 	.word	0x58025480
 8005018:	58025494 	.word	0x58025494
 800501c:	cccccccd 	.word	0xcccccccd
 8005020:	16009600 	.word	0x16009600
 8005024:	58025880 	.word	0x58025880
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	400204b8 	.word	0x400204b8
 8005030:	4002040f 	.word	0x4002040f
 8005034:	10008200 	.word	0x10008200
 8005038:	40020880 	.word	0x40020880

0800503c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04a      	beq.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d847      	bhi.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01d      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050c4:	671a      	str	r2, [r3, #112]	; 0x70
 80050c6:	e009      	b.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a11      	ldr	r2, [pc, #68]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b01      	subs	r3, #1
 80050e0:	2201      	movs	r2, #1
 80050e2:	409a      	lsls	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	58025408 	.word	0x58025408
 80050f8:	5802541c 	.word	0x5802541c
 80050fc:	58025430 	.word	0x58025430
 8005100:	58025444 	.word	0x58025444
 8005104:	58025458 	.word	0x58025458
 8005108:	5802546c 	.word	0x5802546c
 800510c:	58025480 	.word	0x58025480
 8005110:	58025494 	.word	0x58025494
 8005114:	1600963f 	.word	0x1600963f
 8005118:	58025940 	.word	0x58025940
 800511c:	1000823f 	.word	0x1000823f
 8005120:	40020940 	.word	0x40020940

08005124 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0c6      	b.n	80052c4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f006 fe74 	bl	800be2c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2223      	movs	r2, #35	; 0x23
 8005148:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514a:	4b60      	ldr	r3, [pc, #384]	; (80052cc <HAL_ETH_Init+0x1a8>)
 800514c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005150:	4a5e      	ldr	r2, [pc, #376]	; (80052cc <HAL_ETH_Init+0x1a8>)
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800515a:	4b5c      	ldr	r3, [pc, #368]	; (80052cc <HAL_ETH_Init+0x1a8>)
 800515c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7a1b      	ldrb	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005170:	2000      	movs	r0, #0
 8005172:	f7fd fe67 	bl	8002e44 <HAL_SYSCFG_ETHInterfaceSelect>
 8005176:	e003      	b.n	8005180 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005178:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800517c:	f7fd fe62 	bl	8002e44 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005198:	f7fd fe3c 	bl	8002e14 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800519e:	e00f      	b.n	80051c0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80051a0:	f7fd fe38 	bl	8002e14 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051ae:	d907      	bls.n	80051c0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2204      	movs	r2, #4
 80051b4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	22e0      	movs	r2, #224	; 0xe0
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e081      	b.n	80052c4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e6      	bne.n	80051a0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fae8 	bl	80067a8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051d8:	f003 f9f2 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <HAL_ETH_Init+0x1ac>)
 80051e0:	fba3 2302 	umull	r2, r3, r3, r2
 80051e4:	0c9a      	lsrs	r2, r3, #18
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3a01      	subs	r2, #1
 80051ec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fa3b 	bl	800666c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800520c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005210:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	22e0      	movs	r2, #224	; 0xe0
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04a      	b.n	80052c4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f241 1308 	movw	r3, #4360	; 0x1108
 8005236:	4413      	add	r3, r2
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <HAL_ETH_Init+0x1b0>)
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6952      	ldr	r2, [r2, #20]
 8005242:	0052      	lsls	r2, r2, #1
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	6809      	ldr	r1, [r1, #0]
 8005248:	431a      	orrs	r2, r3
 800524a:	f241 1308 	movw	r3, #4360	; 0x1108
 800524e:	440b      	add	r3, r1
 8005250:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 fb00 	bl	8006858 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 fb44 	bl	80068e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	3305      	adds	r3, #5
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	3303      	adds	r3, #3
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	061a      	lsls	r2, r3, #24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	3302      	adds	r3, #2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800529c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2210      	movs	r2, #16
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2210      	movs	r2, #16
 80052c0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	58024400 	.word	0x58024400
 80052d0:	431bde83 	.word	0x431bde83
 80052d4:	ffff8001 	.word	0xffff8001

080052d8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	330a      	adds	r3, #10
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_ETH_DescAssignMemory+0x28>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d904      	bls.n	800530a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e021      	b.n	800534e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	2b10      	cmp	r3, #16
 8005368:	d174      	bne.n	8005454 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2223      	movs	r2, #35	; 0x23
 800536e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e00f      	b.n	8005396 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	330a      	adds	r3, #10
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d9ec      	bls.n	8005376 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0202 	orr.w	r2, r2, #2
 80053b0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f241 1304 	movw	r3, #4356	; 0x1104
 80053de:	4413      	add	r3, r2
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80053ee:	440b      	add	r3, r1
 80053f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6811      	ldr	r1, [r2, #0]
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	f241 1308 	movw	r3, #4360	; 0x1108
 800540a:	440b      	add	r3, r1
 800540c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8005420:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005424:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	f241 1334 	movw	r3, #4404	; 0x1134
 800542e:	4413      	add	r3, r2
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6811      	ldr	r1, [r2, #0]
 8005436:	f24d 0241 	movw	r2, #53313	; 0xd041
 800543a:	431a      	orrs	r2, r3
 800543c:	f241 1334 	movw	r3, #4404	; 0x1134
 8005440:	440b      	add	r3, r1
 8005442:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2210      	movs	r2, #16
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2222      	movs	r2, #34	; 0x22
 800544e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	2b00      	cmp	r3, #0
 8005472:	d067      	beq.n	8005544 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2223      	movs	r2, #35	; 0x23
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005482:	4413      	add	r3, r2
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	4a32      	ldr	r2, [pc, #200]	; (8005554 <HAL_ETH_Stop_IT+0xf0>)
 800548c:	401a      	ands	r2, r3
 800548e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005492:	440b      	add	r3, r1
 8005494:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f241 1304 	movw	r3, #4356	; 0x1104
 800549e:	4413      	add	r3, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80054ae:	440b      	add	r3, r1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80054ca:	440b      	add	r3, r1
 80054cc:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0202 	bic.w	r2, r2, #2
 8005500:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e00f      	b.n	8005528 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	330a      	adds	r3, #10
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d9ec      	bls.n	8005508 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2210      	movs	r2, #16
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2210      	movs	r2, #16
 800553e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e000      	b.n	8005546 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	ffff2fbe 	.word	0xffff2fbe

08005558 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e073      	b.n	8005662 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	2b10      	cmp	r3, #16
 8005580:	d16e      	bne.n	8005660 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005582:	2200      	movs	r2, #0
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f001 fa0a 	bl	80069a0 <ETH_Prepare_Tx_Descriptors>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e05f      	b.n	8005662 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3206      	adds	r2, #6
 80055aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ae:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d904      	bls.n	80055cc <HAL_ETH_Transmit+0x74>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	1f1a      	subs	r2, r3, #4
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	3106      	adds	r1, #6
 80055d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80055dc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80055e0:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80055e2:	f7fd fc17 	bl	8002e14 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80055e8:	e034      	b.n	8005654 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f043 0208 	orr.w	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	22e0      	movs	r2, #224	; 0xe0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e020      	b.n	8005662 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005626:	d015      	beq.n	8005654 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8005628:	f7fd fbf4 	bl	8002e14 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <HAL_ETH_Transmit+0xe6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	f043 0204 	orr.w	r2, r3, #4
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22e0      	movs	r2, #224	; 0xe0
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e006      	b.n	8005662 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dbc6      	blt.n	80055ea <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800566a:	b480      	push	{r7}
 800566c:	b089      	sub	sp, #36	; 0x24
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	332c      	adds	r3, #44	; 0x2c
 8005676:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005686:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d06b      	beq.n	8005774 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800569c:	2300      	movs	r3, #0
 800569e:	e0ce      	b.n	800583e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3301      	adds	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d036      	beq.n	8005720 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d902      	bls.n	80056d4 <HAL_ETH_IsRxDataAvailable+0x6a>
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db11      	blt.n	800570a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2201      	movs	r2, #1
 80056f6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d902      	bls.n	800570a <HAL_ETH_IsRxDataAvailable+0xa0>
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3b04      	subs	r3, #4
 8005708:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800571c:	2301      	movs	r3, #1
 800571e:	e08e      	b.n	800583e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d012      	beq.n	8005752 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8005730:	2301      	movs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3301      	adds	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d902      	bls.n	8005746 <HAL_ETH_IsRxDataAvailable+0xdc>
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3b04      	subs	r3, #4
 8005744:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	e010      	b.n	8005774 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d902      	bls.n	800576a <HAL_ETH_IsRxDataAvailable+0x100>
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3b04      	subs	r3, #4
 8005768:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	db02      	blt.n	8005782 <HAL_ETH_IsRxDataAvailable+0x118>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d98e      	bls.n	80056a0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d056      	beq.n	8005836 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e03b      	b.n	8005820 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20d      	bcs.n	800581a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3301      	adds	r3, #1
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d902      	bls.n	8005810 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3b04      	subs	r3, #4
 800580e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	429a      	cmp	r2, r3
 8005826:	d3bf      	bcc.n	80057a8 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	f241 1328 	movw	r3, #4392	; 0x1128
 8005832:	440b      	add	r3, r1
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2200      	movs	r2, #0
 800583a:	619a      	str	r2, [r3, #24]

  return 0;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08a      	sub	sp, #40	; 0x28
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	332c      	adds	r3, #44	; 0x2c
 8005858:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07d      	b.n	800597e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff feed 	bl	800566a <HAL_ETH_IsRxDataAvailable>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e071      	b.n	800597e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	e031      	b.n	8005914 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	461a      	mov	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	461a      	mov	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80058ea:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d902      	bls.n	80058fe <HAL_ETH_GetRxDataBuffer+0xb4>
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	3b04      	subs	r3, #4
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005906:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	3301      	adds	r3, #1
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	3b01      	subs	r3, #1
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3c7      	bcc.n	80058b0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	461a      	mov	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d803      	bhi.n	800594a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	e018      	b.n	800597c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d012      	beq.n	8005978 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	461a      	mov	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	e001      	b.n	800597c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3728      	adds	r7, #40	; 0x28
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	332c      	adds	r3, #44	; 0x2c
 8005994:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fe60 	bl	800566a <HAL_ETH_IsRxDataAvailable>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e017      	b.n	80059e4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	3b01      	subs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d902      	bls.n	80059cc <HAL_ETH_GetRxDataLength+0x46>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	; 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	332c      	adds	r3, #44	; 0x2c
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a08:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e057      	b.n	8005acc <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e03b      	b.n	8005aa8 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a3e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d20d      	bcs.n	8005aa2 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d902      	bls.n	8005a98 <HAL_ETH_BuildRxDescriptors+0xac>
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3b04      	subs	r3, #4
 8005a96:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3bf      	bcc.n	8005a30 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	f241 1328 	movw	r3, #4392	; 0x1128
 8005aba:	440b      	add	r3, r1
 8005abc:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3724      	adds	r7, #36	; 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d113      	bne.n	8005b1a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f241 1334 	movw	r3, #4404	; 0x1134
 8005afa:	4413      	add	r3, r2
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d109      	bne.n	8005b1a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f006 fa66 	bl	800bfd8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005b14:	f248 0240 	movw	r2, #32832	; 0x8040
 8005b18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d113      	bne.n	8005b54 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	f241 1334 	movw	r3, #4404	; 0x1134
 8005b34:	4413      	add	r3, r2
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d109      	bne.n	8005b54 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8c7 	bl	8005cd4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005b4e:	f248 0201 	movw	r2, #32769	; 0x8001
 8005b52:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b66:	d149      	bne.n	8005bfc <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f241 1334 	movw	r3, #4404	; 0x1134
 8005b70:	4413      	add	r3, r2
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b7c:	d13e      	bne.n	8005bfc <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	f043 0208 	orr.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f241 1302 	movw	r3, #4354	; 0x1102
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f241 1334 	movw	r3, #4404	; 0x1134
 8005bba:	4413      	add	r3, r2
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc6:	f241 1334 	movw	r3, #4404	; 0x1134
 8005bca:	440b      	add	r3, r1
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	22e0      	movs	r2, #224	; 0xe0
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
 8005bd4:	e00f      	b.n	8005bf6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005bf0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005bf4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f876 	bl	8005ce8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c04:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005c08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c0c:	d10e      	bne.n	8005c2c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	22e0      	movs	r2, #224	; 0xe0
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f86b 	bl	8005cfc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d10d      	bne.n	8005c58 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c44:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f85f 	bl	8005d10 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d10d      	bne.n	8005c84 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f853 	bl	8005d24 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8005c84:	f7fd fa4a 	bl	800311c <HAL_GetCurrentCPUID>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d10d      	bne.n	8005caa <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <HAL_ETH_IRQHandler+0x1f4>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <HAL_ETH_IRQHandler+0x1f4>)
 8005c9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f848 	bl	8005d38 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8005ca8:	e00c      	b.n	8005cc4 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_ETH_IRQHandler+0x1f8>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d006      	beq.n	8005cc4 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_ETH_IRQHandler+0x1f8>)
 8005cb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f83a 	bl	8005d38 <HAL_ETH_WakeUpCallback>
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	58000080 	.word	0x58000080
 8005cd0:	580000c0 	.word	0x580000c0

08005cd4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e03e      	b.n	8005dec <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d76:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	055b      	lsls	r3, r3, #21
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f043 030c 	orr.w	r3, r3, #12
 8005d9a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005dae:	f7fd f831 	bl	8002e14 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005db4:	e009      	b.n	8005dca <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005db6:	f7fd f82d 	bl	8002e14 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc4:	d901      	bls.n	8005dca <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e010      	b.n	8005dec <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1ed      	bne.n	8005db6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e03c      	b.n	8005e90 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e1e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	055b      	lsls	r3, r3, #21
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 030c 	bic.w	r3, r3, #12
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_ETH_WritePHYRegister+0xa4>)
 8005e56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005e5a:	4a0f      	ldr	r2, [pc, #60]	; (8005e98 <HAL_ETH_WritePHYRegister+0xa4>)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005e62:	f7fc ffd7 	bl	8002e14 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005e68:	e009      	b.n	8005e7e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005e6a:	f7fc ffd3 	bl	8002e14 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e78:	d901      	bls.n	8005e7e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e008      	b.n	8005e90 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ed      	bne.n	8005e6a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40028000 	.word	0x40028000

08005e9c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e1c3      	b.n	8006238 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 020c 	and.w	r2, r3, #12
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf0c      	ite	eq
 8005ef6:	2301      	moveq	r3, #1
 8005ef8:	2300      	movne	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2300      	moveq	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bf14      	ite	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	2300      	moveq	r3, #0
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf14      	ite	ne
 8006018:	2301      	movne	r3, #1
 800601a:	2300      	moveq	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	0e5b      	lsrs	r3, r3, #25
 80060fa:	f003 021f 	and.w	r2, r3, #31
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	b29a      	uxth	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80061c4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80061d4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e00a      	b.n	800626e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	2b10      	cmp	r3, #16
 800625e:	d105      	bne.n	800626c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f860 	bl	8006328 <ETH_SetMACConfig>

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006288:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006290:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006292:	f002 f995 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 8006296:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d908      	bls.n	80062b2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d804      	bhi.n	80062b2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e027      	b.n	8006302 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d908      	bls.n	80062cc <HAL_ETH_SetMDIOClockRange+0x54>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a17      	ldr	r2, [pc, #92]	; (800631c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d804      	bhi.n	80062cc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e01a      	b.n	8006302 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d903      	bls.n	80062dc <HAL_ETH_SetMDIOClockRange+0x64>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a12      	ldr	r2, [pc, #72]	; (8006320 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d911      	bls.n	8006300 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a10      	ldr	r2, [pc, #64]	; (8006320 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d908      	bls.n	80062f6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <HAL_ETH_SetMDIOClockRange+0xac>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d804      	bhi.n	80062f6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e005      	b.n	8006302 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e000      	b.n	8006302 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006300:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	01312cff 	.word	0x01312cff
 8006318:	02160ebf 	.word	0x02160ebf
 800631c:	039386ff 	.word	0x039386ff
 8006320:	05f5e0ff 	.word	0x05f5e0ff
 8006324:	08f0d17f 	.word	0x08f0d17f

08006328 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800633a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8006342:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	7b1b      	ldrb	r3, [r3, #12]
 8006348:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800634a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	7b5b      	ldrb	r3, [r3, #13]
 8006350:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006352:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	7b9b      	ldrb	r3, [r3, #14]
 8006358:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800635a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	7bdb      	ldrb	r3, [r3, #15]
 8006360:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006362:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	7c12      	ldrb	r2, [r2, #16]
 8006368:	2a00      	cmp	r2, #0
 800636a:	d102      	bne.n	8006372 <ETH_SetMACConfig+0x4a>
 800636c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006370:	e000      	b.n	8006374 <ETH_SetMACConfig+0x4c>
 8006372:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006374:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7c52      	ldrb	r2, [r2, #17]
 800637a:	2a00      	cmp	r2, #0
 800637c:	d102      	bne.n	8006384 <ETH_SetMACConfig+0x5c>
 800637e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006382:	e000      	b.n	8006386 <ETH_SetMACConfig+0x5e>
 8006384:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006386:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	7c9b      	ldrb	r3, [r3, #18]
 800638c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800638e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006394:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800639a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	7f1b      	ldrb	r3, [r3, #28]
 80063a0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80063a2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	7f5b      	ldrb	r3, [r3, #29]
 80063a8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80063aa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	7f92      	ldrb	r2, [r2, #30]
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	d102      	bne.n	80063ba <ETH_SetMACConfig+0x92>
 80063b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063b8:	e000      	b.n	80063bc <ETH_SetMACConfig+0x94>
 80063ba:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80063bc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	7fdb      	ldrb	r3, [r3, #31]
 80063c2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80063c4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	d102      	bne.n	80063d6 <ETH_SetMACConfig+0xae>
 80063d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d4:	e000      	b.n	80063d8 <ETH_SetMACConfig+0xb0>
 80063d6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80063d8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80063de:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80063e8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b56      	ldr	r3, [pc, #344]	; (8006554 <ETH_SetMACConfig+0x22c>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	430b      	orrs	r3, r1
 8006404:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006412:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006414:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800641c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800641e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006426:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006428:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006430:	2a00      	cmp	r2, #0
 8006432:	d102      	bne.n	800643a <ETH_SetMACConfig+0x112>
 8006434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006438:	e000      	b.n	800643c <ETH_SetMACConfig+0x114>
 800643a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800643c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	4b42      	ldr	r3, [pc, #264]	; (8006558 <ETH_SetMACConfig+0x230>)
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	430b      	orrs	r3, r1
 8006458:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006460:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	4b3a      	ldr	r3, [pc, #232]	; (800655c <ETH_SetMACConfig+0x234>)
 8006472:	4013      	ands	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	68f9      	ldr	r1, [r7, #12]
 800647a:	430b      	orrs	r3, r1
 800647c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006484:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800648a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006492:	2a00      	cmp	r2, #0
 8006494:	d101      	bne.n	800649a <ETH_SetMACConfig+0x172>
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	e000      	b.n	800649c <ETH_SetMACConfig+0x174>
 800649a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800649c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80064b2:	4013      	ands	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80064c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80064cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f023 0103 	bic.w	r1, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80064f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800650e:	2a00      	cmp	r2, #0
 8006510:	d101      	bne.n	8006516 <ETH_SetMACConfig+0x1ee>
 8006512:	2240      	movs	r2, #64	; 0x40
 8006514:	e000      	b.n	8006518 <ETH_SetMACConfig+0x1f0>
 8006516:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006518:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006520:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006522:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800652a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006538:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	430a      	orrs	r2, r1
 8006544:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	00048083 	.word	0x00048083
 8006558:	c0f88000 	.word	0xc0f88000
 800655c:	fffffef0 	.word	0xfffffef0

08006560 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b38      	ldr	r3, [pc, #224]	; (8006658 <ETH_SetDMAConfig+0xf8>)
 8006576:	4013      	ands	r3, r2
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	6809      	ldr	r1, [r1, #0]
 8006580:	431a      	orrs	r2, r3
 8006582:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8006586:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	791b      	ldrb	r3, [r3, #4]
 800658c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006592:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	7b1b      	ldrb	r3, [r3, #12]
 8006598:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80065a6:	4413      	add	r3, r2
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b2c      	ldr	r3, [pc, #176]	; (800665c <ETH_SetDMAConfig+0xfc>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80065ba:	440b      	add	r3, r1
 80065bc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	7b5b      	ldrb	r3, [r3, #13]
 80065c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b22      	ldr	r3, [pc, #136]	; (8006660 <ETH_SetDMAConfig+0x100>)
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80065e6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	7d1b      	ldrb	r3, [r3, #20]
 80065f0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80065f2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	7f5b      	ldrb	r3, [r3, #29]
 80065f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	f241 1304 	movw	r3, #4356	; 0x1104
 8006606:	4413      	add	r3, r2
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b16      	ldr	r3, [pc, #88]	; (8006664 <ETH_SetDMAConfig+0x104>)
 800660c:	4013      	ands	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6811      	ldr	r1, [r2, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	431a      	orrs	r2, r3
 8006616:	f241 1304 	movw	r3, #4356	; 0x1104
 800661a:	440b      	add	r3, r1
 800661c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	7f1b      	ldrb	r3, [r3, #28]
 8006622:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	f241 1308 	movw	r3, #4360	; 0x1108
 8006634:	4413      	add	r3, r2
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <ETH_SetDMAConfig+0x108>)
 800663a:	4013      	ands	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6811      	ldr	r1, [r2, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	431a      	orrs	r2, r3
 8006644:	f241 1308 	movw	r3, #4360	; 0x1108
 8006648:	440b      	add	r3, r1
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	ffff87fd 	.word	0xffff87fd
 800665c:	ffff2ffe 	.word	0xffff2ffe
 8006660:	fffec000 	.word	0xfffec000
 8006664:	ffc0efef 	.word	0xffc0efef
 8006668:	7fc0ffff 	.word	0x7fc0ffff

0800666c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b0a4      	sub	sp, #144	; 0x90
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800667a:	2300      	movs	r3, #0
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800667e:	2300      	movs	r3, #0
 8006680:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006684:	2300      	movs	r3, #0
 8006686:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006690:	2301      	movs	r3, #1
 8006692:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80066a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80066c4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80066c8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80066d0:	2300      	movs	r3, #0
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80066da:	2300      	movs	r3, #0
 80066dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80066e6:	2300      	movs	r3, #0
 80066e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80066ee:	2300      	movs	r3, #0
 80066f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006704:	2320      	movs	r3, #32
 8006706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006710:	2300      	movs	r3, #0
 8006712:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006716:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800671c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006720:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006728:	2302      	movs	r3, #2
 800672a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800672e:	2300      	movs	r3, #0
 8006730:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800673a:	2300      	movs	r3, #0
 800673c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006746:	2300      	movs	r3, #0
 8006748:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fde6 	bl	8006328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800675c:	2301      	movs	r3, #1
 800675e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006760:	2301      	movs	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006764:	2300      	movs	r3, #0
 8006766:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006768:	2300      	movs	r3, #0
 800676a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800676e:	2300      	movs	r3, #0
 8006770:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006772:	2300      	movs	r3, #0
 8006774:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006776:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800677a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800677c:	2300      	movs	r3, #0
 800677e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006784:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800678c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006792:	f107 0308 	add.w	r3, r7, #8
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fee1 	bl	8006560 <ETH_SetDMAConfig>
}
 800679e:	bf00      	nop
 80067a0:	3790      	adds	r7, #144	; 0x90
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80067c2:	f001 fefd 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80067c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d908      	bls.n	80067e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d804      	bhi.n	80067e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e027      	b.n	8006832 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	4a18      	ldr	r2, [pc, #96]	; (8006848 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d908      	bls.n	80067fc <ETH_MAC_MDIO_ClkConfig+0x54>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4a17      	ldr	r2, [pc, #92]	; (800684c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d804      	bhi.n	80067fc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e01a      	b.n	8006832 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d903      	bls.n	800680c <ETH_MAC_MDIO_ClkConfig+0x64>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a12      	ldr	r2, [pc, #72]	; (8006850 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d911      	bls.n	8006830 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4a10      	ldr	r2, [pc, #64]	; (8006850 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d908      	bls.n	8006826 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d804      	bhi.n	8006826 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e005      	b.n	8006832 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e000      	b.n	8006832 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006830:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	01312cff 	.word	0x01312cff
 8006848:	02160ebf 	.word	0x02160ebf
 800684c:	039386ff 	.word	0x039386ff
 8006850:	05f5e0ff 	.word	0x05f5e0ff
 8006854:	08f0d17f 	.word	0x08f0d17f

08006858 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e01d      	b.n	80068a2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68d9      	ldr	r1, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	440b      	add	r3, r1
 8006876:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2200      	movs	r2, #0
 8006882:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2200      	movs	r2, #0
 800688e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	3206      	adds	r2, #6
 8006898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d9de      	bls.n	8006866 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f241 132c 	movw	r3, #4396	; 0x112c
 80068b6:	4413      	add	r3, r2
 80068b8:	2203      	movs	r2, #3
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68d9      	ldr	r1, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f241 1314 	movw	r3, #4372	; 0x1114
 80068c8:	4413      	add	r3, r2
 80068ca:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e024      	b.n	800693e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6919      	ldr	r1, [r3, #16]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	440b      	add	r3, r1
 8006904:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2200      	movs	r2, #0
 800691c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	330a      	adds	r3, #10
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d9d7      	bls.n	80068f4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f241 1330 	movw	r3, #4400	; 0x1130
 800696a:	4413      	add	r3, r2
 800696c:	2203      	movs	r2, #3
 800696e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6919      	ldr	r1, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f241 131c 	movw	r3, #4380	; 0x111c
 800697c:	4413      	add	r3, r2
 800697e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f241 1328 	movw	r3, #4392	; 0x1128
 8006990:	4413      	add	r3, r2
 8006992:	6019      	str	r1, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b08d      	sub	sp, #52	; 0x34
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3318      	adds	r3, #24
 80069b0:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069de:	d101      	bne.n	80069e4 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e223      	b.n	8006e2c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d044      	beq.n	8006a7a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	4b72      	ldr	r3, [pc, #456]	; (8006bc0 <ETH_Prepare_Tx_Descriptors+0x220>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069fc:	431a      	orrs	r2, r3
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d027      	beq.n	8006a7a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	431a      	orrs	r2, r3
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	431a      	orrs	r2, r3
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a78:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	4b4e      	ldr	r3, [pc, #312]	; (8006bc4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	6992      	ldr	r2, [r2, #24]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <ETH_Prepare_Tx_Descriptors+0x11c>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d030      	beq.n	8006b1e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d902      	bls.n	8006ae6 <ETH_Prepare_Tx_Descriptors+0x146>
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	3b04      	subs	r3, #4
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aee:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	3301      	adds	r3, #1
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b02:	d10c      	bne.n	8006b1e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e186      	b.n	8006e2c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	3301      	adds	r3, #1
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	6852      	ldr	r2, [r2, #4]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <ETH_Prepare_Tx_Descriptors+0x228>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	6852      	ldr	r2, [r2, #4]
 8006b64:	0412      	lsls	r2, r2, #16
 8006b66:	431a      	orrs	r2, r3
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	e008      	b.n	8006b80 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <ETH_Prepare_Tx_Descriptors+0x228>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d021      	beq.n	8006bd0 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	04db      	lsls	r3, r3, #19
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <ETH_Prepare_Tx_Descriptors+0x22c>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	69d2      	ldr	r2, [r2, #28]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	e02e      	b.n	8006c1e <ETH_Prepare_Tx_Descriptors+0x27e>
 8006bc0:	ffff0000 	.word	0xffff0000
 8006bc4:	ffffc000 	.word	0xffffc000
 8006bc8:	c000ffff 	.word	0xc000ffff
 8006bcc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	4b98      	ldr	r3, [pc, #608]	; (8006e38 <ETH_Prepare_Tx_Descriptors+0x498>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	6852      	ldr	r2, [r2, #4]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	431a      	orrs	r2, r3
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80c0 	beq.w	8006dee <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006c80:	e0b5      	b.n	8006dee <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	3301      	adds	r3, #1
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d902      	bls.n	8006ca0 <ETH_Prepare_Tx_Descriptors+0x300>
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc2:	d126      	bne.n	8006d12 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd6:	e016      	b.n	8006d06 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d902      	bls.n	8006cf6 <ETH_Prepare_Tx_Descriptors+0x356>
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	3301      	adds	r3, #1
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
 8006d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d3e4      	bcc.n	8006cd8 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e08c      	b.n	8006e2c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	3301      	adds	r3, #1
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	4b43      	ldr	r3, [pc, #268]	; (8006e3c <ETH_Prepare_Tx_Descriptors+0x49c>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	6852      	ldr	r2, [r2, #4]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	6852      	ldr	r2, [r2, #4]
 8006d5e:	0412      	lsls	r2, r2, #16
 8006d60:	431a      	orrs	r2, r3
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	609a      	str	r2, [r3, #8]
 8006d66:	e008      	b.n	8006d7a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	4b33      	ldr	r3, [pc, #204]	; (8006e40 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00f      	beq.n	8006da6 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	69d2      	ldr	r2, [r2, #28]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	60da      	str	r2, [r3, #12]
 8006da4:	e017      	b.n	8006dd6 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <ETH_Prepare_Tx_Descriptors+0x498>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	6852      	ldr	r2, [r2, #4]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f af45 	bne.w	8006c82 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d006      	beq.n	8006e0c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	e005      	b.n	8006e18 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e28:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3734      	adds	r7, #52	; 0x34
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	ffff8000 	.word	0xffff8000
 8006e3c:	ffffc000 	.word	0xffffc000
 8006e40:	c000ffff 	.word	0xc000ffff
 8006e44:	fffc0000 	.word	0xfffc0000

08006e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	; 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e56:	4b89      	ldr	r3, [pc, #548]	; (800707c <HAL_GPIO_Init+0x234>)
 8006e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e5a:	e194      	b.n	8007186 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	2101      	movs	r1, #1
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	4013      	ands	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8186 	beq.w	8007180 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d00b      	beq.n	8006e94 <HAL_GPIO_Init+0x4c>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d007      	beq.n	8006e94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e88:	2b11      	cmp	r3, #17
 8006e8a:	d003      	beq.n	8006e94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b12      	cmp	r3, #18
 8006e92:	d130      	bne.n	8006ef6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006eca:	2201      	movs	r2, #1
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	f003 0201 	and.w	r2, r3, #1
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	2203      	movs	r2, #3
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d003      	beq.n	8006f36 <HAL_GPIO_Init+0xee>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b12      	cmp	r3, #18
 8006f34:	d123      	bne.n	8006f7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	08da      	lsrs	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3208      	adds	r2, #8
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4013      	ands	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	08da      	lsrs	r2, r3, #3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3208      	adds	r2, #8
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	2203      	movs	r2, #3
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	4013      	ands	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f003 0203 	and.w	r2, r3, #3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80e0 	beq.w	8007180 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc0:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <HAL_GPIO_Init+0x238>)
 8006fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fc6:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <HAL_GPIO_Init+0x238>)
 8006fc8:	f043 0302 	orr.w	r3, r3, #2
 8006fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006fd0:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <HAL_GPIO_Init+0x238>)
 8006fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fde:	4a29      	ldr	r2, [pc, #164]	; (8007084 <HAL_GPIO_Init+0x23c>)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	220f      	movs	r2, #15
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	43db      	mvns	r3, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4013      	ands	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a20      	ldr	r2, [pc, #128]	; (8007088 <HAL_GPIO_Init+0x240>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d052      	beq.n	80070b0 <HAL_GPIO_Init+0x268>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <HAL_GPIO_Init+0x244>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_GPIO_Init+0x22e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_GPIO_Init+0x248>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02b      	beq.n	8007072 <HAL_GPIO_Init+0x22a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_GPIO_Init+0x24c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d025      	beq.n	800706e <HAL_GPIO_Init+0x226>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <HAL_GPIO_Init+0x250>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01f      	beq.n	800706a <HAL_GPIO_Init+0x222>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1b      	ldr	r2, [pc, #108]	; (800709c <HAL_GPIO_Init+0x254>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d019      	beq.n	8007066 <HAL_GPIO_Init+0x21e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1a      	ldr	r2, [pc, #104]	; (80070a0 <HAL_GPIO_Init+0x258>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_GPIO_Init+0x21a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a19      	ldr	r2, [pc, #100]	; (80070a4 <HAL_GPIO_Init+0x25c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00d      	beq.n	800705e <HAL_GPIO_Init+0x216>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_GPIO_Init+0x260>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <HAL_GPIO_Init+0x212>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a17      	ldr	r2, [pc, #92]	; (80070ac <HAL_GPIO_Init+0x264>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_GPIO_Init+0x20e>
 8007052:	2309      	movs	r3, #9
 8007054:	e02d      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 8007056:	230a      	movs	r3, #10
 8007058:	e02b      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 800705a:	2308      	movs	r3, #8
 800705c:	e029      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 800705e:	2307      	movs	r3, #7
 8007060:	e027      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 8007062:	2306      	movs	r3, #6
 8007064:	e025      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 8007066:	2305      	movs	r3, #5
 8007068:	e023      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 800706a:	2304      	movs	r3, #4
 800706c:	e021      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 800706e:	2303      	movs	r3, #3
 8007070:	e01f      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 8007072:	2302      	movs	r3, #2
 8007074:	e01d      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 8007076:	2301      	movs	r3, #1
 8007078:	e01b      	b.n	80070b2 <HAL_GPIO_Init+0x26a>
 800707a:	bf00      	nop
 800707c:	58000080 	.word	0x58000080
 8007080:	58024400 	.word	0x58024400
 8007084:	58000400 	.word	0x58000400
 8007088:	58020000 	.word	0x58020000
 800708c:	58020400 	.word	0x58020400
 8007090:	58020800 	.word	0x58020800
 8007094:	58020c00 	.word	0x58020c00
 8007098:	58021000 	.word	0x58021000
 800709c:	58021400 	.word	0x58021400
 80070a0:	58021800 	.word	0x58021800
 80070a4:	58021c00 	.word	0x58021c00
 80070a8:	58022000 	.word	0x58022000
 80070ac:	58022400 	.word	0x58022400
 80070b0:	2300      	movs	r3, #0
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	f002 0203 	and.w	r2, r2, #3
 80070b8:	0092      	lsls	r2, r2, #2
 80070ba:	4093      	lsls	r3, r2
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4313      	orrs	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070c2:	4938      	ldr	r1, [pc, #224]	; (80071a4 <HAL_GPIO_Init+0x35c>)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	3302      	adds	r3, #2
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	43db      	mvns	r3, r3
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	4013      	ands	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	43db      	mvns	r3, r3
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	4013      	ands	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	43db      	mvns	r3, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4013      	ands	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800714a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	43db      	mvns	r3, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f ae63 	bne.w	8006e5c <HAL_GPIO_Init+0x14>
  }
}
 8007196:	bf00      	nop
 8007198:	3724      	adds	r7, #36	; 0x24
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	58000400 	.word	0x58000400

080071a8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80071b0:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_HSEM_FastTake+0x2c>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3320      	adds	r3, #32
 80071b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ba:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <HAL_HSEM_FastTake+0x30>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	58026400 	.word	0x58026400
 80071d8:	80000300 	.word	0x80000300

080071dc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80071e6:	4906      	ldr	r1, [pc, #24]	; (8007200 <HAL_HSEM_Release+0x24>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	58026400 	.word	0x58026400

08007204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e07f      	b.n	8007316 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7f9 fd50 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2224      	movs	r2, #36	; 0x24
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0201 	bic.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	e006      	b.n	800728c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800728a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d104      	bne.n	800729e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800729c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <HAL_I2C_Init+0x11c>)
 80072aa:	430b      	orrs	r3, r1
 80072ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	ea42 0103 	orr.w	r1, r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69d9      	ldr	r1, [r3, #28]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	02008000 	.word	0x02008000

08007324 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b20      	cmp	r3, #32
 8007338:	d138      	bne.n	80073ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007344:	2302      	movs	r3, #2
 8007346:	e032      	b.n	80073ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2224      	movs	r2, #36	; 0x24
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007376:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d139      	bne.n	8007444 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073da:	2302      	movs	r3, #2
 80073dc:	e033      	b.n	8007446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2224      	movs	r2, #36	; 0x24
 80073ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0201 	bic.w	r2, r2, #1
 80073fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800740c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800745e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007462:	4a0c      	ldr	r2, [pc, #48]	; (8007494 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007464:	f043 0302 	orr.w	r3, r3, #2
 8007468:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800746e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	4906      	ldr	r1, [pc, #24]	; (8007498 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4313      	orrs	r3, r2
 8007484:	604b      	str	r3, [r1, #4]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	58000400 	.word	0x58000400

0800749c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e038      	b.n	8007520 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80074b6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f245 5255 	movw	r2, #21845	; 0x5555
 80074c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6852      	ldr	r2, [r2, #4]
 80074ca:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6892      	ldr	r2, [r2, #8]
 80074d4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80074d6:	f7fb fc9d 	bl	8002e14 <HAL_GetTick>
 80074da:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80074dc:	e008      	b.n	80074f0 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80074de:	f7fb fc99 	bl	8002e14 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d901      	bls.n	80074f0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e017      	b.n	8007520 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f1      	bne.n	80074de <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	429a      	cmp	r2, r3
 8007506:	d005      	beq.n	8007514 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68d2      	ldr	r2, [r2, #12]
 8007510:	611a      	str	r2, [r3, #16]
 8007512:	e004      	b.n	800751e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800751c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007530:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	2b06      	cmp	r3, #6
 800753a:	d00a      	beq.n	8007552 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800753c:	4b26      	ldr	r3, [pc, #152]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d001      	beq.n	800754e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e040      	b.n	80075d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e03e      	b.n	80075d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007552:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800755a:	491f      	ldr	r1, [pc, #124]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4313      	orrs	r3, r2
 8007560:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007562:	f7fb fc57 	bl	8002e14 <HAL_GetTick>
 8007566:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007568:	e009      	b.n	800757e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800756a:	f7fb fc53 	bl	8002e14 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007578:	d901      	bls.n	800757e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e028      	b.n	80075d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800757e:	4b16      	ldr	r3, [pc, #88]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758a:	d1ee      	bne.n	800756a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b1e      	cmp	r3, #30
 8007590:	d008      	beq.n	80075a4 <HAL_PWREx_ConfigSupply+0x7c>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b2e      	cmp	r3, #46	; 0x2e
 8007596:	d005      	beq.n	80075a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b1d      	cmp	r3, #29
 800759c:	d002      	beq.n	80075a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b2d      	cmp	r3, #45	; 0x2d
 80075a2:	d114      	bne.n	80075ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80075a4:	f7fb fc36 	bl	8002e14 <HAL_GetTick>
 80075a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80075aa:	e009      	b.n	80075c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075ac:	f7fb fc32 	bl	8002e14 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ba:	d901      	bls.n	80075c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e007      	b.n	80075d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d1ee      	bne.n	80075ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	58024800 	.word	0x58024800

080075dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80075e4:	f7fb fc16 	bl	8002e14 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e05f      	b.n	80076b4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d107      	bne.n	8007610 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7f9 fed7 	bl	80013b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007606:	f241 3188 	movw	r1, #5000	; 0x1388
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f85a 	bl	80076c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	3b01      	subs	r3, #1
 8007620:	021a      	lsls	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	2120      	movs	r1, #32
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f852 	bl	80076e0 <QSPI_WaitFlagStateUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d135      	bne.n	80076b2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <HAL_QSPI_Init+0xe0>)
 800764e:	4013      	ands	r3, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6852      	ldr	r2, [r2, #4]
 8007654:	0611      	lsls	r1, r2, #24
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68d2      	ldr	r2, [r2, #12]
 800765a:	4311      	orrs	r1, r2
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	69d2      	ldr	r2, [r2, #28]
 8007660:	4311      	orrs	r1, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6a12      	ldr	r2, [r2, #32]
 8007666:	4311      	orrs	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <HAL_QSPI_Init+0xe4>)
 8007678:	4013      	ands	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6912      	ldr	r2, [r2, #16]
 800767e:	0411      	lsls	r1, r2, #16
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6952      	ldr	r2, [r2, #20]
 8007684:	4311      	orrs	r1, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6992      	ldr	r2, [r2, #24]
 800768a:	4311      	orrs	r1, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	430b      	orrs	r3, r1
 8007692:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	00ffff2f 	.word	0x00ffff2f
 80076c0:	ffe0f8fe 	.word	0xffe0f8fe

080076c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80076f0:	e01a      	b.n	8007728 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f8:	d016      	beq.n	8007728 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fb fb8b 	bl	8002e14 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2204      	movs	r2, #4
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771c:	f043 0201 	orr.w	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e00e      	b.n	8007746 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	2b00      	cmp	r3, #0
 8007734:	bf14      	ite	ne
 8007736:	2301      	movne	r3, #1
 8007738:	2300      	moveq	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	429a      	cmp	r2, r3
 8007742:	d1d6      	bne.n	80076f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	; 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e3ff      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8087 	beq.w	800787e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007770:	4b99      	ldr	r3, [pc, #612]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800777a:	4b97      	ldr	r3, [pc, #604]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2b10      	cmp	r3, #16
 8007784:	d007      	beq.n	8007796 <HAL_RCC_OscConfig+0x46>
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	2b18      	cmp	r3, #24
 800778a:	d110      	bne.n	80077ae <HAL_RCC_OscConfig+0x5e>
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d10b      	bne.n	80077ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007796:	4b90      	ldr	r3, [pc, #576]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d06c      	beq.n	800787c <HAL_RCC_OscConfig+0x12c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d168      	bne.n	800787c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e3d9      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b6:	d106      	bne.n	80077c6 <HAL_RCC_OscConfig+0x76>
 80077b8:	4b87      	ldr	r3, [pc, #540]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a86      	ldr	r2, [pc, #536]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	e02e      	b.n	8007824 <HAL_RCC_OscConfig+0xd4>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCC_OscConfig+0x98>
 80077ce:	4b82      	ldr	r3, [pc, #520]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a81      	ldr	r2, [pc, #516]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	4b7f      	ldr	r3, [pc, #508]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a7e      	ldr	r2, [pc, #504]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e01d      	b.n	8007824 <HAL_RCC_OscConfig+0xd4>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077f0:	d10c      	bne.n	800780c <HAL_RCC_OscConfig+0xbc>
 80077f2:	4b79      	ldr	r3, [pc, #484]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a78      	ldr	r2, [pc, #480]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80077f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	4b76      	ldr	r3, [pc, #472]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a75      	ldr	r2, [pc, #468]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e00b      	b.n	8007824 <HAL_RCC_OscConfig+0xd4>
 800780c:	4b72      	ldr	r3, [pc, #456]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a71      	ldr	r2, [pc, #452]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	4b6f      	ldr	r3, [pc, #444]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6e      	ldr	r2, [pc, #440]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800781e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7fb faf2 	bl	8002e14 <HAL_GetTick>
 8007830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007834:	f7fb faee 	bl	8002e14 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b64      	cmp	r3, #100	; 0x64
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e38d      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007846:	4b64      	ldr	r3, [pc, #400]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCC_OscConfig+0xe4>
 8007852:	e014      	b.n	800787e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7fb fade 	bl	8002e14 <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800785c:	f7fb fada 	bl	8002e14 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b64      	cmp	r3, #100	; 0x64
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e379      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800786e:	4b5a      	ldr	r3, [pc, #360]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <HAL_RCC_OscConfig+0x10c>
 800787a:	e000      	b.n	800787e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800787c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80ae 	beq.w	80079e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788c:	4b52      	ldr	r3, [pc, #328]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007894:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007896:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_RCC_OscConfig+0x162>
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	2b18      	cmp	r3, #24
 80078a6:	d13a      	bne.n	800791e <HAL_RCC_OscConfig+0x1ce>
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d135      	bne.n	800791e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b2:	4b49      	ldr	r3, [pc, #292]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_RCC_OscConfig+0x17a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e34b      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ca:	f7fb faaf 	bl	8002e2c <HAL_GetREVID>
 80078ce:	4602      	mov	r2, r0
 80078d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d817      	bhi.n	8007908 <HAL_RCC_OscConfig+0x1b8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d108      	bne.n	80078f2 <HAL_RCC_OscConfig+0x1a2>
 80078e0:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078e8:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f0:	e07a      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f2:	4b39      	ldr	r3, [pc, #228]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	031b      	lsls	r3, r3, #12
 8007900:	4935      	ldr	r1, [pc, #212]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007902:	4313      	orrs	r3, r2
 8007904:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007906:	e06f      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007908:	4b33      	ldr	r3, [pc, #204]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	4930      	ldr	r1, [pc, #192]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007918:	4313      	orrs	r3, r2
 800791a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800791c:	e064      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d045      	beq.n	80079b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 0219 	bic.w	r2, r3, #25
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	4929      	ldr	r1, [pc, #164]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007934:	4313      	orrs	r3, r2
 8007936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fb fa6c 	bl	8002e14 <HAL_GetTick>
 800793c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007940:	f7fb fa68 	bl	8002e14 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e307      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007952:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f0      	beq.n	8007940 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795e:	f7fb fa65 	bl	8002e2c <HAL_GetREVID>
 8007962:	4602      	mov	r2, r0
 8007964:	f241 0303 	movw	r3, #4099	; 0x1003
 8007968:	429a      	cmp	r2, r3
 800796a:	d817      	bhi.n	800799c <HAL_RCC_OscConfig+0x24c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d108      	bne.n	8007986 <HAL_RCC_OscConfig+0x236>
 8007974:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800797c:	4a16      	ldr	r2, [pc, #88]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800797e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007982:	6053      	str	r3, [r2, #4]
 8007984:	e030      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	031b      	lsls	r3, r3, #12
 8007994:	4910      	ldr	r1, [pc, #64]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 8007996:	4313      	orrs	r3, r2
 8007998:	604b      	str	r3, [r1, #4]
 800799a:	e025      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	061b      	lsls	r3, r3, #24
 80079aa:	490b      	ldr	r1, [pc, #44]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	e01a      	b.n	80079e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <HAL_RCC_OscConfig+0x288>)
 80079b8:	f023 0301 	bic.w	r3, r3, #1
 80079bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079be:	f7fb fa29 	bl	8002e14 <HAL_GetTick>
 80079c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079c4:	e00a      	b.n	80079dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079c6:	f7fb fa25 	bl	8002e14 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d903      	bls.n	80079dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e2c4      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
 80079d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079dc:	4ba4      	ldr	r3, [pc, #656]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ee      	bne.n	80079c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80a9 	beq.w	8007b48 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079f6:	4b9e      	ldr	r3, [pc, #632]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a00:	4b9b      	ldr	r3, [pc, #620]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d007      	beq.n	8007a1c <HAL_RCC_OscConfig+0x2cc>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b18      	cmp	r3, #24
 8007a10:	d13a      	bne.n	8007a88 <HAL_RCC_OscConfig+0x338>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d135      	bne.n	8007a88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a1c:	4b94      	ldr	r3, [pc, #592]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_RCC_OscConfig+0x2e4>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d001      	beq.n	8007a34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e296      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a34:	f7fb f9fa 	bl	8002e2c <HAL_GetREVID>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d817      	bhi.n	8007a72 <HAL_RCC_OscConfig+0x322>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d108      	bne.n	8007a5c <HAL_RCC_OscConfig+0x30c>
 8007a4a:	4b89      	ldr	r3, [pc, #548]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a52:	4a87      	ldr	r2, [pc, #540]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a5a:	e075      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a5c:	4b84      	ldr	r3, [pc, #528]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	069b      	lsls	r3, r3, #26
 8007a6a:	4981      	ldr	r1, [pc, #516]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a70:	e06a      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a72:	4b7f      	ldr	r3, [pc, #508]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	061b      	lsls	r3, r3, #24
 8007a80:	497b      	ldr	r1, [pc, #492]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a86:	e05f      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d042      	beq.n	8007b16 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a90:	4b77      	ldr	r3, [pc, #476]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a76      	ldr	r2, [pc, #472]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fb f9ba 	bl	8002e14 <HAL_GetTick>
 8007aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007aa4:	f7fb f9b6 	bl	8002e14 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e255      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ab6:	4b6e      	ldr	r3, [pc, #440]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac2:	f7fb f9b3 	bl	8002e2c <HAL_GetREVID>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	f241 0303 	movw	r3, #4099	; 0x1003
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d817      	bhi.n	8007b00 <HAL_RCC_OscConfig+0x3b0>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d108      	bne.n	8007aea <HAL_RCC_OscConfig+0x39a>
 8007ad8:	4b65      	ldr	r3, [pc, #404]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ae0:	4a63      	ldr	r2, [pc, #396]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ae6:	6053      	str	r3, [r2, #4]
 8007ae8:	e02e      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
 8007aea:	4b61      	ldr	r3, [pc, #388]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	069b      	lsls	r3, r3, #26
 8007af8:	495d      	ldr	r1, [pc, #372]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	604b      	str	r3, [r1, #4]
 8007afe:	e023      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
 8007b00:	4b5b      	ldr	r3, [pc, #364]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	4958      	ldr	r1, [pc, #352]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60cb      	str	r3, [r1, #12]
 8007b14:	e018      	b.n	8007b48 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b16:	4b56      	ldr	r3, [pc, #344]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a55      	ldr	r2, [pc, #340]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fb f977 	bl	8002e14 <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b2a:	f7fb f973 	bl	8002e14 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e212      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b3c:	4b4c      	ldr	r3, [pc, #304]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d036      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d019      	beq.n	8007b90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b5c:	4b44      	ldr	r3, [pc, #272]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b60:	4a43      	ldr	r2, [pc, #268]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b62:	f043 0301 	orr.w	r3, r3, #1
 8007b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b68:	f7fb f954 	bl	8002e14 <HAL_GetTick>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b70:	f7fb f950 	bl	8002e14 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e1ef      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b82:	4b3b      	ldr	r3, [pc, #236]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f0      	beq.n	8007b70 <HAL_RCC_OscConfig+0x420>
 8007b8e:	e018      	b.n	8007bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b90:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b94:	4a36      	ldr	r2, [pc, #216]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9c:	f7fb f93a 	bl	8002e14 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba4:	f7fb f936 	bl	8002e14 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e1d5      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bb6:	4b2e      	ldr	r3, [pc, #184]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d036      	beq.n	8007c3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d019      	beq.n	8007c0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007be0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007be2:	f7fb f917 	bl	8002e14 <HAL_GetTick>
 8007be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007be8:	e008      	b.n	8007bfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007bea:	f7fb f913 	bl	8002e14 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e1b2      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bfc:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0f0      	beq.n	8007bea <HAL_RCC_OscConfig+0x49a>
 8007c08:	e018      	b.n	8007c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c16:	f7fb f8fd 	bl	8002e14 <HAL_GetTick>
 8007c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c1e:	f7fb f8f9 	bl	8002e14 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e198      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c30:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <HAL_RCC_OscConfig+0x520>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8085 	beq.w	8007d54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <HAL_RCC_OscConfig+0x524>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <HAL_RCC_OscConfig+0x524>)
 8007c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c56:	f7fb f8dd 	bl	8002e14 <HAL_GetTick>
 8007c5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c5c:	e00c      	b.n	8007c78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c5e:	f7fb f8d9 	bl	8002e14 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b64      	cmp	r3, #100	; 0x64
 8007c6a:	d905      	bls.n	8007c78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e178      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
 8007c70:	58024400 	.word	0x58024400
 8007c74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c78:	4b96      	ldr	r3, [pc, #600]	; (8007ed4 <HAL_RCC_OscConfig+0x784>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0ec      	beq.n	8007c5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d106      	bne.n	8007c9a <HAL_RCC_OscConfig+0x54a>
 8007c8c:	4b92      	ldr	r3, [pc, #584]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c90:	4a91      	ldr	r2, [pc, #580]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6713      	str	r3, [r2, #112]	; 0x70
 8007c98:	e02d      	b.n	8007cf6 <HAL_RCC_OscConfig+0x5a6>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10c      	bne.n	8007cbc <HAL_RCC_OscConfig+0x56c>
 8007ca2:	4b8d      	ldr	r3, [pc, #564]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	4a8c      	ldr	r2, [pc, #560]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	6713      	str	r3, [r2, #112]	; 0x70
 8007cae:	4b8a      	ldr	r3, [pc, #552]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb2:	4a89      	ldr	r2, [pc, #548]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cb4:	f023 0304 	bic.w	r3, r3, #4
 8007cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cba:	e01c      	b.n	8007cf6 <HAL_RCC_OscConfig+0x5a6>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b05      	cmp	r3, #5
 8007cc2:	d10c      	bne.n	8007cde <HAL_RCC_OscConfig+0x58e>
 8007cc4:	4b84      	ldr	r3, [pc, #528]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc8:	4a83      	ldr	r2, [pc, #524]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd0:	4b81      	ldr	r3, [pc, #516]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	4a80      	ldr	r2, [pc, #512]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	6713      	str	r3, [r2, #112]	; 0x70
 8007cdc:	e00b      	b.n	8007cf6 <HAL_RCC_OscConfig+0x5a6>
 8007cde:	4b7e      	ldr	r3, [pc, #504]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	4a7d      	ldr	r2, [pc, #500]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cea:	4b7b      	ldr	r3, [pc, #492]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4a7a      	ldr	r2, [pc, #488]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007cf0:	f023 0304 	bic.w	r3, r3, #4
 8007cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d015      	beq.n	8007d2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfe:	f7fb f889 	bl	8002e14 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d04:	e00a      	b.n	8007d1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d06:	f7fb f885 	bl	8002e14 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e122      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d1c:	4b6e      	ldr	r3, [pc, #440]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0ee      	beq.n	8007d06 <HAL_RCC_OscConfig+0x5b6>
 8007d28:	e014      	b.n	8007d54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2a:	f7fb f873 	bl	8002e14 <HAL_GetTick>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d30:	e00a      	b.n	8007d48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d32:	f7fb f86f 	bl	8002e14 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e10c      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d48:	4b63      	ldr	r3, [pc, #396]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1ee      	bne.n	8007d32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8101 	beq.w	8007f60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d5e:	4b5e      	ldr	r3, [pc, #376]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d66:	2b18      	cmp	r3, #24
 8007d68:	f000 80bc 	beq.w	8007ee4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f040 8095 	bne.w	8007ea0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d76:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a57      	ldr	r2, [pc, #348]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d82:	f7fb f847 	bl	8002e14 <HAL_GetTick>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d88:	e008      	b.n	8007d9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d8a:	f7fb f843 	bl	8002e14 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e0e2      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d9c:	4b4e      	ldr	r3, [pc, #312]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f0      	bne.n	8007d8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007da8:	4b4b      	ldr	r3, [pc, #300]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dac:	4b4b      	ldr	r3, [pc, #300]	; (8007edc <HAL_RCC_OscConfig+0x78c>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007db8:	0112      	lsls	r2, r2, #4
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	4946      	ldr	r1, [pc, #280]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	628b      	str	r3, [r1, #40]	; 0x28
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	025b      	lsls	r3, r3, #9
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007df2:	4939      	ldr	r1, [pc, #228]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007df8:	4b37      	ldr	r3, [pc, #220]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	4a36      	ldr	r2, [pc, #216]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007dfe:	f023 0301 	bic.w	r3, r3, #1
 8007e02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e04:	4b34      	ldr	r3, [pc, #208]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e08:	4b35      	ldr	r3, [pc, #212]	; (8007ee0 <HAL_RCC_OscConfig+0x790>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e10:	00d2      	lsls	r2, r2, #3
 8007e12:	4931      	ldr	r1, [pc, #196]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e18:	4b2f      	ldr	r3, [pc, #188]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f023 020c 	bic.w	r2, r3, #12
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	492c      	ldr	r1, [pc, #176]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e2a:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	f023 0202 	bic.w	r2, r3, #2
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	4928      	ldr	r1, [pc, #160]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e3c:	4b26      	ldr	r3, [pc, #152]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a25      	ldr	r2, [pc, #148]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e48:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e54:	4b20      	ldr	r3, [pc, #128]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4a1f      	ldr	r2, [pc, #124]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007e60:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a1c      	ldr	r2, [pc, #112]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a19      	ldr	r2, [pc, #100]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e78:	f7fa ffcc 	bl	8002e14 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e80:	f7fa ffc8 	bl	8002e14 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e067      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCC_OscConfig+0x730>
 8007e9e:	e05f      	b.n	8007f60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7fa ffb2 	bl	8002e14 <HAL_GetTick>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eb4:	f7fa ffae 	bl	8002e14 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e04d      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ec6:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <HAL_RCC_OscConfig+0x788>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x764>
 8007ed2:	e045      	b.n	8007f60 <HAL_RCC_OscConfig+0x810>
 8007ed4:	58024800 	.word	0x58024800
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	fffffc0c 	.word	0xfffffc0c
 8007ee0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <HAL_RCC_OscConfig+0x81c>)
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007eea:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <HAL_RCC_OscConfig+0x81c>)
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d031      	beq.n	8007f5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f003 0203 	and.w	r2, r3, #3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d12a      	bne.n	8007f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	091b      	lsrs	r3, r3, #4
 8007f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d122      	bne.n	8007f5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d11a      	bne.n	8007f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	0a5b      	lsrs	r3, r3, #9
 8007f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d111      	bne.n	8007f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d108      	bne.n	8007f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d001      	beq.n	8007f60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3730      	adds	r7, #48	; 0x30
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400

08007f70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e19c      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f84:	4b8a      	ldr	r3, [pc, #552]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d910      	bls.n	8007fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f92:	4b87      	ldr	r3, [pc, #540]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f023 020f 	bic.w	r2, r3, #15
 8007f9a:	4985      	ldr	r1, [pc, #532]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa2:	4b83      	ldr	r3, [pc, #524]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d001      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e184      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	4b7b      	ldr	r3, [pc, #492]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d908      	bls.n	8007fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fd0:	4b78      	ldr	r3, [pc, #480]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	4975      	ldr	r1, [pc, #468]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d010      	beq.n	8008010 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	4b70      	ldr	r3, [pc, #448]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d908      	bls.n	8008010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ffe:	4b6d      	ldr	r3, [pc, #436]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	496a      	ldr	r1, [pc, #424]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800800c:	4313      	orrs	r3, r2
 800800e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d010      	beq.n	800803e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699a      	ldr	r2, [r3, #24]
 8008020:	4b64      	ldr	r3, [pc, #400]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008028:	429a      	cmp	r2, r3
 800802a:	d908      	bls.n	800803e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800802c:	4b61      	ldr	r3, [pc, #388]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	495e      	ldr	r1, [pc, #376]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800803a:	4313      	orrs	r3, r2
 800803c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d010      	beq.n	800806c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69da      	ldr	r2, [r3, #28]
 800804e:	4b59      	ldr	r3, [pc, #356]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008056:	429a      	cmp	r2, r3
 8008058:	d908      	bls.n	800806c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800805a:	4b56      	ldr	r3, [pc, #344]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	4953      	ldr	r1, [pc, #332]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008068:	4313      	orrs	r3, r2
 800806a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d010      	beq.n	800809a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	4b4d      	ldr	r3, [pc, #308]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	f003 030f 	and.w	r3, r3, #15
 8008084:	429a      	cmp	r2, r3
 8008086:	d908      	bls.n	800809a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008088:	4b4a      	ldr	r3, [pc, #296]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f023 020f 	bic.w	r2, r3, #15
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	4947      	ldr	r1, [pc, #284]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008096:	4313      	orrs	r3, r2
 8008098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d055      	beq.n	8008152 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080a6:	4b43      	ldr	r3, [pc, #268]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	4940      	ldr	r1, [pc, #256]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d107      	bne.n	80080d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080c0:	4b3c      	ldr	r3, [pc, #240]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d121      	bne.n	8008110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e0f6      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d107      	bne.n	80080e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d115      	bne.n	8008110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0ea      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d107      	bne.n	8008100 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080f0:	4b30      	ldr	r3, [pc, #192]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d109      	bne.n	8008110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e0de      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008100:	4b2c      	ldr	r3, [pc, #176]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e0d6      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008110:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f023 0207 	bic.w	r2, r3, #7
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4925      	ldr	r1, [pc, #148]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800811e:	4313      	orrs	r3, r2
 8008120:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008122:	f7fa fe77 	bl	8002e14 <HAL_GetTick>
 8008126:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008128:	e00a      	b.n	8008140 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800812a:	f7fa fe73 	bl	8002e14 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f241 3288 	movw	r2, #5000	; 0x1388
 8008138:	4293      	cmp	r3, r2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e0be      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008140:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	429a      	cmp	r2, r3
 8008150:	d1eb      	bne.n	800812a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d010      	beq.n	8008180 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	4b14      	ldr	r3, [pc, #80]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	429a      	cmp	r2, r3
 800816c:	d208      	bcs.n	8008180 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f023 020f 	bic.w	r2, r3, #15
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <HAL_RCC_ClockConfig+0x244>)
 800817c:	4313      	orrs	r3, r2
 800817e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d214      	bcs.n	80081b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800818e:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f023 020f 	bic.w	r2, r3, #15
 8008196:	4906      	ldr	r1, [pc, #24]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	4313      	orrs	r3, r2
 800819c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800819e:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <HAL_RCC_ClockConfig+0x240>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d005      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e086      	b.n	80082be <HAL_RCC_ClockConfig+0x34e>
 80081b0:	52002000 	.word	0x52002000
 80081b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d010      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	4b3f      	ldr	r3, [pc, #252]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d208      	bcs.n	80081e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081d4:	4b3c      	ldr	r3, [pc, #240]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4939      	ldr	r1, [pc, #228]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	4b34      	ldr	r3, [pc, #208]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fe:	429a      	cmp	r2, r3
 8008200:	d208      	bcs.n	8008214 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008202:	4b31      	ldr	r3, [pc, #196]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	492e      	ldr	r1, [pc, #184]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008210:	4313      	orrs	r3, r2
 8008212:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d010      	beq.n	8008242 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800822c:	429a      	cmp	r2, r3
 800822e:	d208      	bcs.n	8008242 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008230:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4922      	ldr	r1, [pc, #136]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 800823e:	4313      	orrs	r3, r2
 8008240:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	4b1d      	ldr	r3, [pc, #116]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800825a:	429a      	cmp	r2, r3
 800825c:	d208      	bcs.n	8008270 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800825e:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4917      	ldr	r1, [pc, #92]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 800826c:	4313      	orrs	r3, r2
 800826e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008270:	f000 f834 	bl	80082dc <HAL_RCC_GetSysClockFreq>
 8008274:	4601      	mov	r1, r0
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	4a12      	ldr	r2, [pc, #72]	; (80082cc <HAL_RCC_ClockConfig+0x35c>)
 8008282:	5cd3      	ldrb	r3, [r2, r3]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	fa21 f303 	lsr.w	r3, r1, r3
 800828c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <HAL_RCC_ClockConfig+0x358>)
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	4a0d      	ldr	r2, [pc, #52]	; (80082cc <HAL_RCC_ClockConfig+0x35c>)
 8008298:	5cd3      	ldrb	r3, [r2, r3]
 800829a:	f003 031f 	and.w	r3, r3, #31
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
 80082a4:	4a0a      	ldr	r2, [pc, #40]	; (80082d0 <HAL_RCC_ClockConfig+0x360>)
 80082a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082a8:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <HAL_RCC_ClockConfig+0x364>)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <HAL_RCC_ClockConfig+0x368>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f9 fe04 	bl	8001ec0 <HAL_InitTick>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	58024400 	.word	0x58024400
 80082cc:	08020a60 	.word	0x08020a60
 80082d0:	20000004 	.word	0x20000004
 80082d4:	20000000 	.word	0x20000000
 80082d8:	20000008 	.word	0x20000008

080082dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	b089      	sub	sp, #36	; 0x24
 80082e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082e2:	4baf      	ldr	r3, [pc, #700]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082ea:	2b18      	cmp	r3, #24
 80082ec:	f200 814e 	bhi.w	800858c <HAL_RCC_GetSysClockFreq+0x2b0>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	0800858d 	.word	0x0800858d
 8008300:	0800858d 	.word	0x0800858d
 8008304:	0800858d 	.word	0x0800858d
 8008308:	0800858d 	.word	0x0800858d
 800830c:	0800858d 	.word	0x0800858d
 8008310:	0800858d 	.word	0x0800858d
 8008314:	0800858d 	.word	0x0800858d
 8008318:	08008383 	.word	0x08008383
 800831c:	0800858d 	.word	0x0800858d
 8008320:	0800858d 	.word	0x0800858d
 8008324:	0800858d 	.word	0x0800858d
 8008328:	0800858d 	.word	0x0800858d
 800832c:	0800858d 	.word	0x0800858d
 8008330:	0800858d 	.word	0x0800858d
 8008334:	0800858d 	.word	0x0800858d
 8008338:	08008389 	.word	0x08008389
 800833c:	0800858d 	.word	0x0800858d
 8008340:	0800858d 	.word	0x0800858d
 8008344:	0800858d 	.word	0x0800858d
 8008348:	0800858d 	.word	0x0800858d
 800834c:	0800858d 	.word	0x0800858d
 8008350:	0800858d 	.word	0x0800858d
 8008354:	0800858d 	.word	0x0800858d
 8008358:	0800838f 	.word	0x0800838f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800835c:	4b90      	ldr	r3, [pc, #576]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008368:	4b8d      	ldr	r3, [pc, #564]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	08db      	lsrs	r3, r3, #3
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	4a8c      	ldr	r2, [pc, #560]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008374:	fa22 f303 	lsr.w	r3, r2, r3
 8008378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800837a:	e10a      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800837c:	4b89      	ldr	r3, [pc, #548]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800837e:	61bb      	str	r3, [r7, #24]
    break;
 8008380:	e107      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008382:	4b89      	ldr	r3, [pc, #548]	; (80085a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008384:	61bb      	str	r3, [r7, #24]
    break;
 8008386:	e104      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <HAL_RCC_GetSysClockFreq+0x2d0>)
 800838a:	61bb      	str	r3, [r7, #24]
    break;
 800838c:	e101      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800838e:	4b84      	ldr	r3, [pc, #528]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008398:	4b81      	ldr	r3, [pc, #516]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	091b      	lsrs	r3, r3, #4
 800839e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083a4:	4b7e      	ldr	r3, [pc, #504]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083ae:	4b7c      	ldr	r3, [pc, #496]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	08db      	lsrs	r3, r3, #3
 80083b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80da 	beq.w	8008586 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d05a      	beq.n	800848e <HAL_RCC_GetSysClockFreq+0x1b2>
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d302      	bcc.n	80083e2 <HAL_RCC_GetSysClockFreq+0x106>
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d078      	beq.n	80084d2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80083e0:	e099      	b.n	8008516 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e2:	4b6f      	ldr	r3, [pc, #444]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02d      	beq.n	800844a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083ee:	4b6c      	ldr	r3, [pc, #432]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	08db      	lsrs	r3, r3, #3
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	4a6a      	ldr	r2, [pc, #424]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80083fa:	fa22 f303 	lsr.w	r3, r2, r3
 80083fe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008418:	4b61      	ldr	r3, [pc, #388]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008428:	ed97 6a02 	vldr	s12, [r7, #8]
 800842c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80085b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008444:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008448:	e087      	b.n	800855a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	eddf 6a57 	vldr	s13, [pc, #348]	; 80085b4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845c:	4b50      	ldr	r3, [pc, #320]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008470:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80085b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800848c:	e065      	b.n	800855a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008498:	eddf 6a47 	vldr	s13, [pc, #284]	; 80085b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800849c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a0:	4b3f      	ldr	r3, [pc, #252]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	ee07 3a90 	vmov	s15, r3
 80084ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80085b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80084b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084d0:	e043      	b.n	800855a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084dc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80085bc <HAL_RCC_GetSysClockFreq+0x2e0>
 80084e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e4:	4b2e      	ldr	r3, [pc, #184]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80084f8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80085b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80084fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008514:	e021      	b.n	800855a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	eddf 6a25 	vldr	s13, [pc, #148]	; 80085b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	ed97 6a02 	vldr	s12, [r7, #8]
 800853c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80085b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008558:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	0a5b      	lsrs	r3, r3, #9
 8008560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008564:	3301      	adds	r3, #1
 8008566:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008572:	edd7 6a07 	vldr	s13, [r7, #28]
 8008576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800857a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857e:	ee17 3a90 	vmov	r3, s15
 8008582:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008584:	e005      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
    break;
 800858a:	e002      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800858c:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800858e:	61bb      	str	r3, [r7, #24]
    break;
 8008590:	bf00      	nop
  }

  return sysclockfreq;
 8008592:	69bb      	ldr	r3, [r7, #24]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3724      	adds	r7, #36	; 0x24
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	58024400 	.word	0x58024400
 80085a4:	03d09000 	.word	0x03d09000
 80085a8:	003d0900 	.word	0x003d0900
 80085ac:	017d7840 	.word	0x017d7840
 80085b0:	46000000 	.word	0x46000000
 80085b4:	4c742400 	.word	0x4c742400
 80085b8:	4a742400 	.word	0x4a742400
 80085bc:	4bbebc20 	.word	0x4bbebc20

080085c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80085c6:	f7ff fe89 	bl	80082dc <HAL_RCC_GetSysClockFreq>
 80085ca:	4601      	mov	r1, r0
 80085cc:	4b10      	ldr	r3, [pc, #64]	; (8008610 <HAL_RCC_GetHCLKFreq+0x50>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	0a1b      	lsrs	r3, r3, #8
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	4a0f      	ldr	r2, [pc, #60]	; (8008614 <HAL_RCC_GetHCLKFreq+0x54>)
 80085d8:	5cd3      	ldrb	r3, [r2, r3]
 80085da:	f003 031f 	and.w	r3, r3, #31
 80085de:	fa21 f303 	lsr.w	r3, r1, r3
 80085e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <HAL_RCC_GetHCLKFreq+0x50>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	4a09      	ldr	r2, [pc, #36]	; (8008614 <HAL_RCC_GetHCLKFreq+0x54>)
 80085ee:	5cd3      	ldrb	r3, [r2, r3]
 80085f0:	f003 031f 	and.w	r3, r3, #31
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	4a07      	ldr	r2, [pc, #28]	; (8008618 <HAL_RCC_GetHCLKFreq+0x58>)
 80085fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085fe:	4a07      	ldr	r2, [pc, #28]	; (800861c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <HAL_RCC_GetHCLKFreq+0x58>)
 8008606:	681b      	ldr	r3, [r3, #0]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	58024400 	.word	0x58024400
 8008614:	08020a60 	.word	0x08020a60
 8008618:	20000004 	.word	0x20000004
 800861c:	20000000 	.word	0x20000000

08008620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008624:	f7ff ffcc 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 8008628:	4601      	mov	r1, r0
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	091b      	lsrs	r3, r3, #4
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	4a04      	ldr	r2, [pc, #16]	; (8008648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008636:	5cd3      	ldrb	r3, [r2, r3]
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008640:	4618      	mov	r0, r3
 8008642:	bd80      	pop	{r7, pc}
 8008644:	58024400 	.word	0x58024400
 8008648:	08020a60 	.word	0x08020a60

0800864c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008650:	f7ff ffb6 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 8008654:	4601      	mov	r1, r0
 8008656:	4b06      	ldr	r3, [pc, #24]	; (8008670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	4a04      	ldr	r2, [pc, #16]	; (8008674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008662:	5cd3      	ldrb	r3, [r2, r3]
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800866c:	4618      	mov	r0, r3
 800866e:	bd80      	pop	{r7, pc}
 8008670:	58024400 	.word	0x58024400
 8008674:	08020a60 	.word	0x08020a60

08008678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	223f      	movs	r2, #63	; 0x3f
 8008686:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f003 0207 	and.w	r2, r3, #7
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f003 020f 	and.w	r2, r3, #15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80086b8:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80086c4:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80086d0:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RCC_GetClockConfig+0x7c>)
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <HAL_RCC_GetClockConfig+0x80>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	601a      	str	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	58024400 	.word	0x58024400
 80086f8:	52002000 	.word	0x52002000

080086fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008704:	2300      	movs	r3, #0
 8008706:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008708:	2300      	movs	r3, #0
 800870a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d03d      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800871c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008720:	d013      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008726:	d802      	bhi.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800872c:	e01f      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800872e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008732:	d013      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008738:	d01c      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800873a:	e018      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873c:	4baf      	ldr	r3, [pc, #700]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	4aae      	ldr	r2, [pc, #696]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008748:	e015      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3304      	adds	r3, #4
 800874e:	2102      	movs	r1, #2
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f96f 	bl	8009a34 <RCCEx_PLL2_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800875a:	e00c      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3324      	adds	r3, #36	; 0x24
 8008760:	2102      	movs	r1, #2
 8008762:	4618      	mov	r0, r3
 8008764:	f001 fa18 	bl	8009b98 <RCCEx_PLL3_Config>
 8008768:	4603      	mov	r3, r0
 800876a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800876c:	e003      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]
      break;
 8008772:	e000      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800877c:	4b9f      	ldr	r3, [pc, #636]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	499c      	ldr	r1, [pc, #624]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800878a:	4313      	orrs	r3, r2
 800878c:	650b      	str	r3, [r1, #80]	; 0x50
 800878e:	e001      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879c:	2b00      	cmp	r3, #0
 800879e:	d03d      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d826      	bhi.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80087a8:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80087aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	080087d3 	.word	0x080087d3
 80087b8:	080087e5 	.word	0x080087e5
 80087bc:	080087fd 	.word	0x080087fd
 80087c0:	080087fd 	.word	0x080087fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c4:	4b8d      	ldr	r3, [pc, #564]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	4a8c      	ldr	r2, [pc, #560]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087d0:	e015      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	2100      	movs	r1, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 f92b 	bl	8009a34 <RCCEx_PLL2_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087e2:	e00c      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 f9d4 	bl	8009b98 <RCCEx_PLL3_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087f4:	e003      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
      break;
 80087fa:	e000      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80087fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d109      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008804:	4b7d      	ldr	r3, [pc, #500]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008808:	f023 0207 	bic.w	r2, r3, #7
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008810:	497a      	ldr	r1, [pc, #488]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008812:	4313      	orrs	r3, r2
 8008814:	650b      	str	r3, [r1, #80]	; 0x50
 8008816:	e001      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008824:	2b00      	cmp	r3, #0
 8008826:	d03e      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d01c      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008830:	2b80      	cmp	r3, #128	; 0x80
 8008832:	d804      	bhi.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008838:	2b40      	cmp	r3, #64	; 0x40
 800883a:	d00d      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800883c:	e01e      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800883e:	2bc0      	cmp	r3, #192	; 0xc0
 8008840:	d01f      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008846:	d01e      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008848:	e018      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800884a:	4b6c      	ldr	r3, [pc, #432]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	4a6b      	ldr	r2, [pc, #428]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008856:	e017      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3304      	adds	r3, #4
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f001 f8e8 	bl	8009a34 <RCCEx_PLL2_Config>
 8008864:	4603      	mov	r3, r0
 8008866:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008868:	e00e      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3324      	adds	r3, #36	; 0x24
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f991 	bl	8009b98 <RCCEx_PLL3_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800887a:	e005      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
      break;
 8008880:	e002      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800888e:	4b5b      	ldr	r3, [pc, #364]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889a:	4958      	ldr	r1, [pc, #352]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800889c:	4313      	orrs	r3, r2
 800889e:	650b      	str	r3, [r1, #80]	; 0x50
 80088a0:	e001      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d044      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088bc:	d01f      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 80088be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088c2:	d805      	bhi.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088cc:	d00e      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80088ce:	e01f      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80088d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088d4:	d01f      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80088d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088da:	d01e      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80088dc:	e018      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088de:	4b47      	ldr	r3, [pc, #284]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4a46      	ldr	r2, [pc, #280]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088ea:	e017      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3304      	adds	r3, #4
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f89e 	bl	8009a34 <RCCEx_PLL2_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088fc:	e00e      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3324      	adds	r3, #36	; 0x24
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f001 f947 	bl	8009b98 <RCCEx_PLL3_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800890e:	e005      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	e002      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800891a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008922:	4b36      	ldr	r3, [pc, #216]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008930:	4932      	ldr	r1, [pc, #200]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008932:	4313      	orrs	r3, r2
 8008934:	658b      	str	r3, [r1, #88]	; 0x58
 8008936:	e001      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008944:	2b00      	cmp	r3, #0
 8008946:	d044      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800894e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008952:	d01f      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008958:	d805      	bhi.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800895e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008962:	d00e      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008964:	e01f      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800896a:	d01f      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800896c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008970:	d01e      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008972:	e018      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	4a20      	ldr	r2, [pc, #128]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800897a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800897e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008980:	e017      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	2100      	movs	r1, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f001 f853 	bl	8009a34 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008992:	e00e      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3324      	adds	r3, #36	; 0x24
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f001 f8fc 	bl	8009b98 <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089a4:	e005      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
      break;
 80089aa:	e002      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80089ac:	bf00      	nop
 80089ae:	e000      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80089b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089b8:	4b10      	ldr	r3, [pc, #64]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089c6:	490d      	ldr	r1, [pc, #52]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	658b      	str	r3, [r1, #88]	; 0x58
 80089cc:	e001      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d035      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e2:	2b10      	cmp	r3, #16
 80089e4:	d00c      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d802      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80089ee:	e017      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d00c      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x312>
 80089f4:	2b30      	cmp	r3, #48	; 0x30
 80089f6:	d018      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80089f8:	e012      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80089fa:	bf00      	nop
 80089fc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a00:	4baf      	ldr	r3, [pc, #700]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	4aae      	ldr	r2, [pc, #696]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a0c:	e00e      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3304      	adds	r3, #4
 8008a12:	2102      	movs	r1, #2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f80d 	bl	8009a34 <RCCEx_PLL2_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a1e:	e005      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
      break;
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a32:	4ba3      	ldr	r3, [pc, #652]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a3e:	49a0      	ldr	r1, [pc, #640]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a44:	e001      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d042      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5e:	d01f      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a64:	d805      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6e:	d00e      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008a70:	e01f      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008a72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a76:	d01f      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a7c:	d01e      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008a7e:	e018      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a80:	4b8f      	ldr	r3, [pc, #572]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a8e      	ldr	r2, [pc, #568]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a8c:	e017      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3304      	adds	r3, #4
 8008a92:	2100      	movs	r1, #0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 ffcd 	bl	8009a34 <RCCEx_PLL2_Config>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a9e:	e00e      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3324      	adds	r3, #36	; 0x24
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 f876 	bl	8009b98 <RCCEx_PLL3_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ab0:	e005      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab6:	e002      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008ab8:	bf00      	nop
 8008aba:	e000      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ac4:	4b7e      	ldr	r3, [pc, #504]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad0:	497b      	ldr	r1, [pc, #492]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ad6:	e001      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d042      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af0:	d01b      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af6:	d805      	bhi.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d022      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d00a      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b02:	e01b      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b08:	d01d      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b0e:	d01c      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b14:	d01b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008b16:	e011      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 ff88 	bl	8009a34 <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b28:	e012      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3324      	adds	r3, #36	; 0x24
 8008b2e:	2101      	movs	r1, #1
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f831 	bl	8009b98 <RCCEx_PLL3_Config>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b3a:	e009      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b40:	e006      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b42:	bf00      	nop
 8008b44:	e004      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b56:	4b5a      	ldr	r3, [pc, #360]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b62:	4957      	ldr	r1, [pc, #348]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	650b      	str	r3, [r1, #80]	; 0x50
 8008b68:	e001      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d044      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b84:	d01b      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8a:	d805      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d022      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b94:	d00a      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008b96:	e01b      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9c:	d01d      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ba2:	d01c      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ba8:	d01b      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008baa:	e011      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 ff3e 	bl	8009a34 <RCCEx_PLL2_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bbc:	e012      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3324      	adds	r3, #36	; 0x24
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 ffe7 	bl	8009b98 <RCCEx_PLL3_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bce:	e009      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e004      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008bda:	bf00      	nop
 8008bdc:	e002      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008bde:	bf00      	nop
 8008be0:	e000      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bea:	4b35      	ldr	r3, [pc, #212]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bf8:	4931      	ldr	r1, [pc, #196]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	658b      	str	r3, [r1, #88]	; 0x58
 8008bfe:	e001      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d02d      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c18:	d005      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1e:	d009      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d013      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c24:	e00f      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c26:	4b26      	ldr	r3, [pc, #152]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	4a25      	ldr	r2, [pc, #148]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c32:	e00c      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fefa 	bl	8009a34 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c54:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c60:	4917      	ldr	r1, [pc, #92]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	650b      	str	r3, [r1, #80]	; 0x50
 8008c66:	e001      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d035      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d81b      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008c80:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008cc5 	.word	0x08008cc5
 8008c8c:	08008c99 	.word	0x08008c99
 8008c90:	08008ca7 	.word	0x08008ca7
 8008c94:	08008cc5 	.word	0x08008cc5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	4a08      	ldr	r2, [pc, #32]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ca4:	e00f      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fec1 	bl	8009a34 <RCCEx_PLL2_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cb6:	e006      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	75fb      	strb	r3, [r7, #23]
      break;
 8008cbc:	e003      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008cbe:	bf00      	nop
 8008cc0:	58024400 	.word	0x58024400
      break;
 8008cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d109      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ccc:	4bba      	ldr	r3, [pc, #744]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd0:	f023 0203 	bic.w	r2, r3, #3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd8:	49b7      	ldr	r1, [pc, #732]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008cde:	e001      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8086 	beq.w	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cf2:	4bb2      	ldr	r3, [pc, #712]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4ab1      	ldr	r2, [pc, #708]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cfe:	f7fa f889 	bl	8002e14 <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d04:	e009      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d06:	f7fa f885 	bl	8002e14 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b64      	cmp	r3, #100	; 0x64
 8008d12:	d902      	bls.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	75fb      	strb	r3, [r7, #23]
        break;
 8008d18:	e005      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d1a:	4ba8      	ldr	r3, [pc, #672]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0ef      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d166      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d2c:	4ba2      	ldr	r3, [pc, #648]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d36:	4053      	eors	r3, r2
 8008d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d013      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d40:	4b9d      	ldr	r3, [pc, #628]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d48:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d4a:	4b9b      	ldr	r3, [pc, #620]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4e:	4a9a      	ldr	r2, [pc, #616]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d56:	4b98      	ldr	r3, [pc, #608]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	4a97      	ldr	r2, [pc, #604]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d62:	4a95      	ldr	r2, [pc, #596]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d72:	d115      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d74:	f7fa f84e 	bl	8002e14 <HAL_GetTick>
 8008d78:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d7a:	e00b      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d7c:	f7fa f84a 	bl	8002e14 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d902      	bls.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	75fb      	strb	r3, [r7, #23]
            break;
 8008d92:	e005      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d94:	4b88      	ldr	r3, [pc, #544]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0ed      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d126      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db4:	d10d      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008db6:	4b80      	ldr	r3, [pc, #512]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dc4:	0919      	lsrs	r1, r3, #4
 8008dc6:	4b7e      	ldr	r3, [pc, #504]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008dc8:	400b      	ands	r3, r1
 8008dca:	497b      	ldr	r1, [pc, #492]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	610b      	str	r3, [r1, #16]
 8008dd0:	e005      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008dd2:	4b79      	ldr	r3, [pc, #484]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	4a78      	ldr	r2, [pc, #480]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ddc:	6113      	str	r3, [r2, #16]
 8008dde:	4b76      	ldr	r3, [pc, #472]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008de0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dec:	4972      	ldr	r1, [pc, #456]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	670b      	str	r3, [r1, #112]	; 0x70
 8008df2:	e004      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	75bb      	strb	r3, [r7, #22]
 8008df8:	e001      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d07d      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e0e:	2b28      	cmp	r3, #40	; 0x28
 8008e10:	d866      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008ee7 	.word	0x08008ee7
 8008e1c:	08008ee1 	.word	0x08008ee1
 8008e20:	08008ee1 	.word	0x08008ee1
 8008e24:	08008ee1 	.word	0x08008ee1
 8008e28:	08008ee1 	.word	0x08008ee1
 8008e2c:	08008ee1 	.word	0x08008ee1
 8008e30:	08008ee1 	.word	0x08008ee1
 8008e34:	08008ee1 	.word	0x08008ee1
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08008ee1 	.word	0x08008ee1
 8008e40:	08008ee1 	.word	0x08008ee1
 8008e44:	08008ee1 	.word	0x08008ee1
 8008e48:	08008ee1 	.word	0x08008ee1
 8008e4c:	08008ee1 	.word	0x08008ee1
 8008e50:	08008ee1 	.word	0x08008ee1
 8008e54:	08008ee1 	.word	0x08008ee1
 8008e58:	08008ecf 	.word	0x08008ecf
 8008e5c:	08008ee1 	.word	0x08008ee1
 8008e60:	08008ee1 	.word	0x08008ee1
 8008e64:	08008ee1 	.word	0x08008ee1
 8008e68:	08008ee1 	.word	0x08008ee1
 8008e6c:	08008ee1 	.word	0x08008ee1
 8008e70:	08008ee1 	.word	0x08008ee1
 8008e74:	08008ee1 	.word	0x08008ee1
 8008e78:	08008ee7 	.word	0x08008ee7
 8008e7c:	08008ee1 	.word	0x08008ee1
 8008e80:	08008ee1 	.word	0x08008ee1
 8008e84:	08008ee1 	.word	0x08008ee1
 8008e88:	08008ee1 	.word	0x08008ee1
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008ee1 	.word	0x08008ee1
 8008e94:	08008ee1 	.word	0x08008ee1
 8008e98:	08008ee7 	.word	0x08008ee7
 8008e9c:	08008ee1 	.word	0x08008ee1
 8008ea0:	08008ee1 	.word	0x08008ee1
 8008ea4:	08008ee1 	.word	0x08008ee1
 8008ea8:	08008ee1 	.word	0x08008ee1
 8008eac:	08008ee1 	.word	0x08008ee1
 8008eb0:	08008ee1 	.word	0x08008ee1
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ee7 	.word	0x08008ee7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fdb6 	bl	8009a34 <RCCEx_PLL2_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ecc:	e00c      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3324      	adds	r3, #36	; 0x24
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fe5f 	bl	8009b98 <RCCEx_PLL3_Config>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ede:	e003      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008eee:	4b32      	ldr	r3, [pc, #200]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efa:	492f      	ldr	r1, [pc, #188]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	654b      	str	r3, [r1, #84]	; 0x54
 8008f00:	e001      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d037      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d820      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f63 	.word	0x08008f63
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f4b 	.word	0x08008f4b
 8008f2c:	08008f63 	.word	0x08008f63
 8008f30:	08008f63 	.word	0x08008f63
 8008f34:	08008f63 	.word	0x08008f63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fd78 	bl	8009a34 <RCCEx_PLL2_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f48:	e00c      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3324      	adds	r3, #36	; 0x24
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fe21 	bl	8009b98 <RCCEx_PLL3_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f5a:	e003      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f60:	e000      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f6a:	4b13      	ldr	r3, [pc, #76]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6e:	f023 0207 	bic.w	r2, r3, #7
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	4910      	ldr	r1, [pc, #64]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	654b      	str	r3, [r1, #84]	; 0x54
 8008f7c:	e001      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d040      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f94:	2b05      	cmp	r3, #5
 8008f96:	d827      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08008fef 	.word	0x08008fef
 8008fa4:	08008fc5 	.word	0x08008fc5
 8008fa8:	08008fd7 	.word	0x08008fd7
 8008fac:	08008fef 	.word	0x08008fef
 8008fb0:	08008fef 	.word	0x08008fef
 8008fb4:	08008fef 	.word	0x08008fef
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	58024800 	.word	0x58024800
 8008fc0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	2101      	movs	r1, #1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fd32 	bl	8009a34 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fd4:	e00c      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	2101      	movs	r1, #1
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fddb 	bl	8009b98 <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fe6:	e003      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]
      break;
 8008fec:	e000      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ff6:	4bb2      	ldr	r3, [pc, #712]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	f023 0207 	bic.w	r2, r3, #7
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	49ae      	ldr	r1, [pc, #696]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009006:	4313      	orrs	r3, r2
 8009008:	658b      	str	r3, [r1, #88]	; 0x58
 800900a:	e001      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d044      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009026:	d01b      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800902c:	d805      	bhi.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d022      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009036:	d00a      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009038:	e01b      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800903a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903e:	d01d      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009044:	d01c      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800904a:	d01b      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800904c:	e011      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3304      	adds	r3, #4
 8009052:	2100      	movs	r1, #0
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fced 	bl	8009a34 <RCCEx_PLL2_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800905e:	e012      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3324      	adds	r3, #36	; 0x24
 8009064:	2102      	movs	r1, #2
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fd96 	bl	8009b98 <RCCEx_PLL3_Config>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009070:	e009      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      break;
 8009076:	e006      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009078:	bf00      	nop
 800907a:	e004      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800907c:	bf00      	nop
 800907e:	e002      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009080:	bf00      	nop
 8009082:	e000      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800908c:	4b8c      	ldr	r3, [pc, #560]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800908e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009090:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909a:	4989      	ldr	r1, [pc, #548]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800909c:	4313      	orrs	r3, r2
 800909e:	654b      	str	r3, [r1, #84]	; 0x54
 80090a0:	e001      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d044      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090bc:	d01b      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80090be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090c2:	d805      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d022      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80090c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090cc:	d00a      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80090ce:	e01b      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80090d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d4:	d01d      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80090d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090da:	d01c      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80090dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e0:	d01b      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80090e2:	e011      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fca2 	bl	8009a34 <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80090f4:	e012      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3324      	adds	r3, #36	; 0x24
 80090fa:	2102      	movs	r1, #2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fd4b 	bl	8009b98 <RCCEx_PLL3_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009106:	e009      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
      break;
 800910c:	e006      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800910e:	bf00      	nop
 8009110:	e004      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009112:	bf00      	nop
 8009114:	e002      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800911a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009122:	4b67      	ldr	r3, [pc, #412]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009130:	4963      	ldr	r1, [pc, #396]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009132:	4313      	orrs	r3, r2
 8009134:	658b      	str	r3, [r1, #88]	; 0x58
 8009136:	e001      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009144:	2b00      	cmp	r3, #0
 8009146:	d044      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800914e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009152:	d01b      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009158:	d805      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d022      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800915e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009162:	d00a      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009164:	e01b      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800916a:	d01d      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800916c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009170:	d01c      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009176:	d01b      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009178:	e011      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3304      	adds	r3, #4
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fc57 	bl	8009a34 <RCCEx_PLL2_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800918a:	e012      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3324      	adds	r3, #36	; 0x24
 8009190:	2102      	movs	r1, #2
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fd00 	bl	8009b98 <RCCEx_PLL3_Config>
 8009198:	4603      	mov	r3, r0
 800919a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800919c:	e009      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	75fb      	strb	r3, [r7, #23]
      break;
 80091a2:	e006      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091a4:	bf00      	nop
 80091a6:	e004      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091a8:	bf00      	nop
 80091aa:	e002      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091ac:	bf00      	nop
 80091ae:	e000      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091b8:	4b41      	ldr	r3, [pc, #260]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091c6:	493e      	ldr	r1, [pc, #248]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	658b      	str	r3, [r1, #88]	; 0x58
 80091cc:	e001      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0308 	and.w	r3, r3, #8
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01a      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e8:	d10a      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3324      	adds	r3, #36	; 0x24
 80091ee:	2102      	movs	r1, #2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fcd1 	bl	8009b98 <RCCEx_PLL3_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009200:	4b2f      	ldr	r3, [pc, #188]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800920e:	492c      	ldr	r1, [pc, #176]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009210:	4313      	orrs	r3, r2
 8009212:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01a      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922a:	d10a      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	2102      	movs	r1, #2
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fcb0 	bl	8009b98 <RCCEx_PLL3_Config>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009242:	4b1f      	ldr	r3, [pc, #124]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009250:	491b      	ldr	r1, [pc, #108]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009252:	4313      	orrs	r3, r2
 8009254:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d032      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926c:	d00d      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800926e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009272:	d016      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d111      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3304      	adds	r3, #4
 800927c:	2100      	movs	r1, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fbd8 	bl	8009a34 <RCCEx_PLL2_Config>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009288:	e00c      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3324      	adds	r3, #36	; 0x24
 800928e:	2102      	movs	r1, #2
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fc81 	bl	8009b98 <RCCEx_PLL3_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800929a:	e003      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	75fb      	strb	r3, [r7, #23]
      break;
 80092a0:	e000      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80092a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10c      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092b8:	4901      	ldr	r1, [pc, #4]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	658b      	str	r3, [r1, #88]	; 0x58
 80092be:	e003      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80092c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d02f      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092de:	d00c      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80092e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092e4:	d015      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80092e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ea:	d10f      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4b79      	ldr	r3, [pc, #484]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a78      	ldr	r2, [pc, #480]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80092f8:	e00c      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3324      	adds	r3, #36	; 0x24
 80092fe:	2101      	movs	r1, #1
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fc49 	bl	8009b98 <RCCEx_PLL3_Config>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800930a:	e003      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]
      break;
 8009310:	e000      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800931a:	4b6e      	ldr	r3, [pc, #440]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800931c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009328:	496a      	ldr	r1, [pc, #424]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800932a:	4313      	orrs	r3, r2
 800932c:	654b      	str	r3, [r1, #84]	; 0x54
 800932e:	e001      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d029      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934c:	d007      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800934e:	e00f      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4b60      	ldr	r3, [pc, #384]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a5f      	ldr	r2, [pc, #380]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800935c:	e00b      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3304      	adds	r3, #4
 8009362:	2102      	movs	r1, #2
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fb65 	bl	8009a34 <RCCEx_PLL2_Config>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800936e:	e002      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
      break;
 8009374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800937c:	4b55      	ldr	r3, [pc, #340]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800937e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009388:	4952      	ldr	r1, [pc, #328]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800938a:	4313      	orrs	r3, r2
 800938c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800938e:	e001      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2102      	movs	r1, #2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fbf6 	bl	8009b98 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02f      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ca:	d00c      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80093cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d0:	d802      	bhi.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80093d6:	e00d      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80093d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093dc:	d00f      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80093de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093e2:	d00e      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80093e4:	e006      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e6:	4b3b      	ldr	r3, [pc, #236]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	4a3a      	ldr	r2, [pc, #232]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80093ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80093f2:	e007      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
      break;
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800940a:	4b32      	ldr	r3, [pc, #200]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009416:	492f      	ldr	r1, [pc, #188]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009418:	4313      	orrs	r3, r2
 800941a:	654b      	str	r3, [r1, #84]	; 0x54
 800941c:	e001      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800942e:	4b29      	ldr	r3, [pc, #164]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009432:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943a:	4926      	ldr	r1, [pc, #152]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800943c:	4313      	orrs	r3, r2
 800943e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800944c:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800945a:	491e      	ldr	r1, [pc, #120]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800945c:	4313      	orrs	r3, r2
 800945e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800946c:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800946e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009478:	4916      	ldr	r1, [pc, #88]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800947a:	4313      	orrs	r3, r2
 800947c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	4a11      	ldr	r2, [pc, #68]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009494:	6113      	str	r3, [r2, #16]
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009498:	691a      	ldr	r2, [r3, #16]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094a0:	490c      	ldr	r1, [pc, #48]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da08      	bge.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094ae:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80094b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ba:	4906      	ldr	r1, [pc, #24]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80094c0:	7dbb      	ldrb	r3, [r7, #22]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58024400 	.word	0x58024400

080094d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094dc:	f7ff f870 	bl	80085c0 <HAL_RCC_GetHCLKFreq>
 80094e0:	4601      	mov	r1, r0
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	091b      	lsrs	r3, r3, #4
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	4a04      	ldr	r2, [pc, #16]	; (8009500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094ee:	5cd3      	ldrb	r3, [r2, r3]
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	58024400 	.word	0x58024400
 8009500:	08020a60 	.word	0x08020a60

08009504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009504:	b480      	push	{r7}
 8009506:	b089      	sub	sp, #36	; 0x24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800950c:	4b9d      	ldr	r3, [pc, #628]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009516:	4b9b      	ldr	r3, [pc, #620]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	0b1b      	lsrs	r3, r3, #12
 800951c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009522:	4b98      	ldr	r3, [pc, #608]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	091b      	lsrs	r3, r3, #4
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800952e:	4b95      	ldr	r3, [pc, #596]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 810a 	beq.w	8009766 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d05a      	beq.n	800960e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009558:	2b01      	cmp	r3, #1
 800955a:	d302      	bcc.n	8009562 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800955c:	2b02      	cmp	r3, #2
 800955e:	d078      	beq.n	8009652 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009560:	e099      	b.n	8009696 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009562:	4b88      	ldr	r3, [pc, #544]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d02d      	beq.n	80095ca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800956e:	4b85      	ldr	r3, [pc, #532]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	4a83      	ldr	r2, [pc, #524]	; (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
 800957e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	ee07 3a90 	vmov	s15, r3
 8009590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009598:	4b7a      	ldr	r3, [pc, #488]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a0:	ee07 3a90 	vmov	s15, r3
 80095a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800978c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80095b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095c8:	e087      	b.n	80096da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80095d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095dc:	4b69      	ldr	r3, [pc, #420]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	ee07 3a90 	vmov	s15, r3
 80095e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800978c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80095f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800960c:	e065      	b.n	80096da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800961c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009620:	4b58      	ldr	r3, [pc, #352]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009630:	ed97 6a03 	vldr	s12, [r7, #12]
 8009634:	eddf 5a55 	vldr	s11, [pc, #340]	; 800978c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009650:	e043      	b.n	80096da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009664:	4b47      	ldr	r3, [pc, #284]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009674:	ed97 6a03 	vldr	s12, [r7, #12]
 8009678:	eddf 5a44 	vldr	s11, [pc, #272]	; 800978c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800967c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009694:	e021      	b.n	80096da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80096a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a8:	4b36      	ldr	r3, [pc, #216]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b0:	ee07 3a90 	vmov	s15, r3
 80096b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800978c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80096c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80096da:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	0a5b      	lsrs	r3, r3, #9
 80096e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009700:	ee17 2a90 	vmov	r2, s15
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009708:	4b1e      	ldr	r3, [pc, #120]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800971e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009722:	edd7 6a07 	vldr	s13, [r7, #28]
 8009726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800972e:	ee17 2a90 	vmov	r2, s15
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009736:	4b13      	ldr	r3, [pc, #76]	; (8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	0e1b      	lsrs	r3, r3, #24
 800973c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800974c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009750:	edd7 6a07 	vldr	s13, [r7, #28]
 8009754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975c:	ee17 2a90 	vmov	r2, s15
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009764:	e008      	b.n	8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	609a      	str	r2, [r3, #8]
}
 8009778:	bf00      	nop
 800977a:	3724      	adds	r7, #36	; 0x24
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	58024400 	.word	0x58024400
 8009788:	03d09000 	.word	0x03d09000
 800978c:	46000000 	.word	0x46000000
 8009790:	4c742400 	.word	0x4c742400
 8009794:	4a742400 	.word	0x4a742400
 8009798:	4bbebc20 	.word	0x4bbebc20

0800979c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800979c:	b480      	push	{r7}
 800979e:	b089      	sub	sp, #36	; 0x24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097a4:	4b9d      	ldr	r3, [pc, #628]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097ae:	4b9b      	ldr	r3, [pc, #620]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	0d1b      	lsrs	r3, r3, #20
 80097b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097ba:	4b98      	ldr	r3, [pc, #608]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	0a1b      	lsrs	r3, r3, #8
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097c6:	4b95      	ldr	r3, [pc, #596]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	08db      	lsrs	r3, r3, #3
 80097cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 810a 	beq.w	80099fe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d05a      	beq.n	80098a6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d302      	bcc.n	80097fa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d078      	beq.n	80098ea <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80097f8:	e099      	b.n	800992e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fa:	4b88      	ldr	r3, [pc, #544]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d02d      	beq.n	8009862 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009806:	4b85      	ldr	r3, [pc, #532]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	08db      	lsrs	r3, r3, #3
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	4a83      	ldr	r2, [pc, #524]	; (8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009812:	fa22 f303 	lsr.w	r3, r2, r3
 8009816:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	ee07 3a90 	vmov	s15, r3
 8009828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009830:	4b7a      	ldr	r3, [pc, #488]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009838:	ee07 3a90 	vmov	s15, r3
 800983c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009840:	ed97 6a03 	vldr	s12, [r7, #12]
 8009844:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800984c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009860:	e087      	b.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009874:	4b69      	ldr	r3, [pc, #420]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009884:	ed97 6a03 	vldr	s12, [r7, #12]
 8009888:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800988c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098a4:	e065      	b.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80098b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b8:	4b58      	ldr	r3, [pc, #352]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80098d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e8:	e043      	b.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80098f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fc:	4b47      	ldr	r3, [pc, #284]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009904:	ee07 3a90 	vmov	s15, r3
 8009908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009910:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992c:	e021      	b.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009938:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800993c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009940:	4b36      	ldr	r3, [pc, #216]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009948:	ee07 3a90 	vmov	s15, r3
 800994c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009950:	ed97 6a03 	vldr	s12, [r7, #12]
 8009954:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009970:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009972:	4b2a      	ldr	r3, [pc, #168]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	0a5b      	lsrs	r3, r3, #9
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800998c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009998:	ee17 2a90 	vmov	r2, s15
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099a0:	4b1e      	ldr	r3, [pc, #120]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80099be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c6:	ee17 2a90 	vmov	r2, s15
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	0e1b      	lsrs	r3, r3, #24
 80099d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d8:	ee07 3a90 	vmov	s15, r3
 80099dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f4:	ee17 2a90 	vmov	r2, s15
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099fc:	e008      	b.n	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	609a      	str	r2, [r3, #8]
}
 8009a10:	bf00      	nop
 8009a12:	3724      	adds	r7, #36	; 0x24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	58024400 	.word	0x58024400
 8009a20:	03d09000 	.word	0x03d09000
 8009a24:	46000000 	.word	0x46000000
 8009a28:	4c742400 	.word	0x4c742400
 8009a2c:	4a742400 	.word	0x4a742400
 8009a30:	4bbebc20 	.word	0x4bbebc20

08009a34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a42:	4b53      	ldr	r3, [pc, #332]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d101      	bne.n	8009a52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e099      	b.n	8009b86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a52:	4b4f      	ldr	r3, [pc, #316]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a4e      	ldr	r2, [pc, #312]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5e:	f7f9 f9d9 	bl	8002e14 <HAL_GetTick>
 8009a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a64:	e008      	b.n	8009a78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a66:	f7f9 f9d5 	bl	8002e14 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e086      	b.n	8009b86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a78:	4b45      	ldr	r3, [pc, #276]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f0      	bne.n	8009a66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a84:	4b42      	ldr	r3, [pc, #264]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	031b      	lsls	r3, r3, #12
 8009a92:	493f      	ldr	r1, [pc, #252]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	628b      	str	r3, [r1, #40]	; 0x28
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	025b      	lsls	r3, r3, #9
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	431a      	orrs	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	041b      	lsls	r3, r3, #16
 8009ab6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	061b      	lsls	r3, r3, #24
 8009ac4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ac8:	4931      	ldr	r1, [pc, #196]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ace:	4b30      	ldr	r3, [pc, #192]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	492d      	ldr	r1, [pc, #180]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ae0:	4b2b      	ldr	r3, [pc, #172]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	f023 0220 	bic.w	r2, r3, #32
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	4928      	ldr	r1, [pc, #160]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009af2:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	4a26      	ldr	r2, [pc, #152]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	f023 0310 	bic.w	r3, r3, #16
 8009afc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b02:	4b24      	ldr	r3, [pc, #144]	; (8009b94 <RCCEx_PLL2_Config+0x160>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	69d2      	ldr	r2, [r2, #28]
 8009b0a:	00d2      	lsls	r2, r2, #3
 8009b0c:	4920      	ldr	r1, [pc, #128]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b12:	4b1f      	ldr	r3, [pc, #124]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	4a1e      	ldr	r2, [pc, #120]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	f043 0310 	orr.w	r3, r3, #16
 8009b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b24:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4a19      	ldr	r2, [pc, #100]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b30:	e00f      	b.n	8009b52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d106      	bne.n	8009b46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	4a14      	ldr	r2, [pc, #80]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b44:	e005      	b.n	8009b52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b46:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	4a11      	ldr	r2, [pc, #68]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a0e      	ldr	r2, [pc, #56]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b5e:	f7f9 f959 	bl	8002e14 <HAL_GetTick>
 8009b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b64:	e008      	b.n	8009b78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b66:	f7f9 f955 	bl	8002e14 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d901      	bls.n	8009b78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e006      	b.n	8009b86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <RCCEx_PLL2_Config+0x15c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0f0      	beq.n	8009b66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	58024400 	.word	0x58024400
 8009b94:	ffff0007 	.word	0xffff0007

08009b98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ba6:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d101      	bne.n	8009bb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e099      	b.n	8009cea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bb6:	4b4f      	ldr	r3, [pc, #316]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a4e      	ldr	r2, [pc, #312]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bc2:	f7f9 f927 	bl	8002e14 <HAL_GetTick>
 8009bc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc8:	e008      	b.n	8009bdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bca:	f7f9 f923 	bl	8002e14 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e086      	b.n	8009cea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bdc:	4b45      	ldr	r3, [pc, #276]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f0      	bne.n	8009bca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009be8:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	051b      	lsls	r3, r3, #20
 8009bf6:	493f      	ldr	r1, [pc, #252]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	025b      	lsls	r3, r3, #9
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	431a      	orrs	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	061b      	lsls	r3, r3, #24
 8009c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c2c:	4931      	ldr	r1, [pc, #196]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c32:	4b30      	ldr	r3, [pc, #192]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	492d      	ldr	r1, [pc, #180]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c44:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	4928      	ldr	r1, [pc, #160]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c56:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <RCCEx_PLL3_Config+0x160>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	69d2      	ldr	r2, [r2, #28]
 8009c6e:	00d2      	lsls	r2, r2, #3
 8009c70:	4920      	ldr	r1, [pc, #128]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c76:	4b1f      	ldr	r3, [pc, #124]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	4a1e      	ldr	r2, [pc, #120]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	4a19      	ldr	r2, [pc, #100]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c94:	e00f      	b.n	8009cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d106      	bne.n	8009caa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c9c:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ca8:	e005      	b.n	8009cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009caa:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	4a11      	ldr	r2, [pc, #68]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a0e      	ldr	r2, [pc, #56]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cc2:	f7f9 f8a7 	bl	8002e14 <HAL_GetTick>
 8009cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc8:	e008      	b.n	8009cdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cca:	f7f9 f8a3 	bl	8002e14 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e006      	b.n	8009cea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <RCCEx_PLL3_Config+0x15c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0f0      	beq.n	8009cca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	ffff0007 	.word	0xffff0007

08009cfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d067      	beq.n	8009dde <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d106      	bne.n	8009d28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7f7 fc2e 	bl	8001584 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	22ca      	movs	r2, #202	; 0xca
 8009d36:	625a      	str	r2, [r3, #36]	; 0x24
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2253      	movs	r2, #83	; 0x53
 8009d3e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f879 	bl	8009e38 <RTC_EnterInitMode>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d13b      	bne.n	8009dc8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6899      	ldr	r1, [r3, #8]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <HAL_RTC_Init+0xec>)
 8009d5c:	400b      	ands	r3, r1
 8009d5e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6899      	ldr	r1, [r3, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	0419      	lsls	r1, r3, #16
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f881 	bl	8009e98 <RTC_ExitInitMode>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d113      	bne.n	8009dc8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0203 	bic.w	r2, r2, #3
 8009dae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	69da      	ldr	r2, [r3, #28]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	22ff      	movs	r2, #255	; 0xff
 8009dce:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d103      	bne.n	8009dde <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	ff8fffbf 	.word	0xff8fffbf

08009dec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68da      	ldr	r2, [r3, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e02:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009e04:	f7f9 f806 	bl	8002e14 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e0a:	e009      	b.n	8009e20 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e0c:	f7f9 f802 	bl	8002e14 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e1a:	d901      	bls.n	8009e20 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e007      	b.n	8009e30 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0ee      	beq.n	8009e0c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d11d      	bne.n	8009e8e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e5c:	f7f8 ffda 	bl	8002e14 <HAL_GetTick>
 8009e60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e62:	e00d      	b.n	8009e80 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e64:	f7f8 ffd6 	bl	8002e14 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e72:	d905      	bls.n	8009e80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2203      	movs	r2, #3
 8009e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0ea      	beq.n	8009e64 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009ea4:	4b1a      	ldr	r3, [pc, #104]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	4a19      	ldr	r2, [pc, #100]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eae:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009eb0:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10c      	bne.n	8009ed6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff ff95 	bl	8009dec <HAL_RTC_WaitForSynchro>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01e      	beq.n	8009f06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2203      	movs	r2, #3
 8009ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	73fb      	strb	r3, [r7, #15]
 8009ed4:	e017      	b.n	8009f06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ed6:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	4a0d      	ldr	r2, [pc, #52]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009edc:	f023 0320 	bic.w	r3, r3, #32
 8009ee0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff ff82 	bl	8009dec <HAL_RTC_WaitForSynchro>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009efa:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	4a04      	ldr	r2, [pc, #16]	; (8009f10 <RTC_ExitInitMode+0x78>)
 8009f00:	f043 0320 	orr.w	r3, r3, #32
 8009f04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	58004000 	.word	0x58004000

08009f14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e0e2      	b.n	800a0f0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a70      	ldr	r2, [pc, #448]	; (800a0f8 <HAL_SPI_Init+0x1e4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00f      	beq.n	8009f5a <HAL_SPI_Init+0x46>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a6f      	ldr	r2, [pc, #444]	; (800a0fc <HAL_SPI_Init+0x1e8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00a      	beq.n	8009f5a <HAL_SPI_Init+0x46>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a6d      	ldr	r2, [pc, #436]	; (800a100 <HAL_SPI_Init+0x1ec>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d005      	beq.n	8009f5a <HAL_SPI_Init+0x46>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2b0f      	cmp	r3, #15
 8009f54:	d901      	bls.n	8009f5a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e0ca      	b.n	800a0f0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb96 	bl	800a68c <SPI_GetPacketSize>
 8009f60:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a64      	ldr	r2, [pc, #400]	; (800a0f8 <HAL_SPI_Init+0x1e4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00c      	beq.n	8009f86 <HAL_SPI_Init+0x72>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a62      	ldr	r2, [pc, #392]	; (800a0fc <HAL_SPI_Init+0x1e8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d007      	beq.n	8009f86 <HAL_SPI_Init+0x72>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a61      	ldr	r2, [pc, #388]	; (800a100 <HAL_SPI_Init+0x1ec>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d002      	beq.n	8009f86 <HAL_SPI_Init+0x72>
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b08      	cmp	r3, #8
 8009f84:	d811      	bhi.n	8009faa <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f8a:	4a5b      	ldr	r2, [pc, #364]	; (800a0f8 <HAL_SPI_Init+0x1e4>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d009      	beq.n	8009fa4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a59      	ldr	r2, [pc, #356]	; (800a0fc <HAL_SPI_Init+0x1e8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d004      	beq.n	8009fa4 <HAL_SPI_Init+0x90>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a58      	ldr	r2, [pc, #352]	; (800a100 <HAL_SPI_Init+0x1ec>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d104      	bne.n	8009fae <HAL_SPI_Init+0x9a>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d901      	bls.n	8009fae <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e0a0      	b.n	800a0f0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f7 fc50 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0201 	bic.w	r2, r2, #1
 8009fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fe8:	d110      	bne.n	800a00c <HAL_SPI_Init+0xf8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ff2:	d10b      	bne.n	800a00c <HAL_SPI_Init+0xf8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d107      	bne.n	800a00c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a00a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	431a      	orrs	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01e:	ea42 0103 	orr.w	r1, r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a060:	431a      	orrs	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06c:	ea42 0103 	orr.w	r1, r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d113      	bne.n	800a0ac <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a096:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0aa:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0201 	bic.w	r2, r2, #1
 800a0ba:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00a      	beq.n	800a0de <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	40013000 	.word	0x40013000
 800a0fc:	40003800 	.word	0x40003800
 800a100:	40003c00 	.word	0x40003c00

0800a104 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a11c:	6a3a      	ldr	r2, [r7, #32]
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4013      	ands	r3, r2
 800a122:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a136:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3330      	adds	r3, #48	; 0x30
 800a13e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d113      	bne.n	800a172 <HAL_SPI_IRQHandler+0x6e>
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10e      	bne.n	800a172 <HAL_SPI_IRQHandler+0x6e>
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
    handled = 1UL;
 800a16e:	2301      	movs	r3, #1
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10f      	bne.n	800a19c <HAL_SPI_IRQHandler+0x98>
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <HAL_SPI_IRQHandler+0x98>
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d105      	bne.n	800a19c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
    handled = 1UL;
 800a198:	2301      	movs	r3, #1
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10f      	bne.n	800a1c6 <HAL_SPI_IRQHandler+0xc2>
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <HAL_SPI_IRQHandler+0xc2>
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	4798      	blx	r3
    handled = 1UL;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f040 8170 	bne.w	800a4ae <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	f003 0308 	and.w	r3, r3, #8
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80a0 	beq.w	800a31a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f042 0208 	orr.w	r2, r2, #8
 800a1e8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0210 	orr.w	r2, r2, #16
 800a1f8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a208:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	691a      	ldr	r2, [r3, #16]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0208 	bic.w	r2, r2, #8
 800a218:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00f      	beq.n	800a244 <HAL_SPI_IRQHandler+0x140>
 800a224:	7cfb      	ldrb	r3, [r7, #19]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d004      	beq.n	800a234 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d007      	beq.n	800a244 <HAL_SPI_IRQHandler+0x140>
 800a234:	7cfb      	ldrb	r3, [r7, #19]
 800a236:	2b03      	cmp	r3, #3
 800a238:	d059      	beq.n	800a2ee <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d154      	bne.n	800a2ee <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d13d      	bne.n	800a2ce <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a252:	e036      	b.n	800a2c2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b0f      	cmp	r3, #15
 800a25a:	d90b      	bls.n	800a274 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a264:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a266:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	665a      	str	r2, [r3, #100]	; 0x64
 800a272:	e01d      	b.n	800a2b0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b07      	cmp	r3, #7
 800a27a:	d90b      	bls.n	800a294 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	8812      	ldrh	r2, [r2, #0]
 800a284:	b292      	uxth	r2, r2
 800a286:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a28c:	1c9a      	adds	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	665a      	str	r2, [r3, #100]	; 0x64
 800a292:	e00d      	b.n	800a2b0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a0:	7812      	ldrb	r2, [r2, #0]
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1c2      	bne.n	800a254 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f93c 	bl	800a54c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f90c 	bl	800a504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a2ec:	e0e4      	b.n	800a4b8 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a2ee:	7cfb      	ldrb	r3, [r7, #19]
 800a2f0:	2b05      	cmp	r3, #5
 800a2f2:	d103      	bne.n	800a2fc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f8fb 	bl	800a4f0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800a2fa:	e0da      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a2fc:	7cfb      	ldrb	r3, [r7, #19]
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d103      	bne.n	800a30a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f8ea 	bl	800a4dc <HAL_SPI_RxCpltCallback>
    return;
 800a308:	e0d3      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a30a:	7cfb      	ldrb	r3, [r7, #19]
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	f040 80d0 	bne.w	800a4b2 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f8d8 	bl	800a4c8 <HAL_SPI_TxCpltCallback>
    return;
 800a318:	e0cb      	b.n	800a4b2 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <HAL_SPI_IRQHandler+0x23c>
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d008      	beq.n	800a340 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a33c:	619a      	str	r2, [r3, #24]

    return;
 800a33e:	e0bb      	b.n	800a4b8 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 80b6 	beq.w	800a4b8 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00f      	beq.n	800a376 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35c:	f043 0204 	orr.w	r2, r3, #4
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a374:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00f      	beq.n	800a3a0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a386:	f043 0201 	orr.w	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00f      	beq.n	800a3ca <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3b0:	f043 0208 	orr.w	r2, r3, #8
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	699a      	ldr	r2, [r3, #24]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	f003 0320 	and.w	r3, r3, #32
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00f      	beq.n	800a3f4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0220 	orr.w	r2, r2, #32
 800a3f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d05b      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0201 	bic.w	r2, r2, #1
 800a40c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6919      	ldr	r1, [r3, #16]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	4b29      	ldr	r3, [pc, #164]	; (800a4c0 <HAL_SPI_IRQHandler+0x3bc>)
 800a41a:	400b      	ands	r3, r1
 800a41c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a428:	d138      	bne.n	800a49c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a438:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d013      	beq.n	800a46a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a446:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <HAL_SPI_IRQHandler+0x3c0>)
 800a448:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f9 fabe 	bl	80039d0 <HAL_DMA_Abort_IT>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d007      	beq.n	800a46a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a460:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d021      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a476:	4a13      	ldr	r2, [pc, #76]	; (800a4c4 <HAL_SPI_IRQHandler+0x3c0>)
 800a478:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f9 faa6 	bl	80039d0 <HAL_DMA_Abort_IT>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d015      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a490:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a49a:	e00c      	b.n	800a4b6 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f82d 	bl	800a504 <HAL_SPI_ErrorCallback>
    return;
 800a4aa:	bf00      	nop
 800a4ac:	e003      	b.n	800a4b6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a4ae:	bf00      	nop
 800a4b0:	e002      	b.n	800a4b8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a4b2:	bf00      	nop
 800a4b4:	e000      	b.n	800a4b8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a4b6:	bf00      	nop
  }
}
 800a4b8:	3728      	adds	r7, #40	; 0x28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	fffffc94 	.word	0xfffffc94
 800a4c4:	0800a519 	.word	0x0800a519

0800a4c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7ff ffe0 	bl	800a504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f042 0208 	orr.w	r2, r2, #8
 800a56a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0210 	orr.w	r2, r2, #16
 800a57a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6919      	ldr	r1, [r3, #16]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b3c      	ldr	r3, [pc, #240]	; (800a688 <SPI_CloseTransfer+0x13c>)
 800a598:	400b      	ands	r3, r1
 800a59a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d014      	beq.n	800a5e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00f      	beq.n	800a5e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0220 	orr.w	r2, r2, #32
 800a5e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d014      	beq.n	800a618 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00f      	beq.n	800a618 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5fe:	f043 0204 	orr.w	r2, r3, #4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a616:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00f      	beq.n	800a642 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a628:	f043 0201 	orr.w	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a640:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00f      	beq.n	800a66c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a652:	f043 0208 	orr.w	r2, r3, #8
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a66a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	fffffc90 	.word	0xfffffc90

0800a68c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a698:	095b      	lsrs	r3, r3, #5
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	3307      	adds	r3, #7
 800a6aa:	08db      	lsrs	r3, r3, #3
 800a6ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e049      	b.n	800a768 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f841 	bl	800a770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f000 f9bd 	bl	800aa80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d001      	beq.n	800a79c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e021      	b.n	800a7e0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <HAL_TIM_Base_Start_IT+0x68>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b06      	cmp	r3, #6
 800a7c4:	d00b      	beq.n	800a7de <HAL_TIM_Base_Start_IT+0x5a>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7cc:	d007      	beq.n	800a7de <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f042 0201 	orr.w	r2, r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	00010007 	.word	0x00010007

0800a7f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b02      	cmp	r3, #2
 800a804:	d122      	bne.n	800a84c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b02      	cmp	r3, #2
 800a812:	d11b      	bne.n	800a84c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0202 	mvn.w	r2, #2
 800a81c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	f003 0303 	and.w	r3, r3, #3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f905 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a838:	e005      	b.n	800a846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f8f7 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f908 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	f003 0304 	and.w	r3, r3, #4
 800a856:	2b04      	cmp	r3, #4
 800a858:	d122      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b04      	cmp	r3, #4
 800a866:	d11b      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0204 	mvn.w	r2, #4
 800a870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2202      	movs	r2, #2
 800a876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8db 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a88c:	e005      	b.n	800a89a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8cd 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8de 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b08      	cmp	r3, #8
 800a8ac:	d122      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f003 0308 	and.w	r3, r3, #8
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d11b      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0208 	mvn.w	r2, #8
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8b1 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f8a3 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f8b4 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0310 	and.w	r3, r3, #16
 800a8fe:	2b10      	cmp	r3, #16
 800a900:	d122      	bne.n	800a948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d11b      	bne.n	800a948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0210 	mvn.w	r2, #16
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2208      	movs	r2, #8
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f887 	bl	800aa42 <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f879 	bl	800aa2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f88a 	bl	800aa56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b01      	cmp	r3, #1
 800a954:	d10e      	bne.n	800a974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b01      	cmp	r3, #1
 800a962:	d107      	bne.n	800a974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0201 	mvn.w	r2, #1
 800a96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f6 fcda 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d10e      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98c:	2b80      	cmp	r3, #128	; 0x80
 800a98e:	d107      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f914 	bl	800abc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ae:	d10e      	bne.n	800a9ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b80      	cmp	r3, #128	; 0x80
 800a9bc:	d107      	bne.n	800a9ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f907 	bl	800abdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d10e      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e6:	2b40      	cmp	r3, #64	; 0x40
 800a9e8:	d107      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f838 	bl	800aa6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d10e      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d107      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f06f 0220 	mvn.w	r2, #32
 800aa1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f8c7 	bl	800abb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a40      	ldr	r2, [pc, #256]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d013      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa9e:	d00f      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3d      	ldr	r2, [pc, #244]	; (800ab98 <TIM_Base_SetConfig+0x118>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00b      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a3c      	ldr	r2, [pc, #240]	; (800ab9c <TIM_Base_SetConfig+0x11c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d007      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a3b      	ldr	r2, [pc, #236]	; (800aba0 <TIM_Base_SetConfig+0x120>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_Base_SetConfig+0x40>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a3a      	ldr	r2, [pc, #232]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d108      	bne.n	800aad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a2f      	ldr	r2, [pc, #188]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae0:	d01b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a2c      	ldr	r2, [pc, #176]	; (800ab98 <TIM_Base_SetConfig+0x118>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d017      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a2b      	ldr	r2, [pc, #172]	; (800ab9c <TIM_Base_SetConfig+0x11c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d013      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a2a      	ldr	r2, [pc, #168]	; (800aba0 <TIM_Base_SetConfig+0x120>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00f      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a29      	ldr	r2, [pc, #164]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00b      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a28      	ldr	r2, [pc, #160]	; (800aba8 <TIM_Base_SetConfig+0x128>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d007      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a27      	ldr	r2, [pc, #156]	; (800abac <TIM_Base_SetConfig+0x12c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d003      	beq.n	800ab1a <TIM_Base_SetConfig+0x9a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a26      	ldr	r2, [pc, #152]	; (800abb0 <TIM_Base_SetConfig+0x130>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d108      	bne.n	800ab2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	689a      	ldr	r2, [r3, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a10      	ldr	r2, [pc, #64]	; (800ab94 <TIM_Base_SetConfig+0x114>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00f      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a12      	ldr	r2, [pc, #72]	; (800aba4 <TIM_Base_SetConfig+0x124>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00b      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a11      	ldr	r2, [pc, #68]	; (800aba8 <TIM_Base_SetConfig+0x128>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d007      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a10      	ldr	r2, [pc, #64]	; (800abac <TIM_Base_SetConfig+0x12c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d003      	beq.n	800ab78 <TIM_Base_SetConfig+0xf8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <TIM_Base_SetConfig+0x130>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d103      	bne.n	800ab80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	615a      	str	r2, [r3, #20]
}
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40010000 	.word	0x40010000
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40010400 	.word	0x40010400
 800aba8:	40014000 	.word	0x40014000
 800abac:	40014400 	.word	0x40014400
 800abb0:	40014800 	.word	0x40014800

0800abb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e042      	b.n	800ac88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7f7 fc7b 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2224      	movs	r2, #36	; 0x24
 800ac1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 0201 	bic.w	r2, r2, #1
 800ac30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f82c 	bl	800ac90 <UART_SetConfig>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e022      	b.n	800ac88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fdd0 	bl	800b7f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fe57 	bl	800b934 <UART_CheckIdleState>
 800ac86:	4603      	mov	r3, r0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ac94:	b08e      	sub	sp, #56	; 0x38
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	431a      	orrs	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acbe:	4313      	orrs	r3, r2
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	4bc1      	ldr	r3, [pc, #772]	; (800afd0 <UART_SetConfig+0x340>)
 800acca:	4013      	ands	r3, r2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6812      	ldr	r2, [r2, #0]
 800acd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acd2:	430b      	orrs	r3, r1
 800acd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68da      	ldr	r2, [r3, #12]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4ab7      	ldr	r2, [pc, #732]	; (800afd4 <UART_SetConfig+0x344>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d004      	beq.n	800ad06 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad02:	4313      	orrs	r3, r2
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	4bb2      	ldr	r3, [pc, #712]	; (800afd8 <UART_SetConfig+0x348>)
 800ad0e:	4013      	ands	r3, r2
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	6812      	ldr	r2, [r2, #0]
 800ad14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad16:	430b      	orrs	r3, r1
 800ad18:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	f023 010f 	bic.w	r1, r3, #15
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4aa9      	ldr	r2, [pc, #676]	; (800afdc <UART_SetConfig+0x34c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d177      	bne.n	800ae2a <UART_SetConfig+0x19a>
 800ad3a:	4ba9      	ldr	r3, [pc, #676]	; (800afe0 <UART_SetConfig+0x350>)
 800ad3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad42:	2b28      	cmp	r3, #40	; 0x28
 800ad44:	d86c      	bhi.n	800ae20 <UART_SetConfig+0x190>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <UART_SetConfig+0xbc>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800adf1 	.word	0x0800adf1
 800ad50:	0800ae21 	.word	0x0800ae21
 800ad54:	0800ae21 	.word	0x0800ae21
 800ad58:	0800ae21 	.word	0x0800ae21
 800ad5c:	0800ae21 	.word	0x0800ae21
 800ad60:	0800ae21 	.word	0x0800ae21
 800ad64:	0800ae21 	.word	0x0800ae21
 800ad68:	0800ae21 	.word	0x0800ae21
 800ad6c:	0800adf9 	.word	0x0800adf9
 800ad70:	0800ae21 	.word	0x0800ae21
 800ad74:	0800ae21 	.word	0x0800ae21
 800ad78:	0800ae21 	.word	0x0800ae21
 800ad7c:	0800ae21 	.word	0x0800ae21
 800ad80:	0800ae21 	.word	0x0800ae21
 800ad84:	0800ae21 	.word	0x0800ae21
 800ad88:	0800ae21 	.word	0x0800ae21
 800ad8c:	0800ae01 	.word	0x0800ae01
 800ad90:	0800ae21 	.word	0x0800ae21
 800ad94:	0800ae21 	.word	0x0800ae21
 800ad98:	0800ae21 	.word	0x0800ae21
 800ad9c:	0800ae21 	.word	0x0800ae21
 800ada0:	0800ae21 	.word	0x0800ae21
 800ada4:	0800ae21 	.word	0x0800ae21
 800ada8:	0800ae21 	.word	0x0800ae21
 800adac:	0800ae09 	.word	0x0800ae09
 800adb0:	0800ae21 	.word	0x0800ae21
 800adb4:	0800ae21 	.word	0x0800ae21
 800adb8:	0800ae21 	.word	0x0800ae21
 800adbc:	0800ae21 	.word	0x0800ae21
 800adc0:	0800ae21 	.word	0x0800ae21
 800adc4:	0800ae21 	.word	0x0800ae21
 800adc8:	0800ae21 	.word	0x0800ae21
 800adcc:	0800ae11 	.word	0x0800ae11
 800add0:	0800ae21 	.word	0x0800ae21
 800add4:	0800ae21 	.word	0x0800ae21
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae21 	.word	0x0800ae21
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae21 	.word	0x0800ae21
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae19 	.word	0x0800ae19
 800adf0:	2301      	movs	r3, #1
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e233      	b.n	800b260 <UART_SetConfig+0x5d0>
 800adf8:	2304      	movs	r3, #4
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e22f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae00:	2308      	movs	r3, #8
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e22b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	e227      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae10:	2320      	movs	r3, #32
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae16:	e223      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1e:	e21f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae20:	2380      	movs	r3, #128	; 0x80
 800ae22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae26:	bf00      	nop
 800ae28:	e21a      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a6d      	ldr	r2, [pc, #436]	; (800afe4 <UART_SetConfig+0x354>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d132      	bne.n	800ae9a <UART_SetConfig+0x20a>
 800ae34:	4b6a      	ldr	r3, [pc, #424]	; (800afe0 <UART_SetConfig+0x350>)
 800ae36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	2b05      	cmp	r3, #5
 800ae3e:	d827      	bhi.n	800ae90 <UART_SetConfig+0x200>
 800ae40:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <UART_SetConfig+0x1b8>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae69 	.word	0x0800ae69
 800ae50:	0800ae71 	.word	0x0800ae71
 800ae54:	0800ae79 	.word	0x0800ae79
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae89 	.word	0x0800ae89
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e1fb      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae68:	2304      	movs	r3, #4
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e1f7      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae70:	2308      	movs	r3, #8
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e1f3      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae78:	2310      	movs	r3, #16
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e1ef      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae80:	2320      	movs	r3, #32
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e1eb      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae88:	2340      	movs	r3, #64	; 0x40
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8e:	e1e7      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae90:	2380      	movs	r3, #128	; 0x80
 800ae92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae96:	bf00      	nop
 800ae98:	e1e2      	b.n	800b260 <UART_SetConfig+0x5d0>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a52      	ldr	r2, [pc, #328]	; (800afe8 <UART_SetConfig+0x358>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d132      	bne.n	800af0a <UART_SetConfig+0x27a>
 800aea4:	4b4e      	ldr	r3, [pc, #312]	; (800afe0 <UART_SetConfig+0x350>)
 800aea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	2b05      	cmp	r3, #5
 800aeae:	d827      	bhi.n	800af00 <UART_SetConfig+0x270>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <UART_SetConfig+0x228>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aed1 	.word	0x0800aed1
 800aebc:	0800aed9 	.word	0x0800aed9
 800aec0:	0800aee1 	.word	0x0800aee1
 800aec4:	0800aee9 	.word	0x0800aee9
 800aec8:	0800aef1 	.word	0x0800aef1
 800aecc:	0800aef9 	.word	0x0800aef9
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e1c3      	b.n	800b260 <UART_SetConfig+0x5d0>
 800aed8:	2304      	movs	r3, #4
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e1bf      	b.n	800b260 <UART_SetConfig+0x5d0>
 800aee0:	2308      	movs	r3, #8
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e1bb      	b.n	800b260 <UART_SetConfig+0x5d0>
 800aee8:	2310      	movs	r3, #16
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e1b7      	b.n	800b260 <UART_SetConfig+0x5d0>
 800aef0:	2320      	movs	r3, #32
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e1b3      	b.n	800b260 <UART_SetConfig+0x5d0>
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e1af      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af00:	2380      	movs	r3, #128	; 0x80
 800af02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af06:	bf00      	nop
 800af08:	e1aa      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a37      	ldr	r2, [pc, #220]	; (800afec <UART_SetConfig+0x35c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d132      	bne.n	800af7a <UART_SetConfig+0x2ea>
 800af14:	4b32      	ldr	r3, [pc, #200]	; (800afe0 <UART_SetConfig+0x350>)
 800af16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	2b05      	cmp	r3, #5
 800af1e:	d827      	bhi.n	800af70 <UART_SetConfig+0x2e0>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <UART_SetConfig+0x298>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800af49 	.word	0x0800af49
 800af30:	0800af51 	.word	0x0800af51
 800af34:	0800af59 	.word	0x0800af59
 800af38:	0800af61 	.word	0x0800af61
 800af3c:	0800af69 	.word	0x0800af69
 800af40:	2300      	movs	r3, #0
 800af42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af46:	e18b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af48:	2304      	movs	r3, #4
 800af4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4e:	e187      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af50:	2308      	movs	r3, #8
 800af52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af56:	e183      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af58:	2310      	movs	r3, #16
 800af5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5e:	e17f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af60:	2320      	movs	r3, #32
 800af62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af66:	e17b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af68:	2340      	movs	r3, #64	; 0x40
 800af6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6e:	e177      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af70:	2380      	movs	r3, #128	; 0x80
 800af72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af76:	bf00      	nop
 800af78:	e172      	b.n	800b260 <UART_SetConfig+0x5d0>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <UART_SetConfig+0x360>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d144      	bne.n	800b00e <UART_SetConfig+0x37e>
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <UART_SetConfig+0x350>)
 800af86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	2b05      	cmp	r3, #5
 800af8e:	d839      	bhi.n	800b004 <UART_SetConfig+0x374>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <UART_SetConfig+0x308>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afb1 	.word	0x0800afb1
 800af9c:	0800afb9 	.word	0x0800afb9
 800afa0:	0800afc1 	.word	0x0800afc1
 800afa4:	0800afc9 	.word	0x0800afc9
 800afa8:	0800aff5 	.word	0x0800aff5
 800afac:	0800affd 	.word	0x0800affd
 800afb0:	2300      	movs	r3, #0
 800afb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afb6:	e153      	b.n	800b260 <UART_SetConfig+0x5d0>
 800afb8:	2304      	movs	r3, #4
 800afba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afbe:	e14f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800afc0:	2308      	movs	r3, #8
 800afc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc6:	e14b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800afc8:	2310      	movs	r3, #16
 800afca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afce:	e147      	b.n	800b260 <UART_SetConfig+0x5d0>
 800afd0:	cfff69f3 	.word	0xcfff69f3
 800afd4:	58000c00 	.word	0x58000c00
 800afd8:	11fff4ff 	.word	0x11fff4ff
 800afdc:	40011000 	.word	0x40011000
 800afe0:	58024400 	.word	0x58024400
 800afe4:	40004400 	.word	0x40004400
 800afe8:	40004800 	.word	0x40004800
 800afec:	40004c00 	.word	0x40004c00
 800aff0:	40005000 	.word	0x40005000
 800aff4:	2320      	movs	r3, #32
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affa:	e131      	b.n	800b260 <UART_SetConfig+0x5d0>
 800affc:	2340      	movs	r3, #64	; 0x40
 800affe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b002:	e12d      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00a:	bf00      	nop
 800b00c:	e128      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4ab6      	ldr	r2, [pc, #728]	; (800b2ec <UART_SetConfig+0x65c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d178      	bne.n	800b10a <UART_SetConfig+0x47a>
 800b018:	4bb5      	ldr	r3, [pc, #724]	; (800b2f0 <UART_SetConfig+0x660>)
 800b01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b020:	2b28      	cmp	r3, #40	; 0x28
 800b022:	d86d      	bhi.n	800b100 <UART_SetConfig+0x470>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x39c>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b0d1 	.word	0x0800b0d1
 800b030:	0800b101 	.word	0x0800b101
 800b034:	0800b101 	.word	0x0800b101
 800b038:	0800b101 	.word	0x0800b101
 800b03c:	0800b101 	.word	0x0800b101
 800b040:	0800b101 	.word	0x0800b101
 800b044:	0800b101 	.word	0x0800b101
 800b048:	0800b101 	.word	0x0800b101
 800b04c:	0800b0d9 	.word	0x0800b0d9
 800b050:	0800b101 	.word	0x0800b101
 800b054:	0800b101 	.word	0x0800b101
 800b058:	0800b101 	.word	0x0800b101
 800b05c:	0800b101 	.word	0x0800b101
 800b060:	0800b101 	.word	0x0800b101
 800b064:	0800b101 	.word	0x0800b101
 800b068:	0800b101 	.word	0x0800b101
 800b06c:	0800b0e1 	.word	0x0800b0e1
 800b070:	0800b101 	.word	0x0800b101
 800b074:	0800b101 	.word	0x0800b101
 800b078:	0800b101 	.word	0x0800b101
 800b07c:	0800b101 	.word	0x0800b101
 800b080:	0800b101 	.word	0x0800b101
 800b084:	0800b101 	.word	0x0800b101
 800b088:	0800b101 	.word	0x0800b101
 800b08c:	0800b0e9 	.word	0x0800b0e9
 800b090:	0800b101 	.word	0x0800b101
 800b094:	0800b101 	.word	0x0800b101
 800b098:	0800b101 	.word	0x0800b101
 800b09c:	0800b101 	.word	0x0800b101
 800b0a0:	0800b101 	.word	0x0800b101
 800b0a4:	0800b101 	.word	0x0800b101
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b0f1 	.word	0x0800b0f1
 800b0b0:	0800b101 	.word	0x0800b101
 800b0b4:	0800b101 	.word	0x0800b101
 800b0b8:	0800b101 	.word	0x0800b101
 800b0bc:	0800b101 	.word	0x0800b101
 800b0c0:	0800b101 	.word	0x0800b101
 800b0c4:	0800b101 	.word	0x0800b101
 800b0c8:	0800b101 	.word	0x0800b101
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e0c3      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e0bf      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e0bb      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ee:	e0b7      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f6:	e0b3      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fe:	e0af      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b106:	bf00      	nop
 800b108:	e0aa      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a79      	ldr	r2, [pc, #484]	; (800b2f4 <UART_SetConfig+0x664>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d132      	bne.n	800b17a <UART_SetConfig+0x4ea>
 800b114:	4b76      	ldr	r3, [pc, #472]	; (800b2f0 <UART_SetConfig+0x660>)
 800b116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b118:	f003 0307 	and.w	r3, r3, #7
 800b11c:	2b05      	cmp	r3, #5
 800b11e:	d827      	bhi.n	800b170 <UART_SetConfig+0x4e0>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <UART_SetConfig+0x498>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b141 	.word	0x0800b141
 800b12c:	0800b149 	.word	0x0800b149
 800b130:	0800b151 	.word	0x0800b151
 800b134:	0800b159 	.word	0x0800b159
 800b138:	0800b161 	.word	0x0800b161
 800b13c:	0800b169 	.word	0x0800b169
 800b140:	2300      	movs	r3, #0
 800b142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b146:	e08b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b148:	2304      	movs	r3, #4
 800b14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14e:	e087      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b150:	2308      	movs	r3, #8
 800b152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b156:	e083      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b158:	2310      	movs	r3, #16
 800b15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15e:	e07f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b160:	2320      	movs	r3, #32
 800b162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b166:	e07b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e077      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	bf00      	nop
 800b178:	e072      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a5e      	ldr	r2, [pc, #376]	; (800b2f8 <UART_SetConfig+0x668>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d132      	bne.n	800b1ea <UART_SetConfig+0x55a>
 800b184:	4b5a      	ldr	r3, [pc, #360]	; (800b2f0 <UART_SetConfig+0x660>)
 800b186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b188:	f003 0307 	and.w	r3, r3, #7
 800b18c:	2b05      	cmp	r3, #5
 800b18e:	d827      	bhi.n	800b1e0 <UART_SetConfig+0x550>
 800b190:	a201      	add	r2, pc, #4	; (adr r2, 800b198 <UART_SetConfig+0x508>)
 800b192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b196:	bf00      	nop
 800b198:	0800b1b1 	.word	0x0800b1b1
 800b19c:	0800b1b9 	.word	0x0800b1b9
 800b1a0:	0800b1c1 	.word	0x0800b1c1
 800b1a4:	0800b1c9 	.word	0x0800b1c9
 800b1a8:	0800b1d1 	.word	0x0800b1d1
 800b1ac:	0800b1d9 	.word	0x0800b1d9
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b6:	e053      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1b8:	2304      	movs	r3, #4
 800b1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1be:	e04f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1c0:	2308      	movs	r3, #8
 800b1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c6:	e04b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ce:	e047      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1d0:	2320      	movs	r3, #32
 800b1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d6:	e043      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1d8:	2340      	movs	r3, #64	; 0x40
 800b1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1de:	e03f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1e0:	2380      	movs	r3, #128	; 0x80
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	bf00      	nop
 800b1e8:	e03a      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a43      	ldr	r2, [pc, #268]	; (800b2fc <UART_SetConfig+0x66c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d132      	bne.n	800b25a <UART_SetConfig+0x5ca>
 800b1f4:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <UART_SetConfig+0x660>)
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	2b05      	cmp	r3, #5
 800b1fe:	d827      	bhi.n	800b250 <UART_SetConfig+0x5c0>
 800b200:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <UART_SetConfig+0x578>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b221 	.word	0x0800b221
 800b20c:	0800b229 	.word	0x0800b229
 800b210:	0800b231 	.word	0x0800b231
 800b214:	0800b239 	.word	0x0800b239
 800b218:	0800b241 	.word	0x0800b241
 800b21c:	0800b249 	.word	0x0800b249
 800b220:	2302      	movs	r3, #2
 800b222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b226:	e01b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b228:	2304      	movs	r3, #4
 800b22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22e:	e017      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b230:	2308      	movs	r3, #8
 800b232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b236:	e013      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b238:	2310      	movs	r3, #16
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e00f      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b240:	2320      	movs	r3, #32
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e00b      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e007      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b250:	2380      	movs	r3, #128	; 0x80
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	bf00      	nop
 800b258:	e002      	b.n	800b260 <UART_SetConfig+0x5d0>
 800b25a:	2380      	movs	r3, #128	; 0x80
 800b25c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a25      	ldr	r2, [pc, #148]	; (800b2fc <UART_SetConfig+0x66c>)
 800b266:	4293      	cmp	r3, r2
 800b268:	f040 80b8 	bne.w	800b3dc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b26c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b270:	2b08      	cmp	r3, #8
 800b272:	d019      	beq.n	800b2a8 <UART_SetConfig+0x618>
 800b274:	2b08      	cmp	r3, #8
 800b276:	dc04      	bgt.n	800b282 <UART_SetConfig+0x5f2>
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d009      	beq.n	800b290 <UART_SetConfig+0x600>
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d00b      	beq.n	800b298 <UART_SetConfig+0x608>
 800b280:	e042      	b.n	800b308 <UART_SetConfig+0x678>
 800b282:	2b20      	cmp	r3, #32
 800b284:	d02b      	beq.n	800b2de <UART_SetConfig+0x64e>
 800b286:	2b40      	cmp	r3, #64	; 0x40
 800b288:	d02c      	beq.n	800b2e4 <UART_SetConfig+0x654>
 800b28a:	2b10      	cmp	r3, #16
 800b28c:	d014      	beq.n	800b2b8 <UART_SetConfig+0x628>
 800b28e:	e03b      	b.n	800b308 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b290:	f7fe f922 	bl	80094d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b294:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b296:	e03d      	b.n	800b314 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b298:	f107 0314 	add.w	r3, r7, #20
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe f931 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2a6:	e035      	b.n	800b314 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2a8:	f107 0308 	add.w	r3, r7, #8
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe fa75 	bl	800979c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2b6:	e02d      	b.n	800b314 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b8:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <UART_SetConfig+0x660>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2c4:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <UART_SetConfig+0x660>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	08db      	lsrs	r3, r3, #3
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	4a0c      	ldr	r2, [pc, #48]	; (800b300 <UART_SetConfig+0x670>)
 800b2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2d6:	e01d      	b.n	800b314 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b2d8:	4b09      	ldr	r3, [pc, #36]	; (800b300 <UART_SetConfig+0x670>)
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2dc:	e01a      	b.n	800b314 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <UART_SetConfig+0x674>)
 800b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2e2:	e017      	b.n	800b314 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2ea:	e013      	b.n	800b314 <UART_SetConfig+0x684>
 800b2ec:	40011400 	.word	0x40011400
 800b2f0:	58024400 	.word	0x58024400
 800b2f4:	40007800 	.word	0x40007800
 800b2f8:	40007c00 	.word	0x40007c00
 800b2fc:	58000c00 	.word	0x58000c00
 800b300:	03d09000 	.word	0x03d09000
 800b304:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b312:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 824d 	beq.w	800b7b6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	4aad      	ldr	r2, [pc, #692]	; (800b5d8 <UART_SetConfig+0x948>)
 800b322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b326:	461a      	mov	r2, r3
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b32e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	4613      	mov	r3, r2
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	4413      	add	r3, r2
 800b33a:	6a3a      	ldr	r2, [r7, #32]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d305      	bcc.n	800b34c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b346:	6a3a      	ldr	r2, [r7, #32]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d903      	bls.n	800b354 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b352:	e230      	b.n	800b7b6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b356:	4618      	mov	r0, r3
 800b358:	f04f 0100 	mov.w	r1, #0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	4a9d      	ldr	r2, [pc, #628]	; (800b5d8 <UART_SetConfig+0x948>)
 800b362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b366:	b29b      	uxth	r3, r3
 800b368:	f04f 0400 	mov.w	r4, #0
 800b36c:	461a      	mov	r2, r3
 800b36e:	4623      	mov	r3, r4
 800b370:	f7f5 f806 	bl	8000380 <__aeabi_uldivmod>
 800b374:	4603      	mov	r3, r0
 800b376:	460c      	mov	r4, r1
 800b378:	4619      	mov	r1, r3
 800b37a:	4622      	mov	r2, r4
 800b37c:	f04f 0300 	mov.w	r3, #0
 800b380:	f04f 0400 	mov.w	r4, #0
 800b384:	0214      	lsls	r4, r2, #8
 800b386:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b38a:	020b      	lsls	r3, r1, #8
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	6852      	ldr	r2, [r2, #4]
 800b390:	0852      	lsrs	r2, r2, #1
 800b392:	4611      	mov	r1, r2
 800b394:	f04f 0200 	mov.w	r2, #0
 800b398:	eb13 0b01 	adds.w	fp, r3, r1
 800b39c:	eb44 0c02 	adc.w	ip, r4, r2
 800b3a0:	4658      	mov	r0, fp
 800b3a2:	4661      	mov	r1, ip
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f04f 0400 	mov.w	r4, #0
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	f7f4 ffe6 	bl	8000380 <__aeabi_uldivmod>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3c0:	d308      	bcc.n	800b3d4 <UART_SetConfig+0x744>
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c8:	d204      	bcs.n	800b3d4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	e1f0      	b.n	800b7b6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b3da:	e1ec      	b.n	800b7b6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3e4:	f040 8100 	bne.w	800b5e8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b3e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	f200 80b7 	bhi.w	800b560 <UART_SetConfig+0x8d0>
 800b3f2:	a201      	add	r2, pc, #4	; (adr r2, 800b3f8 <UART_SetConfig+0x768>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b4fd 	.word	0x0800b4fd
 800b3fc:	0800b505 	.word	0x0800b505
 800b400:	0800b561 	.word	0x0800b561
 800b404:	0800b561 	.word	0x0800b561
 800b408:	0800b50d 	.word	0x0800b50d
 800b40c:	0800b561 	.word	0x0800b561
 800b410:	0800b561 	.word	0x0800b561
 800b414:	0800b561 	.word	0x0800b561
 800b418:	0800b51d 	.word	0x0800b51d
 800b41c:	0800b561 	.word	0x0800b561
 800b420:	0800b561 	.word	0x0800b561
 800b424:	0800b561 	.word	0x0800b561
 800b428:	0800b561 	.word	0x0800b561
 800b42c:	0800b561 	.word	0x0800b561
 800b430:	0800b561 	.word	0x0800b561
 800b434:	0800b561 	.word	0x0800b561
 800b438:	0800b52d 	.word	0x0800b52d
 800b43c:	0800b561 	.word	0x0800b561
 800b440:	0800b561 	.word	0x0800b561
 800b444:	0800b561 	.word	0x0800b561
 800b448:	0800b561 	.word	0x0800b561
 800b44c:	0800b561 	.word	0x0800b561
 800b450:	0800b561 	.word	0x0800b561
 800b454:	0800b561 	.word	0x0800b561
 800b458:	0800b561 	.word	0x0800b561
 800b45c:	0800b561 	.word	0x0800b561
 800b460:	0800b561 	.word	0x0800b561
 800b464:	0800b561 	.word	0x0800b561
 800b468:	0800b561 	.word	0x0800b561
 800b46c:	0800b561 	.word	0x0800b561
 800b470:	0800b561 	.word	0x0800b561
 800b474:	0800b561 	.word	0x0800b561
 800b478:	0800b553 	.word	0x0800b553
 800b47c:	0800b561 	.word	0x0800b561
 800b480:	0800b561 	.word	0x0800b561
 800b484:	0800b561 	.word	0x0800b561
 800b488:	0800b561 	.word	0x0800b561
 800b48c:	0800b561 	.word	0x0800b561
 800b490:	0800b561 	.word	0x0800b561
 800b494:	0800b561 	.word	0x0800b561
 800b498:	0800b561 	.word	0x0800b561
 800b49c:	0800b561 	.word	0x0800b561
 800b4a0:	0800b561 	.word	0x0800b561
 800b4a4:	0800b561 	.word	0x0800b561
 800b4a8:	0800b561 	.word	0x0800b561
 800b4ac:	0800b561 	.word	0x0800b561
 800b4b0:	0800b561 	.word	0x0800b561
 800b4b4:	0800b561 	.word	0x0800b561
 800b4b8:	0800b561 	.word	0x0800b561
 800b4bc:	0800b561 	.word	0x0800b561
 800b4c0:	0800b561 	.word	0x0800b561
 800b4c4:	0800b561 	.word	0x0800b561
 800b4c8:	0800b561 	.word	0x0800b561
 800b4cc:	0800b561 	.word	0x0800b561
 800b4d0:	0800b561 	.word	0x0800b561
 800b4d4:	0800b561 	.word	0x0800b561
 800b4d8:	0800b561 	.word	0x0800b561
 800b4dc:	0800b561 	.word	0x0800b561
 800b4e0:	0800b561 	.word	0x0800b561
 800b4e4:	0800b561 	.word	0x0800b561
 800b4e8:	0800b561 	.word	0x0800b561
 800b4ec:	0800b561 	.word	0x0800b561
 800b4f0:	0800b561 	.word	0x0800b561
 800b4f4:	0800b561 	.word	0x0800b561
 800b4f8:	0800b559 	.word	0x0800b559
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4fc:	f7fd f890 	bl	8008620 <HAL_RCC_GetPCLK1Freq>
 800b500:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b502:	e033      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b504:	f7fd f8a2 	bl	800864c <HAL_RCC_GetPCLK2Freq>
 800b508:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b50a:	e02f      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b50c:	f107 0314 	add.w	r3, r7, #20
 800b510:	4618      	mov	r0, r3
 800b512:	f7fd fff7 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b51a:	e027      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b51c:	f107 0308 	add.w	r3, r7, #8
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe f93b 	bl	800979c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b52a:	e01f      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b52c:	4b2b      	ldr	r3, [pc, #172]	; (800b5dc <UART_SetConfig+0x94c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0320 	and.w	r3, r3, #32
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b538:	4b28      	ldr	r3, [pc, #160]	; (800b5dc <UART_SetConfig+0x94c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	08db      	lsrs	r3, r3, #3
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	4a27      	ldr	r2, [pc, #156]	; (800b5e0 <UART_SetConfig+0x950>)
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b54a:	e00f      	b.n	800b56c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b54c:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <UART_SetConfig+0x950>)
 800b54e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b550:	e00c      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b552:	4b24      	ldr	r3, [pc, #144]	; (800b5e4 <UART_SetConfig+0x954>)
 800b554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b556:	e009      	b.n	800b56c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b55e:	e005      	b.n	800b56c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b56a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 8121 	beq.w	800b7b6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <UART_SetConfig+0x948>)
 800b57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b57e:	461a      	mov	r2, r3
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	fbb3 f3f2 	udiv	r3, r3, r2
 800b586:	005a      	lsls	r2, r3, #1
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	085b      	lsrs	r3, r3, #1
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	fbb2 f3f3 	udiv	r3, r2, r3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	d916      	bls.n	800b5d0 <UART_SetConfig+0x940>
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a8:	d212      	bcs.n	800b5d0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	f023 030f 	bic.w	r3, r3, #15
 800b5b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	085b      	lsrs	r3, r3, #1
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	f003 0307 	and.w	r3, r3, #7
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b5cc:	60da      	str	r2, [r3, #12]
 800b5ce:	e0f2      	b.n	800b7b6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5d6:	e0ee      	b.n	800b7b6 <UART_SetConfig+0xb26>
 800b5d8:	08020a9c 	.word	0x08020a9c
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	03d09000 	.word	0x03d09000
 800b5e4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5ec:	2b40      	cmp	r3, #64	; 0x40
 800b5ee:	f200 80b7 	bhi.w	800b760 <UART_SetConfig+0xad0>
 800b5f2:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <UART_SetConfig+0x968>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b6fd 	.word	0x0800b6fd
 800b5fc:	0800b705 	.word	0x0800b705
 800b600:	0800b761 	.word	0x0800b761
 800b604:	0800b761 	.word	0x0800b761
 800b608:	0800b70d 	.word	0x0800b70d
 800b60c:	0800b761 	.word	0x0800b761
 800b610:	0800b761 	.word	0x0800b761
 800b614:	0800b761 	.word	0x0800b761
 800b618:	0800b71d 	.word	0x0800b71d
 800b61c:	0800b761 	.word	0x0800b761
 800b620:	0800b761 	.word	0x0800b761
 800b624:	0800b761 	.word	0x0800b761
 800b628:	0800b761 	.word	0x0800b761
 800b62c:	0800b761 	.word	0x0800b761
 800b630:	0800b761 	.word	0x0800b761
 800b634:	0800b761 	.word	0x0800b761
 800b638:	0800b72d 	.word	0x0800b72d
 800b63c:	0800b761 	.word	0x0800b761
 800b640:	0800b761 	.word	0x0800b761
 800b644:	0800b761 	.word	0x0800b761
 800b648:	0800b761 	.word	0x0800b761
 800b64c:	0800b761 	.word	0x0800b761
 800b650:	0800b761 	.word	0x0800b761
 800b654:	0800b761 	.word	0x0800b761
 800b658:	0800b761 	.word	0x0800b761
 800b65c:	0800b761 	.word	0x0800b761
 800b660:	0800b761 	.word	0x0800b761
 800b664:	0800b761 	.word	0x0800b761
 800b668:	0800b761 	.word	0x0800b761
 800b66c:	0800b761 	.word	0x0800b761
 800b670:	0800b761 	.word	0x0800b761
 800b674:	0800b761 	.word	0x0800b761
 800b678:	0800b753 	.word	0x0800b753
 800b67c:	0800b761 	.word	0x0800b761
 800b680:	0800b761 	.word	0x0800b761
 800b684:	0800b761 	.word	0x0800b761
 800b688:	0800b761 	.word	0x0800b761
 800b68c:	0800b761 	.word	0x0800b761
 800b690:	0800b761 	.word	0x0800b761
 800b694:	0800b761 	.word	0x0800b761
 800b698:	0800b761 	.word	0x0800b761
 800b69c:	0800b761 	.word	0x0800b761
 800b6a0:	0800b761 	.word	0x0800b761
 800b6a4:	0800b761 	.word	0x0800b761
 800b6a8:	0800b761 	.word	0x0800b761
 800b6ac:	0800b761 	.word	0x0800b761
 800b6b0:	0800b761 	.word	0x0800b761
 800b6b4:	0800b761 	.word	0x0800b761
 800b6b8:	0800b761 	.word	0x0800b761
 800b6bc:	0800b761 	.word	0x0800b761
 800b6c0:	0800b761 	.word	0x0800b761
 800b6c4:	0800b761 	.word	0x0800b761
 800b6c8:	0800b761 	.word	0x0800b761
 800b6cc:	0800b761 	.word	0x0800b761
 800b6d0:	0800b761 	.word	0x0800b761
 800b6d4:	0800b761 	.word	0x0800b761
 800b6d8:	0800b761 	.word	0x0800b761
 800b6dc:	0800b761 	.word	0x0800b761
 800b6e0:	0800b761 	.word	0x0800b761
 800b6e4:	0800b761 	.word	0x0800b761
 800b6e8:	0800b761 	.word	0x0800b761
 800b6ec:	0800b761 	.word	0x0800b761
 800b6f0:	0800b761 	.word	0x0800b761
 800b6f4:	0800b761 	.word	0x0800b761
 800b6f8:	0800b759 	.word	0x0800b759
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6fc:	f7fc ff90 	bl	8008620 <HAL_RCC_GetPCLK1Freq>
 800b700:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b702:	e033      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b704:	f7fc ffa2 	bl	800864c <HAL_RCC_GetPCLK2Freq>
 800b708:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b70a:	e02f      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b70c:	f107 0314 	add.w	r3, r7, #20
 800b710:	4618      	mov	r0, r3
 800b712:	f7fd fef7 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b71a:	e027      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe f83b 	bl	800979c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b72a:	e01f      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b72c:	4b2c      	ldr	r3, [pc, #176]	; (800b7e0 <UART_SetConfig+0xb50>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0320 	and.w	r3, r3, #32
 800b734:	2b00      	cmp	r3, #0
 800b736:	d009      	beq.n	800b74c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b738:	4b29      	ldr	r3, [pc, #164]	; (800b7e0 <UART_SetConfig+0xb50>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	08db      	lsrs	r3, r3, #3
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	4a28      	ldr	r2, [pc, #160]	; (800b7e4 <UART_SetConfig+0xb54>)
 800b744:	fa22 f303 	lsr.w	r3, r2, r3
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b74a:	e00f      	b.n	800b76c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b74c:	4b25      	ldr	r3, [pc, #148]	; (800b7e4 <UART_SetConfig+0xb54>)
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b750:	e00c      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b752:	4b25      	ldr	r3, [pc, #148]	; (800b7e8 <UART_SetConfig+0xb58>)
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b756:	e009      	b.n	800b76c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b75e:	e005      	b.n	800b76c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b76a:	bf00      	nop
    }

    if (pclk != 0U)
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d021      	beq.n	800b7b6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	4a1d      	ldr	r2, [pc, #116]	; (800b7ec <UART_SetConfig+0xb5c>)
 800b778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b77c:	461a      	mov	r2, r3
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	fbb3 f2f2 	udiv	r2, r3, r2
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	085b      	lsrs	r3, r3, #1
 800b78a:	441a      	add	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	fbb2 f3f3 	udiv	r3, r2, r3
 800b794:	b29b      	uxth	r3, r3
 800b796:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	2b0f      	cmp	r3, #15
 800b79c:	d908      	bls.n	800b7b0 <UART_SetConfig+0xb20>
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a4:	d204      	bcs.n	800b7b0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ac:	60da      	str	r2, [r3, #12]
 800b7ae:	e002      	b.n	800b7b6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b7d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3738      	adds	r7, #56	; 0x38
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	03d09000 	.word	0x03d09000
 800b7e8:	003d0900 	.word	0x003d0900
 800b7ec:	08020a9c 	.word	0x08020a9c

0800b7f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b862:	f003 0308 	and.w	r3, r3, #8
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00a      	beq.n	800b8a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a6:	f003 0320 	and.w	r3, r3, #32
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01a      	beq.n	800b906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ee:	d10a      	bne.n	800b906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  }
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af02      	add	r7, sp, #8
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b944:	f7f7 fa66 	bl	8002e14 <HAL_GetTick>
 800b948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	2b08      	cmp	r3, #8
 800b956:	d10e      	bne.n	800b976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f82c 	bl	800b9c4 <UART_WaitOnFlagUntilTimeout>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e022      	b.n	800b9bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b04      	cmp	r3, #4
 800b982:	d10e      	bne.n	800b9a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f816 	bl	800b9c4 <UART_WaitOnFlagUntilTimeout>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e00c      	b.n	800b9bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9d4:	e062      	b.n	800ba9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9dc:	d05e      	beq.n	800ba9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9de:	f7f7 fa19 	bl	8002e14 <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d11d      	bne.n	800ba30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689a      	ldr	r2, [r3, #8]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0201 	bic.w	r2, r2, #1
 800ba12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2220      	movs	r2, #32
 800ba20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e045      	b.n	800babc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0304 	and.w	r3, r3, #4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d02e      	beq.n	800ba9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba4c:	d126      	bne.n	800ba9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689a      	ldr	r2, [r3, #8]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f022 0201 	bic.w	r2, r2, #1
 800ba76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ba98:	2303      	movs	r3, #3
 800ba9a:	e00f      	b.n	800babc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69da      	ldr	r2, [r3, #28]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	4013      	ands	r3, r2
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	bf0c      	ite	eq
 800baac:	2301      	moveq	r3, #1
 800baae:	2300      	movne	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d08d      	beq.n	800b9d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <HAL_UARTEx_DisableFifoMode+0x16>
 800bad6:	2302      	movs	r3, #2
 800bad8:	e027      	b.n	800bb2a <HAL_UARTEx_DisableFifoMode+0x66>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2224      	movs	r2, #36	; 0x24
 800bae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d101      	bne.n	800bb4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	e02d      	b.n	800bbaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2224      	movs	r2, #36	; 0x24
 800bb5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0201 	bic.w	r2, r2, #1
 800bb74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f850 	bl	800bc30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d101      	bne.n	800bbca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	e02d      	b.n	800bc26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2224      	movs	r2, #36	; 0x24
 800bbd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0201 	bic.w	r2, r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f812 	bl	800bc30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b089      	sub	sp, #36	; 0x24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bc38:	4a2f      	ldr	r2, [pc, #188]	; (800bcf8 <UARTEx_SetNbDataToProcess+0xc8>)
 800bc3a:	f107 0314 	add.w	r3, r7, #20
 800bc3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bc46:	4a2d      	ldr	r2, [pc, #180]	; (800bcfc <UARTEx_SetNbDataToProcess+0xcc>)
 800bc48:	f107 030c 	add.w	r3, r7, #12
 800bc4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d108      	bne.n	800bc6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc6c:	e03d      	b.n	800bcea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc6e:	2310      	movs	r3, #16
 800bc70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc72:	2310      	movs	r3, #16
 800bc74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	0e5b      	lsrs	r3, r3, #25
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	f003 0307 	and.w	r3, r3, #7
 800bc84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	0f5b      	lsrs	r3, r3, #29
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc96:	7fbb      	ldrb	r3, [r7, #30]
 800bc98:	7f3a      	ldrb	r2, [r7, #28]
 800bc9a:	f107 0120 	add.w	r1, r7, #32
 800bc9e:	440a      	add	r2, r1
 800bca0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bca4:	fb02 f303 	mul.w	r3, r2, r3
 800bca8:	7f3a      	ldrb	r2, [r7, #28]
 800bcaa:	f107 0120 	add.w	r1, r7, #32
 800bcae:	440a      	add	r2, r1
 800bcb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bcb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bcc0:	7ffb      	ldrb	r3, [r7, #31]
 800bcc2:	7f7a      	ldrb	r2, [r7, #29]
 800bcc4:	f107 0120 	add.w	r1, r7, #32
 800bcc8:	440a      	add	r2, r1
 800bcca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bcce:	fb02 f303 	mul.w	r3, r2, r3
 800bcd2:	7f7a      	ldrb	r2, [r7, #29]
 800bcd4:	f107 0120 	add.w	r1, r7, #32
 800bcd8:	440a      	add	r2, r1
 800bcda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bcde:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcea:	bf00      	nop
 800bcec:	3724      	adds	r7, #36	; 0x24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	0801d8ec 	.word	0x0801d8ec
 800bcfc:	0801d8f4 	.word	0x0801d8f4

0800bd00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bd06:	2100      	movs	r1, #0
 800bd08:	2000      	movs	r0, #0
 800bd0a:	f00f ffd5 	bl	801bcb8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bd0e:	4b23      	ldr	r3, [pc, #140]	; (800bd9c <MX_LWIP_Init+0x9c>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bd14:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <MX_LWIP_Init+0xa0>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bd1a:	4b22      	ldr	r3, [pc, #136]	; (800bda4 <MX_LWIP_Init+0xa4>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bd20:	4b21      	ldr	r3, [pc, #132]	; (800bda8 <MX_LWIP_Init+0xa8>)
 800bd22:	9302      	str	r3, [sp, #8]
 800bd24:	4b21      	ldr	r3, [pc, #132]	; (800bdac <MX_LWIP_Init+0xac>)
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <MX_LWIP_Init+0xa4>)
 800bd2e:	4a1c      	ldr	r2, [pc, #112]	; (800bda0 <MX_LWIP_Init+0xa0>)
 800bd30:	491a      	ldr	r1, [pc, #104]	; (800bd9c <MX_LWIP_Init+0x9c>)
 800bd32:	481f      	ldr	r0, [pc, #124]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd34:	f009 fb1e 	bl	8015374 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bd38:	481d      	ldr	r0, [pc, #116]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd3a:	f009 fcd5 	bl	80156e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bd3e:	4b1c      	ldr	r3, [pc, #112]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd44:	089b      	lsrs	r3, r3, #2
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bd50:	4817      	ldr	r0, [pc, #92]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd52:	f009 fcd9 	bl	8015708 <netif_set_up>
 800bd56:	e002      	b.n	800bd5e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bd58:	4815      	ldr	r0, [pc, #84]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd5a:	f009 fd41 	bl	80157e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bd5e:	4915      	ldr	r1, [pc, #84]	; (800bdb4 <MX_LWIP_Init+0xb4>)
 800bd60:	4813      	ldr	r0, [pc, #76]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd62:	f009 fdd7 	bl	8015914 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bd66:	2224      	movs	r2, #36	; 0x24
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4813      	ldr	r0, [pc, #76]	; (800bdb8 <MX_LWIP_Init+0xb8>)
 800bd6c:	f010 fe84 	bl	801ca78 <memset>
  attributes.name = "EthLink";
 800bd70:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <MX_LWIP_Init+0xb8>)
 800bd72:	4a12      	ldr	r2, [pc, #72]	; (800bdbc <MX_LWIP_Init+0xbc>)
 800bd74:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bd76:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <MX_LWIP_Init+0xb8>)
 800bd78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd7c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bd7e:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <MX_LWIP_Init+0xb8>)
 800bd80:	2210      	movs	r2, #16
 800bd82:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bd84:	4a0c      	ldr	r2, [pc, #48]	; (800bdb8 <MX_LWIP_Init+0xb8>)
 800bd86:	490a      	ldr	r1, [pc, #40]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd88:	480d      	ldr	r0, [pc, #52]	; (800bdc0 <MX_LWIP_Init+0xc0>)
 800bd8a:	f000 fd37 	bl	800c7fc <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bd8e:	4808      	ldr	r0, [pc, #32]	; (800bdb0 <MX_LWIP_Init+0xb0>)
 800bd90:	f004 feae 	bl	8010af0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20008454 	.word	0x20008454
 800bda0:	20008458 	.word	0x20008458
 800bda4:	2000845c 	.word	0x2000845c
 800bda8:	0801bbf5 	.word	0x0801bbf5
 800bdac:	0800c495 	.word	0x0800c495
 800bdb0:	2000841c 	.word	0x2000841c
 800bdb4:	0800bdc5 	.word	0x0800bdc5
 800bdb8:	200083f8 	.word	0x200083f8
 800bdbc:	0801d8fc 	.word	0x0801d8fc
 800bdc0:	0800c5bd 	.word	0x0800c5bd

0800bdc4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bdea:	2320      	movs	r3, #32
 800bdec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bdee:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800bdf2:	e00b      	b.n	800be0c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800bdf4:	4a0c      	ldr	r2, [pc, #48]	; (800be28 <SCB_InvalidateDCache_by_Addr+0x50>)
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4413      	add	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dcf0      	bgt.n	800bdf4 <SCB_InvalidateDCache_by_Addr+0x1c>
 800be12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800be16:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800be1a:	bf00      	nop
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000ed00 	.word	0xe000ed00

0800be2c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	; 0x38
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	605a      	str	r2, [r3, #4]
 800be3e:	609a      	str	r2, [r3, #8]
 800be40:	60da      	str	r2, [r3, #12]
 800be42:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a5d      	ldr	r2, [pc, #372]	; (800bfc0 <HAL_ETH_MspInit+0x194>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	f040 80b3 	bne.w	800bfb6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800be50:	4b5c      	ldr	r3, [pc, #368]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be56:	4a5b      	ldr	r2, [pc, #364]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800be60:	4b58      	ldr	r3, [pc, #352]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be6a:	623b      	str	r3, [r7, #32]
 800be6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800be6e:	4b55      	ldr	r3, [pc, #340]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be74:	4a53      	ldr	r2, [pc, #332]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800be7e:	4b51      	ldr	r3, [pc, #324]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be88:	61fb      	str	r3, [r7, #28]
 800be8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800be8c:	4b4d      	ldr	r3, [pc, #308]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be92:	4a4c      	ldr	r2, [pc, #304]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800be9c:	4b49      	ldr	r3, [pc, #292]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800be9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bea6:	61bb      	str	r3, [r7, #24]
 800bea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800beaa:	4b46      	ldr	r3, [pc, #280]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800beac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800beb0:	4a44      	ldr	r2, [pc, #272]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800beb2:	f043 0304 	orr.w	r3, r3, #4
 800beb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800beba:	4b42      	ldr	r3, [pc, #264]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bec0:	f003 0304 	and.w	r3, r3, #4
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bec8:	4b3e      	ldr	r3, [pc, #248]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800beca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bece:	4a3d      	ldr	r2, [pc, #244]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bed0:	f043 0301 	orr.w	r3, r3, #1
 800bed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bed8:	4b3a      	ldr	r3, [pc, #232]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800beda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bee6:	4b37      	ldr	r3, [pc, #220]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800beec:	4a35      	ldr	r2, [pc, #212]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800beee:	f043 0302 	orr.w	r3, r3, #2
 800bef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bef6:	4b33      	ldr	r3, [pc, #204]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bf04:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bf06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf0a:	4a2e      	ldr	r2, [pc, #184]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf14:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <HAL_ETH_MspInit+0x198>)
 800bf16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1e:	60bb      	str	r3, [r7, #8]
 800bf20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bf22:	2332      	movs	r3, #50	; 0x32
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf26:	2302      	movs	r3, #2
 800bf28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf32:	230b      	movs	r3, #11
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4822      	ldr	r0, [pc, #136]	; (800bfc8 <HAL_ETH_MspInit+0x19c>)
 800bf3e:	f7fa ff83 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bf42:	2386      	movs	r3, #134	; 0x86
 800bf44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf46:	2302      	movs	r3, #2
 800bf48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf52:	230b      	movs	r3, #11
 800bf54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	481b      	ldr	r0, [pc, #108]	; (800bfcc <HAL_ETH_MspInit+0x1a0>)
 800bf5e:	f7fa ff73 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800bf62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf70:	2303      	movs	r3, #3
 800bf72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf74:	230b      	movs	r3, #11
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4814      	ldr	r0, [pc, #80]	; (800bfd0 <HAL_ETH_MspInit+0x1a4>)
 800bf80:	f7fa ff62 	bl	8006e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800bf84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf92:	2303      	movs	r3, #3
 800bf94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf96:	230b      	movs	r3, #11
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bf9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	480c      	ldr	r0, [pc, #48]	; (800bfd4 <HAL_ETH_MspInit+0x1a8>)
 800bfa2:	f7fa ff51 	bl	8006e48 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2105      	movs	r1, #5
 800bfaa:	203d      	movs	r0, #61	; 0x3d
 800bfac:	f7f7 f816 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bfb0:	203d      	movs	r0, #61	; 0x3d
 800bfb2:	f7f7 f82d 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	3738      	adds	r7, #56	; 0x38
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40028000 	.word	0x40028000
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	58020800 	.word	0x58020800
 800bfcc:	58020000 	.word	0x58020000
 800bfd0:	58020400 	.word	0x58020400
 800bfd4:	58021800 	.word	0x58021800

0800bfd8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bfe0:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <HAL_ETH_RxCpltCallback+0x1c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 ff29 	bl	800ce3c <osSemaphoreRelease>
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	2000194c 	.word	0x2000194c

0800bff8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b0ac      	sub	sp, #176	; 0xb0
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c012:	4b8f      	ldr	r3, [pc, #572]	; (800c250 <low_level_init+0x258>)
 800c014:	4a8f      	ldr	r2, [pc, #572]	; (800c254 <low_level_init+0x25c>)
 800c016:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c018:	2300      	movs	r3, #0
 800c01a:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800c01c:	2380      	movs	r3, #128	; 0x80
 800c01e:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800c020:	23e1      	movs	r3, #225	; 0xe1
 800c022:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800c028:	2300      	movs	r3, #0
 800c02a:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800c02c:	2300      	movs	r3, #0
 800c02e:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800c030:	4a87      	ldr	r2, [pc, #540]	; (800c250 <low_level_init+0x258>)
 800c032:	f107 030c 	add.w	r3, r7, #12
 800c036:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c038:	4b85      	ldr	r3, [pc, #532]	; (800c250 <low_level_init+0x258>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c03e:	4b84      	ldr	r3, [pc, #528]	; (800c250 <low_level_init+0x258>)
 800c040:	4a85      	ldr	r2, [pc, #532]	; (800c258 <low_level_init+0x260>)
 800c042:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c044:	4b82      	ldr	r3, [pc, #520]	; (800c250 <low_level_init+0x258>)
 800c046:	4a85      	ldr	r2, [pc, #532]	; (800c25c <low_level_init+0x264>)
 800c048:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800c04a:	4b81      	ldr	r3, [pc, #516]	; (800c250 <low_level_init+0x258>)
 800c04c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c050:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c052:	487f      	ldr	r0, [pc, #508]	; (800c250 <low_level_init+0x258>)
 800c054:	f7f9 f866 	bl	8005124 <HAL_ETH_Init>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c05e:	2234      	movs	r2, #52	; 0x34
 800c060:	2100      	movs	r1, #0
 800c062:	487f      	ldr	r0, [pc, #508]	; (800c260 <low_level_init+0x268>)
 800c064:	f010 fd08 	bl	801ca78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c068:	4b7d      	ldr	r3, [pc, #500]	; (800c260 <low_level_init+0x268>)
 800c06a:	2221      	movs	r2, #33	; 0x21
 800c06c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c06e:	4b7c      	ldr	r3, [pc, #496]	; (800c260 <low_level_init+0x268>)
 800c070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c074:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c076:	4b7a      	ldr	r3, [pc, #488]	; (800c260 <low_level_init+0x268>)
 800c078:	2200      	movs	r2, #0
 800c07a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c07c:	4879      	ldr	r0, [pc, #484]	; (800c264 <low_level_init+0x26c>)
 800c07e:	f009 f833 	bl	80150e8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2206      	movs	r2, #6
 800c086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c08a:	4b71      	ldr	r3, [pc, #452]	; (800c250 <low_level_init+0x258>)
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c096:	4b6e      	ldr	r3, [pc, #440]	; (800c250 <low_level_init+0x258>)
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	785a      	ldrb	r2, [r3, #1]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c0a2:	4b6b      	ldr	r3, [pc, #428]	; (800c250 <low_level_init+0x258>)
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	789a      	ldrb	r2, [r3, #2]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c0ae:	4b68      	ldr	r3, [pc, #416]	; (800c250 <low_level_init+0x258>)
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	78da      	ldrb	r2, [r3, #3]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c0ba:	4b65      	ldr	r3, [pc, #404]	; (800c250 <low_level_init+0x258>)
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	791a      	ldrb	r2, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c0c6:	4b62      	ldr	r3, [pc, #392]	; (800c250 <low_level_init+0x258>)
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	795a      	ldrb	r2, [r3, #5]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c0d8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0e0:	f043 030a 	orr.w	r3, r3, #10
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0f2:	e012      	b.n	800c11a <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800c0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c0fc:	fb02 f303 	mul.w	r3, r2, r3
 800c100:	4a59      	ldr	r2, [pc, #356]	; (800c268 <low_level_init+0x270>)
 800c102:	441a      	add	r2, r3
 800c104:	2300      	movs	r3, #0
 800c106:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800c10a:	4851      	ldr	r0, [pc, #324]	; (800c250 <low_level_init+0x258>)
 800c10c:	f7f9 f8e4 	bl	80052d8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c114:	3301      	adds	r3, #1
 800c116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c11e:	2b03      	cmp	r3, #3
 800c120:	d9e8      	bls.n	800c0f4 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800c122:	2200      	movs	r2, #0
 800c124:	2101      	movs	r1, #1
 800c126:	2001      	movs	r0, #1
 800c128:	f000 fd84 	bl	800cc34 <osSemaphoreNew>
 800c12c:	4602      	mov	r2, r0
 800c12e:	4b4f      	ldr	r3, [pc, #316]	; (800c26c <low_level_init+0x274>)
 800c130:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c132:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c136:	2224      	movs	r2, #36	; 0x24
 800c138:	2100      	movs	r1, #0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f010 fc9c 	bl	801ca78 <memset>
  attributes.name = "EthIf";
 800c140:	4b4b      	ldr	r3, [pc, #300]	; (800c270 <low_level_init+0x278>)
 800c142:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c144:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 800c14c:	2330      	movs	r3, #48	; 0x30
 800c14e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800c152:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c156:	461a      	mov	r2, r3
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	4846      	ldr	r0, [pc, #280]	; (800c274 <low_level_init+0x27c>)
 800c15c:	f000 fb4e 	bl	800c7fc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c160:	4945      	ldr	r1, [pc, #276]	; (800c278 <low_level_init+0x280>)
 800c162:	4846      	ldr	r0, [pc, #280]	; (800c27c <low_level_init+0x284>)
 800c164:	f7f6 fca5 	bl	8002ab2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800c168:	4844      	ldr	r0, [pc, #272]	; (800c27c <low_level_init+0x284>)
 800c16a:	f7f6 fcd4 	bl	8002b16 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800c16e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d165      	bne.n	800c242 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c176:	4841      	ldr	r0, [pc, #260]	; (800c27c <low_level_init+0x284>)
 800c178:	f7f6 fd75 	bl	8002c66 <LAN8742_GetLinkState>
 800c17c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c184:	2b01      	cmp	r3, #1
 800c186:	dc06      	bgt.n	800c196 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f009 fb93 	bl	80158b4 <netif_set_link_down>
      netif_set_down(netif);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f009 fb26 	bl	80157e0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c194:	e057      	b.n	800c246 <low_level_init+0x24e>
      switch (PHYLinkState)
 800c196:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c19a:	3b02      	subs	r3, #2
 800c19c:	2b03      	cmp	r3, #3
 800c19e:	d82b      	bhi.n	800c1f8 <low_level_init+0x200>
 800c1a0:	a201      	add	r2, pc, #4	; (adr r2, 800c1a8 <low_level_init+0x1b0>)
 800c1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a6:	bf00      	nop
 800c1a8:	0800c1b9 	.word	0x0800c1b9
 800c1ac:	0800c1cb 	.word	0x0800c1cb
 800c1b0:	0800c1db 	.word	0x0800c1db
 800c1b4:	0800c1eb 	.word	0x0800c1eb
        duplex = ETH_FULLDUPLEX_MODE;
 800c1b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c1c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c1c8:	e01f      	b.n	800c20a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c1d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c1d8:	e017      	b.n	800c20a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800c1da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c1e8:	e00f      	b.n	800c20a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c1f6:	e008      	b.n	800c20a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800c1f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c208:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c20a:	f107 0314 	add.w	r3, r7, #20
 800c20e:	4619      	mov	r1, r3
 800c210:	480f      	ldr	r0, [pc, #60]	; (800c250 <low_level_init+0x258>)
 800c212:	f7f9 fe43 	bl	8005e9c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c21a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800c21c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c220:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c222:	f107 0314 	add.w	r3, r7, #20
 800c226:	4619      	mov	r1, r3
 800c228:	4809      	ldr	r0, [pc, #36]	; (800c250 <low_level_init+0x258>)
 800c22a:	f7fa f80b 	bl	8006244 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800c22e:	4808      	ldr	r0, [pc, #32]	; (800c250 <low_level_init+0x258>)
 800c230:	f7f9 f893 	bl	800535a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f009 fa67 	bl	8015708 <netif_set_up>
    netif_set_link_up(netif);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f009 fb02 	bl	8015844 <netif_set_link_up>
}
 800c240:	e001      	b.n	800c246 <low_level_init+0x24e>
    Error_Handler();
 800c242:	f7f5 f883 	bl	800134c <Error_Handler>
}
 800c246:	bf00      	nop
 800c248:	37b0      	adds	r7, #176	; 0xb0
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000854c 	.word	0x2000854c
 800c254:	40028000 	.word	0x40028000
 800c258:	200000fc 	.word	0x200000fc
 800c25c:	2000009c 	.word	0x2000009c
 800c260:	200085bc 	.word	0x200085bc
 800c264:	08020ab4 	.word	0x08020ab4
 800c268:	2000015c 	.word	0x2000015c
 800c26c:	2000194c 	.word	0x2000194c
 800c270:	0801d904 	.word	0x0801d904
 800c274:	0800c445 	.word	0x0800c445
 800c278:	20000010 	.word	0x20000010
 800c27c:	2000852c 	.word	0x2000852c

0800c280 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b092      	sub	sp, #72	; 0x48
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	2230      	movs	r2, #48	; 0x30
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f010 fbeb 	bl	801ca78 <memset>

  for(q = p; q != NULL; q = q->next)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a6:	e049      	b.n	800c33c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d902      	bls.n	800c2b4 <low_level_output+0x34>
      return ERR_IF;
 800c2ae:	f06f 030b 	mvn.w	r3, #11
 800c2b2:	e056      	b.n	800c362 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800c2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b6:	6859      	ldr	r1, [r3, #4]
 800c2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3b3c      	subs	r3, #60	; 0x3c
 800c2ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ce:	895b      	ldrh	r3, [r3, #10]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3b38      	subs	r3, #56	; 0x38
 800c2e4:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d012      	beq.n	800c312 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ee:	1e5a      	subs	r2, r3, #1
 800c2f0:	f107 000c 	add.w	r0, r7, #12
 800c2f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	440b      	add	r3, r1
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	18c1      	adds	r1, r0, r3
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c30c:	4413      	add	r3, r2
 800c30e:	3b34      	subs	r3, #52	; 0x34
 800c310:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10a      	bne.n	800c330 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800c31a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c31c:	4613      	mov	r3, r2
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c328:	4413      	add	r3, r2
 800c32a:	3b34      	subs	r3, #52	; 0x34
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c332:	3301      	adds	r3, #1
 800c334:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	643b      	str	r3, [r7, #64]	; 0x40
 800c33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1b2      	bne.n	800c2a8 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	891b      	ldrh	r3, [r3, #8]
 800c346:	461a      	mov	r2, r3
 800c348:	4b08      	ldr	r3, [pc, #32]	; (800c36c <low_level_output+0xec>)
 800c34a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c34c:	4a07      	ldr	r2, [pc, #28]	; (800c36c <low_level_output+0xec>)
 800c34e:	f107 030c 	add.w	r3, r7, #12
 800c352:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c354:	2214      	movs	r2, #20
 800c356:	4905      	ldr	r1, [pc, #20]	; (800c36c <low_level_output+0xec>)
 800c358:	4805      	ldr	r0, [pc, #20]	; (800c370 <low_level_output+0xf0>)
 800c35a:	f7f9 f8fd 	bl	8005558 <HAL_ETH_Transmit>

  return errval;
 800c35e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c362:	4618      	mov	r0, r3
 800c364:	3748      	adds	r7, #72	; 0x48
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	200085bc 	.word	0x200085bc
 800c370:	2000854c 	.word	0x2000854c

0800c374 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b094      	sub	sp, #80	; 0x50
 800c378:	af02      	add	r7, sp, #8
 800c37a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	60bb      	str	r3, [r7, #8]
 800c384:	2300      	movs	r3, #0
 800c386:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	2230      	movs	r2, #48	; 0x30
 800c38e:	2100      	movs	r1, #0
 800c390:	4618      	mov	r0, r3
 800c392:	f010 fb71 	bl	801ca78 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800c396:	2300      	movs	r3, #0
 800c398:	643b      	str	r3, [r7, #64]	; 0x40
 800c39a:	e015      	b.n	800c3c8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800c39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	f107 010c 	add.w	r1, r7, #12
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4419      	add	r1, r3
 800c3ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c3bc:	4413      	add	r3, r2
 800c3be:	3b34      	subs	r3, #52	; 0x34
 800c3c0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800c3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d9e6      	bls.n	800c39c <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4818      	ldr	r0, [pc, #96]	; (800c438 <low_level_input+0xc4>)
 800c3d6:	f7f9 fa38 	bl	800584a <HAL_ETH_GetRxDataBuffer>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d125      	bne.n	800c42c <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800c3e0:	f107 0308 	add.w	r3, r7, #8
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4814      	ldr	r0, [pc, #80]	; (800c438 <low_level_input+0xc4>)
 800c3e8:	f7f9 facd 	bl	8005986 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800c3ec:	4812      	ldr	r0, [pc, #72]	; (800c438 <low_level_input+0xc4>)
 800c3ee:	f7f9 fafd 	bl	80059ec <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fced 	bl	800bdd8 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c3fe:	480f      	ldr	r0, [pc, #60]	; (800c43c <low_level_input+0xc8>)
 800c400:	f008 feee 	bl	80151e0 <memp_malloc_pool>
 800c404:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800c406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00f      	beq.n	800c42c <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800c40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40e:	4a0c      	ldr	r2, [pc, #48]	; (800c440 <low_level_input+0xcc>)
 800c410:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	b299      	uxth	r1, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	b292      	uxth	r2, r2
 800c41c:	9201      	str	r2, [sp, #4]
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c422:	2241      	movs	r2, #65	; 0x41
 800c424:	2000      	movs	r0, #0
 800c426:	f009 fc65 	bl	8015cf4 <pbuf_alloced_custom>
 800c42a:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800c42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3748      	adds	r7, #72	; 0x48
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	2000854c 	.word	0x2000854c
 800c43c:	08020ab4 	.word	0x08020ab4
 800c440:	0800c4f1 	.word	0x0800c4f1

0800c444 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c450:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <ethernetif_input+0x4c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fc89 	bl	800cd70 <osSemaphoreAcquire>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1f5      	bne.n	800c450 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff ff85 	bl	800c374 <low_level_input>
 800c46a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	4798      	blx	r3
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800c482:	68b8      	ldr	r0, [r7, #8]
 800c484:	f009 fdf0 	bl	8016068 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1ea      	bne.n	800c464 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c48e:	e7df      	b.n	800c450 <ethernetif_input+0xc>
 800c490:	2000194c 	.word	0x2000194c

0800c494 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <ethernetif_init+0x1c>
 800c4a2:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <ethernetif_init+0x48>)
 800c4a4:	f240 224d 	movw	r2, #589	; 0x24d
 800c4a8:	490d      	ldr	r1, [pc, #52]	; (800c4e0 <ethernetif_init+0x4c>)
 800c4aa:	480e      	ldr	r0, [pc, #56]	; (800c4e4 <ethernetif_init+0x50>)
 800c4ac:	f010 faec 	bl	801ca88 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2273      	movs	r2, #115	; 0x73
 800c4b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2274      	movs	r2, #116	; 0x74
 800c4bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a09      	ldr	r2, [pc, #36]	; (800c4e8 <ethernetif_init+0x54>)
 800c4c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a08      	ldr	r2, [pc, #32]	; (800c4ec <ethernetif_init+0x58>)
 800c4ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff fd93 	bl	800bff8 <low_level_init>

  return ERR_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	0801d90c 	.word	0x0801d90c
 800c4e0:	0801d928 	.word	0x0801d928
 800c4e4:	0801d938 	.word	0x0801d938
 800c4e8:	080129dd 	.word	0x080129dd
 800c4ec:	0800c281 	.word	0x0800c281

0800c4f0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c4fc:	68f9      	ldr	r1, [r7, #12]
 800c4fe:	4803      	ldr	r0, [pc, #12]	; (800c50c <pbuf_free_custom+0x1c>)
 800c500:	f008 fee2 	bl	80152c8 <memp_free_pool>
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	08020ab4 	.word	0x08020ab4

0800c510 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c514:	f7f6 fc7e 	bl	8002e14 <HAL_GetTick>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c524:	4802      	ldr	r0, [pc, #8]	; (800c530 <ETH_PHY_IO_Init+0x10>)
 800c526:	f7f9 fea7 	bl	8006278 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	2000854c 	.word	0x2000854c

0800c534 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c534:	b480      	push	{r7}
 800c536:	af00      	add	r7, sp, #0
  return 0;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	68f9      	ldr	r1, [r7, #12]
 800c556:	4807      	ldr	r0, [pc, #28]	; (800c574 <ETH_PHY_IO_ReadReg+0x30>)
 800c558:	f7f9 fbf8 	bl	8005d4c <HAL_ETH_ReadPHYRegister>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c566:	e000      	b.n	800c56a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	2000854c 	.word	0x2000854c

0800c578 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	68f9      	ldr	r1, [r7, #12]
 800c58a:	4807      	ldr	r0, [pc, #28]	; (800c5a8 <ETH_PHY_IO_WriteReg+0x30>)
 800c58c:	f7f9 fc32 	bl	8005df4 <HAL_ETH_WritePHYRegister>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c59a:	e000      	b.n	800c59e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	2000854c 	.word	0x2000854c

0800c5ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c5b0:	f7f6 fc30 	bl	8002e14 <HAL_GetTick>
 800c5b4:	4603      	mov	r3, r0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b0a0      	sub	sp, #128	; 0x80
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	677b      	str	r3, [r7, #116]	; 0x74

/* USER CODE END ETH link init */

  for(;;)
  {
  struct netif *netif = (struct netif *) argument;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	673b      	str	r3, [r7, #112]	; 0x70
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c5d4:	483a      	ldr	r0, [pc, #232]	; (800c6c0 <ethernet_link_thread+0x104>)
 800c5d6:	f7f6 fb46 	bl	8002c66 <LAN8742_GetLinkState>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c5de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5e4:	089b      	lsrs	r3, r3, #2
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00c      	beq.n	800c60a <ethernet_link_thread+0x4e>
 800c5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d809      	bhi.n	800c60a <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c5f6:	4833      	ldr	r0, [pc, #204]	; (800c6c4 <ethernet_link_thread+0x108>)
 800c5f8:	f7f8 ff34 	bl	8005464 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c5fc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c5fe:	f009 f8ef 	bl	80157e0 <netif_set_down>
    netif_set_link_down(netif);
 800c602:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c604:	f009 f956 	bl	80158b4 <netif_set_link_down>
 800c608:	e055      	b.n	800c6b6 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c60a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c60c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c610:	f003 0304 	and.w	r3, r3, #4
 800c614:	2b00      	cmp	r3, #0
 800c616:	d14e      	bne.n	800c6b6 <ethernet_link_thread+0xfa>
 800c618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d94b      	bls.n	800c6b6 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800c61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c620:	3b02      	subs	r3, #2
 800c622:	2b03      	cmp	r3, #3
 800c624:	d82a      	bhi.n	800c67c <ethernet_link_thread+0xc0>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <ethernet_link_thread+0x70>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c63d 	.word	0x0800c63d
 800c630:	0800c64f 	.word	0x0800c64f
 800c634:	0800c65f 	.word	0x0800c65f
 800c638:	0800c66f 	.word	0x0800c66f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c640:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c646:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c648:	2301      	movs	r3, #1
 800c64a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c64c:	e017      	b.n	800c67e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c64e:	2300      	movs	r3, #0
 800c650:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c656:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c658:	2301      	movs	r3, #1
 800c65a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c65c:	e00f      	b.n	800c67e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c65e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c662:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c664:	2300      	movs	r3, #0
 800c666:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c668:	2301      	movs	r3, #1
 800c66a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c66c:	e007      	b.n	800c67e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c66e:	2300      	movs	r3, #0
 800c670:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c672:	2300      	movs	r3, #0
 800c674:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c676:	2301      	movs	r3, #1
 800c678:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c67a:	e000      	b.n	800c67e <ethernet_link_thread+0xc2>
    default:
      break;
 800c67c:	bf00      	nop
    }

    if(linkchanged)
 800c67e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d018      	beq.n	800c6b6 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c684:	f107 0308 	add.w	r3, r7, #8
 800c688:	4619      	mov	r1, r3
 800c68a:	480e      	ldr	r0, [pc, #56]	; (800c6c4 <ethernet_link_thread+0x108>)
 800c68c:	f7f9 fc06 	bl	8005e9c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c692:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c696:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c698:	f107 0308 	add.w	r3, r7, #8
 800c69c:	4619      	mov	r1, r3
 800c69e:	4809      	ldr	r0, [pc, #36]	; (800c6c4 <ethernet_link_thread+0x108>)
 800c6a0:	f7f9 fdd0 	bl	8006244 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800c6a4:	4807      	ldr	r0, [pc, #28]	; (800c6c4 <ethernet_link_thread+0x108>)
 800c6a6:	f7f8 fe58 	bl	800535a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c6aa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c6ac:	f009 f82c 	bl	8015708 <netif_set_up>
      netif_set_link_up(netif);
 800c6b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c6b2:	f009 f8c7 	bl	8015844 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c6b6:	2064      	movs	r0, #100	; 0x64
 800c6b8:	f000 f946 	bl	800c948 <osDelay>
  {
 800c6bc:	e788      	b.n	800c5d0 <ethernet_link_thread+0x14>
 800c6be:	bf00      	nop
 800c6c0:	2000852c 	.word	0x2000852c
 800c6c4:	2000854c 	.word	0x2000854c

0800c6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c6c8:	b480      	push	{r7}
 800c6ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c6cc:	bf00      	nop
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10f      	bne.n	800c70a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ee:	607b      	str	r3, [r7, #4]
  return(result);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c6fa:	603b      	str	r3, [r7, #0]
  return(result);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <osKernelInitialize+0x3a>
 800c702:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <osKernelInitialize+0x64>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b02      	cmp	r3, #2
 800c708:	d103      	bne.n	800c712 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c70a:	f06f 0305 	mvn.w	r3, #5
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	e00c      	b.n	800c72c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c712:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <osKernelInitialize+0x64>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <osKernelInitialize+0x64>)
 800c71c:	2201      	movs	r2, #1
 800c71e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c720:	2300      	movs	r3, #0
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e002      	b.n	800c72c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c72a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c72c:	68fb      	ldr	r3, [r7, #12]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20001954 	.word	0x20001954

0800c740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c746:	f3ef 8305 	mrs	r3, IPSR
 800c74a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c74c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10f      	bne.n	800c772 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c752:	f3ef 8310 	mrs	r3, PRIMASK
 800c756:	607b      	str	r3, [r7, #4]
  return(result);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d105      	bne.n	800c76a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c75e:	f3ef 8311 	mrs	r3, BASEPRI
 800c762:	603b      	str	r3, [r7, #0]
  return(result);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <osKernelStart+0x3a>
 800c76a:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <osKernelStart+0x68>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d103      	bne.n	800c77a <osKernelStart+0x3a>
    stat = osErrorISR;
 800c772:	f06f 0305 	mvn.w	r3, #5
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	e010      	b.n	800c79c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c77a:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <osKernelStart+0x68>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d109      	bne.n	800c796 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c782:	f7ff ffa1 	bl	800c6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c786:	4b08      	ldr	r3, [pc, #32]	; (800c7a8 <osKernelStart+0x68>)
 800c788:	2202      	movs	r2, #2
 800c78a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c78c:	f002 fc8c 	bl	800f0a8 <vTaskStartScheduler>
      stat = osOK;
 800c790:	2300      	movs	r3, #0
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	e002      	b.n	800c79c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c79a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c79c:	68fb      	ldr	r3, [r7, #12]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20001954 	.word	0x20001954

0800c7ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7b2:	f3ef 8305 	mrs	r3, IPSR
 800c7b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10f      	bne.n	800c7de <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7be:	f3ef 8310 	mrs	r3, PRIMASK
 800c7c2:	607b      	str	r3, [r7, #4]
  return(result);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d105      	bne.n	800c7d6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c7ca:	f3ef 8311 	mrs	r3, BASEPRI
 800c7ce:	603b      	str	r3, [r7, #0]
  return(result);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d007      	beq.n	800c7e6 <osKernelGetTickCount+0x3a>
 800c7d6:	4b08      	ldr	r3, [pc, #32]	; (800c7f8 <osKernelGetTickCount+0x4c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d103      	bne.n	800c7e6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800c7de:	f002 fd81 	bl	800f2e4 <xTaskGetTickCountFromISR>
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	e002      	b.n	800c7ec <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800c7e6:	f002 fd6d 	bl	800f2c4 <xTaskGetTickCount>
 800c7ea:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20001954 	.word	0x20001954

0800c7fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b090      	sub	sp, #64	; 0x40
 800c800:	af04      	add	r7, sp, #16
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c808:	2300      	movs	r3, #0
 800c80a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c80c:	f3ef 8305 	mrs	r3, IPSR
 800c810:	61fb      	str	r3, [r7, #28]
  return(result);
 800c812:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c814:	2b00      	cmp	r3, #0
 800c816:	f040 8090 	bne.w	800c93a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c81a:	f3ef 8310 	mrs	r3, PRIMASK
 800c81e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d105      	bne.n	800c832 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c826:	f3ef 8311 	mrs	r3, BASEPRI
 800c82a:	617b      	str	r3, [r7, #20]
  return(result);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <osThreadNew+0x3e>
 800c832:	4b44      	ldr	r3, [pc, #272]	; (800c944 <osThreadNew+0x148>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b02      	cmp	r3, #2
 800c838:	d07f      	beq.n	800c93a <osThreadNew+0x13e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d07c      	beq.n	800c93a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c844:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c846:	2318      	movs	r3, #24
 800c848:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c852:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d045      	beq.n	800c8e6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d002      	beq.n	800c868 <osThreadNew+0x6c>
        name = attr->name;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d008      	beq.n	800c88e <osThreadNew+0x92>
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	2b38      	cmp	r3, #56	; 0x38
 800c880:	d805      	bhi.n	800c88e <osThreadNew+0x92>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <osThreadNew+0x96>
        return (NULL);
 800c88e:	2300      	movs	r3, #0
 800c890:	e054      	b.n	800c93c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	089b      	lsrs	r3, r3, #2
 800c8a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00e      	beq.n	800c8c8 <osThreadNew+0xcc>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	2b5b      	cmp	r3, #91	; 0x5b
 800c8b0:	d90a      	bls.n	800c8c8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <osThreadNew+0xcc>
        mem = 1;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	623b      	str	r3, [r7, #32]
 800c8c6:	e010      	b.n	800c8ea <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10c      	bne.n	800c8ea <osThreadNew+0xee>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d108      	bne.n	800c8ea <osThreadNew+0xee>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d104      	bne.n	800c8ea <osThreadNew+0xee>
          mem = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	623b      	str	r3, [r7, #32]
 800c8e4:	e001      	b.n	800c8ea <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d110      	bne.n	800c912 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8f8:	9202      	str	r2, [sp, #8]
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f002 f9fc 	bl	800ed04 <xTaskCreateStatic>
 800c90c:	4603      	mov	r3, r0
 800c90e:	613b      	str	r3, [r7, #16]
 800c910:	e013      	b.n	800c93a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d110      	bne.n	800c93a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	f107 0310 	add.w	r3, r7, #16
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f002 fa44 	bl	800edb8 <xTaskCreate>
 800c930:	4603      	mov	r3, r0
 800c932:	2b01      	cmp	r3, #1
 800c934:	d001      	beq.n	800c93a <osThreadNew+0x13e>
          hTask = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c93a:	693b      	ldr	r3, [r7, #16]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3730      	adds	r7, #48	; 0x30
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20001954 	.word	0x20001954

0800c948 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c950:	f3ef 8305 	mrs	r3, IPSR
 800c954:	613b      	str	r3, [r7, #16]
  return(result);
 800c956:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10f      	bne.n	800c97c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c95c:	f3ef 8310 	mrs	r3, PRIMASK
 800c960:	60fb      	str	r3, [r7, #12]
  return(result);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d105      	bne.n	800c974 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c968:	f3ef 8311 	mrs	r3, BASEPRI
 800c96c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <osDelay+0x3c>
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <osDelay+0x58>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d103      	bne.n	800c984 <osDelay+0x3c>
    stat = osErrorISR;
 800c97c:	f06f 0305 	mvn.w	r3, #5
 800c980:	617b      	str	r3, [r7, #20]
 800c982:	e007      	b.n	800c994 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f002 fb56 	bl	800f040 <vTaskDelay>
    }
  }

  return (stat);
 800c994:	697b      	ldr	r3, [r7, #20]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20001954 	.word	0x20001954

0800c9a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b0:	f3ef 8305 	mrs	r3, IPSR
 800c9b4:	613b      	str	r3, [r7, #16]
  return(result);
 800c9b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 8085 	bne.w	800cac8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9be:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9ca:	f3ef 8311 	mrs	r3, BASEPRI
 800c9ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <osMutexNew+0x3a>
 800c9d6:	4b3f      	ldr	r3, [pc, #252]	; (800cad4 <osMutexNew+0x130>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d074      	beq.n	800cac8 <osMutexNew+0x124>
    if (attr != NULL) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <osMutexNew+0x48>
      type = attr->attr_bits;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	623b      	str	r3, [r7, #32]
 800c9ea:	e001      	b.n	800c9f0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	f003 0301 	and.w	r3, r3, #1
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <osMutexNew+0x5c>
      rmtx = 1U;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	61fb      	str	r3, [r7, #28]
 800c9fe:	e001      	b.n	800ca04 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	f003 0308 	and.w	r3, r3, #8
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d15c      	bne.n	800cac8 <osMutexNew+0x124>
      mem = -1;
 800ca0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca12:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d015      	beq.n	800ca46 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d006      	beq.n	800ca30 <osMutexNew+0x8c>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	2b4f      	cmp	r3, #79	; 0x4f
 800ca28:	d902      	bls.n	800ca30 <osMutexNew+0x8c>
          mem = 1;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	61bb      	str	r3, [r7, #24]
 800ca2e:	e00c      	b.n	800ca4a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d108      	bne.n	800ca4a <osMutexNew+0xa6>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d104      	bne.n	800ca4a <osMutexNew+0xa6>
            mem = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	61bb      	str	r3, [r7, #24]
 800ca44:	e001      	b.n	800ca4a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d112      	bne.n	800ca76 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	2004      	movs	r0, #4
 800ca5e:	f001 fa1e 	bl	800de9e <xQueueCreateMutexStatic>
 800ca62:	6278      	str	r0, [r7, #36]	; 0x24
 800ca64:	e016      	b.n	800ca94 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	2001      	movs	r0, #1
 800ca6e:	f001 fa16 	bl	800de9e <xQueueCreateMutexStatic>
 800ca72:	6278      	str	r0, [r7, #36]	; 0x24
 800ca74:	e00e      	b.n	800ca94 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10b      	bne.n	800ca94 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d004      	beq.n	800ca8c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ca82:	2004      	movs	r0, #4
 800ca84:	f001 f9f3 	bl	800de6e <xQueueCreateMutex>
 800ca88:	6278      	str	r0, [r7, #36]	; 0x24
 800ca8a:	e003      	b.n	800ca94 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	f001 f9ee 	bl	800de6e <xQueueCreateMutex>
 800ca92:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00c      	beq.n	800cab4 <osMutexNew+0x110>
        if (attr != NULL) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d003      	beq.n	800caa8 <osMutexNew+0x104>
          name = attr->name;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	e001      	b.n	800caac <osMutexNew+0x108>
        } else {
          name = NULL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800caac:	6979      	ldr	r1, [r7, #20]
 800caae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cab0:	f002 f8a2 	bl	800ebf8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d006      	beq.n	800cac8 <osMutexNew+0x124>
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	f043 0301 	orr.w	r3, r3, #1
 800cac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3728      	adds	r7, #40	; 0x28
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20001954 	.word	0x20001954

0800cad8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f023 0301 	bic.w	r3, r3, #1
 800cae8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf6:	f3ef 8305 	mrs	r3, IPSR
 800cafa:	613b      	str	r3, [r7, #16]
  return(result);
 800cafc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10f      	bne.n	800cb22 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb02:	f3ef 8310 	mrs	r3, PRIMASK
 800cb06:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb0e:	f3ef 8311 	mrs	r3, BASEPRI
 800cb12:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <osMutexAcquire+0x52>
 800cb1a:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <osMutexAcquire+0xb8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d103      	bne.n	800cb2a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800cb22:	f06f 0305 	mvn.w	r3, #5
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	e02c      	b.n	800cb84 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800cb30:	f06f 0303 	mvn.w	r3, #3
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e025      	b.n	800cb84 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d011      	beq.n	800cb62 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	69b8      	ldr	r0, [r7, #24]
 800cb42:	f001 f9fa 	bl	800df3a <xQueueTakeMutexRecursive>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d01b      	beq.n	800cb84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800cb52:	f06f 0301 	mvn.w	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	e014      	b.n	800cb84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cb5a:	f06f 0302 	mvn.w	r3, #2
 800cb5e:	61fb      	str	r3, [r7, #28]
 800cb60:	e010      	b.n	800cb84 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	69b8      	ldr	r0, [r7, #24]
 800cb66:	f001 fd77 	bl	800e658 <xQueueSemaphoreTake>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d009      	beq.n	800cb84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cb76:	f06f 0301 	mvn.w	r3, #1
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	e002      	b.n	800cb84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cb7e:	f06f 0302 	mvn.w	r3, #2
 800cb82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb84:	69fb      	ldr	r3, [r7, #28]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3720      	adds	r7, #32
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20001954 	.word	0x20001954

0800cb94 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f023 0301 	bic.w	r3, r3, #1
 800cba2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbb0:	f3ef 8305 	mrs	r3, IPSR
 800cbb4:	613b      	str	r3, [r7, #16]
  return(result);
 800cbb6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10f      	bne.n	800cbdc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d105      	bne.n	800cbd4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbc8:	f3ef 8311 	mrs	r3, BASEPRI
 800cbcc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d007      	beq.n	800cbe4 <osMutexRelease+0x50>
 800cbd4:	4b16      	ldr	r3, [pc, #88]	; (800cc30 <osMutexRelease+0x9c>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d103      	bne.n	800cbe4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800cbdc:	f06f 0305 	mvn.w	r3, #5
 800cbe0:	61fb      	str	r3, [r7, #28]
 800cbe2:	e01f      	b.n	800cc24 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d103      	bne.n	800cbf2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cbea:	f06f 0303 	mvn.w	r3, #3
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e018      	b.n	800cc24 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d009      	beq.n	800cc0c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cbf8:	69b8      	ldr	r0, [r7, #24]
 800cbfa:	f001 f96b 	bl	800ded4 <xQueueGiveMutexRecursive>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d00f      	beq.n	800cc24 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cc04:	f06f 0302 	mvn.w	r3, #2
 800cc08:	61fb      	str	r3, [r7, #28]
 800cc0a:	e00b      	b.n	800cc24 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2100      	movs	r1, #0
 800cc12:	69b8      	ldr	r0, [r7, #24]
 800cc14:	f001 fa2c 	bl	800e070 <xQueueGenericSend>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d002      	beq.n	800cc24 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cc1e:	f06f 0302 	mvn.w	r3, #2
 800cc22:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800cc24:	69fb      	ldr	r3, [r7, #28]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20001954 	.word	0x20001954

0800cc34 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08c      	sub	sp, #48	; 0x30
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cc40:	2300      	movs	r3, #0
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc44:	f3ef 8305 	mrs	r3, IPSR
 800cc48:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 8087 	bne.w	800cd60 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc52:	f3ef 8310 	mrs	r3, PRIMASK
 800cc56:	617b      	str	r3, [r7, #20]
  return(result);
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d105      	bne.n	800cc6a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc5e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc62:	613b      	str	r3, [r7, #16]
  return(result);
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <osSemaphoreNew+0x3e>
 800cc6a:	4b40      	ldr	r3, [pc, #256]	; (800cd6c <osSemaphoreNew+0x138>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d076      	beq.n	800cd60 <osSemaphoreNew+0x12c>
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d073      	beq.n	800cd60 <osSemaphoreNew+0x12c>
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d86f      	bhi.n	800cd60 <osSemaphoreNew+0x12c>
    mem = -1;
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d015      	beq.n	800ccb8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <osSemaphoreNew+0x6e>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b4f      	cmp	r3, #79	; 0x4f
 800cc9a:	d902      	bls.n	800cca2 <osSemaphoreNew+0x6e>
        mem = 1;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	623b      	str	r3, [r7, #32]
 800cca0:	e00c      	b.n	800ccbc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d108      	bne.n	800ccbc <osSemaphoreNew+0x88>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d104      	bne.n	800ccbc <osSemaphoreNew+0x88>
          mem = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	623b      	str	r3, [r7, #32]
 800ccb6:	e001      	b.n	800ccbc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccc2:	d04d      	beq.n	800cd60 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d129      	bne.n	800cd1e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d10b      	bne.n	800cce8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689a      	ldr	r2, [r3, #8]
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2100      	movs	r1, #0
 800ccde:	2001      	movs	r0, #1
 800cce0:	f000 ffd6 	bl	800dc90 <xQueueGenericCreateStatic>
 800cce4:	6278      	str	r0, [r7, #36]	; 0x24
 800cce6:	e005      	b.n	800ccf4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800cce8:	2203      	movs	r2, #3
 800ccea:	2100      	movs	r1, #0
 800ccec:	2001      	movs	r0, #1
 800ccee:	f001 f842 	bl	800dd76 <xQueueGenericCreate>
 800ccf2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d022      	beq.n	800cd40 <osSemaphoreNew+0x10c>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d01f      	beq.n	800cd40 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cd00:	2300      	movs	r3, #0
 800cd02:	2200      	movs	r2, #0
 800cd04:	2100      	movs	r1, #0
 800cd06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd08:	f001 f9b2 	bl	800e070 <xQueueGenericSend>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d016      	beq.n	800cd40 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800cd12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd14:	f001 fe25 	bl	800e962 <vQueueDelete>
            hSemaphore = NULL;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd1c:	e010      	b.n	800cd40 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d108      	bne.n	800cd36 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f001 f939 	bl	800dfa4 <xQueueCreateCountingSemaphoreStatic>
 800cd32:	6278      	str	r0, [r7, #36]	; 0x24
 800cd34:	e004      	b.n	800cd40 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f001 f968 	bl	800e00e <xQueueCreateCountingSemaphore>
 800cd3e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00c      	beq.n	800cd60 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <osSemaphoreNew+0x120>
          name = attr->name;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	61fb      	str	r3, [r7, #28]
 800cd52:	e001      	b.n	800cd58 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800cd54:	2300      	movs	r3, #0
 800cd56:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cd58:	69f9      	ldr	r1, [r7, #28]
 800cd5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd5c:	f001 ff4c 	bl	800ebf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3728      	adds	r7, #40	; 0x28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20001954 	.word	0x20001954

0800cd70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d103      	bne.n	800cd90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cd88:	f06f 0303 	mvn.w	r3, #3
 800cd8c:	61fb      	str	r3, [r7, #28]
 800cd8e:	e04b      	b.n	800ce28 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd90:	f3ef 8305 	mrs	r3, IPSR
 800cd94:	617b      	str	r3, [r7, #20]
  return(result);
 800cd96:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10f      	bne.n	800cdbc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd9c:	f3ef 8310 	mrs	r3, PRIMASK
 800cda0:	613b      	str	r3, [r7, #16]
  return(result);
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d105      	bne.n	800cdb4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cda8:	f3ef 8311 	mrs	r3, BASEPRI
 800cdac:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d026      	beq.n	800ce02 <osSemaphoreAcquire+0x92>
 800cdb4:	4b1f      	ldr	r3, [pc, #124]	; (800ce34 <osSemaphoreAcquire+0xc4>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d122      	bne.n	800ce02 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800cdc2:	f06f 0303 	mvn.w	r3, #3
 800cdc6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cdc8:	e02d      	b.n	800ce26 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	69b8      	ldr	r0, [r7, #24]
 800cdd8:	f001 fd46 	bl	800e868 <xQueueReceiveFromISR>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d003      	beq.n	800cdea <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800cde2:	f06f 0302 	mvn.w	r3, #2
 800cde6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cde8:	e01d      	b.n	800ce26 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01a      	beq.n	800ce26 <osSemaphoreAcquire+0xb6>
 800cdf0:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <osSemaphoreAcquire+0xc8>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ce00:	e011      	b.n	800ce26 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	69b8      	ldr	r0, [r7, #24]
 800ce06:	f001 fc27 	bl	800e658 <xQueueSemaphoreTake>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d00b      	beq.n	800ce28 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ce16:	f06f 0301 	mvn.w	r3, #1
 800ce1a:	61fb      	str	r3, [r7, #28]
 800ce1c:	e004      	b.n	800ce28 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ce1e:	f06f 0302 	mvn.w	r3, #2
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e000      	b.n	800ce28 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ce26:	bf00      	nop
      }
    }
  }

  return (stat);
 800ce28:	69fb      	ldr	r3, [r7, #28]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3720      	adds	r7, #32
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20001954 	.word	0x20001954
 800ce38:	e000ed04 	.word	0xe000ed04

0800ce3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ce52:	f06f 0303 	mvn.w	r3, #3
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	e03e      	b.n	800ced8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce5a:	f3ef 8305 	mrs	r3, IPSR
 800ce5e:	617b      	str	r3, [r7, #20]
  return(result);
 800ce60:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10f      	bne.n	800ce86 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce66:	f3ef 8310 	mrs	r3, PRIMASK
 800ce6a:	613b      	str	r3, [r7, #16]
  return(result);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d105      	bne.n	800ce7e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce72:	f3ef 8311 	mrs	r3, BASEPRI
 800ce76:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01e      	beq.n	800cebc <osSemaphoreRelease+0x80>
 800ce7e:	4b19      	ldr	r3, [pc, #100]	; (800cee4 <osSemaphoreRelease+0xa8>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d11a      	bne.n	800cebc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ce8a:	f107 0308 	add.w	r3, r7, #8
 800ce8e:	4619      	mov	r1, r3
 800ce90:	69b8      	ldr	r0, [r7, #24]
 800ce92:	f001 fa7b 	bl	800e38c <xQueueGiveFromISR>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d003      	beq.n	800cea4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ce9c:	f06f 0302 	mvn.w	r3, #2
 800cea0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cea2:	e018      	b.n	800ced6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d015      	beq.n	800ced6 <osSemaphoreRelease+0x9a>
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <osSemaphoreRelease+0xac>)
 800ceac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ceba:	e00c      	b.n	800ced6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cebc:	2300      	movs	r3, #0
 800cebe:	2200      	movs	r2, #0
 800cec0:	2100      	movs	r1, #0
 800cec2:	69b8      	ldr	r0, [r7, #24]
 800cec4:	f001 f8d4 	bl	800e070 <xQueueGenericSend>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d004      	beq.n	800ced8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800cece:	f06f 0302 	mvn.w	r3, #2
 800ced2:	61fb      	str	r3, [r7, #28]
 800ced4:	e000      	b.n	800ced8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ced6:	bf00      	nop
    }
  }

  return (stat);
 800ced8:	69fb      	ldr	r3, [r7, #28]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20001954 	.word	0x20001954
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08c      	sub	sp, #48	; 0x30
 800cef0:	af02      	add	r7, sp, #8
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cefc:	f3ef 8305 	mrs	r3, IPSR
 800cf00:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf02:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d170      	bne.n	800cfea <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf08:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0c:	617b      	str	r3, [r7, #20]
  return(result);
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d105      	bne.n	800cf20 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf14:	f3ef 8311 	mrs	r3, BASEPRI
 800cf18:	613b      	str	r3, [r7, #16]
  return(result);
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d003      	beq.n	800cf28 <osMessageQueueNew+0x3c>
 800cf20:	4b34      	ldr	r3, [pc, #208]	; (800cff4 <osMessageQueueNew+0x108>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d060      	beq.n	800cfea <osMessageQueueNew+0xfe>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d05d      	beq.n	800cfea <osMessageQueueNew+0xfe>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d05a      	beq.n	800cfea <osMessageQueueNew+0xfe>
    mem = -1;
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf38:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d029      	beq.n	800cf94 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d012      	beq.n	800cf6e <osMessageQueueNew+0x82>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	2b4f      	cmp	r3, #79	; 0x4f
 800cf4e:	d90e      	bls.n	800cf6e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00a      	beq.n	800cf6e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	695a      	ldr	r2, [r3, #20]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	fb01 f303 	mul.w	r3, r1, r3
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d302      	bcc.n	800cf6e <osMessageQueueNew+0x82>
        mem = 1;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	623b      	str	r3, [r7, #32]
 800cf6c:	e014      	b.n	800cf98 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d110      	bne.n	800cf98 <osMessageQueueNew+0xac>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10c      	bne.n	800cf98 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d108      	bne.n	800cf98 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d104      	bne.n	800cf98 <osMessageQueueNew+0xac>
          mem = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	623b      	str	r3, [r7, #32]
 800cf92:	e001      	b.n	800cf98 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d10c      	bne.n	800cfb8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691a      	ldr	r2, [r3, #16]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6899      	ldr	r1, [r3, #8]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	68b9      	ldr	r1, [r7, #8]
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f000 fe6e 	bl	800dc90 <xQueueGenericCreateStatic>
 800cfb4:	6278      	str	r0, [r7, #36]	; 0x24
 800cfb6:	e008      	b.n	800cfca <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d105      	bne.n	800cfca <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	68b9      	ldr	r1, [r7, #8]
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f000 fed7 	bl	800dd76 <xQueueGenericCreate>
 800cfc8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00c      	beq.n	800cfea <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <osMessageQueueNew+0xf2>
        name = attr->name;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e001      	b.n	800cfe2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cfe2:	69f9      	ldr	r1, [r7, #28]
 800cfe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfe6:	f001 fe07 	bl	800ebf8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3728      	adds	r7, #40	; 0x28
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20001954 	.word	0x20001954

0800cff8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08a      	sub	sp, #40	; 0x28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	603b      	str	r3, [r7, #0]
 800d004:	4613      	mov	r3, r2
 800d006:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d010:	f3ef 8305 	mrs	r3, IPSR
 800d014:	61fb      	str	r3, [r7, #28]
  return(result);
 800d016:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10f      	bne.n	800d03c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d01c:	f3ef 8310 	mrs	r3, PRIMASK
 800d020:	61bb      	str	r3, [r7, #24]
  return(result);
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d105      	bne.n	800d034 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d028:	f3ef 8311 	mrs	r3, BASEPRI
 800d02c:	617b      	str	r3, [r7, #20]
  return(result);
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d02c      	beq.n	800d08e <osMessageQueuePut+0x96>
 800d034:	4b28      	ldr	r3, [pc, #160]	; (800d0d8 <osMessageQueuePut+0xe0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d128      	bne.n	800d08e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d005      	beq.n	800d04e <osMessageQueuePut+0x56>
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <osMessageQueuePut+0x56>
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d04e:	f06f 0303 	mvn.w	r3, #3
 800d052:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d054:	e039      	b.n	800d0ca <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d05a:	f107 0210 	add.w	r2, r7, #16
 800d05e:	2300      	movs	r3, #0
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	6a38      	ldr	r0, [r7, #32]
 800d064:	f001 f8fe 	bl	800e264 <xQueueGenericSendFromISR>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d003      	beq.n	800d076 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d06e:	f06f 0302 	mvn.w	r3, #2
 800d072:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d074:	e029      	b.n	800d0ca <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d026      	beq.n	800d0ca <osMessageQueuePut+0xd2>
 800d07c:	4b17      	ldr	r3, [pc, #92]	; (800d0dc <osMessageQueuePut+0xe4>)
 800d07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d08c:	e01d      	b.n	800d0ca <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <osMessageQueuePut+0xa2>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d103      	bne.n	800d0a2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d09a:	f06f 0303 	mvn.w	r3, #3
 800d09e:	627b      	str	r3, [r7, #36]	; 0x24
 800d0a0:	e014      	b.n	800d0cc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	683a      	ldr	r2, [r7, #0]
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	6a38      	ldr	r0, [r7, #32]
 800d0aa:	f000 ffe1 	bl	800e070 <xQueueGenericSend>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d00b      	beq.n	800d0cc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d0ba:	f06f 0301 	mvn.w	r3, #1
 800d0be:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c0:	e004      	b.n	800d0cc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d0c2:	f06f 0302 	mvn.w	r3, #2
 800d0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c8:	e000      	b.n	800d0cc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3728      	adds	r7, #40	; 0x28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20001954 	.word	0x20001954
 800d0dc:	e000ed04 	.word	0xe000ed04

0800d0e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08a      	sub	sp, #40	; 0x28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0f6:	f3ef 8305 	mrs	r3, IPSR
 800d0fa:	61fb      	str	r3, [r7, #28]
  return(result);
 800d0fc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10f      	bne.n	800d122 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d102:	f3ef 8310 	mrs	r3, PRIMASK
 800d106:	61bb      	str	r3, [r7, #24]
  return(result);
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d105      	bne.n	800d11a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d10e:	f3ef 8311 	mrs	r3, BASEPRI
 800d112:	617b      	str	r3, [r7, #20]
  return(result);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d02c      	beq.n	800d174 <osMessageQueueGet+0x94>
 800d11a:	4b28      	ldr	r3, [pc, #160]	; (800d1bc <osMessageQueueGet+0xdc>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d128      	bne.n	800d174 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d005      	beq.n	800d134 <osMessageQueueGet+0x54>
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <osMessageQueueGet+0x54>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d134:	f06f 0303 	mvn.w	r3, #3
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d13a:	e038      	b.n	800d1ae <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d140:	f107 0310 	add.w	r3, r7, #16
 800d144:	461a      	mov	r2, r3
 800d146:	68b9      	ldr	r1, [r7, #8]
 800d148:	6a38      	ldr	r0, [r7, #32]
 800d14a:	f001 fb8d 	bl	800e868 <xQueueReceiveFromISR>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b01      	cmp	r3, #1
 800d152:	d003      	beq.n	800d15c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d154:	f06f 0302 	mvn.w	r3, #2
 800d158:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d15a:	e028      	b.n	800d1ae <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d025      	beq.n	800d1ae <osMessageQueueGet+0xce>
 800d162:	4b17      	ldr	r3, [pc, #92]	; (800d1c0 <osMessageQueueGet+0xe0>)
 800d164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d172:	e01c      	b.n	800d1ae <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <osMessageQueueGet+0xa0>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d103      	bne.n	800d188 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d180:	f06f 0303 	mvn.w	r3, #3
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
 800d186:	e013      	b.n	800d1b0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	6a38      	ldr	r0, [r7, #32]
 800d18e:	f001 f987 	bl	800e4a0 <xQueueReceive>
 800d192:	4603      	mov	r3, r0
 800d194:	2b01      	cmp	r3, #1
 800d196:	d00b      	beq.n	800d1b0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d19e:	f06f 0301 	mvn.w	r3, #1
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1a4:	e004      	b.n	800d1b0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d1a6:	f06f 0302 	mvn.w	r3, #2
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d1ac:	e000      	b.n	800d1b0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3728      	adds	r7, #40	; 0x28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20001954 	.word	0x20001954
 800d1c0:	e000ed04 	.word	0xe000ed04

0800d1c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4a07      	ldr	r2, [pc, #28]	; (800d1f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d1d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	4a06      	ldr	r2, [pc, #24]	; (800d1f4 <vApplicationGetIdleTaskMemory+0x30>)
 800d1da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1e2:	601a      	str	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	20001958 	.word	0x20001958
 800d1f4:	200019b4 	.word	0x200019b4

0800d1f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4a07      	ldr	r2, [pc, #28]	; (800d224 <vApplicationGetTimerTaskMemory+0x2c>)
 800d208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4a06      	ldr	r2, [pc, #24]	; (800d228 <vApplicationGetTimerTaskMemory+0x30>)
 800d20e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d216:	601a      	str	r2, [r3, #0]
}
 800d218:	bf00      	nop
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	200021b4 	.word	0x200021b4
 800d228:	20002210 	.word	0x20002210

0800d22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08a      	sub	sp, #40	; 0x28
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d234:	2300      	movs	r3, #0
 800d236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d238:	f001 ff9a 	bl	800f170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d23c:	4b57      	ldr	r3, [pc, #348]	; (800d39c <pvPortMalloc+0x170>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d244:	f000 f90c 	bl	800d460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d248:	4b55      	ldr	r3, [pc, #340]	; (800d3a0 <pvPortMalloc+0x174>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4013      	ands	r3, r2
 800d250:	2b00      	cmp	r3, #0
 800d252:	f040 808c 	bne.w	800d36e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d01c      	beq.n	800d296 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d25c:	2208      	movs	r2, #8
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4413      	add	r3, r2
 800d262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f003 0307 	and.w	r3, r3, #7
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d013      	beq.n	800d296 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f023 0307 	bic.w	r3, r3, #7
 800d274:	3308      	adds	r3, #8
 800d276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d009      	beq.n	800d296 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	e7fe      	b.n	800d294 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d068      	beq.n	800d36e <pvPortMalloc+0x142>
 800d29c:	4b41      	ldr	r3, [pc, #260]	; (800d3a4 <pvPortMalloc+0x178>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d863      	bhi.n	800d36e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d2a6:	4b40      	ldr	r3, [pc, #256]	; (800d3a8 <pvPortMalloc+0x17c>)
 800d2a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d2aa:	4b3f      	ldr	r3, [pc, #252]	; (800d3a8 <pvPortMalloc+0x17c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2b0:	e004      	b.n	800d2bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d903      	bls.n	800d2ce <pvPortMalloc+0xa2>
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1f1      	bne.n	800d2b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d2ce:	4b33      	ldr	r3, [pc, #204]	; (800d39c <pvPortMalloc+0x170>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d04a      	beq.n	800d36e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2208      	movs	r2, #8
 800d2de:	4413      	add	r3, r2
 800d2e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	1ad2      	subs	r2, r2, r3
 800d2f2:	2308      	movs	r3, #8
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d91e      	bls.n	800d338 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4413      	add	r3, r2
 800d300:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	f003 0307 	and.w	r3, r3, #7
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d009      	beq.n	800d320 <pvPortMalloc+0xf4>
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	e7fe      	b.n	800d31e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	1ad2      	subs	r2, r2, r3
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d332:	69b8      	ldr	r0, [r7, #24]
 800d334:	f000 f8f6 	bl	800d524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d338:	4b1a      	ldr	r3, [pc, #104]	; (800d3a4 <pvPortMalloc+0x178>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	4a18      	ldr	r2, [pc, #96]	; (800d3a4 <pvPortMalloc+0x178>)
 800d344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d346:	4b17      	ldr	r3, [pc, #92]	; (800d3a4 <pvPortMalloc+0x178>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	4b18      	ldr	r3, [pc, #96]	; (800d3ac <pvPortMalloc+0x180>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d203      	bcs.n	800d35a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d352:	4b14      	ldr	r3, [pc, #80]	; (800d3a4 <pvPortMalloc+0x178>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a15      	ldr	r2, [pc, #84]	; (800d3ac <pvPortMalloc+0x180>)
 800d358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <pvPortMalloc+0x174>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	431a      	orrs	r2, r3
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d36e:	f001 ff0d 	bl	800f18c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	f003 0307 	and.w	r3, r3, #7
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d009      	beq.n	800d390 <pvPortMalloc+0x164>
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	60fb      	str	r3, [r7, #12]
 800d38e:	e7fe      	b.n	800d38e <pvPortMalloc+0x162>
	return pvReturn;
 800d390:	69fb      	ldr	r3, [r7, #28]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20006e18 	.word	0x20006e18
 800d3a0:	20006e24 	.word	0x20006e24
 800d3a4:	20006e1c 	.word	0x20006e1c
 800d3a8:	20006e10 	.word	0x20006e10
 800d3ac:	20006e20 	.word	0x20006e20

0800d3b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d046      	beq.n	800d450 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3c2:	2308      	movs	r3, #8
 800d3c4:	425b      	negs	r3, r3
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	4b20      	ldr	r3, [pc, #128]	; (800d458 <vPortFree+0xa8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d109      	bne.n	800d3f2 <vPortFree+0x42>
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	e7fe      	b.n	800d3f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <vPortFree+0x5e>
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	60bb      	str	r3, [r7, #8]
 800d40c:	e7fe      	b.n	800d40c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	4b11      	ldr	r3, [pc, #68]	; (800d458 <vPortFree+0xa8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4013      	ands	r3, r2
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d019      	beq.n	800d450 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d115      	bne.n	800d450 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <vPortFree+0xa8>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	43db      	mvns	r3, r3
 800d42e:	401a      	ands	r2, r3
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d434:	f001 fe9c 	bl	800f170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	4b07      	ldr	r3, [pc, #28]	; (800d45c <vPortFree+0xac>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4413      	add	r3, r2
 800d442:	4a06      	ldr	r2, [pc, #24]	; (800d45c <vPortFree+0xac>)
 800d444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d446:	6938      	ldr	r0, [r7, #16]
 800d448:	f000 f86c 	bl	800d524 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d44c:	f001 fe9e 	bl	800f18c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d450:	bf00      	nop
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20006e24 	.word	0x20006e24
 800d45c:	20006e1c 	.word	0x20006e1c

0800d460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d466:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d46a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d46c:	4b27      	ldr	r3, [pc, #156]	; (800d50c <prvHeapInit+0xac>)
 800d46e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f003 0307 	and.w	r3, r3, #7
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00c      	beq.n	800d494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3307      	adds	r3, #7
 800d47e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	4a1f      	ldr	r2, [pc, #124]	; (800d50c <prvHeapInit+0xac>)
 800d490:	4413      	add	r3, r2
 800d492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d498:	4a1d      	ldr	r2, [pc, #116]	; (800d510 <prvHeapInit+0xb0>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d49e:	4b1c      	ldr	r3, [pc, #112]	; (800d510 <prvHeapInit+0xb0>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4ac:	2208      	movs	r2, #8
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 0307 	bic.w	r3, r3, #7
 800d4ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	4a15      	ldr	r2, [pc, #84]	; (800d514 <prvHeapInit+0xb4>)
 800d4c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4c2:	4b14      	ldr	r3, [pc, #80]	; (800d514 <prvHeapInit+0xb4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4ca:	4b12      	ldr	r3, [pc, #72]	; (800d514 <prvHeapInit+0xb4>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	1ad2      	subs	r2, r2, r3
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4e0:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <prvHeapInit+0xb4>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	4a0a      	ldr	r2, [pc, #40]	; (800d518 <prvHeapInit+0xb8>)
 800d4ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	4a09      	ldr	r2, [pc, #36]	; (800d51c <prvHeapInit+0xbc>)
 800d4f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4f8:	4b09      	ldr	r3, [pc, #36]	; (800d520 <prvHeapInit+0xc0>)
 800d4fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4fe:	601a      	str	r2, [r3, #0]
}
 800d500:	bf00      	nop
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	20003210 	.word	0x20003210
 800d510:	20006e10 	.word	0x20006e10
 800d514:	20006e18 	.word	0x20006e18
 800d518:	20006e20 	.word	0x20006e20
 800d51c:	20006e1c 	.word	0x20006e1c
 800d520:	20006e24 	.word	0x20006e24

0800d524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d52c:	4b28      	ldr	r3, [pc, #160]	; (800d5d0 <prvInsertBlockIntoFreeList+0xac>)
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	e002      	b.n	800d538 <prvInsertBlockIntoFreeList+0x14>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d8f7      	bhi.n	800d532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	4413      	add	r3, r2
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d108      	bne.n	800d566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	441a      	add	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	441a      	add	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	429a      	cmp	r2, r3
 800d578:	d118      	bne.n	800d5ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	4b15      	ldr	r3, [pc, #84]	; (800d5d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d00d      	beq.n	800d5a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	685a      	ldr	r2, [r3, #4]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	441a      	add	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	e008      	b.n	800d5b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d5a2:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	e003      	b.n	800d5b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d002      	beq.n	800d5c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5c2:	bf00      	nop
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	20006e10 	.word	0x20006e10
 800d5d4:	20006e18 	.word	0x20006e18

0800d5d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f103 0208 	add.w	r2, r3, #8
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f103 0208 	add.w	r2, r3, #8
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f103 0208 	add.w	r2, r3, #8
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2200      	movs	r2, #0
 800d60a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d626:	bf00      	nop
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d632:	b480      	push	{r7}
 800d634:	b085      	sub	sp, #20
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	689a      	ldr	r2, [r3, #8]
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	601a      	str	r2, [r3, #0]
}
 800d66e:	bf00      	nop
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d67a:	b480      	push	{r7}
 800d67c:	b085      	sub	sp, #20
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d690:	d103      	bne.n	800d69a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	e00c      	b.n	800d6b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3308      	adds	r3, #8
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	e002      	b.n	800d6a8 <vListInsert+0x2e>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	60fb      	str	r3, [r7, #12]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d2f6      	bcs.n	800d6a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	683a      	ldr	r2, [r7, #0]
 800d6c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	683a      	ldr	r2, [r7, #0]
 800d6ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	601a      	str	r2, [r3, #0]
}
 800d6e0:	bf00      	nop
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	6892      	ldr	r2, [r2, #8]
 800d702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	6852      	ldr	r2, [r2, #4]
 800d70c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	429a      	cmp	r2, r3
 800d716:	d103      	bne.n	800d720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	1e5a      	subs	r2, r3, #1
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3b04      	subs	r3, #4
 800d750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3b04      	subs	r3, #4
 800d75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	f023 0201 	bic.w	r2, r3, #1
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3b04      	subs	r3, #4
 800d76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d770:	4a0c      	ldr	r2, [pc, #48]	; (800d7a4 <pxPortInitialiseStack+0x64>)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3b14      	subs	r3, #20
 800d77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3b04      	subs	r3, #4
 800d786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f06f 0202 	mvn.w	r2, #2
 800d78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3b20      	subs	r3, #32
 800d794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	0800d7a9 	.word	0x0800d7a9

0800d7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7b2:	4b11      	ldr	r3, [pc, #68]	; (800d7f8 <prvTaskExitError+0x50>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ba:	d009      	beq.n	800d7d0 <prvTaskExitError+0x28>
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	e7fe      	b.n	800d7ce <prvTaskExitError+0x26>
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7e2:	bf00      	nop
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0fc      	beq.n	800d7e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7ea:	bf00      	nop
 800d7ec:	3714      	adds	r7, #20
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20000024 	.word	0x20000024
 800d7fc:	00000000 	.word	0x00000000

0800d800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d800:	4b07      	ldr	r3, [pc, #28]	; (800d820 <pxCurrentTCBConst2>)
 800d802:	6819      	ldr	r1, [r3, #0]
 800d804:	6808      	ldr	r0, [r1, #0]
 800d806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80a:	f380 8809 	msr	PSP, r0
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f04f 0000 	mov.w	r0, #0
 800d816:	f380 8811 	msr	BASEPRI, r0
 800d81a:	4770      	bx	lr
 800d81c:	f3af 8000 	nop.w

0800d820 <pxCurrentTCBConst2>:
 800d820:	20006e30 	.word	0x20006e30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop

0800d828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d828:	4808      	ldr	r0, [pc, #32]	; (800d84c <prvPortStartFirstTask+0x24>)
 800d82a:	6800      	ldr	r0, [r0, #0]
 800d82c:	6800      	ldr	r0, [r0, #0]
 800d82e:	f380 8808 	msr	MSP, r0
 800d832:	f04f 0000 	mov.w	r0, #0
 800d836:	f380 8814 	msr	CONTROL, r0
 800d83a:	b662      	cpsie	i
 800d83c:	b661      	cpsie	f
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	df00      	svc	0
 800d848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d84a:	bf00      	nop
 800d84c:	e000ed08 	.word	0xe000ed08

0800d850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d856:	4b44      	ldr	r3, [pc, #272]	; (800d968 <xPortStartScheduler+0x118>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a44      	ldr	r2, [pc, #272]	; (800d96c <xPortStartScheduler+0x11c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d109      	bne.n	800d874 <xPortStartScheduler+0x24>
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	613b      	str	r3, [r7, #16]
 800d872:	e7fe      	b.n	800d872 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d874:	4b3c      	ldr	r3, [pc, #240]	; (800d968 <xPortStartScheduler+0x118>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a3d      	ldr	r2, [pc, #244]	; (800d970 <xPortStartScheduler+0x120>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d109      	bne.n	800d892 <xPortStartScheduler+0x42>
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e7fe      	b.n	800d890 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d892:	4b38      	ldr	r3, [pc, #224]	; (800d974 <xPortStartScheduler+0x124>)
 800d894:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	22ff      	movs	r2, #255	; 0xff
 800d8a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8ac:	78fb      	ldrb	r3, [r7, #3]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	4b30      	ldr	r3, [pc, #192]	; (800d978 <xPortStartScheduler+0x128>)
 800d8b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8ba:	4b30      	ldr	r3, [pc, #192]	; (800d97c <xPortStartScheduler+0x12c>)
 800d8bc:	2207      	movs	r2, #7
 800d8be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8c0:	e009      	b.n	800d8d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d8c2:	4b2e      	ldr	r3, [pc, #184]	; (800d97c <xPortStartScheduler+0x12c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	4a2c      	ldr	r2, [pc, #176]	; (800d97c <xPortStartScheduler+0x12c>)
 800d8ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8d6:	78fb      	ldrb	r3, [r7, #3]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8de:	2b80      	cmp	r3, #128	; 0x80
 800d8e0:	d0ef      	beq.n	800d8c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8e2:	4b26      	ldr	r3, [pc, #152]	; (800d97c <xPortStartScheduler+0x12c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f1c3 0307 	rsb	r3, r3, #7
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	d009      	beq.n	800d902 <xPortStartScheduler+0xb2>
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60bb      	str	r3, [r7, #8]
 800d900:	e7fe      	b.n	800d900 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d902:	4b1e      	ldr	r3, [pc, #120]	; (800d97c <xPortStartScheduler+0x12c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	4a1c      	ldr	r2, [pc, #112]	; (800d97c <xPortStartScheduler+0x12c>)
 800d90a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d90c:	4b1b      	ldr	r3, [pc, #108]	; (800d97c <xPortStartScheduler+0x12c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d914:	4a19      	ldr	r2, [pc, #100]	; (800d97c <xPortStartScheduler+0x12c>)
 800d916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d920:	4b17      	ldr	r3, [pc, #92]	; (800d980 <xPortStartScheduler+0x130>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a16      	ldr	r2, [pc, #88]	; (800d980 <xPortStartScheduler+0x130>)
 800d926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d92a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d92c:	4b14      	ldr	r3, [pc, #80]	; (800d980 <xPortStartScheduler+0x130>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a13      	ldr	r2, [pc, #76]	; (800d980 <xPortStartScheduler+0x130>)
 800d932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d938:	f000 f8d6 	bl	800dae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d93c:	4b11      	ldr	r3, [pc, #68]	; (800d984 <xPortStartScheduler+0x134>)
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d942:	f000 f8f5 	bl	800db30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d946:	4b10      	ldr	r3, [pc, #64]	; (800d988 <xPortStartScheduler+0x138>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a0f      	ldr	r2, [pc, #60]	; (800d988 <xPortStartScheduler+0x138>)
 800d94c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d950:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d952:	f7ff ff69 	bl	800d828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d956:	f001 fd8f 	bl	800f478 <vTaskSwitchContext>
	prvTaskExitError();
 800d95a:	f7ff ff25 	bl	800d7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3718      	adds	r7, #24
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	e000ed00 	.word	0xe000ed00
 800d96c:	410fc271 	.word	0x410fc271
 800d970:	410fc270 	.word	0x410fc270
 800d974:	e000e400 	.word	0xe000e400
 800d978:	20006e28 	.word	0x20006e28
 800d97c:	20006e2c 	.word	0x20006e2c
 800d980:	e000ed20 	.word	0xe000ed20
 800d984:	20000024 	.word	0x20000024
 800d988:	e000ef34 	.word	0xe000ef34

0800d98c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9a4:	4b0e      	ldr	r3, [pc, #56]	; (800d9e0 <vPortEnterCritical+0x54>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	4a0d      	ldr	r2, [pc, #52]	; (800d9e0 <vPortEnterCritical+0x54>)
 800d9ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9ae:	4b0c      	ldr	r3, [pc, #48]	; (800d9e0 <vPortEnterCritical+0x54>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d10e      	bne.n	800d9d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9b6:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <vPortEnterCritical+0x58>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d009      	beq.n	800d9d4 <vPortEnterCritical+0x48>
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	603b      	str	r3, [r7, #0]
 800d9d2:	e7fe      	b.n	800d9d2 <vPortEnterCritical+0x46>
	}
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	20000024 	.word	0x20000024
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9ee:	4b11      	ldr	r3, [pc, #68]	; (800da34 <vPortExitCritical+0x4c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d109      	bne.n	800da0a <vPortExitCritical+0x22>
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	607b      	str	r3, [r7, #4]
 800da08:	e7fe      	b.n	800da08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800da0a:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <vPortExitCritical+0x4c>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	3b01      	subs	r3, #1
 800da10:	4a08      	ldr	r2, [pc, #32]	; (800da34 <vPortExitCritical+0x4c>)
 800da12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da14:	4b07      	ldr	r3, [pc, #28]	; (800da34 <vPortExitCritical+0x4c>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d104      	bne.n	800da26 <vPortExitCritical+0x3e>
 800da1c:	2300      	movs	r3, #0
 800da1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800da26:	bf00      	nop
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	20000024 	.word	0x20000024
	...

0800da40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da40:	f3ef 8009 	mrs	r0, PSP
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <pxCurrentTCBConst>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	f01e 0f10 	tst.w	lr, #16
 800da50:	bf08      	it	eq
 800da52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	6010      	str	r0, [r2, #0]
 800da5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da64:	f380 8811 	msr	BASEPRI, r0
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f001 fd02 	bl	800f478 <vTaskSwitchContext>
 800da74:	f04f 0000 	mov.w	r0, #0
 800da78:	f380 8811 	msr	BASEPRI, r0
 800da7c:	bc09      	pop	{r0, r3}
 800da7e:	6819      	ldr	r1, [r3, #0]
 800da80:	6808      	ldr	r0, [r1, #0]
 800da82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da86:	f01e 0f10 	tst.w	lr, #16
 800da8a:	bf08      	it	eq
 800da8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da90:	f380 8809 	msr	PSP, r0
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w

0800daa0 <pxCurrentTCBConst>:
 800daa0:	20006e30 	.word	0x20006e30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop

0800daa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dac0:	f001 fc22 	bl	800f308 <xTaskIncrementTick>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800daca:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <SysTick_Handler+0x3c>)
 800dacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	2300      	movs	r3, #0
 800dad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dadc:	bf00      	nop
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	e000ed04 	.word	0xe000ed04

0800dae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800daec:	4b0b      	ldr	r3, [pc, #44]	; (800db1c <vPortSetupTimerInterrupt+0x34>)
 800daee:	2200      	movs	r2, #0
 800daf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800daf2:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <vPortSetupTimerInterrupt+0x38>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800daf8:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <vPortSetupTimerInterrupt+0x3c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a0a      	ldr	r2, [pc, #40]	; (800db28 <vPortSetupTimerInterrupt+0x40>)
 800dafe:	fba2 2303 	umull	r2, r3, r2, r3
 800db02:	099b      	lsrs	r3, r3, #6
 800db04:	4a09      	ldr	r2, [pc, #36]	; (800db2c <vPortSetupTimerInterrupt+0x44>)
 800db06:	3b01      	subs	r3, #1
 800db08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db0a:	4b04      	ldr	r3, [pc, #16]	; (800db1c <vPortSetupTimerInterrupt+0x34>)
 800db0c:	2207      	movs	r2, #7
 800db0e:	601a      	str	r2, [r3, #0]
}
 800db10:	bf00      	nop
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	e000e010 	.word	0xe000e010
 800db20:	e000e018 	.word	0xe000e018
 800db24:	20000000 	.word	0x20000000
 800db28:	10624dd3 	.word	0x10624dd3
 800db2c:	e000e014 	.word	0xe000e014

0800db30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db40 <vPortEnableVFP+0x10>
 800db34:	6801      	ldr	r1, [r0, #0]
 800db36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db3a:	6001      	str	r1, [r0, #0]
 800db3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db3e:	bf00      	nop
 800db40:	e000ed88 	.word	0xe000ed88

0800db44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db4a:	f3ef 8305 	mrs	r3, IPSR
 800db4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b0f      	cmp	r3, #15
 800db54:	d913      	bls.n	800db7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db56:	4a16      	ldr	r2, [pc, #88]	; (800dbb0 <vPortValidateInterruptPriority+0x6c>)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db60:	4b14      	ldr	r3, [pc, #80]	; (800dbb4 <vPortValidateInterruptPriority+0x70>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	7afa      	ldrb	r2, [r7, #11]
 800db66:	429a      	cmp	r2, r3
 800db68:	d209      	bcs.n	800db7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	607b      	str	r3, [r7, #4]
 800db7c:	e7fe      	b.n	800db7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db7e:	4b0e      	ldr	r3, [pc, #56]	; (800dbb8 <vPortValidateInterruptPriority+0x74>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db86:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <vPortValidateInterruptPriority+0x78>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d909      	bls.n	800dba2 <vPortValidateInterruptPriority+0x5e>
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	e7fe      	b.n	800dba0 <vPortValidateInterruptPriority+0x5c>
	}
 800dba2:	bf00      	nop
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	e000e3f0 	.word	0xe000e3f0
 800dbb4:	20006e28 	.word	0x20006e28
 800dbb8:	e000ed0c 	.word	0xe000ed0c
 800dbbc:	20006e2c 	.word	0x20006e2c

0800dbc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <xQueueGenericReset+0x28>
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	60bb      	str	r3, [r7, #8]
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800dbe8:	f7ff fed0 	bl	800d98c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf4:	68f9      	ldr	r1, [r7, #12]
 800dbf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dbf8:	fb01 f303 	mul.w	r3, r1, r3
 800dbfc:	441a      	add	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	68f9      	ldr	r1, [r7, #12]
 800dc1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dc1e:	fb01 f303 	mul.w	r3, r1, r3
 800dc22:	441a      	add	r2, r3
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	22ff      	movs	r2, #255	; 0xff
 800dc2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	22ff      	movs	r2, #255	; 0xff
 800dc34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d114      	bne.n	800dc68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d01a      	beq.n	800dc7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3310      	adds	r3, #16
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f001 fcbe 	bl	800f5cc <xTaskRemoveFromEventList>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d012      	beq.n	800dc7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dc56:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <xQueueGenericReset+0xcc>)
 800dc58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	e009      	b.n	800dc7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3310      	adds	r3, #16
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff fcb3 	bl	800d5d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3324      	adds	r3, #36	; 0x24
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff fcae 	bl	800d5d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dc7c:	f7ff feb4 	bl	800d9e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dc80:	2301      	movs	r3, #1
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	e000ed04 	.word	0xe000ed04

0800dc90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08e      	sub	sp, #56	; 0x38
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d109      	bne.n	800dcb8 <xQueueGenericCreateStatic+0x28>
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcb6:	e7fe      	b.n	800dcb6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d109      	bne.n	800dcd2 <xQueueGenericCreateStatic+0x42>
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
 800dcd0:	e7fe      	b.n	800dcd0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <xQueueGenericCreateStatic+0x4e>
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <xQueueGenericCreateStatic+0x52>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e000      	b.n	800dce4 <xQueueGenericCreateStatic+0x54>
 800dce2:	2300      	movs	r3, #0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d109      	bne.n	800dcfc <xQueueGenericCreateStatic+0x6c>
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	623b      	str	r3, [r7, #32]
 800dcfa:	e7fe      	b.n	800dcfa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d102      	bne.n	800dd08 <xQueueGenericCreateStatic+0x78>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <xQueueGenericCreateStatic+0x7c>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e000      	b.n	800dd0e <xQueueGenericCreateStatic+0x7e>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d109      	bne.n	800dd26 <xQueueGenericCreateStatic+0x96>
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e7fe      	b.n	800dd24 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dd26:	2350      	movs	r3, #80	; 0x50
 800dd28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b50      	cmp	r3, #80	; 0x50
 800dd2e:	d009      	beq.n	800dd44 <xQueueGenericCreateStatic+0xb4>
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	61bb      	str	r3, [r7, #24]
 800dd42:	e7fe      	b.n	800dd42 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dd44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00d      	beq.n	800dd6c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	4613      	mov	r3, r2
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	68b9      	ldr	r1, [r7, #8]
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f000 f844 	bl	800ddf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3730      	adds	r7, #48	; 0x30
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b08a      	sub	sp, #40	; 0x28
 800dd7a:	af02      	add	r7, sp, #8
 800dd7c:	60f8      	str	r0, [r7, #12]
 800dd7e:	60b9      	str	r1, [r7, #8]
 800dd80:	4613      	mov	r3, r2
 800dd82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d109      	bne.n	800dd9e <xQueueGenericCreate+0x28>
 800dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	613b      	str	r3, [r7, #16]
 800dd9c:	e7fe      	b.n	800dd9c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61fb      	str	r3, [r7, #28]
 800dda8:	e004      	b.n	800ddb4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	fb02 f303 	mul.w	r3, r2, r3
 800ddb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	3350      	adds	r3, #80	; 0x50
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7ff fa37 	bl	800d22c <pvPortMalloc>
 800ddbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d011      	beq.n	800ddea <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	3350      	adds	r3, #80	; 0x50
 800ddce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ddd8:	79fa      	ldrb	r2, [r7, #7]
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	4613      	mov	r3, r2
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f000 f805 	bl	800ddf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ddea:	69bb      	ldr	r3, [r7, #24]
	}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3720      	adds	r7, #32
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d103      	bne.n	800de10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	69ba      	ldr	r2, [r7, #24]
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	e002      	b.n	800de16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800de22:	2101      	movs	r1, #1
 800de24:	69b8      	ldr	r0, [r7, #24]
 800de26:	f7ff fecb 	bl	800dbc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	78fa      	ldrb	r2, [r7, #3]
 800de2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800de32:	bf00      	nop
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00e      	beq.n	800de66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800de5a:	2300      	movs	r3, #0
 800de5c:	2200      	movs	r2, #0
 800de5e:	2100      	movs	r1, #0
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f905 	bl	800e070 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b086      	sub	sp, #24
 800de72:	af00      	add	r7, sp, #0
 800de74:	4603      	mov	r3, r0
 800de76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de78:	2301      	movs	r3, #1
 800de7a:	617b      	str	r3, [r7, #20]
 800de7c:	2300      	movs	r3, #0
 800de7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	461a      	mov	r2, r3
 800de84:	6939      	ldr	r1, [r7, #16]
 800de86:	6978      	ldr	r0, [r7, #20]
 800de88:	f7ff ff75 	bl	800dd76 <xQueueGenericCreate>
 800de8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff ffd3 	bl	800de3a <prvInitialiseMutex>

		return xNewQueue;
 800de94:	68fb      	ldr	r3, [r7, #12]
	}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b088      	sub	sp, #32
 800dea2:	af02      	add	r7, sp, #8
 800dea4:	4603      	mov	r3, r0
 800dea6:	6039      	str	r1, [r7, #0]
 800dea8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800deaa:	2301      	movs	r3, #1
 800deac:	617b      	str	r3, [r7, #20]
 800deae:	2300      	movs	r3, #0
 800deb0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800deb2:	79fb      	ldrb	r3, [r7, #7]
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2200      	movs	r2, #0
 800deba:	6939      	ldr	r1, [r7, #16]
 800debc:	6978      	ldr	r0, [r7, #20]
 800debe:	f7ff fee7 	bl	800dc90 <xQueueGenericCreateStatic>
 800dec2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff ffb8 	bl	800de3a <prvInitialiseMutex>

		return xNewQueue;
 800deca:	68fb      	ldr	r3, [r7, #12]
	}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d109      	bne.n	800defa <xQueueGiveMutexRecursive+0x26>
 800dee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deea:	f383 8811 	msr	BASEPRI, r3
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	f3bf 8f4f 	dsb	sy
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	e7fe      	b.n	800def8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	689c      	ldr	r4, [r3, #8]
 800defe:	f001 fd1b 	bl	800f938 <xTaskGetCurrentTaskHandle>
 800df02:	4603      	mov	r3, r0
 800df04:	429c      	cmp	r4, r3
 800df06:	d111      	bne.n	800df2c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	1e5a      	subs	r2, r3, #1
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d105      	bne.n	800df26 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800df1a:	2300      	movs	r3, #0
 800df1c:	2200      	movs	r2, #0
 800df1e:	2100      	movs	r1, #0
 800df20:	6938      	ldr	r0, [r7, #16]
 800df22:	f000 f8a5 	bl	800e070 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800df26:	2301      	movs	r3, #1
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	e001      	b.n	800df30 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800df2c:	2300      	movs	r3, #0
 800df2e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800df30:	697b      	ldr	r3, [r7, #20]
	}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}

0800df3a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800df3a:	b590      	push	{r4, r7, lr}
 800df3c:	b087      	sub	sp, #28
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d109      	bne.n	800df62 <xQueueTakeMutexRecursive+0x28>
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e7fe      	b.n	800df60 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	689c      	ldr	r4, [r3, #8]
 800df66:	f001 fce7 	bl	800f938 <xTaskGetCurrentTaskHandle>
 800df6a:	4603      	mov	r3, r0
 800df6c:	429c      	cmp	r4, r3
 800df6e:	d107      	bne.n	800df80 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800df7a:	2301      	movs	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	e00c      	b.n	800df9a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6938      	ldr	r0, [r7, #16]
 800df84:	f000 fb68 	bl	800e658 <xQueueSemaphoreTake>
 800df88:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800df9a:	697b      	ldr	r3, [r7, #20]
	}
 800df9c:	4618      	mov	r0, r3
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd90      	pop	{r4, r7, pc}

0800dfa4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08a      	sub	sp, #40	; 0x28
 800dfa8:	af02      	add	r7, sp, #8
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d109      	bne.n	800dfca <xQueueCreateCountingSemaphoreStatic+0x26>
 800dfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	61bb      	str	r3, [r7, #24]
 800dfc8:	e7fe      	b.n	800dfc8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d909      	bls.n	800dfe6 <xQueueCreateCountingSemaphoreStatic+0x42>
 800dfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd6:	f383 8811 	msr	BASEPRI, r3
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	e7fe      	b.n	800dfe4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	2100      	movs	r1, #0
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff fe4d 	bl	800dc90 <xQueueGenericCreateStatic>
 800dff6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e004:	69fb      	ldr	r3, [r7, #28]
	}
 800e006:	4618      	mov	r0, r3
 800e008:	3720      	adds	r7, #32
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b086      	sub	sp, #24
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d109      	bne.n	800e032 <xQueueCreateCountingSemaphore+0x24>
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	613b      	str	r3, [r7, #16]
 800e030:	e7fe      	b.n	800e030 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	429a      	cmp	r2, r3
 800e038:	d909      	bls.n	800e04e <xQueueCreateCountingSemaphore+0x40>
 800e03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	e7fe      	b.n	800e04c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e04e:	2202      	movs	r2, #2
 800e050:	2100      	movs	r1, #0
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff fe8f 	bl	800dd76 <xQueueGenericCreate>
 800e058:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e066:	697b      	ldr	r3, [r7, #20]
	}
 800e068:	4618      	mov	r0, r3
 800e06a:	3718      	adds	r7, #24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08e      	sub	sp, #56	; 0x38
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e07e:	2300      	movs	r3, #0
 800e080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d109      	bne.n	800e0a0 <xQueueGenericSend+0x30>
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e09e:	e7fe      	b.n	800e09e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d103      	bne.n	800e0ae <xQueueGenericSend+0x3e>
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <xQueueGenericSend+0x42>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e000      	b.n	800e0b4 <xQueueGenericSend+0x44>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d109      	bne.n	800e0cc <xQueueGenericSend+0x5c>
 800e0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ca:	e7fe      	b.n	800e0ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d103      	bne.n	800e0da <xQueueGenericSend+0x6a>
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d101      	bne.n	800e0de <xQueueGenericSend+0x6e>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e000      	b.n	800e0e0 <xQueueGenericSend+0x70>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d109      	bne.n	800e0f8 <xQueueGenericSend+0x88>
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	623b      	str	r3, [r7, #32]
 800e0f6:	e7fe      	b.n	800e0f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0f8:	f001 fc2e 	bl	800f958 <xTaskGetSchedulerState>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <xQueueGenericSend+0x98>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <xQueueGenericSend+0x9c>
 800e108:	2301      	movs	r3, #1
 800e10a:	e000      	b.n	800e10e <xQueueGenericSend+0x9e>
 800e10c:	2300      	movs	r3, #0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d109      	bne.n	800e126 <xQueueGenericSend+0xb6>
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	61fb      	str	r3, [r7, #28]
 800e124:	e7fe      	b.n	800e124 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e126:	f7ff fc31 	bl	800d98c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e132:	429a      	cmp	r2, r3
 800e134:	d302      	bcc.n	800e13c <xQueueGenericSend+0xcc>
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d129      	bne.n	800e190 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e142:	f000 fc48 	bl	800e9d6 <prvCopyDataToQueue>
 800e146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d010      	beq.n	800e172 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	3324      	adds	r3, #36	; 0x24
 800e154:	4618      	mov	r0, r3
 800e156:	f001 fa39 	bl	800f5cc <xTaskRemoveFromEventList>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d013      	beq.n	800e188 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e160:	4b3f      	ldr	r3, [pc, #252]	; (800e260 <xQueueGenericSend+0x1f0>)
 800e162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e166:	601a      	str	r2, [r3, #0]
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	e00a      	b.n	800e188 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	2b00      	cmp	r3, #0
 800e176:	d007      	beq.n	800e188 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e178:	4b39      	ldr	r3, [pc, #228]	; (800e260 <xQueueGenericSend+0x1f0>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e188:	f7ff fc2e 	bl	800d9e8 <vPortExitCritical>
				return pdPASS;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e063      	b.n	800e258 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d103      	bne.n	800e19e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e196:	f7ff fc27 	bl	800d9e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	e05c      	b.n	800e258 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1a4:	f107 0314 	add.w	r3, r7, #20
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f001 fa71 	bl	800f690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1b2:	f7ff fc19 	bl	800d9e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1b6:	f000 ffdb 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1ba:	f7ff fbe7 	bl	800d98c <vPortEnterCritical>
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1c4:	b25b      	sxtb	r3, r3
 800e1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1ca:	d103      	bne.n	800e1d4 <xQueueGenericSend+0x164>
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1da:	b25b      	sxtb	r3, r3
 800e1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1e0:	d103      	bne.n	800e1ea <xQueueGenericSend+0x17a>
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1ea:	f7ff fbfd 	bl	800d9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1ee:	1d3a      	adds	r2, r7, #4
 800e1f0:	f107 0314 	add.w	r3, r7, #20
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f001 fa60 	bl	800f6bc <xTaskCheckForTimeOut>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d124      	bne.n	800e24c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e204:	f000 fcdf 	bl	800ebc6 <prvIsQueueFull>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d018      	beq.n	800e240 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	3310      	adds	r3, #16
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	4611      	mov	r1, r2
 800e216:	4618      	mov	r0, r3
 800e218:	f001 f98a 	bl	800f530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e21e:	f000 fc6a 	bl	800eaf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e222:	f000 ffb3 	bl	800f18c <xTaskResumeAll>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f47f af7c 	bne.w	800e126 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e22e:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <xQueueGenericSend+0x1f0>)
 800e230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	e772      	b.n	800e126 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e242:	f000 fc58 	bl	800eaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e246:	f000 ffa1 	bl	800f18c <xTaskResumeAll>
 800e24a:	e76c      	b.n	800e126 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e24e:	f000 fc52 	bl	800eaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e252:	f000 ff9b 	bl	800f18c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3738      	adds	r7, #56	; 0x38
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08e      	sub	sp, #56	; 0x38
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d109      	bne.n	800e290 <xQueueGenericSendFromISR+0x2c>
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	627b      	str	r3, [r7, #36]	; 0x24
 800e28e:	e7fe      	b.n	800e28e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d103      	bne.n	800e29e <xQueueGenericSendFromISR+0x3a>
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d101      	bne.n	800e2a2 <xQueueGenericSendFromISR+0x3e>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e000      	b.n	800e2a4 <xQueueGenericSendFromISR+0x40>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d109      	bne.n	800e2bc <xQueueGenericSendFromISR+0x58>
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	623b      	str	r3, [r7, #32]
 800e2ba:	e7fe      	b.n	800e2ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d103      	bne.n	800e2ca <xQueueGenericSendFromISR+0x66>
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d101      	bne.n	800e2ce <xQueueGenericSendFromISR+0x6a>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e000      	b.n	800e2d0 <xQueueGenericSendFromISR+0x6c>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d109      	bne.n	800e2e8 <xQueueGenericSendFromISR+0x84>
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	e7fe      	b.n	800e2e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2e8:	f7ff fc2c 	bl	800db44 <vPortValidateInterruptPriority>
	__asm volatile
 800e2ec:	f3ef 8211 	mrs	r2, BASEPRI
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	61ba      	str	r2, [r7, #24]
 800e302:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e304:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e310:	429a      	cmp	r2, r3
 800e312:	d302      	bcc.n	800e31a <xQueueGenericSendFromISR+0xb6>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b02      	cmp	r3, #2
 800e318:	d12c      	bne.n	800e374 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32a:	f000 fb54 	bl	800e9d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e32e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e336:	d112      	bne.n	800e35e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d016      	beq.n	800e36e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	3324      	adds	r3, #36	; 0x24
 800e344:	4618      	mov	r0, r3
 800e346:	f001 f941 	bl	800f5cc <xTaskRemoveFromEventList>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00e      	beq.n	800e36e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2201      	movs	r2, #1
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	e007      	b.n	800e36e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e35e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e362:	3301      	adds	r3, #1
 800e364:	b2db      	uxtb	r3, r3
 800e366:	b25a      	sxtb	r2, r3
 800e368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e36e:	2301      	movs	r3, #1
 800e370:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e372:	e001      	b.n	800e378 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e374:	2300      	movs	r3, #0
 800e376:	637b      	str	r3, [r7, #52]	; 0x34
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e384:	4618      	mov	r0, r3
 800e386:	3738      	adds	r7, #56	; 0x38
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08e      	sub	sp, #56	; 0x38
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	623b      	str	r3, [r7, #32]
 800e3b2:	e7fe      	b.n	800e3b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d009      	beq.n	800e3d0 <xQueueGiveFromISR+0x44>
 800e3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	61fb      	str	r3, [r7, #28]
 800e3ce:	e7fe      	b.n	800e3ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d103      	bne.n	800e3e0 <xQueueGiveFromISR+0x54>
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <xQueueGiveFromISR+0x58>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e000      	b.n	800e3e6 <xQueueGiveFromISR+0x5a>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d109      	bne.n	800e3fe <xQueueGiveFromISR+0x72>
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	61bb      	str	r3, [r7, #24]
 800e3fc:	e7fe      	b.n	800e3fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3fe:	f7ff fba1 	bl	800db44 <vPortValidateInterruptPriority>
	__asm volatile
 800e402:	f3ef 8211 	mrs	r2, BASEPRI
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	617a      	str	r2, [r7, #20]
 800e418:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e41a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e41c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e422:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d22b      	bcs.n	800e486 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e448:	d112      	bne.n	800e470 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d016      	beq.n	800e480 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	3324      	adds	r3, #36	; 0x24
 800e456:	4618      	mov	r0, r3
 800e458:	f001 f8b8 	bl	800f5cc <xTaskRemoveFromEventList>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00e      	beq.n	800e480 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00b      	beq.n	800e480 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	2201      	movs	r2, #1
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	e007      	b.n	800e480 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e474:	3301      	adds	r3, #1
 800e476:	b2db      	uxtb	r3, r3
 800e478:	b25a      	sxtb	r2, r3
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e480:	2301      	movs	r3, #1
 800e482:	637b      	str	r3, [r7, #52]	; 0x34
 800e484:	e001      	b.n	800e48a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e486:	2300      	movs	r3, #0
 800e488:	637b      	str	r3, [r7, #52]	; 0x34
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e496:	4618      	mov	r0, r3
 800e498:	3738      	adds	r7, #56	; 0x38
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08c      	sub	sp, #48	; 0x30
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d109      	bne.n	800e4ce <xQueueReceive+0x2e>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	623b      	str	r3, [r7, #32]
 800e4cc:	e7fe      	b.n	800e4cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d103      	bne.n	800e4dc <xQueueReceive+0x3c>
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <xQueueReceive+0x40>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <xQueueReceive+0x42>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d109      	bne.n	800e4fa <xQueueReceive+0x5a>
 800e4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e7fe      	b.n	800e4f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4fa:	f001 fa2d 	bl	800f958 <xTaskGetSchedulerState>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d102      	bne.n	800e50a <xQueueReceive+0x6a>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <xQueueReceive+0x6e>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <xQueueReceive+0x70>
 800e50e:	2300      	movs	r3, #0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d109      	bne.n	800e528 <xQueueReceive+0x88>
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	61bb      	str	r3, [r7, #24]
 800e526:	e7fe      	b.n	800e526 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e528:	f7ff fa30 	bl	800d98c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e530:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	2b00      	cmp	r3, #0
 800e536:	d01f      	beq.n	800e578 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e538:	68b9      	ldr	r1, [r7, #8]
 800e53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e53c:	f000 fab5 	bl	800eaaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	1e5a      	subs	r2, r3, #1
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00f      	beq.n	800e570 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	3310      	adds	r3, #16
 800e554:	4618      	mov	r0, r3
 800e556:	f001 f839 	bl	800f5cc <xTaskRemoveFromEventList>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d007      	beq.n	800e570 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e560:	4b3c      	ldr	r3, [pc, #240]	; (800e654 <xQueueReceive+0x1b4>)
 800e562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e570:	f7ff fa3a 	bl	800d9e8 <vPortExitCritical>
				return pdPASS;
 800e574:	2301      	movs	r3, #1
 800e576:	e069      	b.n	800e64c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d103      	bne.n	800e586 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e57e:	f7ff fa33 	bl	800d9e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e582:	2300      	movs	r3, #0
 800e584:	e062      	b.n	800e64c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d106      	bne.n	800e59a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e58c:	f107 0310 	add.w	r3, r7, #16
 800e590:	4618      	mov	r0, r3
 800e592:	f001 f87d 	bl	800f690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e596:	2301      	movs	r3, #1
 800e598:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e59a:	f7ff fa25 	bl	800d9e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e59e:	f000 fde7 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5a2:	f7ff f9f3 	bl	800d98c <vPortEnterCritical>
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5ac:	b25b      	sxtb	r3, r3
 800e5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5b2:	d103      	bne.n	800e5bc <xQueueReceive+0x11c>
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c2:	b25b      	sxtb	r3, r3
 800e5c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c8:	d103      	bne.n	800e5d2 <xQueueReceive+0x132>
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5d2:	f7ff fa09 	bl	800d9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5d6:	1d3a      	adds	r2, r7, #4
 800e5d8:	f107 0310 	add.w	r3, r7, #16
 800e5dc:	4611      	mov	r1, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f001 f86c 	bl	800f6bc <xTaskCheckForTimeOut>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d123      	bne.n	800e632 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ec:	f000 fad5 	bl	800eb9a <prvIsQueueEmpty>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d017      	beq.n	800e626 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	3324      	adds	r3, #36	; 0x24
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 ff96 	bl	800f530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e606:	f000 fa76 	bl	800eaf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e60a:	f000 fdbf 	bl	800f18c <xTaskResumeAll>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d189      	bne.n	800e528 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e614:	4b0f      	ldr	r3, [pc, #60]	; (800e654 <xQueueReceive+0x1b4>)
 800e616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	e780      	b.n	800e528 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e628:	f000 fa65 	bl	800eaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e62c:	f000 fdae 	bl	800f18c <xTaskResumeAll>
 800e630:	e77a      	b.n	800e528 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e634:	f000 fa5f 	bl	800eaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e638:	f000 fda8 	bl	800f18c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e63e:	f000 faac 	bl	800eb9a <prvIsQueueEmpty>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	f43f af6f 	beq.w	800e528 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e64a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3730      	adds	r7, #48	; 0x30
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08e      	sub	sp, #56	; 0x38
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e662:	2300      	movs	r3, #0
 800e664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	2b00      	cmp	r3, #0
 800e672:	d109      	bne.n	800e688 <xQueueSemaphoreTake+0x30>
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	623b      	str	r3, [r7, #32]
 800e686:	e7fe      	b.n	800e686 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d009      	beq.n	800e6a4 <xQueueSemaphoreTake+0x4c>
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	61fb      	str	r3, [r7, #28]
 800e6a2:	e7fe      	b.n	800e6a2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6a4:	f001 f958 	bl	800f958 <xTaskGetSchedulerState>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d102      	bne.n	800e6b4 <xQueueSemaphoreTake+0x5c>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <xQueueSemaphoreTake+0x60>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e000      	b.n	800e6ba <xQueueSemaphoreTake+0x62>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d109      	bne.n	800e6d2 <xQueueSemaphoreTake+0x7a>
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	61bb      	str	r3, [r7, #24]
 800e6d0:	e7fe      	b.n	800e6d0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6d2:	f7ff f95b 	bl	800d98c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6da:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d024      	beq.n	800e72c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	1e5a      	subs	r2, r3, #1
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d104      	bne.n	800e6fc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e6f2:	f001 faa3 	bl	800fc3c <pvTaskIncrementMutexHeldCount>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00f      	beq.n	800e724 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	3310      	adds	r3, #16
 800e708:	4618      	mov	r0, r3
 800e70a:	f000 ff5f 	bl	800f5cc <xTaskRemoveFromEventList>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d007      	beq.n	800e724 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e714:	4b53      	ldr	r3, [pc, #332]	; (800e864 <xQueueSemaphoreTake+0x20c>)
 800e716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e724:	f7ff f960 	bl	800d9e8 <vPortExitCritical>
				return pdPASS;
 800e728:	2301      	movs	r3, #1
 800e72a:	e096      	b.n	800e85a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d110      	bne.n	800e754 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	2b00      	cmp	r3, #0
 800e736:	d009      	beq.n	800e74c <xQueueSemaphoreTake+0xf4>
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	e7fe      	b.n	800e74a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e74c:	f7ff f94c 	bl	800d9e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e750:	2300      	movs	r3, #0
 800e752:	e082      	b.n	800e85a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e756:	2b00      	cmp	r3, #0
 800e758:	d106      	bne.n	800e768 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e75a:	f107 030c 	add.w	r3, r7, #12
 800e75e:	4618      	mov	r0, r3
 800e760:	f000 ff96 	bl	800f690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e764:	2301      	movs	r3, #1
 800e766:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e768:	f7ff f93e 	bl	800d9e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e76c:	f000 fd00 	bl	800f170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e770:	f7ff f90c 	bl	800d98c <vPortEnterCritical>
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e77a:	b25b      	sxtb	r3, r3
 800e77c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e780:	d103      	bne.n	800e78a <xQueueSemaphoreTake+0x132>
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e790:	b25b      	sxtb	r3, r3
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e796:	d103      	bne.n	800e7a0 <xQueueSemaphoreTake+0x148>
 800e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79a:	2200      	movs	r2, #0
 800e79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a0:	f7ff f922 	bl	800d9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7a4:	463a      	mov	r2, r7
 800e7a6:	f107 030c 	add.w	r3, r7, #12
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 ff85 	bl	800f6bc <xTaskCheckForTimeOut>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d132      	bne.n	800e81e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7ba:	f000 f9ee 	bl	800eb9a <prvIsQueueEmpty>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d026      	beq.n	800e812 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d109      	bne.n	800e7e0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e7cc:	f7ff f8de 	bl	800d98c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f001 f8dd 	bl	800f994 <xTaskPriorityInherit>
 800e7da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e7dc:	f7ff f904 	bl	800d9e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	3324      	adds	r3, #36	; 0x24
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f000 fea1 	bl	800f530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f0:	f000 f981 	bl	800eaf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7f4:	f000 fcca 	bl	800f18c <xTaskResumeAll>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f47f af69 	bne.w	800e6d2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e800:	4b18      	ldr	r3, [pc, #96]	; (800e864 <xQueueSemaphoreTake+0x20c>)
 800e802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e806:	601a      	str	r2, [r3, #0]
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	e75f      	b.n	800e6d2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e814:	f000 f96f 	bl	800eaf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e818:	f000 fcb8 	bl	800f18c <xTaskResumeAll>
 800e81c:	e759      	b.n	800e6d2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e81e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e820:	f000 f969 	bl	800eaf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e824:	f000 fcb2 	bl	800f18c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e82a:	f000 f9b6 	bl	800eb9a <prvIsQueueEmpty>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	f43f af4e 	beq.w	800e6d2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00d      	beq.n	800e858 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e83c:	f7ff f8a6 	bl	800d98c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e842:	f000 f8b0 	bl	800e9a6 <prvGetDisinheritPriorityAfterTimeout>
 800e846:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e84e:	4618      	mov	r0, r3
 800e850:	f001 f974 	bl	800fb3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e854:	f7ff f8c8 	bl	800d9e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3738      	adds	r7, #56	; 0x38
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	e000ed04 	.word	0xe000ed04

0800e868 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08e      	sub	sp, #56	; 0x38
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d109      	bne.n	800e892 <xQueueReceiveFromISR+0x2a>
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	623b      	str	r3, [r7, #32]
 800e890:	e7fe      	b.n	800e890 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d103      	bne.n	800e8a0 <xQueueReceiveFromISR+0x38>
 800e898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <xQueueReceiveFromISR+0x3c>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e000      	b.n	800e8a6 <xQueueReceiveFromISR+0x3e>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d109      	bne.n	800e8be <xQueueReceiveFromISR+0x56>
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	e7fe      	b.n	800e8bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8be:	f7ff f941 	bl	800db44 <vPortValidateInterruptPriority>
	__asm volatile
 800e8c2:	f3ef 8211 	mrs	r2, BASEPRI
 800e8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	61ba      	str	r2, [r7, #24]
 800e8d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e8da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d02f      	beq.n	800e94a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8f8:	f000 f8d7 	bl	800eaaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	1e5a      	subs	r2, r3, #1
 800e900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e902:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e90c:	d112      	bne.n	800e934 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d016      	beq.n	800e944 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	3310      	adds	r3, #16
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fe56 	bl	800f5cc <xTaskRemoveFromEventList>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00e      	beq.n	800e944 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00b      	beq.n	800e944 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	e007      	b.n	800e944 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e938:	3301      	adds	r3, #1
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	b25a      	sxtb	r2, r3
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e944:	2301      	movs	r3, #1
 800e946:	637b      	str	r3, [r7, #52]	; 0x34
 800e948:	e001      	b.n	800e94e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e94a:	2300      	movs	r3, #0
 800e94c:	637b      	str	r3, [r7, #52]	; 0x34
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3738      	adds	r7, #56	; 0x38
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d109      	bne.n	800e988 <vQueueDelete+0x26>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	60bb      	str	r3, [r7, #8]
 800e986:	e7fe      	b.n	800e986 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 f95d 	bl	800ec48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e994:	2b00      	cmp	r3, #0
 800e996:	d102      	bne.n	800e99e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7fe fd09 	bl	800d3b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e99e:	bf00      	nop
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b085      	sub	sp, #20
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d006      	beq.n	800e9c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e001      	b.n	800e9c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
	}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr

0800e9d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b086      	sub	sp, #24
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	60f8      	str	r0, [r7, #12]
 800e9de:	60b9      	str	r1, [r7, #8]
 800e9e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10d      	bne.n	800ea10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d14d      	bne.n	800ea98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f001 f82f 	bl	800fa64 <xTaskPriorityDisinherit>
 800ea06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	609a      	str	r2, [r3, #8]
 800ea0e:	e043      	b.n	800ea98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d119      	bne.n	800ea4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6858      	ldr	r0, [r3, #4]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea1e:	461a      	mov	r2, r3
 800ea20:	68b9      	ldr	r1, [r7, #8]
 800ea22:	f00e f81e 	bl	801ca62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2e:	441a      	add	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d32b      	bcc.n	800ea98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	605a      	str	r2, [r3, #4]
 800ea48:	e026      	b.n	800ea98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	68d8      	ldr	r0, [r3, #12]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea52:	461a      	mov	r2, r3
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	f00e f804 	bl	801ca62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68da      	ldr	r2, [r3, #12]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea62:	425b      	negs	r3, r3
 800ea64:	441a      	add	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	68da      	ldr	r2, [r3, #12]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d207      	bcs.n	800ea86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689a      	ldr	r2, [r3, #8]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea7e:	425b      	negs	r3, r3
 800ea80:	441a      	add	r2, r3
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d105      	bne.n	800ea98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eaa0:	697b      	ldr	r3, [r7, #20]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3718      	adds	r7, #24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b082      	sub	sp, #8
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d018      	beq.n	800eaee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68da      	ldr	r2, [r3, #12]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac4:	441a      	add	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d303      	bcc.n	800eade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	68d9      	ldr	r1, [r3, #12]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae6:	461a      	mov	r2, r3
 800eae8:	6838      	ldr	r0, [r7, #0]
 800eaea:	f00d ffba 	bl	801ca62 <memcpy>
	}
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eafe:	f7fe ff45 	bl	800d98c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb0a:	e011      	b.n	800eb30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d012      	beq.n	800eb3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3324      	adds	r3, #36	; 0x24
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 fd57 	bl	800f5cc <xTaskRemoveFromEventList>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb24:	f000 fe2a 	bl	800f77c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dce9      	bgt.n	800eb0c <prvUnlockQueue+0x16>
 800eb38:	e000      	b.n	800eb3c <prvUnlockQueue+0x46>
					break;
 800eb3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	22ff      	movs	r2, #255	; 0xff
 800eb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eb44:	f7fe ff50 	bl	800d9e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb48:	f7fe ff20 	bl	800d98c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb54:	e011      	b.n	800eb7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d012      	beq.n	800eb84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3310      	adds	r3, #16
 800eb62:	4618      	mov	r0, r3
 800eb64:	f000 fd32 	bl	800f5cc <xTaskRemoveFromEventList>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb6e:	f000 fe05 	bl	800f77c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	3b01      	subs	r3, #1
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	dce9      	bgt.n	800eb56 <prvUnlockQueue+0x60>
 800eb82:	e000      	b.n	800eb86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	22ff      	movs	r2, #255	; 0xff
 800eb8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb8e:	f7fe ff2b 	bl	800d9e8 <vPortExitCritical>
}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eba2:	f7fe fef3 	bl	800d98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d102      	bne.n	800ebb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	e001      	b.n	800ebb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebb8:	f7fe ff16 	bl	800d9e8 <vPortExitCritical>

	return xReturn;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebce:	f7fe fedd 	bl	800d98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d102      	bne.n	800ebe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	e001      	b.n	800ebe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebe8:	f7fe fefe 	bl	800d9e8 <vPortExitCritical>

	return xReturn;
 800ebec:	68fb      	ldr	r3, [r7, #12]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e014      	b.n	800ec32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec08:	4a0e      	ldr	r2, [pc, #56]	; (800ec44 <vQueueAddToRegistry+0x4c>)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10b      	bne.n	800ec2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec14:	490b      	ldr	r1, [pc, #44]	; (800ec44 <vQueueAddToRegistry+0x4c>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec1e:	4a09      	ldr	r2, [pc, #36]	; (800ec44 <vQueueAddToRegistry+0x4c>)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	4413      	add	r3, r2
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec2a:	e005      	b.n	800ec38 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2b07      	cmp	r3, #7
 800ec36:	d9e7      	bls.n	800ec08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec38:	bf00      	nop
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	200085f0 	.word	0x200085f0

0800ec48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec50:	2300      	movs	r3, #0
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	e016      	b.n	800ec84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ec56:	4a10      	ldr	r2, [pc, #64]	; (800ec98 <vQueueUnregisterQueue+0x50>)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	00db      	lsls	r3, r3, #3
 800ec5c:	4413      	add	r3, r2
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d10b      	bne.n	800ec7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ec66:	4a0c      	ldr	r2, [pc, #48]	; (800ec98 <vQueueUnregisterQueue+0x50>)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ec70:	4a09      	ldr	r2, [pc, #36]	; (800ec98 <vQueueUnregisterQueue+0x50>)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	4413      	add	r3, r2
 800ec78:	2200      	movs	r2, #0
 800ec7a:	605a      	str	r2, [r3, #4]
				break;
 800ec7c:	e005      	b.n	800ec8a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	3301      	adds	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b07      	cmp	r3, #7
 800ec88:	d9e5      	bls.n	800ec56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ec8a:	bf00      	nop
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	200085f0 	.word	0x200085f0

0800ec9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecac:	f7fe fe6e 	bl	800d98c <vPortEnterCritical>
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecb6:	b25b      	sxtb	r3, r3
 800ecb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecbc:	d103      	bne.n	800ecc6 <vQueueWaitForMessageRestricted+0x2a>
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eccc:	b25b      	sxtb	r3, r3
 800ecce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecd2:	d103      	bne.n	800ecdc <vQueueWaitForMessageRestricted+0x40>
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecdc:	f7fe fe84 	bl	800d9e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	3324      	adds	r3, #36	; 0x24
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	68b9      	ldr	r1, [r7, #8]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 fc41 	bl	800f578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f7ff fefd 	bl	800eaf6 <prvUnlockQueue>
	}
 800ecfc:	bf00      	nop
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b08e      	sub	sp, #56	; 0x38
 800ed08:	af04      	add	r7, sp, #16
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d109      	bne.n	800ed2c <xTaskCreateStatic+0x28>
 800ed18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1c:	f383 8811 	msr	BASEPRI, r3
 800ed20:	f3bf 8f6f 	isb	sy
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	623b      	str	r3, [r7, #32]
 800ed2a:	e7fe      	b.n	800ed2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d109      	bne.n	800ed46 <xTaskCreateStatic+0x42>
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	61fb      	str	r3, [r7, #28]
 800ed44:	e7fe      	b.n	800ed44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed46:	235c      	movs	r3, #92	; 0x5c
 800ed48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	2b5c      	cmp	r3, #92	; 0x5c
 800ed4e:	d009      	beq.n	800ed64 <xTaskCreateStatic+0x60>
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	61bb      	str	r3, [r7, #24]
 800ed62:	e7fe      	b.n	800ed62 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d01e      	beq.n	800edaa <xTaskCreateStatic+0xa6>
 800ed6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d01b      	beq.n	800edaa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	2202      	movs	r2, #2
 800ed80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed84:	2300      	movs	r3, #0
 800ed86:	9303      	str	r3, [sp, #12]
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	9302      	str	r3, [sp, #8]
 800ed8c:	f107 0314 	add.w	r3, r7, #20
 800ed90:	9301      	str	r3, [sp, #4]
 800ed92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	68b9      	ldr	r1, [r7, #8]
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f000 f850 	bl	800ee42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eda2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eda4:	f000 f8dc 	bl	800ef60 <prvAddNewTaskToReadyList>
 800eda8:	e001      	b.n	800edae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800edaa:	2300      	movs	r3, #0
 800edac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800edae:	697b      	ldr	r3, [r7, #20]
	}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3728      	adds	r7, #40	; 0x28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b08c      	sub	sp, #48	; 0x30
 800edbc:	af04      	add	r7, sp, #16
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	603b      	str	r3, [r7, #0]
 800edc4:	4613      	mov	r3, r2
 800edc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edc8:	88fb      	ldrh	r3, [r7, #6]
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe fa2d 	bl	800d22c <pvPortMalloc>
 800edd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00e      	beq.n	800edf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800edda:	205c      	movs	r0, #92	; 0x5c
 800eddc:	f7fe fa26 	bl	800d22c <pvPortMalloc>
 800ede0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d003      	beq.n	800edf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	631a      	str	r2, [r3, #48]	; 0x30
 800edee:	e005      	b.n	800edfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800edf0:	6978      	ldr	r0, [r7, #20]
 800edf2:	f7fe fadd 	bl	800d3b0 <vPortFree>
 800edf6:	e001      	b.n	800edfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800edf8:	2300      	movs	r3, #0
 800edfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d017      	beq.n	800ee32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee0a:	88fa      	ldrh	r2, [r7, #6]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9303      	str	r3, [sp, #12]
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	9302      	str	r3, [sp, #8]
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 f80e 	bl	800ee42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee26:	69f8      	ldr	r0, [r7, #28]
 800ee28:	f000 f89a 	bl	800ef60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	61bb      	str	r3, [r7, #24]
 800ee30:	e002      	b.n	800ee38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee38:	69bb      	ldr	r3, [r7, #24]
	}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3720      	adds	r7, #32
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b088      	sub	sp, #32
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
 800ee4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	461a      	mov	r2, r3
 800ee5a:	21a5      	movs	r1, #165	; 0xa5
 800ee5c:	f00d fe0c 	bl	801ca78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ee6a:	440b      	add	r3, r1
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	f023 0307 	bic.w	r3, r3, #7
 800ee78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	f003 0307 	and.w	r3, r3, #7
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d009      	beq.n	800ee98 <prvInitialiseNewTask+0x56>
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	617b      	str	r3, [r7, #20]
 800ee96:	e7fe      	b.n	800ee96 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d01f      	beq.n	800eede <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	61fb      	str	r3, [r7, #28]
 800eea2:	e012      	b.n	800eeca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	4413      	add	r3, r2
 800eeaa:	7819      	ldrb	r1, [r3, #0]
 800eeac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	3334      	adds	r3, #52	; 0x34
 800eeb4:	460a      	mov	r2, r1
 800eeb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	4413      	add	r3, r2
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d006      	beq.n	800eed2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	3301      	adds	r3, #1
 800eec8:	61fb      	str	r3, [r7, #28]
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	2b0f      	cmp	r3, #15
 800eece:	d9e9      	bls.n	800eea4 <prvInitialiseNewTask+0x62>
 800eed0:	e000      	b.n	800eed4 <prvInitialiseNewTask+0x92>
			{
				break;
 800eed2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eedc:	e003      	b.n	800eee6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee8:	2b37      	cmp	r3, #55	; 0x37
 800eeea:	d901      	bls.n	800eef0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eeec:	2337      	movs	r3, #55	; 0x37
 800eeee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eef4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eefa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefe:	2200      	movs	r2, #0
 800ef00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	3304      	adds	r3, #4
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fb86 	bl	800d618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	3318      	adds	r3, #24
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fe fb81 	bl	800d618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	2200      	movs	r2, #0
 800ef30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	68f9      	ldr	r1, [r7, #12]
 800ef3e:	69b8      	ldr	r0, [r7, #24]
 800ef40:	f7fe fbfe 	bl	800d740 <pxPortInitialiseStack>
 800ef44:	4602      	mov	r2, r0
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef56:	bf00      	nop
 800ef58:	3720      	adds	r7, #32
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef68:	f7fe fd10 	bl	800d98c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef6c:	4b2d      	ldr	r3, [pc, #180]	; (800f024 <prvAddNewTaskToReadyList+0xc4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3301      	adds	r3, #1
 800ef72:	4a2c      	ldr	r2, [pc, #176]	; (800f024 <prvAddNewTaskToReadyList+0xc4>)
 800ef74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef76:	4b2c      	ldr	r3, [pc, #176]	; (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d109      	bne.n	800ef92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef7e:	4a2a      	ldr	r2, [pc, #168]	; (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef84:	4b27      	ldr	r3, [pc, #156]	; (800f024 <prvAddNewTaskToReadyList+0xc4>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d110      	bne.n	800efae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef8c:	f000 fc1a 	bl	800f7c4 <prvInitialiseTaskLists>
 800ef90:	e00d      	b.n	800efae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef92:	4b26      	ldr	r3, [pc, #152]	; (800f02c <prvAddNewTaskToReadyList+0xcc>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d109      	bne.n	800efae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef9a:	4b23      	ldr	r3, [pc, #140]	; (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d802      	bhi.n	800efae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800efa8:	4a1f      	ldr	r2, [pc, #124]	; (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800efae:	4b20      	ldr	r3, [pc, #128]	; (800f030 <prvAddNewTaskToReadyList+0xd0>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3301      	adds	r3, #1
 800efb4:	4a1e      	ldr	r2, [pc, #120]	; (800f030 <prvAddNewTaskToReadyList+0xd0>)
 800efb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800efb8:	4b1d      	ldr	r3, [pc, #116]	; (800f030 <prvAddNewTaskToReadyList+0xd0>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc4:	4b1b      	ldr	r3, [pc, #108]	; (800f034 <prvAddNewTaskToReadyList+0xd4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d903      	bls.n	800efd4 <prvAddNewTaskToReadyList+0x74>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd0:	4a18      	ldr	r2, [pc, #96]	; (800f034 <prvAddNewTaskToReadyList+0xd4>)
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd8:	4613      	mov	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	4a15      	ldr	r2, [pc, #84]	; (800f038 <prvAddNewTaskToReadyList+0xd8>)
 800efe2:	441a      	add	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3304      	adds	r3, #4
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	f7fe fb21 	bl	800d632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eff0:	f7fe fcfa 	bl	800d9e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eff4:	4b0d      	ldr	r3, [pc, #52]	; (800f02c <prvAddNewTaskToReadyList+0xcc>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00e      	beq.n	800f01a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800effc:	4b0a      	ldr	r3, [pc, #40]	; (800f028 <prvAddNewTaskToReadyList+0xc8>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f006:	429a      	cmp	r2, r3
 800f008:	d207      	bcs.n	800f01a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f00a:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <prvAddNewTaskToReadyList+0xdc>)
 800f00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20007304 	.word	0x20007304
 800f028:	20006e30 	.word	0x20006e30
 800f02c:	20007310 	.word	0x20007310
 800f030:	20007320 	.word	0x20007320
 800f034:	2000730c 	.word	0x2000730c
 800f038:	20006e34 	.word	0x20006e34
 800f03c:	e000ed04 	.word	0xe000ed04

0800f040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f048:	2300      	movs	r3, #0
 800f04a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d016      	beq.n	800f080 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f052:	4b13      	ldr	r3, [pc, #76]	; (800f0a0 <vTaskDelay+0x60>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d009      	beq.n	800f06e <vTaskDelay+0x2e>
 800f05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	60bb      	str	r3, [r7, #8]
 800f06c:	e7fe      	b.n	800f06c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f06e:	f000 f87f 	bl	800f170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f072:	2100      	movs	r1, #0
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 fdf5 	bl	800fc64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f07a:	f000 f887 	bl	800f18c <xTaskResumeAll>
 800f07e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d107      	bne.n	800f096 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f086:	4b07      	ldr	r3, [pc, #28]	; (800f0a4 <vTaskDelay+0x64>)
 800f088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f096:	bf00      	nop
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	2000732c 	.word	0x2000732c
 800f0a4:	e000ed04 	.word	0xe000ed04

0800f0a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b08a      	sub	sp, #40	; 0x28
 800f0ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0b6:	463a      	mov	r2, r7
 800f0b8:	1d39      	adds	r1, r7, #4
 800f0ba:	f107 0308 	add.w	r3, r7, #8
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe f880 	bl	800d1c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	9202      	str	r2, [sp, #8]
 800f0cc:	9301      	str	r3, [sp, #4]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	460a      	mov	r2, r1
 800f0d6:	4920      	ldr	r1, [pc, #128]	; (800f158 <vTaskStartScheduler+0xb0>)
 800f0d8:	4820      	ldr	r0, [pc, #128]	; (800f15c <vTaskStartScheduler+0xb4>)
 800f0da:	f7ff fe13 	bl	800ed04 <xTaskCreateStatic>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	4b1f      	ldr	r3, [pc, #124]	; (800f160 <vTaskStartScheduler+0xb8>)
 800f0e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0e4:	4b1e      	ldr	r3, [pc, #120]	; (800f160 <vTaskStartScheduler+0xb8>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	617b      	str	r3, [r7, #20]
 800f0f0:	e001      	b.n	800f0f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d102      	bne.n	800f102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0fc:	f000 fe06 	bl	800fd0c <xTimerCreateTimerTask>
 800f100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d115      	bne.n	800f134 <vTaskStartScheduler+0x8c>
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f11a:	4b12      	ldr	r3, [pc, #72]	; (800f164 <vTaskStartScheduler+0xbc>)
 800f11c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f122:	4b11      	ldr	r3, [pc, #68]	; (800f168 <vTaskStartScheduler+0xc0>)
 800f124:	2201      	movs	r2, #1
 800f126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f128:	4b10      	ldr	r3, [pc, #64]	; (800f16c <vTaskStartScheduler+0xc4>)
 800f12a:	2200      	movs	r2, #0
 800f12c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f12e:	f7fe fb8f 	bl	800d850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f132:	e00d      	b.n	800f150 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f13a:	d109      	bne.n	800f150 <vTaskStartScheduler+0xa8>
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	60fb      	str	r3, [r7, #12]
 800f14e:	e7fe      	b.n	800f14e <vTaskStartScheduler+0xa6>
}
 800f150:	bf00      	nop
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	0801d960 	.word	0x0801d960
 800f15c:	0800f795 	.word	0x0800f795
 800f160:	20007328 	.word	0x20007328
 800f164:	20007324 	.word	0x20007324
 800f168:	20007310 	.word	0x20007310
 800f16c:	20007308 	.word	0x20007308

0800f170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f170:	b480      	push	{r7}
 800f172:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f174:	4b04      	ldr	r3, [pc, #16]	; (800f188 <vTaskSuspendAll+0x18>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	3301      	adds	r3, #1
 800f17a:	4a03      	ldr	r2, [pc, #12]	; (800f188 <vTaskSuspendAll+0x18>)
 800f17c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f17e:	bf00      	nop
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	2000732c 	.word	0x2000732c

0800f18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f196:	2300      	movs	r3, #0
 800f198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f19a:	4b41      	ldr	r3, [pc, #260]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d109      	bne.n	800f1b6 <xTaskResumeAll+0x2a>
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	e7fe      	b.n	800f1b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1b6:	f7fe fbe9 	bl	800d98c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1ba:	4b39      	ldr	r3, [pc, #228]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	4a37      	ldr	r2, [pc, #220]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1c4:	4b36      	ldr	r3, [pc, #216]	; (800f2a0 <xTaskResumeAll+0x114>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d162      	bne.n	800f292 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1cc:	4b35      	ldr	r3, [pc, #212]	; (800f2a4 <xTaskResumeAll+0x118>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d05e      	beq.n	800f292 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1d4:	e02f      	b.n	800f236 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d6:	4b34      	ldr	r3, [pc, #208]	; (800f2a8 <xTaskResumeAll+0x11c>)
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3318      	adds	r3, #24
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fe fa82 	bl	800d6ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe fa7d 	bl	800d6ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f6:	4b2d      	ldr	r3, [pc, #180]	; (800f2ac <xTaskResumeAll+0x120>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d903      	bls.n	800f206 <xTaskResumeAll+0x7a>
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	4a2a      	ldr	r2, [pc, #168]	; (800f2ac <xTaskResumeAll+0x120>)
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f20a:	4613      	mov	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4a27      	ldr	r2, [pc, #156]	; (800f2b0 <xTaskResumeAll+0x124>)
 800f214:	441a      	add	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	3304      	adds	r3, #4
 800f21a:	4619      	mov	r1, r3
 800f21c:	4610      	mov	r0, r2
 800f21e:	f7fe fa08 	bl	800d632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f226:	4b23      	ldr	r3, [pc, #140]	; (800f2b4 <xTaskResumeAll+0x128>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d302      	bcc.n	800f236 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f230:	4b21      	ldr	r3, [pc, #132]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f232:	2201      	movs	r2, #1
 800f234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f236:	4b1c      	ldr	r3, [pc, #112]	; (800f2a8 <xTaskResumeAll+0x11c>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1cb      	bne.n	800f1d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f244:	f000 fb58 	bl	800f8f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f248:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <xTaskResumeAll+0x130>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d010      	beq.n	800f276 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f254:	f000 f858 	bl	800f308 <xTaskIncrementTick>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d002      	beq.n	800f264 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f25e:	4b16      	ldr	r3, [pc, #88]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f260:	2201      	movs	r2, #1
 800f262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	3b01      	subs	r3, #1
 800f268:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1f1      	bne.n	800f254 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f270:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <xTaskResumeAll+0x130>)
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f276:	4b10      	ldr	r3, [pc, #64]	; (800f2b8 <xTaskResumeAll+0x12c>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d009      	beq.n	800f292 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f27e:	2301      	movs	r3, #1
 800f280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f282:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <xTaskResumeAll+0x134>)
 800f284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f288:	601a      	str	r2, [r3, #0]
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f292:	f7fe fba9 	bl	800d9e8 <vPortExitCritical>

	return xAlreadyYielded;
 800f296:	68bb      	ldr	r3, [r7, #8]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	2000732c 	.word	0x2000732c
 800f2a4:	20007304 	.word	0x20007304
 800f2a8:	200072c4 	.word	0x200072c4
 800f2ac:	2000730c 	.word	0x2000730c
 800f2b0:	20006e34 	.word	0x20006e34
 800f2b4:	20006e30 	.word	0x20006e30
 800f2b8:	20007318 	.word	0x20007318
 800f2bc:	20007314 	.word	0x20007314
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2ca:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <xTaskGetTickCount+0x1c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2d0:	687b      	ldr	r3, [r7, #4]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	20007308 	.word	0x20007308

0800f2e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2ea:	f7fe fc2b 	bl	800db44 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f2f2:	4b04      	ldr	r3, [pc, #16]	; (800f304 <xTaskGetTickCountFromISR+0x20>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2f8:	683b      	ldr	r3, [r7, #0]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	20007308 	.word	0x20007308

0800f308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f30e:	2300      	movs	r3, #0
 800f310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f312:	4b4e      	ldr	r3, [pc, #312]	; (800f44c <xTaskIncrementTick+0x144>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	f040 8088 	bne.w	800f42c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f31c:	4b4c      	ldr	r3, [pc, #304]	; (800f450 <xTaskIncrementTick+0x148>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	3301      	adds	r3, #1
 800f322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f324:	4a4a      	ldr	r2, [pc, #296]	; (800f450 <xTaskIncrementTick+0x148>)
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d11f      	bne.n	800f370 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f330:	4b48      	ldr	r3, [pc, #288]	; (800f454 <xTaskIncrementTick+0x14c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <xTaskIncrementTick+0x46>
 800f33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	e7fe      	b.n	800f34c <xTaskIncrementTick+0x44>
 800f34e:	4b41      	ldr	r3, [pc, #260]	; (800f454 <xTaskIncrementTick+0x14c>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	4b40      	ldr	r3, [pc, #256]	; (800f458 <xTaskIncrementTick+0x150>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a3e      	ldr	r2, [pc, #248]	; (800f454 <xTaskIncrementTick+0x14c>)
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	4a3e      	ldr	r2, [pc, #248]	; (800f458 <xTaskIncrementTick+0x150>)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6013      	str	r3, [r2, #0]
 800f362:	4b3e      	ldr	r3, [pc, #248]	; (800f45c <xTaskIncrementTick+0x154>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3301      	adds	r3, #1
 800f368:	4a3c      	ldr	r2, [pc, #240]	; (800f45c <xTaskIncrementTick+0x154>)
 800f36a:	6013      	str	r3, [r2, #0]
 800f36c:	f000 fac4 	bl	800f8f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f370:	4b3b      	ldr	r3, [pc, #236]	; (800f460 <xTaskIncrementTick+0x158>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	693a      	ldr	r2, [r7, #16]
 800f376:	429a      	cmp	r2, r3
 800f378:	d349      	bcc.n	800f40e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f37a:	4b36      	ldr	r3, [pc, #216]	; (800f454 <xTaskIncrementTick+0x14c>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d104      	bne.n	800f38e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f384:	4b36      	ldr	r3, [pc, #216]	; (800f460 <xTaskIncrementTick+0x158>)
 800f386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f38a:	601a      	str	r2, [r3, #0]
					break;
 800f38c:	e03f      	b.n	800f40e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f38e:	4b31      	ldr	r3, [pc, #196]	; (800f454 <xTaskIncrementTick+0x14c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d203      	bcs.n	800f3ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3a6:	4a2e      	ldr	r2, [pc, #184]	; (800f460 <xTaskIncrementTick+0x158>)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3ac:	e02f      	b.n	800f40e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fe f99a 	bl	800d6ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	3318      	adds	r3, #24
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fe f991 	bl	800d6ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ce:	4b25      	ldr	r3, [pc, #148]	; (800f464 <xTaskIncrementTick+0x15c>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d903      	bls.n	800f3de <xTaskIncrementTick+0xd6>
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3da:	4a22      	ldr	r2, [pc, #136]	; (800f464 <xTaskIncrementTick+0x15c>)
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4a1f      	ldr	r2, [pc, #124]	; (800f468 <xTaskIncrementTick+0x160>)
 800f3ec:	441a      	add	r2, r3
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	f7fe f91c 	bl	800d632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3fe:	4b1b      	ldr	r3, [pc, #108]	; (800f46c <xTaskIncrementTick+0x164>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f404:	429a      	cmp	r2, r3
 800f406:	d3b8      	bcc.n	800f37a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f408:	2301      	movs	r3, #1
 800f40a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f40c:	e7b5      	b.n	800f37a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f40e:	4b17      	ldr	r3, [pc, #92]	; (800f46c <xTaskIncrementTick+0x164>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f414:	4914      	ldr	r1, [pc, #80]	; (800f468 <xTaskIncrementTick+0x160>)
 800f416:	4613      	mov	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	440b      	add	r3, r1
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d907      	bls.n	800f436 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800f426:	2301      	movs	r3, #1
 800f428:	617b      	str	r3, [r7, #20]
 800f42a:	e004      	b.n	800f436 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f42c:	4b10      	ldr	r3, [pc, #64]	; (800f470 <xTaskIncrementTick+0x168>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	4a0f      	ldr	r2, [pc, #60]	; (800f470 <xTaskIncrementTick+0x168>)
 800f434:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f436:	4b0f      	ldr	r3, [pc, #60]	; (800f474 <xTaskIncrementTick+0x16c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800f43e:	2301      	movs	r3, #1
 800f440:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f442:	697b      	ldr	r3, [r7, #20]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	2000732c 	.word	0x2000732c
 800f450:	20007308 	.word	0x20007308
 800f454:	200072bc 	.word	0x200072bc
 800f458:	200072c0 	.word	0x200072c0
 800f45c:	2000731c 	.word	0x2000731c
 800f460:	20007324 	.word	0x20007324
 800f464:	2000730c 	.word	0x2000730c
 800f468:	20006e34 	.word	0x20006e34
 800f46c:	20006e30 	.word	0x20006e30
 800f470:	20007314 	.word	0x20007314
 800f474:	20007318 	.word	0x20007318

0800f478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f47e:	4b27      	ldr	r3, [pc, #156]	; (800f51c <vTaskSwitchContext+0xa4>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f486:	4b26      	ldr	r3, [pc, #152]	; (800f520 <vTaskSwitchContext+0xa8>)
 800f488:	2201      	movs	r2, #1
 800f48a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f48c:	e040      	b.n	800f510 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f48e:	4b24      	ldr	r3, [pc, #144]	; (800f520 <vTaskSwitchContext+0xa8>)
 800f490:	2200      	movs	r2, #0
 800f492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f494:	4b23      	ldr	r3, [pc, #140]	; (800f524 <vTaskSwitchContext+0xac>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	60fb      	str	r3, [r7, #12]
 800f49a:	e00f      	b.n	800f4bc <vTaskSwitchContext+0x44>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d109      	bne.n	800f4b6 <vTaskSwitchContext+0x3e>
 800f4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a6:	f383 8811 	msr	BASEPRI, r3
 800f4aa:	f3bf 8f6f 	isb	sy
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	607b      	str	r3, [r7, #4]
 800f4b4:	e7fe      	b.n	800f4b4 <vTaskSwitchContext+0x3c>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	491a      	ldr	r1, [pc, #104]	; (800f528 <vTaskSwitchContext+0xb0>)
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d0e5      	beq.n	800f49c <vTaskSwitchContext+0x24>
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4413      	add	r3, r2
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	4a13      	ldr	r2, [pc, #76]	; (800f528 <vTaskSwitchContext+0xb0>)
 800f4dc:	4413      	add	r3, r2
 800f4de:	60bb      	str	r3, [r7, #8]
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	605a      	str	r2, [r3, #4]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d104      	bne.n	800f500 <vTaskSwitchContext+0x88>
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	685a      	ldr	r2, [r3, #4]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	605a      	str	r2, [r3, #4]
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	4a09      	ldr	r2, [pc, #36]	; (800f52c <vTaskSwitchContext+0xb4>)
 800f508:	6013      	str	r3, [r2, #0]
 800f50a:	4a06      	ldr	r2, [pc, #24]	; (800f524 <vTaskSwitchContext+0xac>)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6013      	str	r3, [r2, #0]
}
 800f510:	bf00      	nop
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	2000732c 	.word	0x2000732c
 800f520:	20007318 	.word	0x20007318
 800f524:	2000730c 	.word	0x2000730c
 800f528:	20006e34 	.word	0x20006e34
 800f52c:	20006e30 	.word	0x20006e30

0800f530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d109      	bne.n	800f554 <vTaskPlaceOnEventList+0x24>
 800f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f544:	f383 8811 	msr	BASEPRI, r3
 800f548:	f3bf 8f6f 	isb	sy
 800f54c:	f3bf 8f4f 	dsb	sy
 800f550:	60fb      	str	r3, [r7, #12]
 800f552:	e7fe      	b.n	800f552 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f554:	4b07      	ldr	r3, [pc, #28]	; (800f574 <vTaskPlaceOnEventList+0x44>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3318      	adds	r3, #24
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7fe f88c 	bl	800d67a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f562:	2101      	movs	r1, #1
 800f564:	6838      	ldr	r0, [r7, #0]
 800f566:	f000 fb7d 	bl	800fc64 <prvAddCurrentTaskToDelayedList>
}
 800f56a:	bf00      	nop
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	20006e30 	.word	0x20006e30

0800f578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d109      	bne.n	800f59e <vTaskPlaceOnEventListRestricted+0x26>
 800f58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58e:	f383 8811 	msr	BASEPRI, r3
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	e7fe      	b.n	800f59c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f59e:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <vTaskPlaceOnEventListRestricted+0x50>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	3318      	adds	r3, #24
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f7fe f843 	bl	800d632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f5b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	68b8      	ldr	r0, [r7, #8]
 800f5bc:	f000 fb52 	bl	800fc64 <prvAddCurrentTaskToDelayedList>
	}
 800f5c0:	bf00      	nop
 800f5c2:	3718      	adds	r7, #24
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	20006e30 	.word	0x20006e30

0800f5cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d109      	bne.n	800f5f6 <xTaskRemoveFromEventList+0x2a>
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	e7fe      	b.n	800f5f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	3318      	adds	r3, #24
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fe f876 	bl	800d6ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f600:	4b1d      	ldr	r3, [pc, #116]	; (800f678 <xTaskRemoveFromEventList+0xac>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d11d      	bne.n	800f644 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	3304      	adds	r3, #4
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fe f86d 	bl	800d6ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f616:	4b19      	ldr	r3, [pc, #100]	; (800f67c <xTaskRemoveFromEventList+0xb0>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d903      	bls.n	800f626 <xTaskRemoveFromEventList+0x5a>
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f622:	4a16      	ldr	r2, [pc, #88]	; (800f67c <xTaskRemoveFromEventList+0xb0>)
 800f624:	6013      	str	r3, [r2, #0]
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f62a:	4613      	mov	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	4413      	add	r3, r2
 800f630:	009b      	lsls	r3, r3, #2
 800f632:	4a13      	ldr	r2, [pc, #76]	; (800f680 <xTaskRemoveFromEventList+0xb4>)
 800f634:	441a      	add	r2, r3
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	3304      	adds	r3, #4
 800f63a:	4619      	mov	r1, r3
 800f63c:	4610      	mov	r0, r2
 800f63e:	f7fd fff8 	bl	800d632 <vListInsertEnd>
 800f642:	e005      	b.n	800f650 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	3318      	adds	r3, #24
 800f648:	4619      	mov	r1, r3
 800f64a:	480e      	ldr	r0, [pc, #56]	; (800f684 <xTaskRemoveFromEventList+0xb8>)
 800f64c:	f7fd fff1 	bl	800d632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f654:	4b0c      	ldr	r3, [pc, #48]	; (800f688 <xTaskRemoveFromEventList+0xbc>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d905      	bls.n	800f66a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f65e:	2301      	movs	r3, #1
 800f660:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f662:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <xTaskRemoveFromEventList+0xc0>)
 800f664:	2201      	movs	r2, #1
 800f666:	601a      	str	r2, [r3, #0]
 800f668:	e001      	b.n	800f66e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f66e:	697b      	ldr	r3, [r7, #20]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3718      	adds	r7, #24
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	2000732c 	.word	0x2000732c
 800f67c:	2000730c 	.word	0x2000730c
 800f680:	20006e34 	.word	0x20006e34
 800f684:	200072c4 	.word	0x200072c4
 800f688:	20006e30 	.word	0x20006e30
 800f68c:	20007318 	.word	0x20007318

0800f690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f698:	4b06      	ldr	r3, [pc, #24]	; (800f6b4 <vTaskInternalSetTimeOutState+0x24>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6a0:	4b05      	ldr	r3, [pc, #20]	; (800f6b8 <vTaskInternalSetTimeOutState+0x28>)
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	605a      	str	r2, [r3, #4]
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	2000731c 	.word	0x2000731c
 800f6b8:	20007308 	.word	0x20007308

0800f6bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d109      	bne.n	800f6e0 <xTaskCheckForTimeOut+0x24>
 800f6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	613b      	str	r3, [r7, #16]
 800f6de:	e7fe      	b.n	800f6de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <xTaskCheckForTimeOut+0x3e>
 800f6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	e7fe      	b.n	800f6f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f6fa:	f7fe f947 	bl	800d98c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f6fe:	4b1d      	ldr	r3, [pc, #116]	; (800f774 <xTaskCheckForTimeOut+0xb8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	69ba      	ldr	r2, [r7, #24]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f716:	d102      	bne.n	800f71e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f718:	2300      	movs	r3, #0
 800f71a:	61fb      	str	r3, [r7, #28]
 800f71c:	e023      	b.n	800f766 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	4b15      	ldr	r3, [pc, #84]	; (800f778 <xTaskCheckForTimeOut+0xbc>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	429a      	cmp	r2, r3
 800f728:	d007      	beq.n	800f73a <xTaskCheckForTimeOut+0x7e>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	69ba      	ldr	r2, [r7, #24]
 800f730:	429a      	cmp	r2, r3
 800f732:	d302      	bcc.n	800f73a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f734:	2301      	movs	r3, #1
 800f736:	61fb      	str	r3, [r7, #28]
 800f738:	e015      	b.n	800f766 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	429a      	cmp	r2, r3
 800f742:	d20b      	bcs.n	800f75c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	1ad2      	subs	r2, r2, r3
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ff9d 	bl	800f690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	61fb      	str	r3, [r7, #28]
 800f75a:	e004      	b.n	800f766 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2200      	movs	r2, #0
 800f760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f762:	2301      	movs	r3, #1
 800f764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f766:	f7fe f93f 	bl	800d9e8 <vPortExitCritical>

	return xReturn;
 800f76a:	69fb      	ldr	r3, [r7, #28]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3720      	adds	r7, #32
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	20007308 	.word	0x20007308
 800f778:	2000731c 	.word	0x2000731c

0800f77c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f77c:	b480      	push	{r7}
 800f77e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f780:	4b03      	ldr	r3, [pc, #12]	; (800f790 <vTaskMissedYield+0x14>)
 800f782:	2201      	movs	r2, #1
 800f784:	601a      	str	r2, [r3, #0]
}
 800f786:	bf00      	nop
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	20007318 	.word	0x20007318

0800f794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f79c:	f000 f852 	bl	800f844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f7a0:	4b06      	ldr	r3, [pc, #24]	; (800f7bc <prvIdleTask+0x28>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d9f9      	bls.n	800f79c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f7a8:	4b05      	ldr	r3, [pc, #20]	; (800f7c0 <prvIdleTask+0x2c>)
 800f7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ae:	601a      	str	r2, [r3, #0]
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f7b8:	e7f0      	b.n	800f79c <prvIdleTask+0x8>
 800f7ba:	bf00      	nop
 800f7bc:	20006e34 	.word	0x20006e34
 800f7c0:	e000ed04 	.word	0xe000ed04

0800f7c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	607b      	str	r3, [r7, #4]
 800f7ce:	e00c      	b.n	800f7ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4a12      	ldr	r2, [pc, #72]	; (800f824 <prvInitialiseTaskLists+0x60>)
 800f7dc:	4413      	add	r3, r2
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fd fefa 	bl	800d5d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	607b      	str	r3, [r7, #4]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2b37      	cmp	r3, #55	; 0x37
 800f7ee:	d9ef      	bls.n	800f7d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f7f0:	480d      	ldr	r0, [pc, #52]	; (800f828 <prvInitialiseTaskLists+0x64>)
 800f7f2:	f7fd fef1 	bl	800d5d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7f6:	480d      	ldr	r0, [pc, #52]	; (800f82c <prvInitialiseTaskLists+0x68>)
 800f7f8:	f7fd feee 	bl	800d5d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f7fc:	480c      	ldr	r0, [pc, #48]	; (800f830 <prvInitialiseTaskLists+0x6c>)
 800f7fe:	f7fd feeb 	bl	800d5d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f802:	480c      	ldr	r0, [pc, #48]	; (800f834 <prvInitialiseTaskLists+0x70>)
 800f804:	f7fd fee8 	bl	800d5d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f808:	480b      	ldr	r0, [pc, #44]	; (800f838 <prvInitialiseTaskLists+0x74>)
 800f80a:	f7fd fee5 	bl	800d5d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f80e:	4b0b      	ldr	r3, [pc, #44]	; (800f83c <prvInitialiseTaskLists+0x78>)
 800f810:	4a05      	ldr	r2, [pc, #20]	; (800f828 <prvInitialiseTaskLists+0x64>)
 800f812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f814:	4b0a      	ldr	r3, [pc, #40]	; (800f840 <prvInitialiseTaskLists+0x7c>)
 800f816:	4a05      	ldr	r2, [pc, #20]	; (800f82c <prvInitialiseTaskLists+0x68>)
 800f818:	601a      	str	r2, [r3, #0]
}
 800f81a:	bf00      	nop
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20006e34 	.word	0x20006e34
 800f828:	20007294 	.word	0x20007294
 800f82c:	200072a8 	.word	0x200072a8
 800f830:	200072c4 	.word	0x200072c4
 800f834:	200072d8 	.word	0x200072d8
 800f838:	200072f0 	.word	0x200072f0
 800f83c:	200072bc 	.word	0x200072bc
 800f840:	200072c0 	.word	0x200072c0

0800f844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f84a:	e019      	b.n	800f880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f84c:	f7fe f89e 	bl	800d98c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f850:	4b0f      	ldr	r3, [pc, #60]	; (800f890 <prvCheckTasksWaitingTermination+0x4c>)
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	3304      	adds	r3, #4
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fd ff45 	bl	800d6ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f862:	4b0c      	ldr	r3, [pc, #48]	; (800f894 <prvCheckTasksWaitingTermination+0x50>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3b01      	subs	r3, #1
 800f868:	4a0a      	ldr	r2, [pc, #40]	; (800f894 <prvCheckTasksWaitingTermination+0x50>)
 800f86a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f86c:	4b0a      	ldr	r3, [pc, #40]	; (800f898 <prvCheckTasksWaitingTermination+0x54>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3b01      	subs	r3, #1
 800f872:	4a09      	ldr	r2, [pc, #36]	; (800f898 <prvCheckTasksWaitingTermination+0x54>)
 800f874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f876:	f7fe f8b7 	bl	800d9e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f80e 	bl	800f89c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f880:	4b05      	ldr	r3, [pc, #20]	; (800f898 <prvCheckTasksWaitingTermination+0x54>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1e1      	bne.n	800f84c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	200072d8 	.word	0x200072d8
 800f894:	20007304 	.word	0x20007304
 800f898:	200072ec 	.word	0x200072ec

0800f89c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d108      	bne.n	800f8c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fd fd7c 	bl	800d3b0 <vPortFree>
				vPortFree( pxTCB );
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f7fd fd79 	bl	800d3b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f8be:	e017      	b.n	800f8f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d103      	bne.n	800f8d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7fd fd70 	bl	800d3b0 <vPortFree>
	}
 800f8d0:	e00e      	b.n	800f8f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d009      	beq.n	800f8f0 <prvDeleteTCB+0x54>
 800f8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e0:	f383 8811 	msr	BASEPRI, r3
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	60fb      	str	r3, [r7, #12]
 800f8ee:	e7fe      	b.n	800f8ee <prvDeleteTCB+0x52>
	}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8fe:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <prvResetNextTaskUnblockTime+0x38>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d104      	bne.n	800f912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f908:	4b0a      	ldr	r3, [pc, #40]	; (800f934 <prvResetNextTaskUnblockTime+0x3c>)
 800f90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f90e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f910:	e008      	b.n	800f924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f912:	4b07      	ldr	r3, [pc, #28]	; (800f930 <prvResetNextTaskUnblockTime+0x38>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	4a04      	ldr	r2, [pc, #16]	; (800f934 <prvResetNextTaskUnblockTime+0x3c>)
 800f922:	6013      	str	r3, [r2, #0]
}
 800f924:	bf00      	nop
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	200072bc 	.word	0x200072bc
 800f934:	20007324 	.word	0x20007324

0800f938 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f93e:	4b05      	ldr	r3, [pc, #20]	; (800f954 <xTaskGetCurrentTaskHandle+0x1c>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f944:	687b      	ldr	r3, [r7, #4]
	}
 800f946:	4618      	mov	r0, r3
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	20006e30 	.word	0x20006e30

0800f958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f95e:	4b0b      	ldr	r3, [pc, #44]	; (800f98c <xTaskGetSchedulerState+0x34>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d102      	bne.n	800f96c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f966:	2301      	movs	r3, #1
 800f968:	607b      	str	r3, [r7, #4]
 800f96a:	e008      	b.n	800f97e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f96c:	4b08      	ldr	r3, [pc, #32]	; (800f990 <xTaskGetSchedulerState+0x38>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d102      	bne.n	800f97a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f974:	2302      	movs	r3, #2
 800f976:	607b      	str	r3, [r7, #4]
 800f978:	e001      	b.n	800f97e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f97a:	2300      	movs	r3, #0
 800f97c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f97e:	687b      	ldr	r3, [r7, #4]
	}
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	20007310 	.word	0x20007310
 800f990:	2000732c 	.word	0x2000732c

0800f994 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d051      	beq.n	800fa4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ae:	4b2a      	ldr	r3, [pc, #168]	; (800fa58 <xTaskPriorityInherit+0xc4>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d241      	bcs.n	800fa3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	699b      	ldr	r3, [r3, #24]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	db06      	blt.n	800f9ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9c0:	4b25      	ldr	r3, [pc, #148]	; (800fa58 <xTaskPriorityInherit+0xc4>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	6959      	ldr	r1, [r3, #20]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4a1f      	ldr	r2, [pc, #124]	; (800fa5c <xTaskPriorityInherit+0xc8>)
 800f9e0:	4413      	add	r3, r2
 800f9e2:	4299      	cmp	r1, r3
 800f9e4:	d122      	bne.n	800fa2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fd fe7e 	bl	800d6ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f9f0:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <xTaskPriorityInherit+0xc4>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9fe:	4b18      	ldr	r3, [pc, #96]	; (800fa60 <xTaskPriorityInherit+0xcc>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d903      	bls.n	800fa0e <xTaskPriorityInherit+0x7a>
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0a:	4a15      	ldr	r2, [pc, #84]	; (800fa60 <xTaskPriorityInherit+0xcc>)
 800fa0c:	6013      	str	r3, [r2, #0]
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa12:	4613      	mov	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	4413      	add	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	4a10      	ldr	r2, [pc, #64]	; (800fa5c <xTaskPriorityInherit+0xc8>)
 800fa1c:	441a      	add	r2, r3
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	3304      	adds	r3, #4
 800fa22:	4619      	mov	r1, r3
 800fa24:	4610      	mov	r0, r2
 800fa26:	f7fd fe04 	bl	800d632 <vListInsertEnd>
 800fa2a:	e004      	b.n	800fa36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa2c:	4b0a      	ldr	r3, [pc, #40]	; (800fa58 <xTaskPriorityInherit+0xc4>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fa36:	2301      	movs	r3, #1
 800fa38:	60fb      	str	r3, [r7, #12]
 800fa3a:	e008      	b.n	800fa4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa40:	4b05      	ldr	r3, [pc, #20]	; (800fa58 <xTaskPriorityInherit+0xc4>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d201      	bcs.n	800fa4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
	}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20006e30 	.word	0x20006e30
 800fa5c:	20006e34 	.word	0x20006e34
 800fa60:	2000730c 	.word	0x2000730c

0800fa64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d054      	beq.n	800fb24 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa7a:	4b2d      	ldr	r3, [pc, #180]	; (800fb30 <xTaskPriorityDisinherit+0xcc>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	693a      	ldr	r2, [r7, #16]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d009      	beq.n	800fa98 <xTaskPriorityDisinherit+0x34>
 800fa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa88:	f383 8811 	msr	BASEPRI, r3
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	e7fe      	b.n	800fa96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d109      	bne.n	800fab4 <xTaskPriorityDisinherit+0x50>
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	60bb      	str	r3, [r7, #8]
 800fab2:	e7fe      	b.n	800fab2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fab8:	1e5a      	subs	r2, r3, #1
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d02c      	beq.n	800fb24 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800face:	2b00      	cmp	r3, #0
 800fad0:	d128      	bne.n	800fb24 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3304      	adds	r3, #4
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fd fe08 	bl	800d6ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf4:	4b0f      	ldr	r3, [pc, #60]	; (800fb34 <xTaskPriorityDisinherit+0xd0>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d903      	bls.n	800fb04 <xTaskPriorityDisinherit+0xa0>
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb00:	4a0c      	ldr	r2, [pc, #48]	; (800fb34 <xTaskPriorityDisinherit+0xd0>)
 800fb02:	6013      	str	r3, [r2, #0]
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb08:	4613      	mov	r3, r2
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	4413      	add	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4a09      	ldr	r2, [pc, #36]	; (800fb38 <xTaskPriorityDisinherit+0xd4>)
 800fb12:	441a      	add	r2, r3
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	3304      	adds	r3, #4
 800fb18:	4619      	mov	r1, r3
 800fb1a:	4610      	mov	r0, r2
 800fb1c:	f7fd fd89 	bl	800d632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb20:	2301      	movs	r3, #1
 800fb22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb24:	697b      	ldr	r3, [r7, #20]
	}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20006e30 	.word	0x20006e30
 800fb34:	2000730c 	.word	0x2000730c
 800fb38:	20006e34 	.word	0x20006e34

0800fb3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b088      	sub	sp, #32
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d068      	beq.n	800fc26 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d109      	bne.n	800fb70 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	e7fe      	b.n	800fb6e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d902      	bls.n	800fb80 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	61fb      	str	r3, [r7, #28]
 800fb7e:	e002      	b.n	800fb86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8a:	69fa      	ldr	r2, [r7, #28]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d04a      	beq.n	800fc26 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb94:	697a      	ldr	r2, [r7, #20]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d145      	bne.n	800fc26 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fb9a:	4b25      	ldr	r3, [pc, #148]	; (800fc30 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	69ba      	ldr	r2, [r7, #24]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d109      	bne.n	800fbb8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800fba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	60bb      	str	r3, [r7, #8]
 800fbb6:	e7fe      	b.n	800fbb6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	69fa      	ldr	r2, [r7, #28]
 800fbc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	db04      	blt.n	800fbd6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fbd2:	69bb      	ldr	r3, [r7, #24]
 800fbd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	6959      	ldr	r1, [r3, #20]
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	4613      	mov	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4413      	add	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4a13      	ldr	r2, [pc, #76]	; (800fc34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fbe6:	4413      	add	r3, r2
 800fbe8:	4299      	cmp	r1, r3
 800fbea:	d11c      	bne.n	800fc26 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd fd7b 	bl	800d6ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d903      	bls.n	800fc0a <vTaskPriorityDisinheritAfterTimeout+0xce>
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc06:	4a0c      	ldr	r2, [pc, #48]	; (800fc38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc08:	6013      	str	r3, [r2, #0]
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0e:	4613      	mov	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4413      	add	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4a07      	ldr	r2, [pc, #28]	; (800fc34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fc18:	441a      	add	r2, r3
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4610      	mov	r0, r2
 800fc22:	f7fd fd06 	bl	800d632 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc26:	bf00      	nop
 800fc28:	3720      	adds	r7, #32
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20006e30 	.word	0x20006e30
 800fc34:	20006e34 	.word	0x20006e34
 800fc38:	2000730c 	.word	0x2000730c

0800fc3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fc3c:	b480      	push	{r7}
 800fc3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fc40:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d004      	beq.n	800fc52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc4e:	3201      	adds	r2, #1
 800fc50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fc52:	4b03      	ldr	r3, [pc, #12]	; (800fc60 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc54:	681b      	ldr	r3, [r3, #0]
	}
 800fc56:	4618      	mov	r0, r3
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	20006e30 	.word	0x20006e30

0800fc64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fc6e:	4b21      	ldr	r3, [pc, #132]	; (800fcf4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc74:	4b20      	ldr	r3, [pc, #128]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3304      	adds	r3, #4
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fd fd36 	bl	800d6ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc86:	d10a      	bne.n	800fc9e <prvAddCurrentTaskToDelayedList+0x3a>
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d007      	beq.n	800fc9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fc8e:	4b1a      	ldr	r3, [pc, #104]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3304      	adds	r3, #4
 800fc94:	4619      	mov	r1, r3
 800fc96:	4819      	ldr	r0, [pc, #100]	; (800fcfc <prvAddCurrentTaskToDelayedList+0x98>)
 800fc98:	f7fd fccb 	bl	800d632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fc9c:	e026      	b.n	800fcec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4413      	add	r3, r2
 800fca4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d209      	bcs.n	800fcca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcb6:	4b12      	ldr	r3, [pc, #72]	; (800fd00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	f7fd fcd9 	bl	800d67a <vListInsert>
}
 800fcc8:	e010      	b.n	800fcec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcca:	4b0e      	ldr	r3, [pc, #56]	; (800fd04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	f7fd fccf 	bl	800d67a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fcdc:	4b0a      	ldr	r3, [pc, #40]	; (800fd08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d202      	bcs.n	800fcec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fce6:	4a08      	ldr	r2, [pc, #32]	; (800fd08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	6013      	str	r3, [r2, #0]
}
 800fcec:	bf00      	nop
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	20007308 	.word	0x20007308
 800fcf8:	20006e30 	.word	0x20006e30
 800fcfc:	200072f0 	.word	0x200072f0
 800fd00:	200072c0 	.word	0x200072c0
 800fd04:	200072bc 	.word	0x200072bc
 800fd08:	20007324 	.word	0x20007324

0800fd0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b08a      	sub	sp, #40	; 0x28
 800fd10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd16:	f000 faff 	bl	8010318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd1a:	4b1c      	ldr	r3, [pc, #112]	; (800fd8c <xTimerCreateTimerTask+0x80>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d021      	beq.n	800fd66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd22:	2300      	movs	r3, #0
 800fd24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd26:	2300      	movs	r3, #0
 800fd28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd2a:	1d3a      	adds	r2, r7, #4
 800fd2c:	f107 0108 	add.w	r1, r7, #8
 800fd30:	f107 030c 	add.w	r3, r7, #12
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd fa5f 	bl	800d1f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd3a:	6879      	ldr	r1, [r7, #4]
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	9202      	str	r2, [sp, #8]
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	2302      	movs	r3, #2
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	2300      	movs	r3, #0
 800fd4a:	460a      	mov	r2, r1
 800fd4c:	4910      	ldr	r1, [pc, #64]	; (800fd90 <xTimerCreateTimerTask+0x84>)
 800fd4e:	4811      	ldr	r0, [pc, #68]	; (800fd94 <xTimerCreateTimerTask+0x88>)
 800fd50:	f7fe ffd8 	bl	800ed04 <xTaskCreateStatic>
 800fd54:	4602      	mov	r2, r0
 800fd56:	4b10      	ldr	r3, [pc, #64]	; (800fd98 <xTimerCreateTimerTask+0x8c>)
 800fd58:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fd5a:	4b0f      	ldr	r3, [pc, #60]	; (800fd98 <xTimerCreateTimerTask+0x8c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fd62:	2301      	movs	r3, #1
 800fd64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d109      	bne.n	800fd80 <xTimerCreateTimerTask+0x74>
 800fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	613b      	str	r3, [r7, #16]
 800fd7e:	e7fe      	b.n	800fd7e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800fd80:	697b      	ldr	r3, [r7, #20]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3718      	adds	r7, #24
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20007360 	.word	0x20007360
 800fd90:	0801d968 	.word	0x0801d968
 800fd94:	0800fecd 	.word	0x0800fecd
 800fd98:	20007364 	.word	0x20007364

0800fd9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08a      	sub	sp, #40	; 0x28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d109      	bne.n	800fdc8 <xTimerGenericCommand+0x2c>
 800fdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	623b      	str	r3, [r7, #32]
 800fdc6:	e7fe      	b.n	800fdc6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fdc8:	4b19      	ldr	r3, [pc, #100]	; (800fe30 <xTimerGenericCommand+0x94>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d02a      	beq.n	800fe26 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	dc18      	bgt.n	800fe14 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fde2:	f7ff fdb9 	bl	800f958 <xTaskGetSchedulerState>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b02      	cmp	r3, #2
 800fdea:	d109      	bne.n	800fe00 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fdec:	4b10      	ldr	r3, [pc, #64]	; (800fe30 <xTimerGenericCommand+0x94>)
 800fdee:	6818      	ldr	r0, [r3, #0]
 800fdf0:	f107 0110 	add.w	r1, r7, #16
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdf8:	f7fe f93a 	bl	800e070 <xQueueGenericSend>
 800fdfc:	6278      	str	r0, [r7, #36]	; 0x24
 800fdfe:	e012      	b.n	800fe26 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe00:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <xTimerGenericCommand+0x94>)
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	f107 0110 	add.w	r1, r7, #16
 800fe08:	2300      	movs	r3, #0
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	f7fe f930 	bl	800e070 <xQueueGenericSend>
 800fe10:	6278      	str	r0, [r7, #36]	; 0x24
 800fe12:	e008      	b.n	800fe26 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe14:	4b06      	ldr	r3, [pc, #24]	; (800fe30 <xTimerGenericCommand+0x94>)
 800fe16:	6818      	ldr	r0, [r3, #0]
 800fe18:	f107 0110 	add.w	r1, r7, #16
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	f7fe fa20 	bl	800e264 <xQueueGenericSendFromISR>
 800fe24:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3728      	adds	r7, #40	; 0x28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20007360 	.word	0x20007360

0800fe34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b088      	sub	sp, #32
 800fe38:	af02      	add	r7, sp, #8
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe3e:	4b22      	ldr	r3, [pc, #136]	; (800fec8 <prvProcessExpiredTimer+0x94>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	3304      	adds	r3, #4
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fd fc4d 	bl	800d6ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe58:	f003 0304 	and.w	r3, r3, #4
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d021      	beq.n	800fea4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	699a      	ldr	r2, [r3, #24]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	18d1      	adds	r1, r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	6978      	ldr	r0, [r7, #20]
 800fe6e:	f000 f8d1 	bl	8010014 <prvInsertTimerInActiveList>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d01e      	beq.n	800feb6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe78:	2300      	movs	r3, #0
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	2100      	movs	r1, #0
 800fe82:	6978      	ldr	r0, [r7, #20]
 800fe84:	f7ff ff8a 	bl	800fd9c <xTimerGenericCommand>
 800fe88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d112      	bne.n	800feb6 <prvProcessExpiredTimer+0x82>
 800fe90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	60fb      	str	r3, [r7, #12]
 800fea2:	e7fe      	b.n	800fea2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feaa:	f023 0301 	bic.w	r3, r3, #1
 800feae:	b2da      	uxtb	r2, r3
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	6a1b      	ldr	r3, [r3, #32]
 800feba:	6978      	ldr	r0, [r7, #20]
 800febc:	4798      	blx	r3
}
 800febe:	bf00      	nop
 800fec0:	3718      	adds	r7, #24
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20007358 	.word	0x20007358

0800fecc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fed4:	f107 0308 	add.w	r3, r7, #8
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 f857 	bl	800ff8c <prvGetNextExpireTime>
 800fede:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	4619      	mov	r1, r3
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f803 	bl	800fef0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800feea:	f000 f8d5 	bl	8010098 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800feee:	e7f1      	b.n	800fed4 <prvTimerTask+0x8>

0800fef0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fefa:	f7ff f939 	bl	800f170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fefe:	f107 0308 	add.w	r3, r7, #8
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 f866 	bl	800ffd4 <prvSampleTimeNow>
 800ff08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d130      	bne.n	800ff72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <prvProcessTimerOrBlockTask+0x3c>
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d806      	bhi.n	800ff2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff1e:	f7ff f935 	bl	800f18c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff22:	68f9      	ldr	r1, [r7, #12]
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff ff85 	bl	800fe34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff2a:	e024      	b.n	800ff76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d008      	beq.n	800ff44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff32:	4b13      	ldr	r3, [pc, #76]	; (800ff80 <prvProcessTimerOrBlockTask+0x90>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d101      	bne.n	800ff40 <prvProcessTimerOrBlockTask+0x50>
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e000      	b.n	800ff42 <prvProcessTimerOrBlockTask+0x52>
 800ff40:	2300      	movs	r3, #0
 800ff42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff44:	4b0f      	ldr	r3, [pc, #60]	; (800ff84 <prvProcessTimerOrBlockTask+0x94>)
 800ff46:	6818      	ldr	r0, [r3, #0]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	683a      	ldr	r2, [r7, #0]
 800ff50:	4619      	mov	r1, r3
 800ff52:	f7fe fea3 	bl	800ec9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff56:	f7ff f919 	bl	800f18c <xTaskResumeAll>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10a      	bne.n	800ff76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ff60:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <prvProcessTimerOrBlockTask+0x98>)
 800ff62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	f3bf 8f6f 	isb	sy
}
 800ff70:	e001      	b.n	800ff76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ff72:	f7ff f90b 	bl	800f18c <xTaskResumeAll>
}
 800ff76:	bf00      	nop
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	2000735c 	.word	0x2000735c
 800ff84:	20007360 	.word	0x20007360
 800ff88:	e000ed04 	.word	0xe000ed04

0800ff8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff94:	4b0e      	ldr	r3, [pc, #56]	; (800ffd0 <prvGetNextExpireTime+0x44>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <prvGetNextExpireTime+0x16>
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	e000      	b.n	800ffa4 <prvGetNextExpireTime+0x18>
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d105      	bne.n	800ffbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffb0:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <prvGetNextExpireTime+0x44>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	e001      	b.n	800ffc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3714      	adds	r7, #20
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	20007358 	.word	0x20007358

0800ffd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ffdc:	f7ff f972 	bl	800f2c4 <xTaskGetTickCount>
 800ffe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ffe2:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <prvSampleTimeNow+0x3c>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d205      	bcs.n	800fff8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ffec:	f000 f930 	bl	8010250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	e002      	b.n	800fffe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fffe:	4a04      	ldr	r2, [pc, #16]	; (8010010 <prvSampleTimeNow+0x3c>)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010004:	68fb      	ldr	r3, [r7, #12]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	20007368 	.word	0x20007368

08010014 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010022:	2300      	movs	r3, #0
 8010024:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	429a      	cmp	r2, r3
 8010038:	d812      	bhi.n	8010060 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	1ad2      	subs	r2, r2, r3
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	699b      	ldr	r3, [r3, #24]
 8010044:	429a      	cmp	r2, r3
 8010046:	d302      	bcc.n	801004e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010048:	2301      	movs	r3, #1
 801004a:	617b      	str	r3, [r7, #20]
 801004c:	e01b      	b.n	8010086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801004e:	4b10      	ldr	r3, [pc, #64]	; (8010090 <prvInsertTimerInActiveList+0x7c>)
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	3304      	adds	r3, #4
 8010056:	4619      	mov	r1, r3
 8010058:	4610      	mov	r0, r2
 801005a:	f7fd fb0e 	bl	800d67a <vListInsert>
 801005e:	e012      	b.n	8010086 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d206      	bcs.n	8010076 <prvInsertTimerInActiveList+0x62>
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	429a      	cmp	r2, r3
 801006e:	d302      	bcc.n	8010076 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010070:	2301      	movs	r3, #1
 8010072:	617b      	str	r3, [r7, #20]
 8010074:	e007      	b.n	8010086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010076:	4b07      	ldr	r3, [pc, #28]	; (8010094 <prvInsertTimerInActiveList+0x80>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	3304      	adds	r3, #4
 801007e:	4619      	mov	r1, r3
 8010080:	4610      	mov	r0, r2
 8010082:	f7fd fafa 	bl	800d67a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010086:	697b      	ldr	r3, [r7, #20]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	2000735c 	.word	0x2000735c
 8010094:	20007358 	.word	0x20007358

08010098 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b08e      	sub	sp, #56	; 0x38
 801009c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801009e:	e0c6      	b.n	801022e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	da17      	bge.n	80100d6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80100a6:	1d3b      	adds	r3, r7, #4
 80100a8:	3304      	adds	r3, #4
 80100aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d109      	bne.n	80100c6 <prvProcessReceivedCommands+0x2e>
 80100b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	61fb      	str	r3, [r7, #28]
 80100c4:	e7fe      	b.n	80100c4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100cc:	6850      	ldr	r0, [r2, #4]
 80100ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100d0:	6892      	ldr	r2, [r2, #8]
 80100d2:	4611      	mov	r1, r2
 80100d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f2c0 80a7 	blt.w	801022c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80100e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e4:	695b      	ldr	r3, [r3, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d004      	beq.n	80100f4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	3304      	adds	r3, #4
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fd fafc 	bl	800d6ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100f4:	463b      	mov	r3, r7
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff ff6c 	bl	800ffd4 <prvSampleTimeNow>
 80100fc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b09      	cmp	r3, #9
 8010102:	f200 8094 	bhi.w	801022e <prvProcessReceivedCommands+0x196>
 8010106:	a201      	add	r2, pc, #4	; (adr r2, 801010c <prvProcessReceivedCommands+0x74>)
 8010108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801010c:	08010135 	.word	0x08010135
 8010110:	08010135 	.word	0x08010135
 8010114:	08010135 	.word	0x08010135
 8010118:	080101a7 	.word	0x080101a7
 801011c:	080101bb 	.word	0x080101bb
 8010120:	08010203 	.word	0x08010203
 8010124:	08010135 	.word	0x08010135
 8010128:	08010135 	.word	0x08010135
 801012c:	080101a7 	.word	0x080101a7
 8010130:	080101bb 	.word	0x080101bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801013a:	f043 0301 	orr.w	r3, r3, #1
 801013e:	b2da      	uxtb	r2, r3
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	699b      	ldr	r3, [r3, #24]
 801014c:	18d1      	adds	r1, r2, r3
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010154:	f7ff ff5e 	bl	8010014 <prvInsertTimerInActiveList>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d067      	beq.n	801022e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010160:	6a1b      	ldr	r3, [r3, #32]
 8010162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010164:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801016c:	f003 0304 	and.w	r3, r3, #4
 8010170:	2b00      	cmp	r3, #0
 8010172:	d05c      	beq.n	801022e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010178:	699b      	ldr	r3, [r3, #24]
 801017a:	441a      	add	r2, r3
 801017c:	2300      	movs	r3, #0
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	2300      	movs	r3, #0
 8010182:	2100      	movs	r1, #0
 8010184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010186:	f7ff fe09 	bl	800fd9c <xTimerGenericCommand>
 801018a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801018c:	6a3b      	ldr	r3, [r7, #32]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d14d      	bne.n	801022e <prvProcessReceivedCommands+0x196>
 8010192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	61bb      	str	r3, [r7, #24]
 80101a4:	e7fe      	b.n	80101a4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101ac:	f023 0301 	bic.w	r3, r3, #1
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80101b8:	e039      	b.n	801022e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101c0:	f043 0301 	orr.w	r3, r3, #1
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80101cc:	68ba      	ldr	r2, [r7, #8]
 80101ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <prvProcessReceivedCommands+0x156>
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	617b      	str	r3, [r7, #20]
 80101ec:	e7fe      	b.n	80101ec <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	699a      	ldr	r2, [r3, #24]
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	18d1      	adds	r1, r2, r3
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101fc:	f7ff ff0a 	bl	8010014 <prvInsertTimerInActiveList>
					break;
 8010200:	e015      	b.n	801022e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010208:	f003 0302 	and.w	r3, r3, #2
 801020c:	2b00      	cmp	r3, #0
 801020e:	d103      	bne.n	8010218 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8010210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010212:	f7fd f8cd 	bl	800d3b0 <vPortFree>
 8010216:	e00a      	b.n	801022e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801021e:	f023 0301 	bic.w	r3, r3, #1
 8010222:	b2da      	uxtb	r2, r3
 8010224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801022a:	e000      	b.n	801022e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801022c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801022e:	4b07      	ldr	r3, [pc, #28]	; (801024c <prvProcessReceivedCommands+0x1b4>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	1d39      	adds	r1, r7, #4
 8010234:	2200      	movs	r2, #0
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe f932 	bl	800e4a0 <xQueueReceive>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	f47f af2e 	bne.w	80100a0 <prvProcessReceivedCommands+0x8>
	}
}
 8010244:	bf00      	nop
 8010246:	3730      	adds	r7, #48	; 0x30
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20007360 	.word	0x20007360

08010250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010256:	e047      	b.n	80102e8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010258:	4b2d      	ldr	r3, [pc, #180]	; (8010310 <prvSwitchTimerLists+0xc0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010262:	4b2b      	ldr	r3, [pc, #172]	; (8010310 <prvSwitchTimerLists+0xc0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	3304      	adds	r3, #4
 8010270:	4618      	mov	r0, r3
 8010272:	f7fd fa3b 	bl	800d6ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010284:	f003 0304 	and.w	r3, r3, #4
 8010288:	2b00      	cmp	r3, #0
 801028a:	d02d      	beq.n	80102e8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	699b      	ldr	r3, [r3, #24]
 8010290:	693a      	ldr	r2, [r7, #16]
 8010292:	4413      	add	r3, r2
 8010294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	429a      	cmp	r2, r3
 801029c:	d90e      	bls.n	80102bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80102aa:	4b19      	ldr	r3, [pc, #100]	; (8010310 <prvSwitchTimerLists+0xc0>)
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3304      	adds	r3, #4
 80102b2:	4619      	mov	r1, r3
 80102b4:	4610      	mov	r0, r2
 80102b6:	f7fd f9e0 	bl	800d67a <vListInsert>
 80102ba:	e015      	b.n	80102e8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102bc:	2300      	movs	r3, #0
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	2300      	movs	r3, #0
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	2100      	movs	r1, #0
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f7ff fd68 	bl	800fd9c <xTimerGenericCommand>
 80102cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d109      	bne.n	80102e8 <prvSwitchTimerLists+0x98>
 80102d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	603b      	str	r3, [r7, #0]
 80102e6:	e7fe      	b.n	80102e6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102e8:	4b09      	ldr	r3, [pc, #36]	; (8010310 <prvSwitchTimerLists+0xc0>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d1b2      	bne.n	8010258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80102f2:	4b07      	ldr	r3, [pc, #28]	; (8010310 <prvSwitchTimerLists+0xc0>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80102f8:	4b06      	ldr	r3, [pc, #24]	; (8010314 <prvSwitchTimerLists+0xc4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a04      	ldr	r2, [pc, #16]	; (8010310 <prvSwitchTimerLists+0xc0>)
 80102fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010300:	4a04      	ldr	r2, [pc, #16]	; (8010314 <prvSwitchTimerLists+0xc4>)
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	6013      	str	r3, [r2, #0]
}
 8010306:	bf00      	nop
 8010308:	3718      	adds	r7, #24
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20007358 	.word	0x20007358
 8010314:	2000735c 	.word	0x2000735c

08010318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801031e:	f7fd fb35 	bl	800d98c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010322:	4b15      	ldr	r3, [pc, #84]	; (8010378 <prvCheckForValidListAndQueue+0x60>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d120      	bne.n	801036c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801032a:	4814      	ldr	r0, [pc, #80]	; (801037c <prvCheckForValidListAndQueue+0x64>)
 801032c:	f7fd f954 	bl	800d5d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010330:	4813      	ldr	r0, [pc, #76]	; (8010380 <prvCheckForValidListAndQueue+0x68>)
 8010332:	f7fd f951 	bl	800d5d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010336:	4b13      	ldr	r3, [pc, #76]	; (8010384 <prvCheckForValidListAndQueue+0x6c>)
 8010338:	4a10      	ldr	r2, [pc, #64]	; (801037c <prvCheckForValidListAndQueue+0x64>)
 801033a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801033c:	4b12      	ldr	r3, [pc, #72]	; (8010388 <prvCheckForValidListAndQueue+0x70>)
 801033e:	4a10      	ldr	r2, [pc, #64]	; (8010380 <prvCheckForValidListAndQueue+0x68>)
 8010340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010342:	2300      	movs	r3, #0
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	4b11      	ldr	r3, [pc, #68]	; (801038c <prvCheckForValidListAndQueue+0x74>)
 8010348:	4a11      	ldr	r2, [pc, #68]	; (8010390 <prvCheckForValidListAndQueue+0x78>)
 801034a:	2110      	movs	r1, #16
 801034c:	200a      	movs	r0, #10
 801034e:	f7fd fc9f 	bl	800dc90 <xQueueGenericCreateStatic>
 8010352:	4602      	mov	r2, r0
 8010354:	4b08      	ldr	r3, [pc, #32]	; (8010378 <prvCheckForValidListAndQueue+0x60>)
 8010356:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010358:	4b07      	ldr	r3, [pc, #28]	; (8010378 <prvCheckForValidListAndQueue+0x60>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d005      	beq.n	801036c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010360:	4b05      	ldr	r3, [pc, #20]	; (8010378 <prvCheckForValidListAndQueue+0x60>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	490b      	ldr	r1, [pc, #44]	; (8010394 <prvCheckForValidListAndQueue+0x7c>)
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe fc46 	bl	800ebf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801036c:	f7fd fb3c 	bl	800d9e8 <vPortExitCritical>
}
 8010370:	bf00      	nop
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	20007360 	.word	0x20007360
 801037c:	20007330 	.word	0x20007330
 8010380:	20007344 	.word	0x20007344
 8010384:	20007358 	.word	0x20007358
 8010388:	2000735c 	.word	0x2000735c
 801038c:	2000740c 	.word	0x2000740c
 8010390:	2000736c 	.word	0x2000736c
 8010394:	0801d970 	.word	0x0801d970

08010398 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010398:	b480      	push	{r7}
 801039a:	b083      	sub	sp, #12
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80103a2:	88fb      	ldrh	r3, [r7, #6]
 80103a4:	021b      	lsls	r3, r3, #8
 80103a6:	b21a      	sxth	r2, r3
 80103a8:	88fb      	ldrh	r3, [r7, #6]
 80103aa:	0a1b      	lsrs	r3, r3, #8
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	b21b      	sxth	r3, r3
 80103b0:	4313      	orrs	r3, r2
 80103b2:	b21b      	sxth	r3, r3
 80103b4:	b29b      	uxth	r3, r3
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	061a      	lsls	r2, r3, #24
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	021b      	lsls	r3, r3, #8
 80103d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80103d6:	431a      	orrs	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	0a1b      	lsrs	r3, r3, #8
 80103dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80103e0:	431a      	orrs	r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	0e1b      	lsrs	r3, r3, #24
 80103e6:	4313      	orrs	r3, r2
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80103f8:	4b20      	ldr	r3, [pc, #128]	; (801047c <dhcp_inc_pcb_refcount+0x88>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d133      	bne.n	8010468 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010400:	4b1f      	ldr	r3, [pc, #124]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d005      	beq.n	8010414 <dhcp_inc_pcb_refcount+0x20>
 8010408:	4b1e      	ldr	r3, [pc, #120]	; (8010484 <dhcp_inc_pcb_refcount+0x90>)
 801040a:	22e5      	movs	r2, #229	; 0xe5
 801040c:	491e      	ldr	r1, [pc, #120]	; (8010488 <dhcp_inc_pcb_refcount+0x94>)
 801040e:	481f      	ldr	r0, [pc, #124]	; (801048c <dhcp_inc_pcb_refcount+0x98>)
 8010410:	f00c fb3a 	bl	801ca88 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010414:	f00c faaa 	bl	801c96c <udp_new>
 8010418:	4602      	mov	r2, r0
 801041a:	4b19      	ldr	r3, [pc, #100]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 801041c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801041e:	4b18      	ldr	r3, [pc, #96]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d102      	bne.n	801042c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801042a:	e024      	b.n	8010476 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801042c:	4b14      	ldr	r3, [pc, #80]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	7a5a      	ldrb	r2, [r3, #9]
 8010432:	4b13      	ldr	r3, [pc, #76]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f042 0220 	orr.w	r2, r2, #32
 801043a:	b2d2      	uxtb	r2, r2
 801043c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801043e:	4b10      	ldr	r3, [pc, #64]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2244      	movs	r2, #68	; 0x44
 8010444:	4912      	ldr	r1, [pc, #72]	; (8010490 <dhcp_inc_pcb_refcount+0x9c>)
 8010446:	4618      	mov	r0, r3
 8010448:	f00c f938 	bl	801c6bc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2243      	movs	r2, #67	; 0x43
 8010452:	490f      	ldr	r1, [pc, #60]	; (8010490 <dhcp_inc_pcb_refcount+0x9c>)
 8010454:	4618      	mov	r0, r3
 8010456:	f00c f9b9 	bl	801c7cc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801045a:	4b09      	ldr	r3, [pc, #36]	; (8010480 <dhcp_inc_pcb_refcount+0x8c>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2200      	movs	r2, #0
 8010460:	490c      	ldr	r1, [pc, #48]	; (8010494 <dhcp_inc_pcb_refcount+0xa0>)
 8010462:	4618      	mov	r0, r3
 8010464:	f00c fa20 	bl	801c8a8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010468:	4b04      	ldr	r3, [pc, #16]	; (801047c <dhcp_inc_pcb_refcount+0x88>)
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	3301      	adds	r3, #1
 801046e:	b2da      	uxtb	r2, r3
 8010470:	4b02      	ldr	r3, [pc, #8]	; (801047c <dhcp_inc_pcb_refcount+0x88>)
 8010472:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	20007460 	.word	0x20007460
 8010480:	2000745c 	.word	0x2000745c
 8010484:	0801d978 	.word	0x0801d978
 8010488:	0801d9dc 	.word	0x0801d9dc
 801048c:	0801da04 	.word	0x0801da04
 8010490:	08020ad0 	.word	0x08020ad0
 8010494:	08011d51 	.word	0x08011d51

08010498 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801049c:	4b0e      	ldr	r3, [pc, #56]	; (80104d8 <dhcp_dec_pcb_refcount+0x40>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d105      	bne.n	80104b0 <dhcp_dec_pcb_refcount+0x18>
 80104a4:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <dhcp_dec_pcb_refcount+0x44>)
 80104a6:	22ff      	movs	r2, #255	; 0xff
 80104a8:	490d      	ldr	r1, [pc, #52]	; (80104e0 <dhcp_dec_pcb_refcount+0x48>)
 80104aa:	480e      	ldr	r0, [pc, #56]	; (80104e4 <dhcp_dec_pcb_refcount+0x4c>)
 80104ac:	f00c faec 	bl	801ca88 <iprintf>
  dhcp_pcb_refcount--;
 80104b0:	4b09      	ldr	r3, [pc, #36]	; (80104d8 <dhcp_dec_pcb_refcount+0x40>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <dhcp_dec_pcb_refcount+0x40>)
 80104ba:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80104bc:	4b06      	ldr	r3, [pc, #24]	; (80104d8 <dhcp_dec_pcb_refcount+0x40>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d107      	bne.n	80104d4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80104c4:	4b08      	ldr	r3, [pc, #32]	; (80104e8 <dhcp_dec_pcb_refcount+0x50>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f00c fa0d 	bl	801c8e8 <udp_remove>
    dhcp_pcb = NULL;
 80104ce:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <dhcp_dec_pcb_refcount+0x50>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	601a      	str	r2, [r3, #0]
  }
}
 80104d4:	bf00      	nop
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	20007460 	.word	0x20007460
 80104dc:	0801d978 	.word	0x0801d978
 80104e0:	0801da2c 	.word	0x0801da2c
 80104e4:	0801da04 	.word	0x0801da04
 80104e8:	2000745c 	.word	0x2000745c

080104ec <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80104fa:	210c      	movs	r1, #12
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f001 f869 	bl	80115d4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010502:	4b06      	ldr	r3, [pc, #24]	; (801051c <dhcp_handle_nak+0x30>)
 8010504:	4a05      	ldr	r2, [pc, #20]	; (801051c <dhcp_handle_nak+0x30>)
 8010506:	4905      	ldr	r1, [pc, #20]	; (801051c <dhcp_handle_nak+0x30>)
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f005 f8a3 	bl	8015654 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 fc5c 	bl	8010dcc <dhcp_discover>
}
 8010514:	bf00      	nop
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	08020ad0 	.word	0x08020ad0

08010520 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801052e:	2108      	movs	r1, #8
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f001 f84f 	bl	80115d4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	331c      	adds	r3, #28
 801053a:	2200      	movs	r2, #0
 801053c:	4619      	mov	r1, r3
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f002 fb4e 	bl	8012be0 <etharp_query>
 8010544:	4603      	mov	r3, r0
 8010546:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	799b      	ldrb	r3, [r3, #6]
 801054c:	2bff      	cmp	r3, #255	; 0xff
 801054e:	d005      	beq.n	801055c <dhcp_check+0x3c>
    dhcp->tries++;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	799b      	ldrb	r3, [r3, #6]
 8010554:	3301      	adds	r3, #1
 8010556:	b2da      	uxtb	r2, r3
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801055c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010560:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010562:	893b      	ldrh	r3, [r7, #8]
 8010564:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010568:	4a06      	ldr	r2, [pc, #24]	; (8010584 <dhcp_check+0x64>)
 801056a:	fb82 1203 	smull	r1, r2, r2, r3
 801056e:	1152      	asrs	r2, r2, #5
 8010570:	17db      	asrs	r3, r3, #31
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	b29a      	uxth	r2, r3
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801057a:	bf00      	nop
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	10624dd3 	.word	0x10624dd3

08010588 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010598:	4b0c      	ldr	r3, [pc, #48]	; (80105cc <dhcp_handle_offer+0x44>)
 801059a:	789b      	ldrb	r3, [r3, #2]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d011      	beq.n	80105c4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80105a6:	4b0a      	ldr	r3, [pc, #40]	; (80105d0 <dhcp_handle_offer+0x48>)
 80105a8:	689b      	ldr	r3, [r3, #8]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff ff09 	bl	80103c2 <lwip_htonl>
 80105b0:	4602      	mov	r2, r0
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	691a      	ldr	r2, [r3, #16]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f808 	bl	80105d4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80105c4:	bf00      	nop
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	20008630 	.word	0x20008630
 80105d0:	20008638 	.word	0x20008638

080105d4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80105d4:	b5b0      	push	{r4, r5, r7, lr}
 80105d6:	b08a      	sub	sp, #40	; 0x28
 80105d8:	af02      	add	r7, sp, #8
 80105da:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d109      	bne.n	80105f6 <dhcp_select+0x22>
 80105e2:	4b71      	ldr	r3, [pc, #452]	; (80107a8 <dhcp_select+0x1d4>)
 80105e4:	f240 1277 	movw	r2, #375	; 0x177
 80105e8:	4970      	ldr	r1, [pc, #448]	; (80107ac <dhcp_select+0x1d8>)
 80105ea:	4871      	ldr	r0, [pc, #452]	; (80107b0 <dhcp_select+0x1dc>)
 80105ec:	f00c fa4c 	bl	801ca88 <iprintf>
 80105f0:	f06f 030f 	mvn.w	r3, #15
 80105f4:	e0d3      	b.n	801079e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d109      	bne.n	8010616 <dhcp_select+0x42>
 8010602:	4b69      	ldr	r3, [pc, #420]	; (80107a8 <dhcp_select+0x1d4>)
 8010604:	f240 1279 	movw	r2, #377	; 0x179
 8010608:	496a      	ldr	r1, [pc, #424]	; (80107b4 <dhcp_select+0x1e0>)
 801060a:	4869      	ldr	r0, [pc, #420]	; (80107b0 <dhcp_select+0x1dc>)
 801060c:	f00c fa3c 	bl	801ca88 <iprintf>
 8010610:	f06f 0305 	mvn.w	r3, #5
 8010614:	e0c3      	b.n	801079e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010616:	2101      	movs	r1, #1
 8010618:	69b8      	ldr	r0, [r7, #24]
 801061a:	f000 ffdb 	bl	80115d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801061e:	f107 030c 	add.w	r3, r7, #12
 8010622:	2203      	movs	r2, #3
 8010624:	69b9      	ldr	r1, [r7, #24]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f001 fc5e 	bl	8011ee8 <dhcp_create_msg>
 801062c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 8085 	beq.w	8010740 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801063c:	89b8      	ldrh	r0, [r7, #12]
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010644:	2302      	movs	r3, #2
 8010646:	2239      	movs	r2, #57	; 0x39
 8010648:	f000 ffde 	bl	8011608 <dhcp_option>
 801064c:	4603      	mov	r3, r0
 801064e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010650:	89b8      	ldrh	r0, [r7, #12]
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801065c:	461a      	mov	r2, r3
 801065e:	f001 f82d 	bl	80116bc <dhcp_option_short>
 8010662:	4603      	mov	r3, r0
 8010664:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010666:	89b8      	ldrh	r0, [r7, #12]
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801066e:	2304      	movs	r3, #4
 8010670:	2232      	movs	r2, #50	; 0x32
 8010672:	f000 ffc9 	bl	8011608 <dhcp_option>
 8010676:	4603      	mov	r3, r0
 8010678:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801067a:	89bc      	ldrh	r4, [r7, #12]
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	69db      	ldr	r3, [r3, #28]
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff fe9b 	bl	80103c2 <lwip_htonl>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	4629      	mov	r1, r5
 8010692:	4620      	mov	r0, r4
 8010694:	f001 f844 	bl	8011720 <dhcp_option_long>
 8010698:	4603      	mov	r3, r0
 801069a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801069c:	89b8      	ldrh	r0, [r7, #12]
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106a4:	2304      	movs	r3, #4
 80106a6:	2236      	movs	r2, #54	; 0x36
 80106a8:	f000 ffae 	bl	8011608 <dhcp_option>
 80106ac:	4603      	mov	r3, r0
 80106ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80106b0:	89bc      	ldrh	r4, [r7, #12]
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	699b      	ldr	r3, [r3, #24]
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff fe80 	bl	80103c2 <lwip_htonl>
 80106c2:	4603      	mov	r3, r0
 80106c4:	461a      	mov	r2, r3
 80106c6:	4629      	mov	r1, r5
 80106c8:	4620      	mov	r0, r4
 80106ca:	f001 f829 	bl	8011720 <dhcp_option_long>
 80106ce:	4603      	mov	r3, r0
 80106d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80106d2:	89b8      	ldrh	r0, [r7, #12]
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106da:	2303      	movs	r3, #3
 80106dc:	2237      	movs	r2, #55	; 0x37
 80106de:	f000 ff93 	bl	8011608 <dhcp_option>
 80106e2:	4603      	mov	r3, r0
 80106e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106e6:	2300      	movs	r3, #0
 80106e8:	77bb      	strb	r3, [r7, #30]
 80106ea:	e00e      	b.n	801070a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80106ec:	89b8      	ldrh	r0, [r7, #12]
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106f4:	7fbb      	ldrb	r3, [r7, #30]
 80106f6:	4a30      	ldr	r2, [pc, #192]	; (80107b8 <dhcp_select+0x1e4>)
 80106f8:	5cd3      	ldrb	r3, [r2, r3]
 80106fa:	461a      	mov	r2, r3
 80106fc:	f000 ffb8 	bl	8011670 <dhcp_option_byte>
 8010700:	4603      	mov	r3, r0
 8010702:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010704:	7fbb      	ldrb	r3, [r7, #30]
 8010706:	3301      	adds	r3, #1
 8010708:	77bb      	strb	r3, [r7, #30]
 801070a:	7fbb      	ldrb	r3, [r7, #30]
 801070c:	2b02      	cmp	r3, #2
 801070e:	d9ed      	bls.n	80106ec <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010710:	89b8      	ldrh	r0, [r7, #12]
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	33f0      	adds	r3, #240	; 0xf0
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	4619      	mov	r1, r3
 801071a:	f001 fcbb 	bl	8012094 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801071e:	4b27      	ldr	r3, [pc, #156]	; (80107bc <dhcp_select+0x1e8>)
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	4b27      	ldr	r3, [pc, #156]	; (80107c0 <dhcp_select+0x1ec>)
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	2343      	movs	r3, #67	; 0x43
 801072c:	4a25      	ldr	r2, [pc, #148]	; (80107c4 <dhcp_select+0x1f0>)
 801072e:	6979      	ldr	r1, [r7, #20]
 8010730:	f00b fede 	bl	801c4f0 <udp_sendto_if_src>
 8010734:	4603      	mov	r3, r0
 8010736:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010738:	6978      	ldr	r0, [r7, #20]
 801073a:	f005 fc95 	bl	8016068 <pbuf_free>
 801073e:	e001      	b.n	8010744 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010740:	23ff      	movs	r3, #255	; 0xff
 8010742:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	799b      	ldrb	r3, [r3, #6]
 8010748:	2bff      	cmp	r3, #255	; 0xff
 801074a:	d005      	beq.n	8010758 <dhcp_select+0x184>
    dhcp->tries++;
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	799b      	ldrb	r3, [r3, #6]
 8010750:	3301      	adds	r3, #1
 8010752:	b2da      	uxtb	r2, r3
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	799b      	ldrb	r3, [r3, #6]
 801075c:	2b05      	cmp	r3, #5
 801075e:	d80d      	bhi.n	801077c <dhcp_select+0x1a8>
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	799b      	ldrb	r3, [r3, #6]
 8010764:	461a      	mov	r2, r3
 8010766:	2301      	movs	r3, #1
 8010768:	4093      	lsls	r3, r2
 801076a:	b29b      	uxth	r3, r3
 801076c:	461a      	mov	r2, r3
 801076e:	0152      	lsls	r2, r2, #5
 8010770:	1ad2      	subs	r2, r2, r3
 8010772:	0092      	lsls	r2, r2, #2
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	b29b      	uxth	r3, r3
 801077a:	e001      	b.n	8010780 <dhcp_select+0x1ac>
 801077c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010780:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010782:	89fb      	ldrh	r3, [r7, #14]
 8010784:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010788:	4a0f      	ldr	r2, [pc, #60]	; (80107c8 <dhcp_select+0x1f4>)
 801078a:	fb82 1203 	smull	r1, r2, r2, r3
 801078e:	1152      	asrs	r2, r2, #5
 8010790:	17db      	asrs	r3, r3, #31
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	b29a      	uxth	r2, r3
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801079a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3720      	adds	r7, #32
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bdb0      	pop	{r4, r5, r7, pc}
 80107a6:	bf00      	nop
 80107a8:	0801d978 	.word	0x0801d978
 80107ac:	0801da50 	.word	0x0801da50
 80107b0:	0801da04 	.word	0x0801da04
 80107b4:	0801da6c 	.word	0x0801da6c
 80107b8:	20000028 	.word	0x20000028
 80107bc:	2000745c 	.word	0x2000745c
 80107c0:	08020ad0 	.word	0x08020ad0
 80107c4:	08020ad4 	.word	0x08020ad4
 80107c8:	10624dd3 	.word	0x10624dd3

080107cc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80107d2:	4b27      	ldr	r3, [pc, #156]	; (8010870 <dhcp_coarse_tmr+0xa4>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	607b      	str	r3, [r7, #4]
 80107d8:	e042      	b.n	8010860 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107de:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d039      	beq.n	801085a <dhcp_coarse_tmr+0x8e>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	795b      	ldrb	r3, [r3, #5]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d035      	beq.n	801085a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	8a9b      	ldrh	r3, [r3, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d012      	beq.n	801081c <dhcp_coarse_tmr+0x50>
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	8a5b      	ldrh	r3, [r3, #18]
 80107fa:	3301      	adds	r3, #1
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	825a      	strh	r2, [r3, #18]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	8a5a      	ldrh	r2, [r3, #18]
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	8a9b      	ldrh	r3, [r3, #20]
 801080a:	429a      	cmp	r2, r3
 801080c:	d106      	bne.n	801081c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fe46 	bl	80114a0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 f96b 	bl	8010af0 <dhcp_start>
 801081a:	e01e      	b.n	801085a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	8a1b      	ldrh	r3, [r3, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00b      	beq.n	801083c <dhcp_coarse_tmr+0x70>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	8a1b      	ldrh	r3, [r3, #16]
 8010828:	1e5a      	subs	r2, r3, #1
 801082a:	b291      	uxth	r1, r2
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	8211      	strh	r1, [r2, #16]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d103      	bne.n	801083c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 f8c7 	bl	80109c8 <dhcp_t2_timeout>
 801083a:	e00e      	b.n	801085a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	89db      	ldrh	r3, [r3, #14]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00a      	beq.n	801085a <dhcp_coarse_tmr+0x8e>
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	89db      	ldrh	r3, [r3, #14]
 8010848:	1e5a      	subs	r2, r3, #1
 801084a:	b291      	uxth	r1, r2
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	81d1      	strh	r1, [r2, #14]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d102      	bne.n	801085a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 f888 	bl	801096a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	607b      	str	r3, [r7, #4]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d1b9      	bne.n	80107da <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	2000b728 	.word	0x2000b728

08010874 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801087a:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <dhcp_fine_tmr+0x60>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	607b      	str	r3, [r7, #4]
 8010880:	e020      	b.n	80108c4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010886:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d017      	beq.n	80108be <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	891b      	ldrh	r3, [r3, #8]
 8010892:	2b01      	cmp	r3, #1
 8010894:	d906      	bls.n	80108a4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	891b      	ldrh	r3, [r3, #8]
 801089a:	3b01      	subs	r3, #1
 801089c:	b29a      	uxth	r2, r3
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	811a      	strh	r2, [r3, #8]
 80108a2:	e00c      	b.n	80108be <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	891b      	ldrh	r3, [r3, #8]
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d108      	bne.n	80108be <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	891b      	ldrh	r3, [r3, #8]
 80108b0:	3b01      	subs	r3, #1
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 f80d 	bl	80108d8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	607b      	str	r3, [r7, #4]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1db      	bne.n	8010882 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80108ca:	bf00      	nop
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	2000b728 	.word	0x2000b728

080108d8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	795b      	ldrb	r3, [r3, #5]
 80108ea:	2b0c      	cmp	r3, #12
 80108ec:	d003      	beq.n	80108f6 <dhcp_timeout+0x1e>
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	795b      	ldrb	r3, [r3, #5]
 80108f2:	2b06      	cmp	r3, #6
 80108f4:	d103      	bne.n	80108fe <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fa68 	bl	8010dcc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80108fc:	e031      	b.n	8010962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	795b      	ldrb	r3, [r3, #5]
 8010902:	2b01      	cmp	r3, #1
 8010904:	d10e      	bne.n	8010924 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	799b      	ldrb	r3, [r3, #6]
 801090a:	2b05      	cmp	r3, #5
 801090c:	d803      	bhi.n	8010916 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff fe60 	bl	80105d4 <dhcp_select>
}
 8010914:	e025      	b.n	8010962 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fdc2 	bl	80114a0 <dhcp_release_and_stop>
      dhcp_start(netif);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 f8e7 	bl	8010af0 <dhcp_start>
}
 8010922:	e01e      	b.n	8010962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	795b      	ldrb	r3, [r3, #5]
 8010928:	2b08      	cmp	r3, #8
 801092a:	d10b      	bne.n	8010944 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	799b      	ldrb	r3, [r3, #6]
 8010930:	2b01      	cmp	r3, #1
 8010932:	d803      	bhi.n	801093c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff fdf3 	bl	8010520 <dhcp_check>
}
 801093a:	e012      	b.n	8010962 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 fae7 	bl	8010f10 <dhcp_bind>
}
 8010942:	e00e      	b.n	8010962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	795b      	ldrb	r3, [r3, #5]
 8010948:	2b03      	cmp	r3, #3
 801094a:	d10a      	bne.n	8010962 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	799b      	ldrb	r3, [r3, #6]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d803      	bhi.n	801095c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 fced 	bl	8011334 <dhcp_reboot>
}
 801095a:	e002      	b.n	8010962 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 fa35 	bl	8010dcc <dhcp_discover>
}
 8010962:	bf00      	nop
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010976:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	795b      	ldrb	r3, [r3, #5]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d007      	beq.n	8010990 <dhcp_t1_timeout+0x26>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	795b      	ldrb	r3, [r3, #5]
 8010984:	2b0a      	cmp	r3, #10
 8010986:	d003      	beq.n	8010990 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801098c:	2b05      	cmp	r3, #5
 801098e:	d117      	bne.n	80109c0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 fb97 	bl	80110c4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	899b      	ldrh	r3, [r3, #12]
 801099a:	461a      	mov	r2, r3
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	8a5b      	ldrh	r3, [r3, #18]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	dd0c      	ble.n	80109c0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	899b      	ldrh	r3, [r3, #12]
 80109aa:	461a      	mov	r2, r3
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	8a5b      	ldrh	r3, [r3, #18]
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	da00      	bge.n	80109b8 <dhcp_t1_timeout+0x4e>
 80109b6:	3301      	adds	r3, #1
 80109b8:	105b      	asrs	r3, r3, #1
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80109c0:	bf00      	nop
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	795b      	ldrb	r3, [r3, #5]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d00b      	beq.n	80109f6 <dhcp_t2_timeout+0x2e>
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	795b      	ldrb	r3, [r3, #5]
 80109e2:	2b0a      	cmp	r3, #10
 80109e4:	d007      	beq.n	80109f6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80109ea:	2b05      	cmp	r3, #5
 80109ec:	d003      	beq.n	80109f6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	795b      	ldrb	r3, [r3, #5]
 80109f2:	2b04      	cmp	r3, #4
 80109f4:	d117      	bne.n	8010a26 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 fc00 	bl	80111fc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	8a9b      	ldrh	r3, [r3, #20]
 8010a00:	461a      	mov	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	8a5b      	ldrh	r3, [r3, #18]
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	dd0c      	ble.n	8010a26 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	8a9b      	ldrh	r3, [r3, #20]
 8010a10:	461a      	mov	r2, r3
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	8a5b      	ldrh	r3, [r3, #18]
 8010a16:	1ad3      	subs	r3, r2, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	da00      	bge.n	8010a1e <dhcp_t2_timeout+0x56>
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	105b      	asrs	r3, r3, #1
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010a26:	bf00      	nop
 8010a28:	3710      	adds	r7, #16
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2200      	movs	r2, #0
 8010a44:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010a4c:	4b26      	ldr	r3, [pc, #152]	; (8010ae8 <dhcp_handle_ack+0xb8>)
 8010a4e:	78db      	ldrb	r3, [r3, #3]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d003      	beq.n	8010a5c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010a54:	4b25      	ldr	r3, [pc, #148]	; (8010aec <dhcp_handle_ack+0xbc>)
 8010a56:	68da      	ldr	r2, [r3, #12]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010a5c:	4b22      	ldr	r3, [pc, #136]	; (8010ae8 <dhcp_handle_ack+0xb8>)
 8010a5e:	791b      	ldrb	r3, [r3, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d004      	beq.n	8010a6e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010a64:	4b21      	ldr	r3, [pc, #132]	; (8010aec <dhcp_handle_ack+0xbc>)
 8010a66:	691a      	ldr	r2, [r3, #16]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8010a6c:	e004      	b.n	8010a78 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a72:	085a      	lsrs	r2, r3, #1
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010a78:	4b1b      	ldr	r3, [pc, #108]	; (8010ae8 <dhcp_handle_ack+0xb8>)
 8010a7a:	795b      	ldrb	r3, [r3, #5]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d004      	beq.n	8010a8a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010a80:	4b1a      	ldr	r3, [pc, #104]	; (8010aec <dhcp_handle_ack+0xbc>)
 8010a82:	695a      	ldr	r2, [r3, #20]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	631a      	str	r2, [r3, #48]	; 0x30
 8010a88:	e007      	b.n	8010a9a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a8e:	4613      	mov	r3, r2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	1a9b      	subs	r3, r3, r2
 8010a94:	08da      	lsrs	r2, r3, #3
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	691a      	ldr	r2, [r3, #16]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010aa2:	4b11      	ldr	r3, [pc, #68]	; (8010ae8 <dhcp_handle_ack+0xb8>)
 8010aa4:	799b      	ldrb	r3, [r3, #6]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00b      	beq.n	8010ac2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010aaa:	4b10      	ldr	r3, [pc, #64]	; (8010aec <dhcp_handle_ack+0xbc>)
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7ff fc87 	bl	80103c2 <lwip_htonl>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2201      	movs	r2, #1
 8010abe:	71da      	strb	r2, [r3, #7]
 8010ac0:	e002      	b.n	8010ac8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010ac8:	4b07      	ldr	r3, [pc, #28]	; (8010ae8 <dhcp_handle_ack+0xb8>)
 8010aca:	79db      	ldrb	r3, [r3, #7]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d007      	beq.n	8010ae0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010ad0:	4b06      	ldr	r3, [pc, #24]	; (8010aec <dhcp_handle_ack+0xbc>)
 8010ad2:	69db      	ldr	r3, [r3, #28]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7ff fc74 	bl	80103c2 <lwip_htonl>
 8010ada:	4602      	mov	r2, r0
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010ae0:	bf00      	nop
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	20008630 	.word	0x20008630
 8010aec:	20008638 	.word	0x20008638

08010af0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d109      	bne.n	8010b12 <dhcp_start+0x22>
 8010afe:	4b37      	ldr	r3, [pc, #220]	; (8010bdc <dhcp_start+0xec>)
 8010b00:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010b04:	4936      	ldr	r1, [pc, #216]	; (8010be0 <dhcp_start+0xf0>)
 8010b06:	4837      	ldr	r0, [pc, #220]	; (8010be4 <dhcp_start+0xf4>)
 8010b08:	f00b ffbe 	bl	801ca88 <iprintf>
 8010b0c:	f06f 030f 	mvn.w	r3, #15
 8010b10:	e060      	b.n	8010bd4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b18:	f003 0301 	and.w	r3, r3, #1
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d109      	bne.n	8010b34 <dhcp_start+0x44>
 8010b20:	4b2e      	ldr	r3, [pc, #184]	; (8010bdc <dhcp_start+0xec>)
 8010b22:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010b26:	4930      	ldr	r1, [pc, #192]	; (8010be8 <dhcp_start+0xf8>)
 8010b28:	482e      	ldr	r0, [pc, #184]	; (8010be4 <dhcp_start+0xf4>)
 8010b2a:	f00b ffad 	bl	801ca88 <iprintf>
 8010b2e:	f06f 030f 	mvn.w	r3, #15
 8010b32:	e04f      	b.n	8010bd4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010b42:	d202      	bcs.n	8010b4a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b48:	e044      	b.n	8010bd4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d10d      	bne.n	8010b6c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010b50:	2034      	movs	r0, #52	; 0x34
 8010b52:	f004 f9bf 	bl	8014ed4 <mem_malloc>
 8010b56:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d102      	bne.n	8010b64 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b62:	e037      	b.n	8010bd4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	625a      	str	r2, [r3, #36]	; 0x24
 8010b6a:	e005      	b.n	8010b78 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	791b      	ldrb	r3, [r3, #4]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d001      	beq.n	8010b78 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010b74:	f7ff fc90 	bl	8010498 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010b78:	2234      	movs	r2, #52	; 0x34
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f00b ff7b 	bl	801ca78 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010b82:	f7ff fc37 	bl	80103f4 <dhcp_inc_pcb_refcount>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d002      	beq.n	8010b92 <dhcp_start+0xa2>
    return ERR_MEM;
 8010b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b90:	e020      	b.n	8010bd4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2201      	movs	r2, #1
 8010b96:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b9e:	f003 0304 	and.w	r3, r3, #4
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d105      	bne.n	8010bb2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010ba6:	2102      	movs	r1, #2
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 fd13 	bl	80115d4 <dhcp_set_state>
    return ERR_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e010      	b.n	8010bd4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f000 f90a 	bl	8010dcc <dhcp_discover>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010bbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d005      	beq.n	8010bd0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fc6b 	bl	80114a0 <dhcp_release_and_stop>
    return ERR_MEM;
 8010bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bce:	e001      	b.n	8010bd4 <dhcp_start+0xe4>
  }
  return result;
 8010bd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	0801d978 	.word	0x0801d978
 8010be0:	0801da88 	.word	0x0801da88
 8010be4:	0801da04 	.word	0x0801da04
 8010be8:	0801dacc 	.word	0x0801dacc

08010bec <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d037      	beq.n	8010c70 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	795b      	ldrb	r3, [r3, #5]
 8010c04:	2b0a      	cmp	r3, #10
 8010c06:	d820      	bhi.n	8010c4a <dhcp_network_changed+0x5e>
 8010c08:	a201      	add	r2, pc, #4	; (adr r2, 8010c10 <dhcp_network_changed+0x24>)
 8010c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0e:	bf00      	nop
 8010c10:	08010c75 	.word	0x08010c75
 8010c14:	08010c4b 	.word	0x08010c4b
 8010c18:	08010c4b 	.word	0x08010c4b
 8010c1c:	08010c3d 	.word	0x08010c3d
 8010c20:	08010c3d 	.word	0x08010c3d
 8010c24:	08010c3d 	.word	0x08010c3d
 8010c28:	08010c4b 	.word	0x08010c4b
 8010c2c:	08010c4b 	.word	0x08010c4b
 8010c30:	08010c4b 	.word	0x08010c4b
 8010c34:	08010c4b 	.word	0x08010c4b
 8010c38:	08010c3d 	.word	0x08010c3d
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fb76 	bl	8011334 <dhcp_reboot>
      break;
 8010c48:	e015      	b.n	8010c76 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	795b      	ldrb	r3, [r3, #5]
 8010c4e:	2b0c      	cmp	r3, #12
 8010c50:	d906      	bls.n	8010c60 <dhcp_network_changed+0x74>
 8010c52:	4b0a      	ldr	r3, [pc, #40]	; (8010c7c <dhcp_network_changed+0x90>)
 8010c54:	f240 326d 	movw	r2, #877	; 0x36d
 8010c58:	4909      	ldr	r1, [pc, #36]	; (8010c80 <dhcp_network_changed+0x94>)
 8010c5a:	480a      	ldr	r0, [pc, #40]	; (8010c84 <dhcp_network_changed+0x98>)
 8010c5c:	f00b ff14 	bl	801ca88 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2200      	movs	r2, #0
 8010c64:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 f8b0 	bl	8010dcc <dhcp_discover>
      break;
 8010c6c:	bf00      	nop
 8010c6e:	e002      	b.n	8010c76 <dhcp_network_changed+0x8a>
    return;
 8010c70:	bf00      	nop
 8010c72:	e000      	b.n	8010c76 <dhcp_network_changed+0x8a>
      break;
 8010c74:	bf00      	nop
  }
}
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	0801d978 	.word	0x0801d978
 8010c80:	0801daf0 	.word	0x0801daf0
 8010c84:	0801da04 	.word	0x0801da04

08010c88 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d107      	bne.n	8010ca8 <dhcp_arp_reply+0x20>
 8010c98:	4b0e      	ldr	r3, [pc, #56]	; (8010cd4 <dhcp_arp_reply+0x4c>)
 8010c9a:	f240 328b 	movw	r2, #907	; 0x38b
 8010c9e:	490e      	ldr	r1, [pc, #56]	; (8010cd8 <dhcp_arp_reply+0x50>)
 8010ca0:	480e      	ldr	r0, [pc, #56]	; (8010cdc <dhcp_arp_reply+0x54>)
 8010ca2:	f00b fef1 	bl	801ca88 <iprintf>
 8010ca6:	e012      	b.n	8010cce <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00c      	beq.n	8010cce <dhcp_arp_reply+0x46>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	795b      	ldrb	r3, [r3, #5]
 8010cb8:	2b08      	cmp	r3, #8
 8010cba:	d108      	bne.n	8010cce <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	69db      	ldr	r3, [r3, #28]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d102      	bne.n	8010cce <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 f809 	bl	8010ce0 <dhcp_decline>
    }
  }
}
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	0801d978 	.word	0x0801d978
 8010cd8:	0801da88 	.word	0x0801da88
 8010cdc:	0801da04 	.word	0x0801da04

08010ce0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010ce0:	b5b0      	push	{r4, r5, r7, lr}
 8010ce2:	b08a      	sub	sp, #40	; 0x28
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cec:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010cee:	210c      	movs	r1, #12
 8010cf0:	69b8      	ldr	r0, [r7, #24]
 8010cf2:	f000 fc6f 	bl	80115d4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010cf6:	f107 030c 	add.w	r3, r7, #12
 8010cfa:	2204      	movs	r2, #4
 8010cfc:	69b9      	ldr	r1, [r7, #24]
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f001 f8f2 	bl	8011ee8 <dhcp_create_msg>
 8010d04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d035      	beq.n	8010d78 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010d12:	89b8      	ldrh	r0, [r7, #12]
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d1a:	2304      	movs	r3, #4
 8010d1c:	2232      	movs	r2, #50	; 0x32
 8010d1e:	f000 fc73 	bl	8011608 <dhcp_option>
 8010d22:	4603      	mov	r3, r0
 8010d24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010d26:	89bc      	ldrh	r4, [r7, #12]
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	69db      	ldr	r3, [r3, #28]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff fb45 	bl	80103c2 <lwip_htonl>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	4629      	mov	r1, r5
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f000 fcee 	bl	8011720 <dhcp_option_long>
 8010d44:	4603      	mov	r3, r0
 8010d46:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010d48:	89b8      	ldrh	r0, [r7, #12]
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	33f0      	adds	r3, #240	; 0xf0
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	4619      	mov	r1, r3
 8010d52:	f001 f99f 	bl	8012094 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010d56:	4b19      	ldr	r3, [pc, #100]	; (8010dbc <dhcp_decline+0xdc>)
 8010d58:	6818      	ldr	r0, [r3, #0]
 8010d5a:	4b19      	ldr	r3, [pc, #100]	; (8010dc0 <dhcp_decline+0xe0>)
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	2343      	movs	r3, #67	; 0x43
 8010d64:	4a17      	ldr	r2, [pc, #92]	; (8010dc4 <dhcp_decline+0xe4>)
 8010d66:	6979      	ldr	r1, [r7, #20]
 8010d68:	f00b fbc2 	bl	801c4f0 <udp_sendto_if_src>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010d70:	6978      	ldr	r0, [r7, #20]
 8010d72:	f005 f979 	bl	8016068 <pbuf_free>
 8010d76:	e001      	b.n	8010d7c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010d78:	23ff      	movs	r3, #255	; 0xff
 8010d7a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	799b      	ldrb	r3, [r3, #6]
 8010d80:	2bff      	cmp	r3, #255	; 0xff
 8010d82:	d005      	beq.n	8010d90 <dhcp_decline+0xb0>
    dhcp->tries++;
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	799b      	ldrb	r3, [r3, #6]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010d90:	f242 7310 	movw	r3, #10000	; 0x2710
 8010d94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010d96:	89fb      	ldrh	r3, [r7, #14]
 8010d98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010d9c:	4a0a      	ldr	r2, [pc, #40]	; (8010dc8 <dhcp_decline+0xe8>)
 8010d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8010da2:	1152      	asrs	r2, r2, #5
 8010da4:	17db      	asrs	r3, r3, #31
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3720      	adds	r7, #32
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bdb0      	pop	{r4, r5, r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	2000745c 	.word	0x2000745c
 8010dc0:	08020ad0 	.word	0x08020ad0
 8010dc4:	08020ad4 	.word	0x08020ad4
 8010dc8:	10624dd3 	.word	0x10624dd3

08010dcc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b08a      	sub	sp, #40	; 0x28
 8010dd0:	af02      	add	r7, sp, #8
 8010dd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	2200      	movs	r2, #0
 8010de2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010de4:	2106      	movs	r1, #6
 8010de6:	69b8      	ldr	r0, [r7, #24]
 8010de8:	f000 fbf4 	bl	80115d4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010dec:	f107 0308 	add.w	r3, r7, #8
 8010df0:	2201      	movs	r2, #1
 8010df2:	69b9      	ldr	r1, [r7, #24]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f001 f877 	bl	8011ee8 <dhcp_create_msg>
 8010dfa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d04b      	beq.n	8010e9a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010e08:	8938      	ldrh	r0, [r7, #8]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e10:	2302      	movs	r3, #2
 8010e12:	2239      	movs	r2, #57	; 0x39
 8010e14:	f000 fbf8 	bl	8011608 <dhcp_option>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010e1c:	8938      	ldrh	r0, [r7, #8]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f000 fc47 	bl	80116bc <dhcp_option_short>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010e32:	8938      	ldrh	r0, [r7, #8]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	2237      	movs	r2, #55	; 0x37
 8010e3e:	f000 fbe3 	bl	8011608 <dhcp_option>
 8010e42:	4603      	mov	r3, r0
 8010e44:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010e46:	2300      	movs	r3, #0
 8010e48:	77fb      	strb	r3, [r7, #31]
 8010e4a:	e00e      	b.n	8010e6a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010e4c:	8938      	ldrh	r0, [r7, #8]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010e54:	7ffb      	ldrb	r3, [r7, #31]
 8010e56:	4a29      	ldr	r2, [pc, #164]	; (8010efc <dhcp_discover+0x130>)
 8010e58:	5cd3      	ldrb	r3, [r2, r3]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	f000 fc08 	bl	8011670 <dhcp_option_byte>
 8010e60:	4603      	mov	r3, r0
 8010e62:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010e64:	7ffb      	ldrb	r3, [r7, #31]
 8010e66:	3301      	adds	r3, #1
 8010e68:	77fb      	strb	r3, [r7, #31]
 8010e6a:	7ffb      	ldrb	r3, [r7, #31]
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d9ed      	bls.n	8010e4c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010e70:	8938      	ldrh	r0, [r7, #8]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	33f0      	adds	r3, #240	; 0xf0
 8010e76:	693a      	ldr	r2, [r7, #16]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	f001 f90b 	bl	8012094 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010e7e:	4b20      	ldr	r3, [pc, #128]	; (8010f00 <dhcp_discover+0x134>)
 8010e80:	6818      	ldr	r0, [r3, #0]
 8010e82:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <dhcp_discover+0x138>)
 8010e84:	9301      	str	r3, [sp, #4]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	2343      	movs	r3, #67	; 0x43
 8010e8c:	4a1e      	ldr	r2, [pc, #120]	; (8010f08 <dhcp_discover+0x13c>)
 8010e8e:	6939      	ldr	r1, [r7, #16]
 8010e90:	f00b fb2e 	bl	801c4f0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010e94:	6938      	ldr	r0, [r7, #16]
 8010e96:	f005 f8e7 	bl	8016068 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	799b      	ldrb	r3, [r3, #6]
 8010e9e:	2bff      	cmp	r3, #255	; 0xff
 8010ea0:	d005      	beq.n	8010eae <dhcp_discover+0xe2>
    dhcp->tries++;
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	799b      	ldrb	r3, [r3, #6]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	69bb      	ldr	r3, [r7, #24]
 8010eac:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	799b      	ldrb	r3, [r3, #6]
 8010eb2:	2b05      	cmp	r3, #5
 8010eb4:	d80d      	bhi.n	8010ed2 <dhcp_discover+0x106>
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	799b      	ldrb	r3, [r3, #6]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	4093      	lsls	r3, r2
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	0152      	lsls	r2, r2, #5
 8010ec6:	1ad2      	subs	r2, r2, r3
 8010ec8:	0092      	lsls	r2, r2, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	e001      	b.n	8010ed6 <dhcp_discover+0x10a>
 8010ed2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010ed6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010ed8:	897b      	ldrh	r3, [r7, #10]
 8010eda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ede:	4a0b      	ldr	r2, [pc, #44]	; (8010f0c <dhcp_discover+0x140>)
 8010ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8010ee4:	1152      	asrs	r2, r2, #5
 8010ee6:	17db      	asrs	r3, r3, #31
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	20000028 	.word	0x20000028
 8010f00:	2000745c 	.word	0x2000745c
 8010f04:	08020ad0 	.word	0x08020ad0
 8010f08:	08020ad4 	.word	0x08020ad4
 8010f0c:	10624dd3 	.word	0x10624dd3

08010f10 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d107      	bne.n	8010f2e <dhcp_bind+0x1e>
 8010f1e:	4b64      	ldr	r3, [pc, #400]	; (80110b0 <dhcp_bind+0x1a0>)
 8010f20:	f240 4215 	movw	r2, #1045	; 0x415
 8010f24:	4963      	ldr	r1, [pc, #396]	; (80110b4 <dhcp_bind+0x1a4>)
 8010f26:	4864      	ldr	r0, [pc, #400]	; (80110b8 <dhcp_bind+0x1a8>)
 8010f28:	f00b fdae 	bl	801ca88 <iprintf>
 8010f2c:	e0bc      	b.n	80110a8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d107      	bne.n	8010f4a <dhcp_bind+0x3a>
 8010f3a:	4b5d      	ldr	r3, [pc, #372]	; (80110b0 <dhcp_bind+0x1a0>)
 8010f3c:	f240 4217 	movw	r2, #1047	; 0x417
 8010f40:	495e      	ldr	r1, [pc, #376]	; (80110bc <dhcp_bind+0x1ac>)
 8010f42:	485d      	ldr	r0, [pc, #372]	; (80110b8 <dhcp_bind+0x1a8>)
 8010f44:	f00b fda0 	bl	801ca88 <iprintf>
 8010f48:	e0ae      	b.n	80110a8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010f4a:	69bb      	ldr	r3, [r7, #24]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f58:	d019      	beq.n	8010f8e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f5e:	331e      	adds	r3, #30
 8010f60:	4a57      	ldr	r2, [pc, #348]	; (80110c0 <dhcp_bind+0x1b0>)
 8010f62:	fba2 2303 	umull	r2, r3, r2, r3
 8010f66:	095b      	lsrs	r3, r3, #5
 8010f68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f70:	d302      	bcc.n	8010f78 <dhcp_bind+0x68>
      timeout = 0xffff;
 8010f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010f80:	69bb      	ldr	r3, [r7, #24]
 8010f82:	8a9b      	ldrh	r3, [r3, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d102      	bne.n	8010f8e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f96:	d01d      	beq.n	8010fd4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9c:	331e      	adds	r3, #30
 8010f9e:	4a48      	ldr	r2, [pc, #288]	; (80110c0 <dhcp_bind+0x1b0>)
 8010fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8010fa4:	095b      	lsrs	r3, r3, #5
 8010fa6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fae:	d302      	bcc.n	8010fb6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fb4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	895b      	ldrh	r3, [r3, #10]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d102      	bne.n	8010fcc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	895a      	ldrh	r2, [r3, #10]
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fdc:	d01d      	beq.n	801101a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe2:	331e      	adds	r3, #30
 8010fe4:	4a36      	ldr	r2, [pc, #216]	; (80110c0 <dhcp_bind+0x1b0>)
 8010fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8010fea:	095b      	lsrs	r3, r3, #5
 8010fec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ff4:	d302      	bcc.n	8010ffc <dhcp_bind+0xec>
      timeout = 0xffff;
 8010ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ffa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	899b      	ldrh	r3, [r3, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	2201      	movs	r2, #1
 8011010:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	899a      	ldrh	r2, [r3, #12]
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	895a      	ldrh	r2, [r3, #10]
 801101e:	69bb      	ldr	r3, [r7, #24]
 8011020:	899b      	ldrh	r3, [r3, #12]
 8011022:	429a      	cmp	r2, r3
 8011024:	d306      	bcc.n	8011034 <dhcp_bind+0x124>
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	899b      	ldrh	r3, [r3, #12]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d002      	beq.n	8011034 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2200      	movs	r2, #0
 8011032:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	79db      	ldrb	r3, [r3, #7]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d003      	beq.n	8011044 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	6a1b      	ldr	r3, [r3, #32]
 8011040:	613b      	str	r3, [r7, #16]
 8011042:	e014      	b.n	801106e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	331c      	adds	r3, #28
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801104c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011050:	2b00      	cmp	r3, #0
 8011052:	db02      	blt.n	801105a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011054:	23ff      	movs	r3, #255	; 0xff
 8011056:	613b      	str	r3, [r7, #16]
 8011058:	e009      	b.n	801106e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	2bbf      	cmp	r3, #191	; 0xbf
 801105e:	d903      	bls.n	8011068 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011060:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011064:	613b      	str	r3, [r7, #16]
 8011066:	e002      	b.n	801106e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801106c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011072:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	69da      	ldr	r2, [r3, #28]
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	4013      	ands	r3, r2
 8011082:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801108a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801108c:	210a      	movs	r1, #10
 801108e:	69b8      	ldr	r0, [r7, #24]
 8011090:	f000 faa0 	bl	80115d4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	f103 011c 	add.w	r1, r3, #28
 801109a:	f107 030c 	add.w	r3, r7, #12
 801109e:	f107 0210 	add.w	r2, r7, #16
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f004 fad6 	bl	8015654 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80110a8:	3720      	adds	r7, #32
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	0801d978 	.word	0x0801d978
 80110b4:	0801db04 	.word	0x0801db04
 80110b8:	0801da04 	.word	0x0801da04
 80110bc:	0801db20 	.word	0x0801db20
 80110c0:	88888889 	.word	0x88888889

080110c4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08a      	sub	sp, #40	; 0x28
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80110d2:	2105      	movs	r1, #5
 80110d4:	69b8      	ldr	r0, [r7, #24]
 80110d6:	f000 fa7d 	bl	80115d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80110da:	f107 030c 	add.w	r3, r7, #12
 80110de:	2203      	movs	r2, #3
 80110e0:	69b9      	ldr	r1, [r7, #24]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 ff00 	bl	8011ee8 <dhcp_create_msg>
 80110e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d04e      	beq.n	801118e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80110f6:	89b8      	ldrh	r0, [r7, #12]
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80110fe:	2302      	movs	r3, #2
 8011100:	2239      	movs	r2, #57	; 0x39
 8011102:	f000 fa81 	bl	8011608 <dhcp_option>
 8011106:	4603      	mov	r3, r0
 8011108:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801110a:	89b8      	ldrh	r0, [r7, #12]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011116:	461a      	mov	r2, r3
 8011118:	f000 fad0 	bl	80116bc <dhcp_option_short>
 801111c:	4603      	mov	r3, r0
 801111e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011120:	89b8      	ldrh	r0, [r7, #12]
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011128:	2303      	movs	r3, #3
 801112a:	2237      	movs	r2, #55	; 0x37
 801112c:	f000 fa6c 	bl	8011608 <dhcp_option>
 8011130:	4603      	mov	r3, r0
 8011132:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011134:	2300      	movs	r3, #0
 8011136:	77bb      	strb	r3, [r7, #30]
 8011138:	e00e      	b.n	8011158 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801113a:	89b8      	ldrh	r0, [r7, #12]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011142:	7fbb      	ldrb	r3, [r7, #30]
 8011144:	4a2a      	ldr	r2, [pc, #168]	; (80111f0 <dhcp_renew+0x12c>)
 8011146:	5cd3      	ldrb	r3, [r2, r3]
 8011148:	461a      	mov	r2, r3
 801114a:	f000 fa91 	bl	8011670 <dhcp_option_byte>
 801114e:	4603      	mov	r3, r0
 8011150:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011152:	7fbb      	ldrb	r3, [r7, #30]
 8011154:	3301      	adds	r3, #1
 8011156:	77bb      	strb	r3, [r7, #30]
 8011158:	7fbb      	ldrb	r3, [r7, #30]
 801115a:	2b02      	cmp	r3, #2
 801115c:	d9ed      	bls.n	801113a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801115e:	89b8      	ldrh	r0, [r7, #12]
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	33f0      	adds	r3, #240	; 0xf0
 8011164:	697a      	ldr	r2, [r7, #20]
 8011166:	4619      	mov	r1, r3
 8011168:	f000 ff94 	bl	8012094 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801116c:	4b21      	ldr	r3, [pc, #132]	; (80111f4 <dhcp_renew+0x130>)
 801116e:	6818      	ldr	r0, [r3, #0]
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	f103 0218 	add.w	r2, r3, #24
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	2343      	movs	r3, #67	; 0x43
 801117c:	6979      	ldr	r1, [r7, #20]
 801117e:	f00b f943 	bl	801c408 <udp_sendto_if>
 8011182:	4603      	mov	r3, r0
 8011184:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011186:	6978      	ldr	r0, [r7, #20]
 8011188:	f004 ff6e 	bl	8016068 <pbuf_free>
 801118c:	e001      	b.n	8011192 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801118e:	23ff      	movs	r3, #255	; 0xff
 8011190:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	799b      	ldrb	r3, [r3, #6]
 8011196:	2bff      	cmp	r3, #255	; 0xff
 8011198:	d005      	beq.n	80111a6 <dhcp_renew+0xe2>
    dhcp->tries++;
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	799b      	ldrb	r3, [r3, #6]
 801119e:	3301      	adds	r3, #1
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	799b      	ldrb	r3, [r3, #6]
 80111aa:	2b09      	cmp	r3, #9
 80111ac:	d80a      	bhi.n	80111c4 <dhcp_renew+0x100>
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	799b      	ldrb	r3, [r3, #6]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	461a      	mov	r2, r3
 80111b6:	0152      	lsls	r2, r2, #5
 80111b8:	1ad2      	subs	r2, r2, r3
 80111ba:	0092      	lsls	r2, r2, #2
 80111bc:	4413      	add	r3, r2
 80111be:	011b      	lsls	r3, r3, #4
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	e001      	b.n	80111c8 <dhcp_renew+0x104>
 80111c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80111c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80111ca:	89fb      	ldrh	r3, [r7, #14]
 80111cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80111d0:	4a09      	ldr	r2, [pc, #36]	; (80111f8 <dhcp_renew+0x134>)
 80111d2:	fb82 1203 	smull	r1, r2, r2, r3
 80111d6:	1152      	asrs	r2, r2, #5
 80111d8:	17db      	asrs	r3, r3, #31
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	b29a      	uxth	r2, r3
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80111e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3720      	adds	r7, #32
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	20000028 	.word	0x20000028
 80111f4:	2000745c 	.word	0x2000745c
 80111f8:	10624dd3 	.word	0x10624dd3

080111fc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b08a      	sub	sp, #40	; 0x28
 8011200:	af02      	add	r7, sp, #8
 8011202:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011208:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801120a:	2104      	movs	r1, #4
 801120c:	69b8      	ldr	r0, [r7, #24]
 801120e:	f000 f9e1 	bl	80115d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011212:	f107 030c 	add.w	r3, r7, #12
 8011216:	2203      	movs	r2, #3
 8011218:	69b9      	ldr	r1, [r7, #24]
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f000 fe64 	bl	8011ee8 <dhcp_create_msg>
 8011220:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d04c      	beq.n	80112c2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801122e:	89b8      	ldrh	r0, [r7, #12]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011236:	2302      	movs	r3, #2
 8011238:	2239      	movs	r2, #57	; 0x39
 801123a:	f000 f9e5 	bl	8011608 <dhcp_option>
 801123e:	4603      	mov	r3, r0
 8011240:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011242:	89b8      	ldrh	r0, [r7, #12]
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801124e:	461a      	mov	r2, r3
 8011250:	f000 fa34 	bl	80116bc <dhcp_option_short>
 8011254:	4603      	mov	r3, r0
 8011256:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011258:	89b8      	ldrh	r0, [r7, #12]
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011260:	2303      	movs	r3, #3
 8011262:	2237      	movs	r2, #55	; 0x37
 8011264:	f000 f9d0 	bl	8011608 <dhcp_option>
 8011268:	4603      	mov	r3, r0
 801126a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801126c:	2300      	movs	r3, #0
 801126e:	77bb      	strb	r3, [r7, #30]
 8011270:	e00e      	b.n	8011290 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011272:	89b8      	ldrh	r0, [r7, #12]
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801127a:	7fbb      	ldrb	r3, [r7, #30]
 801127c:	4a29      	ldr	r2, [pc, #164]	; (8011324 <dhcp_rebind+0x128>)
 801127e:	5cd3      	ldrb	r3, [r2, r3]
 8011280:	461a      	mov	r2, r3
 8011282:	f000 f9f5 	bl	8011670 <dhcp_option_byte>
 8011286:	4603      	mov	r3, r0
 8011288:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801128a:	7fbb      	ldrb	r3, [r7, #30]
 801128c:	3301      	adds	r3, #1
 801128e:	77bb      	strb	r3, [r7, #30]
 8011290:	7fbb      	ldrb	r3, [r7, #30]
 8011292:	2b02      	cmp	r3, #2
 8011294:	d9ed      	bls.n	8011272 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011296:	89b8      	ldrh	r0, [r7, #12]
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	33f0      	adds	r3, #240	; 0xf0
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	4619      	mov	r1, r3
 80112a0:	f000 fef8 	bl	8012094 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80112a4:	4b20      	ldr	r3, [pc, #128]	; (8011328 <dhcp_rebind+0x12c>)
 80112a6:	6818      	ldr	r0, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	2343      	movs	r3, #67	; 0x43
 80112ae:	4a1f      	ldr	r2, [pc, #124]	; (801132c <dhcp_rebind+0x130>)
 80112b0:	6979      	ldr	r1, [r7, #20]
 80112b2:	f00b f8a9 	bl	801c408 <udp_sendto_if>
 80112b6:	4603      	mov	r3, r0
 80112b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80112ba:	6978      	ldr	r0, [r7, #20]
 80112bc:	f004 fed4 	bl	8016068 <pbuf_free>
 80112c0:	e001      	b.n	80112c6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80112c2:	23ff      	movs	r3, #255	; 0xff
 80112c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	799b      	ldrb	r3, [r3, #6]
 80112ca:	2bff      	cmp	r3, #255	; 0xff
 80112cc:	d005      	beq.n	80112da <dhcp_rebind+0xde>
    dhcp->tries++;
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	799b      	ldrb	r3, [r3, #6]
 80112d2:	3301      	adds	r3, #1
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	799b      	ldrb	r3, [r3, #6]
 80112de:	2b09      	cmp	r3, #9
 80112e0:	d80a      	bhi.n	80112f8 <dhcp_rebind+0xfc>
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	799b      	ldrb	r3, [r3, #6]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	461a      	mov	r2, r3
 80112ea:	0152      	lsls	r2, r2, #5
 80112ec:	1ad2      	subs	r2, r2, r3
 80112ee:	0092      	lsls	r2, r2, #2
 80112f0:	4413      	add	r3, r2
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	e001      	b.n	80112fc <dhcp_rebind+0x100>
 80112f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80112fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80112fe:	89fb      	ldrh	r3, [r7, #14]
 8011300:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011304:	4a0a      	ldr	r2, [pc, #40]	; (8011330 <dhcp_rebind+0x134>)
 8011306:	fb82 1203 	smull	r1, r2, r2, r3
 801130a:	1152      	asrs	r2, r2, #5
 801130c:	17db      	asrs	r3, r3, #31
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	b29a      	uxth	r2, r3
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011316:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3720      	adds	r7, #32
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	20000028 	.word	0x20000028
 8011328:	2000745c 	.word	0x2000745c
 801132c:	08020ad4 	.word	0x08020ad4
 8011330:	10624dd3 	.word	0x10624dd3

08011334 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011334:	b5b0      	push	{r4, r5, r7, lr}
 8011336:	b08a      	sub	sp, #40	; 0x28
 8011338:	af02      	add	r7, sp, #8
 801133a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011340:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011342:	2103      	movs	r1, #3
 8011344:	69b8      	ldr	r0, [r7, #24]
 8011346:	f000 f945 	bl	80115d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801134a:	f107 030c 	add.w	r3, r7, #12
 801134e:	2203      	movs	r2, #3
 8011350:	69b9      	ldr	r1, [r7, #24]
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 fdc8 	bl	8011ee8 <dhcp_create_msg>
 8011358:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d066      	beq.n	801142e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011366:	89b8      	ldrh	r0, [r7, #12]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801136e:	2302      	movs	r3, #2
 8011370:	2239      	movs	r2, #57	; 0x39
 8011372:	f000 f949 	bl	8011608 <dhcp_option>
 8011376:	4603      	mov	r3, r0
 8011378:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801137a:	89b8      	ldrh	r0, [r7, #12]
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	33f0      	adds	r3, #240	; 0xf0
 8011380:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011384:	4619      	mov	r1, r3
 8011386:	f000 f999 	bl	80116bc <dhcp_option_short>
 801138a:	4603      	mov	r3, r0
 801138c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801138e:	89b8      	ldrh	r0, [r7, #12]
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011396:	2304      	movs	r3, #4
 8011398:	2232      	movs	r2, #50	; 0x32
 801139a:	f000 f935 	bl	8011608 <dhcp_option>
 801139e:	4603      	mov	r3, r0
 80113a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80113a2:	89bc      	ldrh	r4, [r7, #12]
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	69db      	ldr	r3, [r3, #28]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff f807 	bl	80103c2 <lwip_htonl>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	4629      	mov	r1, r5
 80113ba:	4620      	mov	r0, r4
 80113bc:	f000 f9b0 	bl	8011720 <dhcp_option_long>
 80113c0:	4603      	mov	r3, r0
 80113c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80113c4:	89b8      	ldrh	r0, [r7, #12]
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80113cc:	2303      	movs	r3, #3
 80113ce:	2237      	movs	r2, #55	; 0x37
 80113d0:	f000 f91a 	bl	8011608 <dhcp_option>
 80113d4:	4603      	mov	r3, r0
 80113d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80113d8:	2300      	movs	r3, #0
 80113da:	77bb      	strb	r3, [r7, #30]
 80113dc:	e00e      	b.n	80113fc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80113de:	89b8      	ldrh	r0, [r7, #12]
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80113e6:	7fbb      	ldrb	r3, [r7, #30]
 80113e8:	4a29      	ldr	r2, [pc, #164]	; (8011490 <dhcp_reboot+0x15c>)
 80113ea:	5cd3      	ldrb	r3, [r2, r3]
 80113ec:	461a      	mov	r2, r3
 80113ee:	f000 f93f 	bl	8011670 <dhcp_option_byte>
 80113f2:	4603      	mov	r3, r0
 80113f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80113f6:	7fbb      	ldrb	r3, [r7, #30]
 80113f8:	3301      	adds	r3, #1
 80113fa:	77bb      	strb	r3, [r7, #30]
 80113fc:	7fbb      	ldrb	r3, [r7, #30]
 80113fe:	2b02      	cmp	r3, #2
 8011400:	d9ed      	bls.n	80113de <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011402:	89b8      	ldrh	r0, [r7, #12]
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	33f0      	adds	r3, #240	; 0xf0
 8011408:	697a      	ldr	r2, [r7, #20]
 801140a:	4619      	mov	r1, r3
 801140c:	f000 fe42 	bl	8012094 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011410:	4b20      	ldr	r3, [pc, #128]	; (8011494 <dhcp_reboot+0x160>)
 8011412:	6818      	ldr	r0, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2343      	movs	r3, #67	; 0x43
 801141a:	4a1f      	ldr	r2, [pc, #124]	; (8011498 <dhcp_reboot+0x164>)
 801141c:	6979      	ldr	r1, [r7, #20]
 801141e:	f00a fff3 	bl	801c408 <udp_sendto_if>
 8011422:	4603      	mov	r3, r0
 8011424:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011426:	6978      	ldr	r0, [r7, #20]
 8011428:	f004 fe1e 	bl	8016068 <pbuf_free>
 801142c:	e001      	b.n	8011432 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801142e:	23ff      	movs	r3, #255	; 0xff
 8011430:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	799b      	ldrb	r3, [r3, #6]
 8011436:	2bff      	cmp	r3, #255	; 0xff
 8011438:	d005      	beq.n	8011446 <dhcp_reboot+0x112>
    dhcp->tries++;
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	799b      	ldrb	r3, [r3, #6]
 801143e:	3301      	adds	r3, #1
 8011440:	b2da      	uxtb	r2, r3
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	799b      	ldrb	r3, [r3, #6]
 801144a:	2b09      	cmp	r3, #9
 801144c:	d80a      	bhi.n	8011464 <dhcp_reboot+0x130>
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	799b      	ldrb	r3, [r3, #6]
 8011452:	b29b      	uxth	r3, r3
 8011454:	461a      	mov	r2, r3
 8011456:	0152      	lsls	r2, r2, #5
 8011458:	1ad2      	subs	r2, r2, r3
 801145a:	0092      	lsls	r2, r2, #2
 801145c:	4413      	add	r3, r2
 801145e:	00db      	lsls	r3, r3, #3
 8011460:	b29b      	uxth	r3, r3
 8011462:	e001      	b.n	8011468 <dhcp_reboot+0x134>
 8011464:	f242 7310 	movw	r3, #10000	; 0x2710
 8011468:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801146a:	89fb      	ldrh	r3, [r7, #14]
 801146c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011470:	4a0a      	ldr	r2, [pc, #40]	; (801149c <dhcp_reboot+0x168>)
 8011472:	fb82 1203 	smull	r1, r2, r2, r3
 8011476:	1152      	asrs	r2, r2, #5
 8011478:	17db      	asrs	r3, r3, #31
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	b29a      	uxth	r2, r3
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011482:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3720      	adds	r7, #32
 801148a:	46bd      	mov	sp, r7
 801148c:	bdb0      	pop	{r4, r5, r7, pc}
 801148e:	bf00      	nop
 8011490:	20000028 	.word	0x20000028
 8011494:	2000745c 	.word	0x2000745c
 8011498:	08020ad4 	.word	0x08020ad4
 801149c:	10624dd3 	.word	0x10624dd3

080114a0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80114a0:	b5b0      	push	{r4, r5, r7, lr}
 80114a2:	b08a      	sub	sp, #40	; 0x28
 80114a4:	af02      	add	r7, sp, #8
 80114a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 8084 	beq.w	80115be <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	795b      	ldrb	r3, [r3, #5]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 8081 	beq.w	80115c2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	699b      	ldr	r3, [r3, #24]
 80114c4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	2200      	movs	r2, #0
 80114ca:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	2200      	movs	r2, #0
 80114d0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	2200      	movs	r2, #0
 80114d6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	2200      	movs	r2, #0
 80114dc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	2200      	movs	r2, #0
 80114e2:	631a      	str	r2, [r3, #48]	; 0x30
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	2200      	movs	r2, #0
 80114f8:	829a      	strh	r2, [r3, #20]
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	8a9a      	ldrh	r2, [r3, #20]
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	825a      	strh	r2, [r3, #18]
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	8a5a      	ldrh	r2, [r3, #18]
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	821a      	strh	r2, [r3, #16]
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	8a1a      	ldrh	r2, [r3, #16]
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 fdec 	bl	80120f0 <dhcp_supplied_address>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d03b      	beq.n	8011596 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801151e:	f107 030e 	add.w	r3, r7, #14
 8011522:	2207      	movs	r2, #7
 8011524:	69f9      	ldr	r1, [r7, #28]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 fcde 	bl	8011ee8 <dhcp_create_msg>
 801152c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d030      	beq.n	8011596 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801153a:	89f8      	ldrh	r0, [r7, #14]
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011542:	2304      	movs	r3, #4
 8011544:	2236      	movs	r2, #54	; 0x36
 8011546:	f000 f85f 	bl	8011608 <dhcp_option>
 801154a:	4603      	mov	r3, r0
 801154c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801154e:	89fc      	ldrh	r4, [r7, #14]
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	4618      	mov	r0, r3
 801155a:	f7fe ff32 	bl	80103c2 <lwip_htonl>
 801155e:	4603      	mov	r3, r0
 8011560:	461a      	mov	r2, r3
 8011562:	4629      	mov	r1, r5
 8011564:	4620      	mov	r0, r4
 8011566:	f000 f8db 	bl	8011720 <dhcp_option_long>
 801156a:	4603      	mov	r3, r0
 801156c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801156e:	89f8      	ldrh	r0, [r7, #14]
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	33f0      	adds	r3, #240	; 0xf0
 8011574:	69ba      	ldr	r2, [r7, #24]
 8011576:	4619      	mov	r1, r3
 8011578:	f000 fd8c 	bl	8012094 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801157c:	4b13      	ldr	r3, [pc, #76]	; (80115cc <dhcp_release_and_stop+0x12c>)
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	f107 0210 	add.w	r2, r7, #16
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	2343      	movs	r3, #67	; 0x43
 801158a:	69b9      	ldr	r1, [r7, #24]
 801158c:	f00a ff3c 	bl	801c408 <udp_sendto_if>
      pbuf_free(p_out);
 8011590:	69b8      	ldr	r0, [r7, #24]
 8011592:	f004 fd69 	bl	8016068 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011596:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <dhcp_release_and_stop+0x130>)
 8011598:	4a0d      	ldr	r2, [pc, #52]	; (80115d0 <dhcp_release_and_stop+0x130>)
 801159a:	490d      	ldr	r1, [pc, #52]	; (80115d0 <dhcp_release_and_stop+0x130>)
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f004 f859 	bl	8015654 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80115a2:	2100      	movs	r1, #0
 80115a4:	69f8      	ldr	r0, [r7, #28]
 80115a6:	f000 f815 	bl	80115d4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	791b      	ldrb	r3, [r3, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d008      	beq.n	80115c4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80115b2:	f7fe ff71 	bl	8010498 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	2200      	movs	r2, #0
 80115ba:	711a      	strb	r2, [r3, #4]
 80115bc:	e002      	b.n	80115c4 <dhcp_release_and_stop+0x124>
    return;
 80115be:	bf00      	nop
 80115c0:	e000      	b.n	80115c4 <dhcp_release_and_stop+0x124>
    return;
 80115c2:	bf00      	nop
  }
}
 80115c4:	3720      	adds	r7, #32
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bdb0      	pop	{r4, r5, r7, pc}
 80115ca:	bf00      	nop
 80115cc:	2000745c 	.word	0x2000745c
 80115d0:	08020ad0 	.word	0x08020ad0

080115d4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	460b      	mov	r3, r1
 80115de:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	795b      	ldrb	r3, [r3, #5]
 80115e4:	78fa      	ldrb	r2, [r7, #3]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d008      	beq.n	80115fc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	78fa      	ldrb	r2, [r7, #3]
 80115ee:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2200      	movs	r2, #0
 80115f4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	811a      	strh	r2, [r3, #8]
  }
}
 80115fc:	bf00      	nop
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6039      	str	r1, [r7, #0]
 8011610:	4611      	mov	r1, r2
 8011612:	461a      	mov	r2, r3
 8011614:	4603      	mov	r3, r0
 8011616:	80fb      	strh	r3, [r7, #6]
 8011618:	460b      	mov	r3, r1
 801161a:	717b      	strb	r3, [r7, #5]
 801161c:	4613      	mov	r3, r2
 801161e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011620:	88fa      	ldrh	r2, [r7, #6]
 8011622:	793b      	ldrb	r3, [r7, #4]
 8011624:	4413      	add	r3, r2
 8011626:	3302      	adds	r3, #2
 8011628:	2b44      	cmp	r3, #68	; 0x44
 801162a:	d906      	bls.n	801163a <dhcp_option+0x32>
 801162c:	4b0d      	ldr	r3, [pc, #52]	; (8011664 <dhcp_option+0x5c>)
 801162e:	f240 529a 	movw	r2, #1434	; 0x59a
 8011632:	490d      	ldr	r1, [pc, #52]	; (8011668 <dhcp_option+0x60>)
 8011634:	480d      	ldr	r0, [pc, #52]	; (801166c <dhcp_option+0x64>)
 8011636:	f00b fa27 	bl	801ca88 <iprintf>
  options[options_out_len++] = option_type;
 801163a:	88fb      	ldrh	r3, [r7, #6]
 801163c:	1c5a      	adds	r2, r3, #1
 801163e:	80fa      	strh	r2, [r7, #6]
 8011640:	461a      	mov	r2, r3
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	4413      	add	r3, r2
 8011646:	797a      	ldrb	r2, [r7, #5]
 8011648:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801164a:	88fb      	ldrh	r3, [r7, #6]
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	80fa      	strh	r2, [r7, #6]
 8011650:	461a      	mov	r2, r3
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	4413      	add	r3, r2
 8011656:	793a      	ldrb	r2, [r7, #4]
 8011658:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801165a:	88fb      	ldrh	r3, [r7, #6]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	0801d978 	.word	0x0801d978
 8011668:	0801db38 	.word	0x0801db38
 801166c:	0801da04 	.word	0x0801da04

08011670 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	6039      	str	r1, [r7, #0]
 801167a:	80fb      	strh	r3, [r7, #6]
 801167c:	4613      	mov	r3, r2
 801167e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011680:	88fb      	ldrh	r3, [r7, #6]
 8011682:	2b43      	cmp	r3, #67	; 0x43
 8011684:	d906      	bls.n	8011694 <dhcp_option_byte+0x24>
 8011686:	4b0a      	ldr	r3, [pc, #40]	; (80116b0 <dhcp_option_byte+0x40>)
 8011688:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801168c:	4909      	ldr	r1, [pc, #36]	; (80116b4 <dhcp_option_byte+0x44>)
 801168e:	480a      	ldr	r0, [pc, #40]	; (80116b8 <dhcp_option_byte+0x48>)
 8011690:	f00b f9fa 	bl	801ca88 <iprintf>
  options[options_out_len++] = value;
 8011694:	88fb      	ldrh	r3, [r7, #6]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	80fa      	strh	r2, [r7, #6]
 801169a:	461a      	mov	r2, r3
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	4413      	add	r3, r2
 80116a0:	797a      	ldrb	r2, [r7, #5]
 80116a2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80116a4:	88fb      	ldrh	r3, [r7, #6]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	0801d978 	.word	0x0801d978
 80116b4:	0801db7c 	.word	0x0801db7c
 80116b8:	0801da04 	.word	0x0801da04

080116bc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	4603      	mov	r3, r0
 80116c4:	6039      	str	r1, [r7, #0]
 80116c6:	80fb      	strh	r3, [r7, #6]
 80116c8:	4613      	mov	r3, r2
 80116ca:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80116cc:	88fb      	ldrh	r3, [r7, #6]
 80116ce:	3302      	adds	r3, #2
 80116d0:	2b44      	cmp	r3, #68	; 0x44
 80116d2:	d906      	bls.n	80116e2 <dhcp_option_short+0x26>
 80116d4:	4b0f      	ldr	r3, [pc, #60]	; (8011714 <dhcp_option_short+0x58>)
 80116d6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80116da:	490f      	ldr	r1, [pc, #60]	; (8011718 <dhcp_option_short+0x5c>)
 80116dc:	480f      	ldr	r0, [pc, #60]	; (801171c <dhcp_option_short+0x60>)
 80116de:	f00b f9d3 	bl	801ca88 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80116e2:	88bb      	ldrh	r3, [r7, #4]
 80116e4:	0a1b      	lsrs	r3, r3, #8
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	88fb      	ldrh	r3, [r7, #6]
 80116ea:	1c59      	adds	r1, r3, #1
 80116ec:	80f9      	strh	r1, [r7, #6]
 80116ee:	4619      	mov	r1, r3
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	440b      	add	r3, r1
 80116f4:	b2d2      	uxtb	r2, r2
 80116f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80116f8:	88fb      	ldrh	r3, [r7, #6]
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	80fa      	strh	r2, [r7, #6]
 80116fe:	461a      	mov	r2, r3
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	4413      	add	r3, r2
 8011704:	88ba      	ldrh	r2, [r7, #4]
 8011706:	b2d2      	uxtb	r2, r2
 8011708:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801170a:	88fb      	ldrh	r3, [r7, #6]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	0801d978 	.word	0x0801d978
 8011718:	0801dbb4 	.word	0x0801dbb4
 801171c:	0801da04 	.word	0x0801da04

08011720 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801172e:	89fb      	ldrh	r3, [r7, #14]
 8011730:	3304      	adds	r3, #4
 8011732:	2b44      	cmp	r3, #68	; 0x44
 8011734:	d906      	bls.n	8011744 <dhcp_option_long+0x24>
 8011736:	4b19      	ldr	r3, [pc, #100]	; (801179c <dhcp_option_long+0x7c>)
 8011738:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801173c:	4918      	ldr	r1, [pc, #96]	; (80117a0 <dhcp_option_long+0x80>)
 801173e:	4819      	ldr	r0, [pc, #100]	; (80117a4 <dhcp_option_long+0x84>)
 8011740:	f00b f9a2 	bl	801ca88 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	0e1a      	lsrs	r2, r3, #24
 8011748:	89fb      	ldrh	r3, [r7, #14]
 801174a:	1c59      	adds	r1, r3, #1
 801174c:	81f9      	strh	r1, [r7, #14]
 801174e:	4619      	mov	r1, r3
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	440b      	add	r3, r1
 8011754:	b2d2      	uxtb	r2, r2
 8011756:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	0c1a      	lsrs	r2, r3, #16
 801175c:	89fb      	ldrh	r3, [r7, #14]
 801175e:	1c59      	adds	r1, r3, #1
 8011760:	81f9      	strh	r1, [r7, #14]
 8011762:	4619      	mov	r1, r3
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	440b      	add	r3, r1
 8011768:	b2d2      	uxtb	r2, r2
 801176a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	0a1a      	lsrs	r2, r3, #8
 8011770:	89fb      	ldrh	r3, [r7, #14]
 8011772:	1c59      	adds	r1, r3, #1
 8011774:	81f9      	strh	r1, [r7, #14]
 8011776:	4619      	mov	r1, r3
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	440b      	add	r3, r1
 801177c:	b2d2      	uxtb	r2, r2
 801177e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011780:	89fb      	ldrh	r3, [r7, #14]
 8011782:	1c5a      	adds	r2, r3, #1
 8011784:	81fa      	strh	r2, [r7, #14]
 8011786:	461a      	mov	r2, r3
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	4413      	add	r3, r2
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	b2d2      	uxtb	r2, r2
 8011790:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011792:	89fb      	ldrh	r3, [r7, #14]
}
 8011794:	4618      	mov	r0, r3
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	0801d978 	.word	0x0801d978
 80117a0:	0801dbf0 	.word	0x0801dbf0
 80117a4:	0801da04 	.word	0x0801da04

080117a8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b090      	sub	sp, #64	; 0x40
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80117ba:	2208      	movs	r2, #8
 80117bc:	2100      	movs	r1, #0
 80117be:	48be      	ldr	r0, [pc, #760]	; (8011ab8 <dhcp_parse_reply+0x310>)
 80117c0:	f00b f95a 	bl	801ca78 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	2b2b      	cmp	r3, #43	; 0x2b
 80117ca:	d802      	bhi.n	80117d2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80117cc:	f06f 0301 	mvn.w	r3, #1
 80117d0:	e2a8      	b.n	8011d24 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80117d8:	23f0      	movs	r3, #240	; 0xf0
 80117da:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	891b      	ldrh	r3, [r3, #8]
 80117e0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80117e6:	e00c      	b.n	8011802 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	895b      	ldrh	r3, [r3, #10]
 80117ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80117f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f4:	895b      	ldrh	r3, [r3, #10]
 80117f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011804:	2b00      	cmp	r3, #0
 8011806:	d004      	beq.n	8011812 <dhcp_parse_reply+0x6a>
 8011808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180a:	895b      	ldrh	r3, [r3, #10]
 801180c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801180e:	429a      	cmp	r2, r3
 8011810:	d2ea      	bcs.n	80117e8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	2b00      	cmp	r3, #0
 8011816:	d102      	bne.n	801181e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011818:	f06f 0301 	mvn.w	r3, #1
 801181c:	e282      	b.n	8011d24 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801181e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011820:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011822:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011824:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801182c:	e23a      	b.n	8011ca4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801182e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011832:	4413      	add	r3, r2
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011838:	2300      	movs	r3, #0
 801183a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801183e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011842:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011844:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011846:	3302      	adds	r3, #2
 8011848:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801184a:	8bfa      	ldrh	r2, [r7, #30]
 801184c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801184e:	429a      	cmp	r2, r3
 8011850:	d202      	bcs.n	8011858 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011852:	f06f 0301 	mvn.w	r3, #1
 8011856:	e265      	b.n	8011d24 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011858:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801185a:	3301      	adds	r3, #1
 801185c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801185e:	8952      	ldrh	r2, [r2, #10]
 8011860:	4293      	cmp	r3, r2
 8011862:	da07      	bge.n	8011874 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011864:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011866:	3301      	adds	r3, #1
 8011868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801186a:	4413      	add	r3, r2
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011872:	e00b      	b.n	801188c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d004      	beq.n	8011886 <dhcp_parse_reply+0xde>
 801187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	e000      	b.n	8011888 <dhcp_parse_reply+0xe0>
 8011886:	2300      	movs	r3, #0
 8011888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801188c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011894:	7dfb      	ldrb	r3, [r7, #23]
 8011896:	2b3b      	cmp	r3, #59	; 0x3b
 8011898:	f200 812d 	bhi.w	8011af6 <dhcp_parse_reply+0x34e>
 801189c:	a201      	add	r2, pc, #4	; (adr r2, 80118a4 <dhcp_parse_reply+0xfc>)
 801189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a2:	bf00      	nop
 80118a4:	08011995 	.word	0x08011995
 80118a8:	080119a5 	.word	0x080119a5
 80118ac:	08011af7 	.word	0x08011af7
 80118b0:	080119c7 	.word	0x080119c7
 80118b4:	08011af7 	.word	0x08011af7
 80118b8:	08011af7 	.word	0x08011af7
 80118bc:	08011af7 	.word	0x08011af7
 80118c0:	08011af7 	.word	0x08011af7
 80118c4:	08011af7 	.word	0x08011af7
 80118c8:	08011af7 	.word	0x08011af7
 80118cc:	08011af7 	.word	0x08011af7
 80118d0:	08011af7 	.word	0x08011af7
 80118d4:	08011af7 	.word	0x08011af7
 80118d8:	08011af7 	.word	0x08011af7
 80118dc:	08011af7 	.word	0x08011af7
 80118e0:	08011af7 	.word	0x08011af7
 80118e4:	08011af7 	.word	0x08011af7
 80118e8:	08011af7 	.word	0x08011af7
 80118ec:	08011af7 	.word	0x08011af7
 80118f0:	08011af7 	.word	0x08011af7
 80118f4:	08011af7 	.word	0x08011af7
 80118f8:	08011af7 	.word	0x08011af7
 80118fc:	08011af7 	.word	0x08011af7
 8011900:	08011af7 	.word	0x08011af7
 8011904:	08011af7 	.word	0x08011af7
 8011908:	08011af7 	.word	0x08011af7
 801190c:	08011af7 	.word	0x08011af7
 8011910:	08011af7 	.word	0x08011af7
 8011914:	08011af7 	.word	0x08011af7
 8011918:	08011af7 	.word	0x08011af7
 801191c:	08011af7 	.word	0x08011af7
 8011920:	08011af7 	.word	0x08011af7
 8011924:	08011af7 	.word	0x08011af7
 8011928:	08011af7 	.word	0x08011af7
 801192c:	08011af7 	.word	0x08011af7
 8011930:	08011af7 	.word	0x08011af7
 8011934:	08011af7 	.word	0x08011af7
 8011938:	08011af7 	.word	0x08011af7
 801193c:	08011af7 	.word	0x08011af7
 8011940:	08011af7 	.word	0x08011af7
 8011944:	08011af7 	.word	0x08011af7
 8011948:	08011af7 	.word	0x08011af7
 801194c:	08011af7 	.word	0x08011af7
 8011950:	08011af7 	.word	0x08011af7
 8011954:	08011af7 	.word	0x08011af7
 8011958:	08011af7 	.word	0x08011af7
 801195c:	08011af7 	.word	0x08011af7
 8011960:	08011af7 	.word	0x08011af7
 8011964:	08011af7 	.word	0x08011af7
 8011968:	08011af7 	.word	0x08011af7
 801196c:	08011af7 	.word	0x08011af7
 8011970:	080119f3 	.word	0x080119f3
 8011974:	08011a15 	.word	0x08011a15
 8011978:	08011a51 	.word	0x08011a51
 801197c:	08011a73 	.word	0x08011a73
 8011980:	08011af7 	.word	0x08011af7
 8011984:	08011af7 	.word	0x08011af7
 8011988:	08011af7 	.word	0x08011af7
 801198c:	08011a95 	.word	0x08011a95
 8011990:	08011ad5 	.word	0x08011ad5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801199a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801199e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80119a2:	e0ac      	b.n	8011afe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80119a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119a8:	2b04      	cmp	r3, #4
 80119aa:	d009      	beq.n	80119c0 <dhcp_parse_reply+0x218>
 80119ac:	4b43      	ldr	r3, [pc, #268]	; (8011abc <dhcp_parse_reply+0x314>)
 80119ae:	f240 622e 	movw	r2, #1582	; 0x62e
 80119b2:	4943      	ldr	r1, [pc, #268]	; (8011ac0 <dhcp_parse_reply+0x318>)
 80119b4:	4843      	ldr	r0, [pc, #268]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 80119b6:	f00b f867 	bl	801ca88 <iprintf>
 80119ba:	f06f 0305 	mvn.w	r3, #5
 80119be:	e1b1      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80119c0:	2306      	movs	r3, #6
 80119c2:	623b      	str	r3, [r7, #32]
        break;
 80119c4:	e09b      	b.n	8011afe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80119c6:	2304      	movs	r3, #4
 80119c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80119cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80119d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d209      	bcs.n	80119ec <dhcp_parse_reply+0x244>
 80119d8:	4b38      	ldr	r3, [pc, #224]	; (8011abc <dhcp_parse_reply+0x314>)
 80119da:	f240 6233 	movw	r2, #1587	; 0x633
 80119de:	493a      	ldr	r1, [pc, #232]	; (8011ac8 <dhcp_parse_reply+0x320>)
 80119e0:	4838      	ldr	r0, [pc, #224]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 80119e2:	f00b f851 	bl	801ca88 <iprintf>
 80119e6:	f06f 0305 	mvn.w	r3, #5
 80119ea:	e19b      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80119ec:	2307      	movs	r3, #7
 80119ee:	623b      	str	r3, [r7, #32]
        break;
 80119f0:	e085      	b.n	8011afe <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80119f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119f6:	2b04      	cmp	r3, #4
 80119f8:	d009      	beq.n	8011a0e <dhcp_parse_reply+0x266>
 80119fa:	4b30      	ldr	r3, [pc, #192]	; (8011abc <dhcp_parse_reply+0x314>)
 80119fc:	f240 6241 	movw	r2, #1601	; 0x641
 8011a00:	492f      	ldr	r1, [pc, #188]	; (8011ac0 <dhcp_parse_reply+0x318>)
 8011a02:	4830      	ldr	r0, [pc, #192]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011a04:	f00b f840 	bl	801ca88 <iprintf>
 8011a08:	f06f 0305 	mvn.w	r3, #5
 8011a0c:	e18a      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011a0e:	2303      	movs	r3, #3
 8011a10:	623b      	str	r3, [r7, #32]
        break;
 8011a12:	e074      	b.n	8011afe <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d009      	beq.n	8011a30 <dhcp_parse_reply+0x288>
 8011a1c:	4b27      	ldr	r3, [pc, #156]	; (8011abc <dhcp_parse_reply+0x314>)
 8011a1e:	f240 624f 	movw	r2, #1615	; 0x64f
 8011a22:	492a      	ldr	r1, [pc, #168]	; (8011acc <dhcp_parse_reply+0x324>)
 8011a24:	4827      	ldr	r0, [pc, #156]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011a26:	f00b f82f 	bl	801ca88 <iprintf>
 8011a2a:	f06f 0305 	mvn.w	r3, #5
 8011a2e:	e179      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a32:	2bf0      	cmp	r3, #240	; 0xf0
 8011a34:	d009      	beq.n	8011a4a <dhcp_parse_reply+0x2a2>
 8011a36:	4b21      	ldr	r3, [pc, #132]	; (8011abc <dhcp_parse_reply+0x314>)
 8011a38:	f240 6251 	movw	r2, #1617	; 0x651
 8011a3c:	4924      	ldr	r1, [pc, #144]	; (8011ad0 <dhcp_parse_reply+0x328>)
 8011a3e:	4821      	ldr	r0, [pc, #132]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011a40:	f00b f822 	bl	801ca88 <iprintf>
 8011a44:	f06f 0305 	mvn.w	r3, #5
 8011a48:	e16c      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	623b      	str	r3, [r7, #32]
        break;
 8011a4e:	e056      	b.n	8011afe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d009      	beq.n	8011a6c <dhcp_parse_reply+0x2c4>
 8011a58:	4b18      	ldr	r3, [pc, #96]	; (8011abc <dhcp_parse_reply+0x314>)
 8011a5a:	f240 6255 	movw	r2, #1621	; 0x655
 8011a5e:	491b      	ldr	r1, [pc, #108]	; (8011acc <dhcp_parse_reply+0x324>)
 8011a60:	4818      	ldr	r0, [pc, #96]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011a62:	f00b f811 	bl	801ca88 <iprintf>
 8011a66:	f06f 0305 	mvn.w	r3, #5
 8011a6a:	e15b      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	623b      	str	r3, [r7, #32]
        break;
 8011a70:	e045      	b.n	8011afe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a76:	2b04      	cmp	r3, #4
 8011a78:	d009      	beq.n	8011a8e <dhcp_parse_reply+0x2e6>
 8011a7a:	4b10      	ldr	r3, [pc, #64]	; (8011abc <dhcp_parse_reply+0x314>)
 8011a7c:	f240 6259 	movw	r2, #1625	; 0x659
 8011a80:	490f      	ldr	r1, [pc, #60]	; (8011ac0 <dhcp_parse_reply+0x318>)
 8011a82:	4810      	ldr	r0, [pc, #64]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011a84:	f00b f800 	bl	801ca88 <iprintf>
 8011a88:	f06f 0305 	mvn.w	r3, #5
 8011a8c:	e14a      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011a8e:	2302      	movs	r3, #2
 8011a90:	623b      	str	r3, [r7, #32]
        break;
 8011a92:	e034      	b.n	8011afe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a98:	2b04      	cmp	r3, #4
 8011a9a:	d009      	beq.n	8011ab0 <dhcp_parse_reply+0x308>
 8011a9c:	4b07      	ldr	r3, [pc, #28]	; (8011abc <dhcp_parse_reply+0x314>)
 8011a9e:	f240 625d 	movw	r2, #1629	; 0x65d
 8011aa2:	4907      	ldr	r1, [pc, #28]	; (8011ac0 <dhcp_parse_reply+0x318>)
 8011aa4:	4807      	ldr	r0, [pc, #28]	; (8011ac4 <dhcp_parse_reply+0x31c>)
 8011aa6:	f00a ffef 	bl	801ca88 <iprintf>
 8011aaa:	f06f 0305 	mvn.w	r3, #5
 8011aae:	e139      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011ab0:	2304      	movs	r3, #4
 8011ab2:	623b      	str	r3, [r7, #32]
        break;
 8011ab4:	e023      	b.n	8011afe <dhcp_parse_reply+0x356>
 8011ab6:	bf00      	nop
 8011ab8:	20008630 	.word	0x20008630
 8011abc:	0801d978 	.word	0x0801d978
 8011ac0:	0801dc2c 	.word	0x0801dc2c
 8011ac4:	0801da04 	.word	0x0801da04
 8011ac8:	0801dc38 	.word	0x0801dc38
 8011acc:	0801dc4c 	.word	0x0801dc4c
 8011ad0:	0801dc58 	.word	0x0801dc58
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ad8:	2b04      	cmp	r3, #4
 8011ada:	d009      	beq.n	8011af0 <dhcp_parse_reply+0x348>
 8011adc:	4b93      	ldr	r3, [pc, #588]	; (8011d2c <dhcp_parse_reply+0x584>)
 8011ade:	f240 6261 	movw	r2, #1633	; 0x661
 8011ae2:	4993      	ldr	r1, [pc, #588]	; (8011d30 <dhcp_parse_reply+0x588>)
 8011ae4:	4893      	ldr	r0, [pc, #588]	; (8011d34 <dhcp_parse_reply+0x58c>)
 8011ae6:	f00a ffcf 	bl	801ca88 <iprintf>
 8011aea:	f06f 0305 	mvn.w	r3, #5
 8011aee:	e119      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011af0:	2305      	movs	r3, #5
 8011af2:	623b      	str	r3, [r7, #32]
        break;
 8011af4:	e003      	b.n	8011afe <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8011af6:	2300      	movs	r3, #0
 8011af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011afc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d103      	bne.n	8011b0c <dhcp_parse_reply+0x364>
      offset++;
 8011b04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b06:	3301      	adds	r3, #1
 8011b08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011b0a:	e0a1      	b.n	8011c50 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011b0c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b12:	4413      	add	r3, r2
 8011b14:	3302      	adds	r3, #2
 8011b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b1a:	db02      	blt.n	8011b22 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8011b1c:	f06f 0301 	mvn.w	r3, #1
 8011b20:	e100      	b.n	8011d24 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8011b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b2a:	4413      	add	r3, r2
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	3302      	adds	r3, #2
 8011b30:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f000 808a 	beq.w	8011c50 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011b40:	6a3b      	ldr	r3, [r7, #32]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	db02      	blt.n	8011b4c <dhcp_parse_reply+0x3a4>
 8011b46:	6a3b      	ldr	r3, [r7, #32]
 8011b48:	2b07      	cmp	r3, #7
 8011b4a:	dd06      	ble.n	8011b5a <dhcp_parse_reply+0x3b2>
 8011b4c:	4b77      	ldr	r3, [pc, #476]	; (8011d2c <dhcp_parse_reply+0x584>)
 8011b4e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011b52:	4979      	ldr	r1, [pc, #484]	; (8011d38 <dhcp_parse_reply+0x590>)
 8011b54:	4877      	ldr	r0, [pc, #476]	; (8011d34 <dhcp_parse_reply+0x58c>)
 8011b56:	f00a ff97 	bl	801ca88 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011b5a:	4a78      	ldr	r2, [pc, #480]	; (8011d3c <dhcp_parse_reply+0x594>)
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	4413      	add	r3, r2
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d174      	bne.n	8011c50 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8011b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b6a:	2b04      	cmp	r3, #4
 8011b6c:	bf28      	it	cs
 8011b6e:	2304      	movcs	r3, #4
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011b74:	8bfb      	ldrh	r3, [r7, #30]
 8011b76:	8aba      	ldrh	r2, [r7, #20]
 8011b78:	f107 0108 	add.w	r1, r7, #8
 8011b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b7e:	f004 fc79 	bl	8016474 <pbuf_copy_partial>
 8011b82:	4603      	mov	r3, r0
 8011b84:	461a      	mov	r2, r3
 8011b86:	8abb      	ldrh	r3, [r7, #20]
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d002      	beq.n	8011b92 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8011b8c:	f06f 0301 	mvn.w	r3, #1
 8011b90:	e0c8      	b.n	8011d24 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8011b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b96:	2b04      	cmp	r3, #4
 8011b98:	d933      	bls.n	8011c02 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d009      	beq.n	8011bbc <dhcp_parse_reply+0x414>
 8011ba8:	4b60      	ldr	r3, [pc, #384]	; (8011d2c <dhcp_parse_reply+0x584>)
 8011baa:	f240 6281 	movw	r2, #1665	; 0x681
 8011bae:	4964      	ldr	r1, [pc, #400]	; (8011d40 <dhcp_parse_reply+0x598>)
 8011bb0:	4860      	ldr	r0, [pc, #384]	; (8011d34 <dhcp_parse_reply+0x58c>)
 8011bb2:	f00a ff69 	bl	801ca88 <iprintf>
 8011bb6:	f06f 0305 	mvn.w	r3, #5
 8011bba:	e0b3      	b.n	8011d24 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8011bbc:	4a5f      	ldr	r2, [pc, #380]	; (8011d3c <dhcp_parse_reply+0x594>)
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fe fbfa 	bl	80103c2 <lwip_htonl>
 8011bce:	4601      	mov	r1, r0
 8011bd0:	4a5c      	ldr	r2, [pc, #368]	; (8011d44 <dhcp_parse_reply+0x59c>)
 8011bd2:	6a3b      	ldr	r3, [r7, #32]
 8011bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011bdc:	3b04      	subs	r3, #4
 8011bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011be2:	8bfb      	ldrh	r3, [r7, #30]
 8011be4:	3304      	adds	r3, #4
 8011be6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011be8:	8a7a      	ldrh	r2, [r7, #18]
 8011bea:	8bfb      	ldrh	r3, [r7, #30]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d202      	bcs.n	8011bf6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8011bf0:	f06f 0301 	mvn.w	r3, #1
 8011bf4:	e096      	b.n	8011d24 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8011bf6:	8a7b      	ldrh	r3, [r7, #18]
 8011bf8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011c00:	e79e      	b.n	8011b40 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8011c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c06:	2b04      	cmp	r3, #4
 8011c08:	d106      	bne.n	8011c18 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fe fbd8 	bl	80103c2 <lwip_htonl>
 8011c12:	4603      	mov	r3, r0
 8011c14:	60bb      	str	r3, [r7, #8]
 8011c16:	e011      	b.n	8011c3c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d009      	beq.n	8011c34 <dhcp_parse_reply+0x48c>
 8011c20:	4b42      	ldr	r3, [pc, #264]	; (8011d2c <dhcp_parse_reply+0x584>)
 8011c22:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011c26:	4948      	ldr	r1, [pc, #288]	; (8011d48 <dhcp_parse_reply+0x5a0>)
 8011c28:	4842      	ldr	r0, [pc, #264]	; (8011d34 <dhcp_parse_reply+0x58c>)
 8011c2a:	f00a ff2d 	bl	801ca88 <iprintf>
 8011c2e:	f06f 0305 	mvn.w	r3, #5
 8011c32:	e077      	b.n	8011d24 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8011c34:	f107 0308 	add.w	r3, r7, #8
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011c3c:	4a3f      	ldr	r2, [pc, #252]	; (8011d3c <dhcp_parse_reply+0x594>)
 8011c3e:	6a3b      	ldr	r3, [r7, #32]
 8011c40:	4413      	add	r3, r2
 8011c42:	2201      	movs	r2, #1
 8011c44:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011c46:	68ba      	ldr	r2, [r7, #8]
 8011c48:	493e      	ldr	r1, [pc, #248]	; (8011d44 <dhcp_parse_reply+0x59c>)
 8011c4a:	6a3b      	ldr	r3, [r7, #32]
 8011c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c52:	895b      	ldrh	r3, [r3, #10]
 8011c54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d324      	bcc.n	8011ca4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5c:	895b      	ldrh	r3, [r3, #10]
 8011c5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c66:	895b      	ldrh	r3, [r3, #10]
 8011c68:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011c6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d213      	bcs.n	8011c9e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8011c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d109      	bne.n	8011c96 <dhcp_parse_reply+0x4ee>
 8011c82:	4b2a      	ldr	r3, [pc, #168]	; (8011d2c <dhcp_parse_reply+0x584>)
 8011c84:	f240 629d 	movw	r2, #1693	; 0x69d
 8011c88:	4930      	ldr	r1, [pc, #192]	; (8011d4c <dhcp_parse_reply+0x5a4>)
 8011c8a:	482a      	ldr	r0, [pc, #168]	; (8011d34 <dhcp_parse_reply+0x58c>)
 8011c8c:	f00a fefc 	bl	801ca88 <iprintf>
 8011c90:	f06f 0305 	mvn.w	r3, #5
 8011c94:	e046      	b.n	8011d24 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8011c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c9c:	e002      	b.n	8011ca4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011c9e:	f06f 0301 	mvn.w	r3, #1
 8011ca2:	e03f      	b.n	8011d24 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00a      	beq.n	8011cc0 <dhcp_parse_reply+0x518>
 8011caa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d206      	bcs.n	8011cc0 <dhcp_parse_reply+0x518>
 8011cb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cb6:	4413      	add	r3, r2
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	2bff      	cmp	r3, #255	; 0xff
 8011cbc:	f47f adb7 	bne.w	801182e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011cc0:	4b1e      	ldr	r3, [pc, #120]	; (8011d3c <dhcp_parse_reply+0x594>)
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d018      	beq.n	8011cfa <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011cc8:	4b1e      	ldr	r3, [pc, #120]	; (8011d44 <dhcp_parse_reply+0x59c>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011cce:	4b1b      	ldr	r3, [pc, #108]	; (8011d3c <dhcp_parse_reply+0x594>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d102      	bne.n	8011ce0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cde:	e00c      	b.n	8011cfa <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	d102      	bne.n	8011cec <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cea:	e006      	b.n	8011cfa <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2b03      	cmp	r3, #3
 8011cf0:	d103      	bne.n	8011cfa <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d006      	beq.n	8011d0e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011d00:	2300      	movs	r3, #0
 8011d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8011d04:	236c      	movs	r3, #108	; 0x6c
 8011d06:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011d08:	23ec      	movs	r3, #236	; 0xec
 8011d0a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011d0c:	e569      	b.n	80117e2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d006      	beq.n	8011d22 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8011d14:	2300      	movs	r3, #0
 8011d16:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8011d18:	232c      	movs	r3, #44	; 0x2c
 8011d1a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011d1c:	236c      	movs	r3, #108	; 0x6c
 8011d1e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011d20:	e55f      	b.n	80117e2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011d22:	2300      	movs	r3, #0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3740      	adds	r7, #64	; 0x40
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	0801d978 	.word	0x0801d978
 8011d30:	0801dc2c 	.word	0x0801dc2c
 8011d34:	0801da04 	.word	0x0801da04
 8011d38:	0801dc70 	.word	0x0801dc70
 8011d3c:	20008630 	.word	0x20008630
 8011d40:	0801dc84 	.word	0x0801dc84
 8011d44:	20008638 	.word	0x20008638
 8011d48:	0801dc9c 	.word	0x0801dc9c
 8011d4c:	0801dcb0 	.word	0x0801dcb0

08011d50 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b08a      	sub	sp, #40	; 0x28
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
 8011d5c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011d5e:	4b5f      	ldr	r3, [pc, #380]	; (8011edc <dhcp_recv+0x18c>)
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d68:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f000 809d 	beq.w	8011eb2 <dhcp_recv+0x162>
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	791b      	ldrb	r3, [r3, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f000 8098 	beq.w	8011eb2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	895b      	ldrh	r3, [r3, #10]
 8011d86:	2b2b      	cmp	r3, #43	; 0x2b
 8011d88:	f240 8095 	bls.w	8011eb6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	f040 8092 	bne.w	8011eba <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011d96:	2300      	movs	r3, #0
 8011d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d9c:	e012      	b.n	8011dc4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011da2:	6a3a      	ldr	r2, [r7, #32]
 8011da4:	4413      	add	r3, r2
 8011da6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dae:	69b9      	ldr	r1, [r7, #24]
 8011db0:	440b      	add	r3, r1
 8011db2:	7f1b      	ldrb	r3, [r3, #28]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	f040 8082 	bne.w	8011ebe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011dc4:	6a3b      	ldr	r3, [r7, #32]
 8011dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011dca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d203      	bcs.n	8011dda <dhcp_recv+0x8a>
 8011dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dd6:	2b05      	cmp	r3, #5
 8011dd8:	d9e1      	bls.n	8011d9e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe faef 	bl	80103c2 <lwip_htonl>
 8011de4:	4602      	mov	r2, r0
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d169      	bne.n	8011ec2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011dee:	69f9      	ldr	r1, [r7, #28]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff fcd9 	bl	80117a8 <dhcp_parse_reply>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d164      	bne.n	8011ec6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011dfc:	4b38      	ldr	r3, [pc, #224]	; (8011ee0 <dhcp_recv+0x190>)
 8011dfe:	785b      	ldrb	r3, [r3, #1]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d062      	beq.n	8011eca <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8011e0a:	4b36      	ldr	r3, [pc, #216]	; (8011ee4 <dhcp_recv+0x194>)
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011e10:	7cfb      	ldrb	r3, [r7, #19]
 8011e12:	2b05      	cmp	r3, #5
 8011e14:	d12a      	bne.n	8011e6c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	795b      	ldrb	r3, [r3, #5]
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d112      	bne.n	8011e44 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011e1e:	6979      	ldr	r1, [r7, #20]
 8011e20:	6a38      	ldr	r0, [r7, #32]
 8011e22:	f7fe fe05 	bl	8010a30 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8011e26:	6a3b      	ldr	r3, [r7, #32]
 8011e28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e2c:	f003 0308 	and.w	r3, r3, #8
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d003      	beq.n	8011e3c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011e34:	6a38      	ldr	r0, [r7, #32]
 8011e36:	f7fe fb73 	bl	8010520 <dhcp_check>
 8011e3a:	e047      	b.n	8011ecc <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011e3c:	6a38      	ldr	r0, [r7, #32]
 8011e3e:	f7ff f867 	bl	8010f10 <dhcp_bind>
 8011e42:	e043      	b.n	8011ecc <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	795b      	ldrb	r3, [r3, #5]
 8011e48:	2b03      	cmp	r3, #3
 8011e4a:	d007      	beq.n	8011e5c <dhcp_recv+0x10c>
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	795b      	ldrb	r3, [r3, #5]
 8011e50:	2b04      	cmp	r3, #4
 8011e52:	d003      	beq.n	8011e5c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011e58:	2b05      	cmp	r3, #5
 8011e5a:	d137      	bne.n	8011ecc <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8011e5c:	6979      	ldr	r1, [r7, #20]
 8011e5e:	6a38      	ldr	r0, [r7, #32]
 8011e60:	f7fe fde6 	bl	8010a30 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011e64:	6a38      	ldr	r0, [r7, #32]
 8011e66:	f7ff f853 	bl	8010f10 <dhcp_bind>
 8011e6a:	e02f      	b.n	8011ecc <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011e6c:	7cfb      	ldrb	r3, [r7, #19]
 8011e6e:	2b06      	cmp	r3, #6
 8011e70:	d113      	bne.n	8011e9a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	d00b      	beq.n	8011e92 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	795b      	ldrb	r3, [r3, #5]
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d007      	beq.n	8011e92 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011e86:	2b04      	cmp	r3, #4
 8011e88:	d003      	beq.n	8011e92 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	795b      	ldrb	r3, [r3, #5]
 8011e8e:	2b05      	cmp	r3, #5
 8011e90:	d103      	bne.n	8011e9a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8011e92:	6a38      	ldr	r0, [r7, #32]
 8011e94:	f7fe fb2a 	bl	80104ec <dhcp_handle_nak>
 8011e98:	e018      	b.n	8011ecc <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011e9a:	7cfb      	ldrb	r3, [r7, #19]
 8011e9c:	2b02      	cmp	r3, #2
 8011e9e:	d108      	bne.n	8011eb2 <dhcp_recv+0x162>
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	795b      	ldrb	r3, [r3, #5]
 8011ea4:	2b06      	cmp	r3, #6
 8011ea6:	d104      	bne.n	8011eb2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011ea8:	6979      	ldr	r1, [r7, #20]
 8011eaa:	6a38      	ldr	r0, [r7, #32]
 8011eac:	f7fe fb6c 	bl	8010588 <dhcp_handle_offer>
 8011eb0:	e00c      	b.n	8011ecc <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8011eb2:	bf00      	nop
 8011eb4:	e00a      	b.n	8011ecc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011eb6:	bf00      	nop
 8011eb8:	e008      	b.n	8011ecc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011eba:	bf00      	nop
 8011ebc:	e006      	b.n	8011ecc <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8011ebe:	bf00      	nop
 8011ec0:	e004      	b.n	8011ecc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011ec2:	bf00      	nop
 8011ec4:	e002      	b.n	8011ecc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011ec6:	bf00      	nop
 8011ec8:	e000      	b.n	8011ecc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011eca:	bf00      	nop
  pbuf_free(p);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f004 f8cb 	bl	8016068 <pbuf_free>
}
 8011ed2:	bf00      	nop
 8011ed4:	3728      	adds	r7, #40	; 0x28
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	20008658 	.word	0x20008658
 8011ee0:	20008630 	.word	0x20008630
 8011ee4:	20008638 	.word	0x20008638

08011ee8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b088      	sub	sp, #32
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	603b      	str	r3, [r7, #0]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d108      	bne.n	8011f10 <dhcp_create_msg+0x28>
 8011efe:	4b5f      	ldr	r3, [pc, #380]	; (801207c <dhcp_create_msg+0x194>)
 8011f00:	f240 7269 	movw	r2, #1897	; 0x769
 8011f04:	495e      	ldr	r1, [pc, #376]	; (8012080 <dhcp_create_msg+0x198>)
 8011f06:	485f      	ldr	r0, [pc, #380]	; (8012084 <dhcp_create_msg+0x19c>)
 8011f08:	f00a fdbe 	bl	801ca88 <iprintf>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	e0b1      	b.n	8012074 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d108      	bne.n	8011f28 <dhcp_create_msg+0x40>
 8011f16:	4b59      	ldr	r3, [pc, #356]	; (801207c <dhcp_create_msg+0x194>)
 8011f18:	f240 726a 	movw	r2, #1898	; 0x76a
 8011f1c:	495a      	ldr	r1, [pc, #360]	; (8012088 <dhcp_create_msg+0x1a0>)
 8011f1e:	4859      	ldr	r0, [pc, #356]	; (8012084 <dhcp_create_msg+0x19c>)
 8011f20:	f00a fdb2 	bl	801ca88 <iprintf>
 8011f24:	2300      	movs	r3, #0
 8011f26:	e0a5      	b.n	8012074 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011f28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f2c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011f30:	2036      	movs	r0, #54	; 0x36
 8011f32:	f003 fdb9 	bl	8015aa8 <pbuf_alloc>
 8011f36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	e098      	b.n	8012074 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	895b      	ldrh	r3, [r3, #10]
 8011f46:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8011f4a:	d206      	bcs.n	8011f5a <dhcp_create_msg+0x72>
 8011f4c:	4b4b      	ldr	r3, [pc, #300]	; (801207c <dhcp_create_msg+0x194>)
 8011f4e:	f240 7272 	movw	r2, #1906	; 0x772
 8011f52:	494e      	ldr	r1, [pc, #312]	; (801208c <dhcp_create_msg+0x1a4>)
 8011f54:	484b      	ldr	r0, [pc, #300]	; (8012084 <dhcp_create_msg+0x19c>)
 8011f56:	f00a fd97 	bl	801ca88 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011f5a:	79fb      	ldrb	r3, [r7, #7]
 8011f5c:	2b03      	cmp	r3, #3
 8011f5e:	d103      	bne.n	8011f68 <dhcp_create_msg+0x80>
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	795b      	ldrb	r3, [r3, #5]
 8011f64:	2b03      	cmp	r3, #3
 8011f66:	d10d      	bne.n	8011f84 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	799b      	ldrb	r3, [r3, #6]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d105      	bne.n	8011f7c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011f70:	f00a fda2 	bl	801cab8 <rand>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461a      	mov	r2, r3
 8011f78:	4b45      	ldr	r3, [pc, #276]	; (8012090 <dhcp_create_msg+0x1a8>)
 8011f7a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011f7c:	4b44      	ldr	r3, [pc, #272]	; (8012090 <dhcp_create_msg+0x1a8>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011f84:	69bb      	ldr	r3, [r7, #24]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011f8a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011f8e:	2100      	movs	r1, #0
 8011f90:	6978      	ldr	r0, [r7, #20]
 8011f92:	f00a fd71 	bl	801ca78 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	2201      	movs	r2, #1
 8011f9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fe fa06 	bl	80103c2 <lwip_htonl>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011fbc:	79fb      	ldrb	r3, [r7, #7]
 8011fbe:	2b08      	cmp	r3, #8
 8011fc0:	d010      	beq.n	8011fe4 <dhcp_create_msg+0xfc>
 8011fc2:	79fb      	ldrb	r3, [r7, #7]
 8011fc4:	2b04      	cmp	r3, #4
 8011fc6:	d00d      	beq.n	8011fe4 <dhcp_create_msg+0xfc>
 8011fc8:	79fb      	ldrb	r3, [r7, #7]
 8011fca:	2b07      	cmp	r3, #7
 8011fcc:	d00a      	beq.n	8011fe4 <dhcp_create_msg+0xfc>
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	2b03      	cmp	r3, #3
 8011fd2:	d10c      	bne.n	8011fee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011fd8:	2b05      	cmp	r3, #5
 8011fda:	d003      	beq.n	8011fe4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	795b      	ldrb	r3, [r3, #5]
 8011fe0:	2b04      	cmp	r3, #4
 8011fe2:	d104      	bne.n	8011fee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	3304      	adds	r3, #4
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011fee:	2300      	movs	r3, #0
 8011ff0:	83fb      	strh	r3, [r7, #30]
 8011ff2:	e00c      	b.n	801200e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011ff4:	8bfa      	ldrh	r2, [r7, #30]
 8011ff6:	8bfb      	ldrh	r3, [r7, #30]
 8011ff8:	68f9      	ldr	r1, [r7, #12]
 8011ffa:	440a      	add	r2, r1
 8011ffc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	4413      	add	r3, r2
 8012004:	460a      	mov	r2, r1
 8012006:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012008:	8bfb      	ldrh	r3, [r7, #30]
 801200a:	3301      	adds	r3, #1
 801200c:	83fb      	strh	r3, [r7, #30]
 801200e:	8bfb      	ldrh	r3, [r7, #30]
 8012010:	2b05      	cmp	r3, #5
 8012012:	d9ef      	bls.n	8011ff4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	2200      	movs	r2, #0
 8012018:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801201c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012020:	2200      	movs	r2, #0
 8012022:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012026:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801202a:	2200      	movs	r2, #0
 801202c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012030:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012034:	2200      	movs	r2, #0
 8012036:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801203a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012044:	2301      	movs	r3, #1
 8012046:	2235      	movs	r2, #53	; 0x35
 8012048:	2000      	movs	r0, #0
 801204a:	f7ff fadd 	bl	8011608 <dhcp_option>
 801204e:	4603      	mov	r3, r0
 8012050:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012058:	79fa      	ldrb	r2, [r7, #7]
 801205a:	8a7b      	ldrh	r3, [r7, #18]
 801205c:	4618      	mov	r0, r3
 801205e:	f7ff fb07 	bl	8011670 <dhcp_option_byte>
 8012062:	4603      	mov	r3, r0
 8012064:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	8a7a      	ldrh	r2, [r7, #18]
 8012070:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012072:	69bb      	ldr	r3, [r7, #24]
}
 8012074:	4618      	mov	r0, r3
 8012076:	3720      	adds	r7, #32
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	0801d978 	.word	0x0801d978
 8012080:	0801dcc4 	.word	0x0801dcc4
 8012084:	0801da04 	.word	0x0801da04
 8012088:	0801dce4 	.word	0x0801dce4
 801208c:	0801dd04 	.word	0x0801dd04
 8012090:	20007464 	.word	0x20007464

08012094 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	4603      	mov	r3, r0
 801209c:	60b9      	str	r1, [r7, #8]
 801209e:	607a      	str	r2, [r7, #4]
 80120a0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80120a2:	89fb      	ldrh	r3, [r7, #14]
 80120a4:	1c5a      	adds	r2, r3, #1
 80120a6:	81fa      	strh	r2, [r7, #14]
 80120a8:	461a      	mov	r2, r3
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	4413      	add	r3, r2
 80120ae:	22ff      	movs	r2, #255	; 0xff
 80120b0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80120b2:	e007      	b.n	80120c4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80120b4:	89fb      	ldrh	r3, [r7, #14]
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	81fa      	strh	r2, [r7, #14]
 80120ba:	461a      	mov	r2, r3
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	4413      	add	r3, r2
 80120c0:	2200      	movs	r2, #0
 80120c2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80120c4:	89fb      	ldrh	r3, [r7, #14]
 80120c6:	2b43      	cmp	r3, #67	; 0x43
 80120c8:	d904      	bls.n	80120d4 <dhcp_option_trailer+0x40>
 80120ca:	89fb      	ldrh	r3, [r7, #14]
 80120cc:	f003 0303 	and.w	r3, r3, #3
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d002      	beq.n	80120da <dhcp_option_trailer+0x46>
 80120d4:	89fb      	ldrh	r3, [r7, #14]
 80120d6:	2b43      	cmp	r3, #67	; 0x43
 80120d8:	d9ec      	bls.n	80120b4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80120da:	89fb      	ldrh	r3, [r7, #14]
 80120dc:	33f0      	adds	r3, #240	; 0xf0
 80120de:	b29b      	uxth	r3, r3
 80120e0:	4619      	mov	r1, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f003 fe3a 	bl	8015d5c <pbuf_realloc>
}
 80120e8:	bf00      	nop
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d017      	beq.n	801212e <dhcp_supplied_address+0x3e>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012102:	2b00      	cmp	r3, #0
 8012104:	d013      	beq.n	801212e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	795b      	ldrb	r3, [r3, #5]
 8012110:	2b0a      	cmp	r3, #10
 8012112:	d007      	beq.n	8012124 <dhcp_supplied_address+0x34>
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	795b      	ldrb	r3, [r3, #5]
 8012118:	2b05      	cmp	r3, #5
 801211a:	d003      	beq.n	8012124 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012120:	2b04      	cmp	r3, #4
 8012122:	d101      	bne.n	8012128 <dhcp_supplied_address+0x38>
 8012124:	2301      	movs	r3, #1
 8012126:	e000      	b.n	801212a <dhcp_supplied_address+0x3a>
 8012128:	2300      	movs	r3, #0
 801212a:	b2db      	uxtb	r3, r3
 801212c:	e000      	b.n	8012130 <dhcp_supplied_address+0x40>
  }
  return 0;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	3714      	adds	r7, #20
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012144:	4915      	ldr	r1, [pc, #84]	; (801219c <etharp_free_entry+0x60>)
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	4613      	mov	r3, r2
 801214a:	005b      	lsls	r3, r3, #1
 801214c:	4413      	add	r3, r2
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	440b      	add	r3, r1
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d013      	beq.n	8012180 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012158:	4910      	ldr	r1, [pc, #64]	; (801219c <etharp_free_entry+0x60>)
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	4613      	mov	r3, r2
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	4413      	add	r3, r2
 8012162:	00db      	lsls	r3, r3, #3
 8012164:	440b      	add	r3, r1
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4618      	mov	r0, r3
 801216a:	f003 ff7d 	bl	8016068 <pbuf_free>
    arp_table[i].q = NULL;
 801216e:	490b      	ldr	r1, [pc, #44]	; (801219c <etharp_free_entry+0x60>)
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	4613      	mov	r3, r2
 8012174:	005b      	lsls	r3, r3, #1
 8012176:	4413      	add	r3, r2
 8012178:	00db      	lsls	r3, r3, #3
 801217a:	440b      	add	r3, r1
 801217c:	2200      	movs	r2, #0
 801217e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012180:	4906      	ldr	r1, [pc, #24]	; (801219c <etharp_free_entry+0x60>)
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	4613      	mov	r3, r2
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	4413      	add	r3, r2
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	440b      	add	r3, r1
 801218e:	3314      	adds	r3, #20
 8012190:	2200      	movs	r2, #0
 8012192:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012194:	bf00      	nop
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	20007468 	.word	0x20007468

080121a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121a6:	2300      	movs	r3, #0
 80121a8:	607b      	str	r3, [r7, #4]
 80121aa:	e096      	b.n	80122da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80121ac:	494f      	ldr	r1, [pc, #316]	; (80122ec <etharp_tmr+0x14c>)
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	4613      	mov	r3, r2
 80121b2:	005b      	lsls	r3, r3, #1
 80121b4:	4413      	add	r3, r2
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	440b      	add	r3, r1
 80121ba:	3314      	adds	r3, #20
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f000 8086 	beq.w	80122d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80121c8:	4948      	ldr	r1, [pc, #288]	; (80122ec <etharp_tmr+0x14c>)
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4613      	mov	r3, r2
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	440b      	add	r3, r1
 80121d6:	3312      	adds	r3, #18
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	3301      	adds	r3, #1
 80121dc:	b298      	uxth	r0, r3
 80121de:	4943      	ldr	r1, [pc, #268]	; (80122ec <etharp_tmr+0x14c>)
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	4613      	mov	r3, r2
 80121e4:	005b      	lsls	r3, r3, #1
 80121e6:	4413      	add	r3, r2
 80121e8:	00db      	lsls	r3, r3, #3
 80121ea:	440b      	add	r3, r1
 80121ec:	3312      	adds	r3, #18
 80121ee:	4602      	mov	r2, r0
 80121f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80121f2:	493e      	ldr	r1, [pc, #248]	; (80122ec <etharp_tmr+0x14c>)
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	440b      	add	r3, r1
 8012200:	3312      	adds	r3, #18
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012208:	d215      	bcs.n	8012236 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801220a:	4938      	ldr	r1, [pc, #224]	; (80122ec <etharp_tmr+0x14c>)
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	4613      	mov	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	440b      	add	r3, r1
 8012218:	3314      	adds	r3, #20
 801221a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801221c:	2b01      	cmp	r3, #1
 801221e:	d10e      	bne.n	801223e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012220:	4932      	ldr	r1, [pc, #200]	; (80122ec <etharp_tmr+0x14c>)
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	4613      	mov	r3, r2
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	4413      	add	r3, r2
 801222a:	00db      	lsls	r3, r3, #3
 801222c:	440b      	add	r3, r1
 801222e:	3312      	adds	r3, #18
 8012230:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012232:	2b04      	cmp	r3, #4
 8012234:	d903      	bls.n	801223e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7ff ff80 	bl	801213c <etharp_free_entry>
 801223c:	e04a      	b.n	80122d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801223e:	492b      	ldr	r1, [pc, #172]	; (80122ec <etharp_tmr+0x14c>)
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	4613      	mov	r3, r2
 8012244:	005b      	lsls	r3, r3, #1
 8012246:	4413      	add	r3, r2
 8012248:	00db      	lsls	r3, r3, #3
 801224a:	440b      	add	r3, r1
 801224c:	3314      	adds	r3, #20
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b03      	cmp	r3, #3
 8012252:	d10a      	bne.n	801226a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012254:	4925      	ldr	r1, [pc, #148]	; (80122ec <etharp_tmr+0x14c>)
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4613      	mov	r3, r2
 801225a:	005b      	lsls	r3, r3, #1
 801225c:	4413      	add	r3, r2
 801225e:	00db      	lsls	r3, r3, #3
 8012260:	440b      	add	r3, r1
 8012262:	3314      	adds	r3, #20
 8012264:	2204      	movs	r2, #4
 8012266:	701a      	strb	r2, [r3, #0]
 8012268:	e034      	b.n	80122d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801226a:	4920      	ldr	r1, [pc, #128]	; (80122ec <etharp_tmr+0x14c>)
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	4613      	mov	r3, r2
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	4413      	add	r3, r2
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	440b      	add	r3, r1
 8012278:	3314      	adds	r3, #20
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b04      	cmp	r3, #4
 801227e:	d10a      	bne.n	8012296 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012280:	491a      	ldr	r1, [pc, #104]	; (80122ec <etharp_tmr+0x14c>)
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	4613      	mov	r3, r2
 8012286:	005b      	lsls	r3, r3, #1
 8012288:	4413      	add	r3, r2
 801228a:	00db      	lsls	r3, r3, #3
 801228c:	440b      	add	r3, r1
 801228e:	3314      	adds	r3, #20
 8012290:	2202      	movs	r2, #2
 8012292:	701a      	strb	r2, [r3, #0]
 8012294:	e01e      	b.n	80122d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012296:	4915      	ldr	r1, [pc, #84]	; (80122ec <etharp_tmr+0x14c>)
 8012298:	687a      	ldr	r2, [r7, #4]
 801229a:	4613      	mov	r3, r2
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	4413      	add	r3, r2
 80122a0:	00db      	lsls	r3, r3, #3
 80122a2:	440b      	add	r3, r1
 80122a4:	3314      	adds	r3, #20
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d113      	bne.n	80122d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80122ac:	490f      	ldr	r1, [pc, #60]	; (80122ec <etharp_tmr+0x14c>)
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	4613      	mov	r3, r2
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	4413      	add	r3, r2
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	440b      	add	r3, r1
 80122ba:	3308      	adds	r3, #8
 80122bc:	6818      	ldr	r0, [r3, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	4613      	mov	r3, r2
 80122c2:	005b      	lsls	r3, r3, #1
 80122c4:	4413      	add	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	4a08      	ldr	r2, [pc, #32]	; (80122ec <etharp_tmr+0x14c>)
 80122ca:	4413      	add	r3, r2
 80122cc:	3304      	adds	r3, #4
 80122ce:	4619      	mov	r1, r3
 80122d0:	f000 fe72 	bl	8012fb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	3301      	adds	r3, #1
 80122d8:	607b      	str	r3, [r7, #4]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b09      	cmp	r3, #9
 80122de:	f77f af65 	ble.w	80121ac <etharp_tmr+0xc>
      }
    }
  }
}
 80122e2:	bf00      	nop
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	20007468 	.word	0x20007468

080122f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b08a      	sub	sp, #40	; 0x28
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	460b      	mov	r3, r1
 80122fa:	607a      	str	r2, [r7, #4]
 80122fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80122fe:	230a      	movs	r3, #10
 8012300:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012302:	230a      	movs	r3, #10
 8012304:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012306:	230a      	movs	r3, #10
 8012308:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801230a:	2300      	movs	r3, #0
 801230c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801230e:	230a      	movs	r3, #10
 8012310:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	83bb      	strh	r3, [r7, #28]
 8012316:	2300      	movs	r3, #0
 8012318:	837b      	strh	r3, [r7, #26]
 801231a:	2300      	movs	r3, #0
 801231c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801231e:	2300      	movs	r3, #0
 8012320:	843b      	strh	r3, [r7, #32]
 8012322:	e0ae      	b.n	8012482 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012328:	49a6      	ldr	r1, [pc, #664]	; (80125c4 <etharp_find_entry+0x2d4>)
 801232a:	4613      	mov	r3, r2
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	4413      	add	r3, r2
 8012330:	00db      	lsls	r3, r3, #3
 8012332:	440b      	add	r3, r1
 8012334:	3314      	adds	r3, #20
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801233a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801233e:	2b0a      	cmp	r3, #10
 8012340:	d105      	bne.n	801234e <etharp_find_entry+0x5e>
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d102      	bne.n	801234e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012348:	8c3b      	ldrh	r3, [r7, #32]
 801234a:	847b      	strh	r3, [r7, #34]	; 0x22
 801234c:	e095      	b.n	801247a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	2b00      	cmp	r3, #0
 8012352:	f000 8092 	beq.w	801247a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012356:	7dfb      	ldrb	r3, [r7, #23]
 8012358:	2b01      	cmp	r3, #1
 801235a:	d009      	beq.n	8012370 <etharp_find_entry+0x80>
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	2b01      	cmp	r3, #1
 8012360:	d806      	bhi.n	8012370 <etharp_find_entry+0x80>
 8012362:	4b99      	ldr	r3, [pc, #612]	; (80125c8 <etharp_find_entry+0x2d8>)
 8012364:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012368:	4998      	ldr	r1, [pc, #608]	; (80125cc <etharp_find_entry+0x2dc>)
 801236a:	4899      	ldr	r0, [pc, #612]	; (80125d0 <etharp_find_entry+0x2e0>)
 801236c:	f00a fb8c 	bl	801ca88 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d020      	beq.n	80123b8 <etharp_find_entry+0xc8>
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	6819      	ldr	r1, [r3, #0]
 801237a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801237e:	4891      	ldr	r0, [pc, #580]	; (80125c4 <etharp_find_entry+0x2d4>)
 8012380:	4613      	mov	r3, r2
 8012382:	005b      	lsls	r3, r3, #1
 8012384:	4413      	add	r3, r2
 8012386:	00db      	lsls	r3, r3, #3
 8012388:	4403      	add	r3, r0
 801238a:	3304      	adds	r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4299      	cmp	r1, r3
 8012390:	d112      	bne.n	80123b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d00c      	beq.n	80123b2 <etharp_find_entry+0xc2>
 8012398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801239c:	4989      	ldr	r1, [pc, #548]	; (80125c4 <etharp_find_entry+0x2d4>)
 801239e:	4613      	mov	r3, r2
 80123a0:	005b      	lsls	r3, r3, #1
 80123a2:	4413      	add	r3, r2
 80123a4:	00db      	lsls	r3, r3, #3
 80123a6:	440b      	add	r3, r1
 80123a8:	3308      	adds	r3, #8
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d102      	bne.n	80123b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80123b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123b6:	e100      	b.n	80125ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80123b8:	7dfb      	ldrb	r3, [r7, #23]
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d140      	bne.n	8012440 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80123be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123c2:	4980      	ldr	r1, [pc, #512]	; (80125c4 <etharp_find_entry+0x2d4>)
 80123c4:	4613      	mov	r3, r2
 80123c6:	005b      	lsls	r3, r3, #1
 80123c8:	4413      	add	r3, r2
 80123ca:	00db      	lsls	r3, r3, #3
 80123cc:	440b      	add	r3, r1
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d01a      	beq.n	801240a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80123d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123d8:	497a      	ldr	r1, [pc, #488]	; (80125c4 <etharp_find_entry+0x2d4>)
 80123da:	4613      	mov	r3, r2
 80123dc:	005b      	lsls	r3, r3, #1
 80123de:	4413      	add	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	440b      	add	r3, r1
 80123e4:	3312      	adds	r3, #18
 80123e6:	881b      	ldrh	r3, [r3, #0]
 80123e8:	8bba      	ldrh	r2, [r7, #28]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d845      	bhi.n	801247a <etharp_find_entry+0x18a>
            old_queue = i;
 80123ee:	8c3b      	ldrh	r3, [r7, #32]
 80123f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80123f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123f6:	4973      	ldr	r1, [pc, #460]	; (80125c4 <etharp_find_entry+0x2d4>)
 80123f8:	4613      	mov	r3, r2
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	4413      	add	r3, r2
 80123fe:	00db      	lsls	r3, r3, #3
 8012400:	440b      	add	r3, r1
 8012402:	3312      	adds	r3, #18
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	83bb      	strh	r3, [r7, #28]
 8012408:	e037      	b.n	801247a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801240a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801240e:	496d      	ldr	r1, [pc, #436]	; (80125c4 <etharp_find_entry+0x2d4>)
 8012410:	4613      	mov	r3, r2
 8012412:	005b      	lsls	r3, r3, #1
 8012414:	4413      	add	r3, r2
 8012416:	00db      	lsls	r3, r3, #3
 8012418:	440b      	add	r3, r1
 801241a:	3312      	adds	r3, #18
 801241c:	881b      	ldrh	r3, [r3, #0]
 801241e:	8b7a      	ldrh	r2, [r7, #26]
 8012420:	429a      	cmp	r2, r3
 8012422:	d82a      	bhi.n	801247a <etharp_find_entry+0x18a>
            old_pending = i;
 8012424:	8c3b      	ldrh	r3, [r7, #32]
 8012426:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801242c:	4965      	ldr	r1, [pc, #404]	; (80125c4 <etharp_find_entry+0x2d4>)
 801242e:	4613      	mov	r3, r2
 8012430:	005b      	lsls	r3, r3, #1
 8012432:	4413      	add	r3, r2
 8012434:	00db      	lsls	r3, r3, #3
 8012436:	440b      	add	r3, r1
 8012438:	3312      	adds	r3, #18
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	837b      	strh	r3, [r7, #26]
 801243e:	e01c      	b.n	801247a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012440:	7dfb      	ldrb	r3, [r7, #23]
 8012442:	2b01      	cmp	r3, #1
 8012444:	d919      	bls.n	801247a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801244a:	495e      	ldr	r1, [pc, #376]	; (80125c4 <etharp_find_entry+0x2d4>)
 801244c:	4613      	mov	r3, r2
 801244e:	005b      	lsls	r3, r3, #1
 8012450:	4413      	add	r3, r2
 8012452:	00db      	lsls	r3, r3, #3
 8012454:	440b      	add	r3, r1
 8012456:	3312      	adds	r3, #18
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	8b3a      	ldrh	r2, [r7, #24]
 801245c:	429a      	cmp	r2, r3
 801245e:	d80c      	bhi.n	801247a <etharp_find_entry+0x18a>
            old_stable = i;
 8012460:	8c3b      	ldrh	r3, [r7, #32]
 8012462:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012468:	4956      	ldr	r1, [pc, #344]	; (80125c4 <etharp_find_entry+0x2d4>)
 801246a:	4613      	mov	r3, r2
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	4413      	add	r3, r2
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	440b      	add	r3, r1
 8012474:	3312      	adds	r3, #18
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801247a:	8c3b      	ldrh	r3, [r7, #32]
 801247c:	3301      	adds	r3, #1
 801247e:	b29b      	uxth	r3, r3
 8012480:	843b      	strh	r3, [r7, #32]
 8012482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012486:	2b09      	cmp	r3, #9
 8012488:	f77f af4c 	ble.w	8012324 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801248c:	7afb      	ldrb	r3, [r7, #11]
 801248e:	f003 0302 	and.w	r3, r3, #2
 8012492:	2b00      	cmp	r3, #0
 8012494:	d108      	bne.n	80124a8 <etharp_find_entry+0x1b8>
 8012496:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801249a:	2b0a      	cmp	r3, #10
 801249c:	d107      	bne.n	80124ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801249e:	7afb      	ldrb	r3, [r7, #11]
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d102      	bne.n	80124ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80124a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124ac:	e085      	b.n	80125ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80124ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80124b2:	2b09      	cmp	r3, #9
 80124b4:	dc02      	bgt.n	80124bc <etharp_find_entry+0x1cc>
    i = empty;
 80124b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124b8:	843b      	strh	r3, [r7, #32]
 80124ba:	e039      	b.n	8012530 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80124bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80124c0:	2b09      	cmp	r3, #9
 80124c2:	dc14      	bgt.n	80124ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80124c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80124c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124cc:	493d      	ldr	r1, [pc, #244]	; (80125c4 <etharp_find_entry+0x2d4>)
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d018      	beq.n	8012510 <etharp_find_entry+0x220>
 80124de:	4b3a      	ldr	r3, [pc, #232]	; (80125c8 <etharp_find_entry+0x2d8>)
 80124e0:	f240 126d 	movw	r2, #365	; 0x16d
 80124e4:	493b      	ldr	r1, [pc, #236]	; (80125d4 <etharp_find_entry+0x2e4>)
 80124e6:	483a      	ldr	r0, [pc, #232]	; (80125d0 <etharp_find_entry+0x2e0>)
 80124e8:	f00a face 	bl	801ca88 <iprintf>
 80124ec:	e010      	b.n	8012510 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80124ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80124f2:	2b09      	cmp	r3, #9
 80124f4:	dc02      	bgt.n	80124fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80124f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124f8:	843b      	strh	r3, [r7, #32]
 80124fa:	e009      	b.n	8012510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80124fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012500:	2b09      	cmp	r3, #9
 8012502:	dc02      	bgt.n	801250a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012504:	8bfb      	ldrh	r3, [r7, #30]
 8012506:	843b      	strh	r3, [r7, #32]
 8012508:	e002      	b.n	8012510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801250e:	e054      	b.n	80125ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012510:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012514:	2b09      	cmp	r3, #9
 8012516:	dd06      	ble.n	8012526 <etharp_find_entry+0x236>
 8012518:	4b2b      	ldr	r3, [pc, #172]	; (80125c8 <etharp_find_entry+0x2d8>)
 801251a:	f240 127f 	movw	r2, #383	; 0x17f
 801251e:	492e      	ldr	r1, [pc, #184]	; (80125d8 <etharp_find_entry+0x2e8>)
 8012520:	482b      	ldr	r0, [pc, #172]	; (80125d0 <etharp_find_entry+0x2e0>)
 8012522:	f00a fab1 	bl	801ca88 <iprintf>
    etharp_free_entry(i);
 8012526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801252a:	4618      	mov	r0, r3
 801252c:	f7ff fe06 	bl	801213c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012534:	2b09      	cmp	r3, #9
 8012536:	dd06      	ble.n	8012546 <etharp_find_entry+0x256>
 8012538:	4b23      	ldr	r3, [pc, #140]	; (80125c8 <etharp_find_entry+0x2d8>)
 801253a:	f240 1283 	movw	r2, #387	; 0x183
 801253e:	4926      	ldr	r1, [pc, #152]	; (80125d8 <etharp_find_entry+0x2e8>)
 8012540:	4823      	ldr	r0, [pc, #140]	; (80125d0 <etharp_find_entry+0x2e0>)
 8012542:	f00a faa1 	bl	801ca88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801254a:	491e      	ldr	r1, [pc, #120]	; (80125c4 <etharp_find_entry+0x2d4>)
 801254c:	4613      	mov	r3, r2
 801254e:	005b      	lsls	r3, r3, #1
 8012550:	4413      	add	r3, r2
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	440b      	add	r3, r1
 8012556:	3314      	adds	r3, #20
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d006      	beq.n	801256c <etharp_find_entry+0x27c>
 801255e:	4b1a      	ldr	r3, [pc, #104]	; (80125c8 <etharp_find_entry+0x2d8>)
 8012560:	f240 1285 	movw	r2, #389	; 0x185
 8012564:	491d      	ldr	r1, [pc, #116]	; (80125dc <etharp_find_entry+0x2ec>)
 8012566:	481a      	ldr	r0, [pc, #104]	; (80125d0 <etharp_find_entry+0x2e0>)
 8012568:	f00a fa8e 	bl	801ca88 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00b      	beq.n	801258a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6819      	ldr	r1, [r3, #0]
 801257a:	4812      	ldr	r0, [pc, #72]	; (80125c4 <etharp_find_entry+0x2d4>)
 801257c:	4613      	mov	r3, r2
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	4413      	add	r3, r2
 8012582:	00db      	lsls	r3, r3, #3
 8012584:	4403      	add	r3, r0
 8012586:	3304      	adds	r3, #4
 8012588:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801258a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801258e:	490d      	ldr	r1, [pc, #52]	; (80125c4 <etharp_find_entry+0x2d4>)
 8012590:	4613      	mov	r3, r2
 8012592:	005b      	lsls	r3, r3, #1
 8012594:	4413      	add	r3, r2
 8012596:	00db      	lsls	r3, r3, #3
 8012598:	440b      	add	r3, r1
 801259a:	3312      	adds	r3, #18
 801259c:	2200      	movs	r2, #0
 801259e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80125a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80125a4:	4907      	ldr	r1, [pc, #28]	; (80125c4 <etharp_find_entry+0x2d4>)
 80125a6:	4613      	mov	r3, r2
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	4413      	add	r3, r2
 80125ac:	00db      	lsls	r3, r3, #3
 80125ae:	440b      	add	r3, r1
 80125b0:	3308      	adds	r3, #8
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80125b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3728      	adds	r7, #40	; 0x28
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	20007468 	.word	0x20007468
 80125c8:	0801dd44 	.word	0x0801dd44
 80125cc:	0801dda8 	.word	0x0801dda8
 80125d0:	0801dde8 	.word	0x0801dde8
 80125d4:	0801de10 	.word	0x0801de10
 80125d8:	0801de28 	.word	0x0801de28
 80125dc:	0801de3c 	.word	0x0801de3c

080125e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b088      	sub	sp, #32
 80125e4:	af02      	add	r7, sp, #8
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
 80125ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125f4:	2b06      	cmp	r3, #6
 80125f6:	d006      	beq.n	8012606 <etharp_update_arp_entry+0x26>
 80125f8:	4b48      	ldr	r3, [pc, #288]	; (801271c <etharp_update_arp_entry+0x13c>)
 80125fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80125fe:	4948      	ldr	r1, [pc, #288]	; (8012720 <etharp_update_arp_entry+0x140>)
 8012600:	4848      	ldr	r0, [pc, #288]	; (8012724 <etharp_update_arp_entry+0x144>)
 8012602:	f00a fa41 	bl	801ca88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d012      	beq.n	8012632 <etharp_update_arp_entry+0x52>
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00e      	beq.n	8012632 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	68f9      	ldr	r1, [r7, #12]
 801261a:	4618      	mov	r0, r3
 801261c:	f001 faee 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 8012620:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012622:	2b00      	cmp	r3, #0
 8012624:	d105      	bne.n	8012632 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801262e:	2be0      	cmp	r3, #224	; 0xe0
 8012630:	d102      	bne.n	8012638 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012632:	f06f 030f 	mvn.w	r3, #15
 8012636:	e06c      	b.n	8012712 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012638:	78fb      	ldrb	r3, [r7, #3]
 801263a:	68fa      	ldr	r2, [r7, #12]
 801263c:	4619      	mov	r1, r3
 801263e:	68b8      	ldr	r0, [r7, #8]
 8012640:	f7ff fe56 	bl	80122f0 <etharp_find_entry>
 8012644:	4603      	mov	r3, r0
 8012646:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801264c:	2b00      	cmp	r3, #0
 801264e:	da02      	bge.n	8012656 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012650:	8afb      	ldrh	r3, [r7, #22]
 8012652:	b25b      	sxtb	r3, r3
 8012654:	e05d      	b.n	8012712 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801265a:	4933      	ldr	r1, [pc, #204]	; (8012728 <etharp_update_arp_entry+0x148>)
 801265c:	4613      	mov	r3, r2
 801265e:	005b      	lsls	r3, r3, #1
 8012660:	4413      	add	r3, r2
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	440b      	add	r3, r1
 8012666:	3314      	adds	r3, #20
 8012668:	2202      	movs	r2, #2
 801266a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801266c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012670:	492d      	ldr	r1, [pc, #180]	; (8012728 <etharp_update_arp_entry+0x148>)
 8012672:	4613      	mov	r3, r2
 8012674:	005b      	lsls	r3, r3, #1
 8012676:	4413      	add	r3, r2
 8012678:	00db      	lsls	r3, r3, #3
 801267a:	440b      	add	r3, r1
 801267c:	3308      	adds	r3, #8
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012686:	4613      	mov	r3, r2
 8012688:	005b      	lsls	r3, r3, #1
 801268a:	4413      	add	r3, r2
 801268c:	00db      	lsls	r3, r3, #3
 801268e:	3308      	adds	r3, #8
 8012690:	4a25      	ldr	r2, [pc, #148]	; (8012728 <etharp_update_arp_entry+0x148>)
 8012692:	4413      	add	r3, r2
 8012694:	3304      	adds	r3, #4
 8012696:	2206      	movs	r2, #6
 8012698:	6879      	ldr	r1, [r7, #4]
 801269a:	4618      	mov	r0, r3
 801269c:	f00a f9e1 	bl	801ca62 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80126a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126a4:	4920      	ldr	r1, [pc, #128]	; (8012728 <etharp_update_arp_entry+0x148>)
 80126a6:	4613      	mov	r3, r2
 80126a8:	005b      	lsls	r3, r3, #1
 80126aa:	4413      	add	r3, r2
 80126ac:	00db      	lsls	r3, r3, #3
 80126ae:	440b      	add	r3, r1
 80126b0:	3312      	adds	r3, #18
 80126b2:	2200      	movs	r2, #0
 80126b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80126b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126ba:	491b      	ldr	r1, [pc, #108]	; (8012728 <etharp_update_arp_entry+0x148>)
 80126bc:	4613      	mov	r3, r2
 80126be:	005b      	lsls	r3, r3, #1
 80126c0:	4413      	add	r3, r2
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	440b      	add	r3, r1
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d021      	beq.n	8012710 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80126cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126d0:	4915      	ldr	r1, [pc, #84]	; (8012728 <etharp_update_arp_entry+0x148>)
 80126d2:	4613      	mov	r3, r2
 80126d4:	005b      	lsls	r3, r3, #1
 80126d6:	4413      	add	r3, r2
 80126d8:	00db      	lsls	r3, r3, #3
 80126da:	440b      	add	r3, r1
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80126e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80126e4:	4910      	ldr	r1, [pc, #64]	; (8012728 <etharp_update_arp_entry+0x148>)
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	2200      	movs	r2, #0
 80126f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80126fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6939      	ldr	r1, [r7, #16]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 fcf7 	bl	80130f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801270a:	6938      	ldr	r0, [r7, #16]
 801270c:	f003 fcac 	bl	8016068 <pbuf_free>
  }
  return ERR_OK;
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	3718      	adds	r7, #24
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	0801dd44 	.word	0x0801dd44
 8012720:	0801de68 	.word	0x0801de68
 8012724:	0801dde8 	.word	0x0801dde8
 8012728:	20007468 	.word	0x20007468

0801272c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012734:	2300      	movs	r3, #0
 8012736:	60fb      	str	r3, [r7, #12]
 8012738:	e01e      	b.n	8012778 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801273a:	4913      	ldr	r1, [pc, #76]	; (8012788 <etharp_cleanup_netif+0x5c>)
 801273c:	68fa      	ldr	r2, [r7, #12]
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	3314      	adds	r3, #20
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801274e:	7afb      	ldrb	r3, [r7, #11]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00e      	beq.n	8012772 <etharp_cleanup_netif+0x46>
 8012754:	490c      	ldr	r1, [pc, #48]	; (8012788 <etharp_cleanup_netif+0x5c>)
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	4613      	mov	r3, r2
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	4413      	add	r3, r2
 801275e:	00db      	lsls	r3, r3, #3
 8012760:	440b      	add	r3, r1
 8012762:	3308      	adds	r3, #8
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	429a      	cmp	r2, r3
 801276a:	d102      	bne.n	8012772 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f7ff fce5 	bl	801213c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3301      	adds	r3, #1
 8012776:	60fb      	str	r3, [r7, #12]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2b09      	cmp	r3, #9
 801277c:	dddd      	ble.n	801273a <etharp_cleanup_netif+0xe>
    }
  }
}
 801277e:	bf00      	nop
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	20007468 	.word	0x20007468

0801278c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801278c:	b5b0      	push	{r4, r5, r7, lr}
 801278e:	b08a      	sub	sp, #40	; 0x28
 8012790:	af04      	add	r7, sp, #16
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d107      	bne.n	80127ac <etharp_input+0x20>
 801279c:	4b3f      	ldr	r3, [pc, #252]	; (801289c <etharp_input+0x110>)
 801279e:	f240 228a 	movw	r2, #650	; 0x28a
 80127a2:	493f      	ldr	r1, [pc, #252]	; (80128a0 <etharp_input+0x114>)
 80127a4:	483f      	ldr	r0, [pc, #252]	; (80128a4 <etharp_input+0x118>)
 80127a6:	f00a f96f 	bl	801ca88 <iprintf>
 80127aa:	e074      	b.n	8012896 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127bc:	d10c      	bne.n	80127d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80127c2:	2b06      	cmp	r3, #6
 80127c4:	d108      	bne.n	80127d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80127ca:	2b04      	cmp	r3, #4
 80127cc:	d104      	bne.n	80127d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	885b      	ldrh	r3, [r3, #2]
 80127d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80127d4:	2b08      	cmp	r3, #8
 80127d6:	d003      	beq.n	80127e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f003 fc45 	bl	8016068 <pbuf_free>
    return;
 80127de:	e05a      	b.n	8012896 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	330e      	adds	r3, #14
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	3318      	adds	r3, #24
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	3304      	adds	r3, #4
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <etharp_input+0x74>
    for_us = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	75fb      	strb	r3, [r7, #23]
 80127fe:	e009      	b.n	8012814 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012800:	68ba      	ldr	r2, [r7, #8]
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	3304      	adds	r3, #4
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	429a      	cmp	r2, r3
 801280a:	bf0c      	ite	eq
 801280c:	2301      	moveq	r3, #1
 801280e:	2300      	movne	r3, #0
 8012810:	b2db      	uxtb	r3, r3
 8012812:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	f103 0208 	add.w	r2, r3, #8
 801281a:	7dfb      	ldrb	r3, [r7, #23]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <etharp_input+0x98>
 8012820:	2301      	movs	r3, #1
 8012822:	e000      	b.n	8012826 <etharp_input+0x9a>
 8012824:	2302      	movs	r3, #2
 8012826:	f107 010c 	add.w	r1, r7, #12
 801282a:	6838      	ldr	r0, [r7, #0]
 801282c:	f7ff fed8 	bl	80125e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	88db      	ldrh	r3, [r3, #6]
 8012834:	b29b      	uxth	r3, r3
 8012836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801283a:	d003      	beq.n	8012844 <etharp_input+0xb8>
 801283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012840:	d01e      	beq.n	8012880 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012842:	e025      	b.n	8012890 <etharp_input+0x104>
      if (for_us) {
 8012844:	7dfb      	ldrb	r3, [r7, #23]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d021      	beq.n	801288e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012860:	693a      	ldr	r2, [r7, #16]
 8012862:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012864:	2102      	movs	r1, #2
 8012866:	9103      	str	r1, [sp, #12]
 8012868:	f107 010c 	add.w	r1, r7, #12
 801286c:	9102      	str	r1, [sp, #8]
 801286e:	9201      	str	r2, [sp, #4]
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	462b      	mov	r3, r5
 8012874:	4622      	mov	r2, r4
 8012876:	4601      	mov	r1, r0
 8012878:	6838      	ldr	r0, [r7, #0]
 801287a:	f000 faef 	bl	8012e5c <etharp_raw>
      break;
 801287e:	e006      	b.n	801288e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012880:	f107 030c 	add.w	r3, r7, #12
 8012884:	4619      	mov	r1, r3
 8012886:	6838      	ldr	r0, [r7, #0]
 8012888:	f7fe f9fe 	bl	8010c88 <dhcp_arp_reply>
      break;
 801288c:	e000      	b.n	8012890 <etharp_input+0x104>
      break;
 801288e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f003 fbe9 	bl	8016068 <pbuf_free>
}
 8012896:	3718      	adds	r7, #24
 8012898:	46bd      	mov	sp, r7
 801289a:	bdb0      	pop	{r4, r5, r7, pc}
 801289c:	0801dd44 	.word	0x0801dd44
 80128a0:	0801dec0 	.word	0x0801dec0
 80128a4:	0801dde8 	.word	0x0801dde8

080128a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b086      	sub	sp, #24
 80128ac:	af02      	add	r7, sp, #8
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	4613      	mov	r3, r2
 80128b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80128b6:	79fa      	ldrb	r2, [r7, #7]
 80128b8:	4944      	ldr	r1, [pc, #272]	; (80129cc <etharp_output_to_arp_index+0x124>)
 80128ba:	4613      	mov	r3, r2
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	4413      	add	r3, r2
 80128c0:	00db      	lsls	r3, r3, #3
 80128c2:	440b      	add	r3, r1
 80128c4:	3314      	adds	r3, #20
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d806      	bhi.n	80128da <etharp_output_to_arp_index+0x32>
 80128cc:	4b40      	ldr	r3, [pc, #256]	; (80129d0 <etharp_output_to_arp_index+0x128>)
 80128ce:	f240 22ef 	movw	r2, #751	; 0x2ef
 80128d2:	4940      	ldr	r1, [pc, #256]	; (80129d4 <etharp_output_to_arp_index+0x12c>)
 80128d4:	4840      	ldr	r0, [pc, #256]	; (80129d8 <etharp_output_to_arp_index+0x130>)
 80128d6:	f00a f8d7 	bl	801ca88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80128da:	79fa      	ldrb	r2, [r7, #7]
 80128dc:	493b      	ldr	r1, [pc, #236]	; (80129cc <etharp_output_to_arp_index+0x124>)
 80128de:	4613      	mov	r3, r2
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	4413      	add	r3, r2
 80128e4:	00db      	lsls	r3, r3, #3
 80128e6:	440b      	add	r3, r1
 80128e8:	3314      	adds	r3, #20
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	d153      	bne.n	8012998 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80128f0:	79fa      	ldrb	r2, [r7, #7]
 80128f2:	4936      	ldr	r1, [pc, #216]	; (80129cc <etharp_output_to_arp_index+0x124>)
 80128f4:	4613      	mov	r3, r2
 80128f6:	005b      	lsls	r3, r3, #1
 80128f8:	4413      	add	r3, r2
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	440b      	add	r3, r1
 80128fe:	3312      	adds	r3, #18
 8012900:	881b      	ldrh	r3, [r3, #0]
 8012902:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012906:	d919      	bls.n	801293c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012908:	79fa      	ldrb	r2, [r7, #7]
 801290a:	4613      	mov	r3, r2
 801290c:	005b      	lsls	r3, r3, #1
 801290e:	4413      	add	r3, r2
 8012910:	00db      	lsls	r3, r3, #3
 8012912:	4a2e      	ldr	r2, [pc, #184]	; (80129cc <etharp_output_to_arp_index+0x124>)
 8012914:	4413      	add	r3, r2
 8012916:	3304      	adds	r3, #4
 8012918:	4619      	mov	r1, r3
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f000 fb4c 	bl	8012fb8 <etharp_request>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d138      	bne.n	8012998 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012926:	79fa      	ldrb	r2, [r7, #7]
 8012928:	4928      	ldr	r1, [pc, #160]	; (80129cc <etharp_output_to_arp_index+0x124>)
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	440b      	add	r3, r1
 8012934:	3314      	adds	r3, #20
 8012936:	2203      	movs	r2, #3
 8012938:	701a      	strb	r2, [r3, #0]
 801293a:	e02d      	b.n	8012998 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801293c:	79fa      	ldrb	r2, [r7, #7]
 801293e:	4923      	ldr	r1, [pc, #140]	; (80129cc <etharp_output_to_arp_index+0x124>)
 8012940:	4613      	mov	r3, r2
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	4413      	add	r3, r2
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	440b      	add	r3, r1
 801294a:	3312      	adds	r3, #18
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012952:	d321      	bcc.n	8012998 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012954:	79fa      	ldrb	r2, [r7, #7]
 8012956:	4613      	mov	r3, r2
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	4413      	add	r3, r2
 801295c:	00db      	lsls	r3, r3, #3
 801295e:	4a1b      	ldr	r2, [pc, #108]	; (80129cc <etharp_output_to_arp_index+0x124>)
 8012960:	4413      	add	r3, r2
 8012962:	1d19      	adds	r1, r3, #4
 8012964:	79fa      	ldrb	r2, [r7, #7]
 8012966:	4613      	mov	r3, r2
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	4413      	add	r3, r2
 801296c:	00db      	lsls	r3, r3, #3
 801296e:	3308      	adds	r3, #8
 8012970:	4a16      	ldr	r2, [pc, #88]	; (80129cc <etharp_output_to_arp_index+0x124>)
 8012972:	4413      	add	r3, r2
 8012974:	3304      	adds	r3, #4
 8012976:	461a      	mov	r2, r3
 8012978:	68f8      	ldr	r0, [r7, #12]
 801297a:	f000 fafb 	bl	8012f74 <etharp_request_dst>
 801297e:	4603      	mov	r3, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	d109      	bne.n	8012998 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012984:	79fa      	ldrb	r2, [r7, #7]
 8012986:	4911      	ldr	r1, [pc, #68]	; (80129cc <etharp_output_to_arp_index+0x124>)
 8012988:	4613      	mov	r3, r2
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	4413      	add	r3, r2
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	440b      	add	r3, r1
 8012992:	3314      	adds	r3, #20
 8012994:	2203      	movs	r2, #3
 8012996:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801299e:	79fa      	ldrb	r2, [r7, #7]
 80129a0:	4613      	mov	r3, r2
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	4413      	add	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	3308      	adds	r3, #8
 80129aa:	4a08      	ldr	r2, [pc, #32]	; (80129cc <etharp_output_to_arp_index+0x124>)
 80129ac:	4413      	add	r3, r2
 80129ae:	1d1a      	adds	r2, r3, #4
 80129b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	4613      	mov	r3, r2
 80129b8:	460a      	mov	r2, r1
 80129ba:	68b9      	ldr	r1, [r7, #8]
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f000 fb9b 	bl	80130f8 <ethernet_output>
 80129c2:	4603      	mov	r3, r0
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20007468 	.word	0x20007468
 80129d0:	0801dd44 	.word	0x0801dd44
 80129d4:	0801dee0 	.word	0x0801dee0
 80129d8:	0801dde8 	.word	0x0801dde8

080129dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b08a      	sub	sp, #40	; 0x28
 80129e0:	af02      	add	r7, sp, #8
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d106      	bne.n	8012a00 <etharp_output+0x24>
 80129f2:	4b73      	ldr	r3, [pc, #460]	; (8012bc0 <etharp_output+0x1e4>)
 80129f4:	f240 321e 	movw	r2, #798	; 0x31e
 80129f8:	4972      	ldr	r1, [pc, #456]	; (8012bc4 <etharp_output+0x1e8>)
 80129fa:	4873      	ldr	r0, [pc, #460]	; (8012bc8 <etharp_output+0x1ec>)
 80129fc:	f00a f844 	bl	801ca88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d106      	bne.n	8012a14 <etharp_output+0x38>
 8012a06:	4b6e      	ldr	r3, [pc, #440]	; (8012bc0 <etharp_output+0x1e4>)
 8012a08:	f240 321f 	movw	r2, #799	; 0x31f
 8012a0c:	496f      	ldr	r1, [pc, #444]	; (8012bcc <etharp_output+0x1f0>)
 8012a0e:	486e      	ldr	r0, [pc, #440]	; (8012bc8 <etharp_output+0x1ec>)
 8012a10:	f00a f83a 	bl	801ca88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d106      	bne.n	8012a28 <etharp_output+0x4c>
 8012a1a:	4b69      	ldr	r3, [pc, #420]	; (8012bc0 <etharp_output+0x1e4>)
 8012a1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012a20:	496b      	ldr	r1, [pc, #428]	; (8012bd0 <etharp_output+0x1f4>)
 8012a22:	4869      	ldr	r0, [pc, #420]	; (8012bc8 <etharp_output+0x1ec>)
 8012a24:	f00a f830 	bl	801ca88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68f9      	ldr	r1, [r7, #12]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f001 f8e4 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d002      	beq.n	8012a40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012a3a:	4b66      	ldr	r3, [pc, #408]	; (8012bd4 <etharp_output+0x1f8>)
 8012a3c:	61fb      	str	r3, [r7, #28]
 8012a3e:	e0af      	b.n	8012ba0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a48:	2be0      	cmp	r3, #224	; 0xe0
 8012a4a:	d118      	bne.n	8012a7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012a50:	2300      	movs	r3, #0
 8012a52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012a54:	235e      	movs	r3, #94	; 0x5e
 8012a56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	3302      	adds	r3, #2
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3303      	adds	r3, #3
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012a76:	f107 0310 	add.w	r3, r7, #16
 8012a7a:	61fb      	str	r3, [r7, #28]
 8012a7c:	e090      	b.n	8012ba0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3304      	adds	r3, #4
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	405a      	eors	r2, r3
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	3308      	adds	r3, #8
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4013      	ands	r3, r2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d012      	beq.n	8012abc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d00b      	beq.n	8012abc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	330c      	adds	r3, #12
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d003      	beq.n	8012ab6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	330c      	adds	r3, #12
 8012ab2:	61bb      	str	r3, [r7, #24]
 8012ab4:	e002      	b.n	8012abc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012ab6:	f06f 0303 	mvn.w	r3, #3
 8012aba:	e07d      	b.n	8012bb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012abc:	4b46      	ldr	r3, [pc, #280]	; (8012bd8 <etharp_output+0x1fc>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	4a46      	ldr	r2, [pc, #280]	; (8012bdc <etharp_output+0x200>)
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	005b      	lsls	r3, r3, #1
 8012ac8:	440b      	add	r3, r1
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	4413      	add	r3, r2
 8012ace:	3314      	adds	r3, #20
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d925      	bls.n	8012b22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012ad6:	4b40      	ldr	r3, [pc, #256]	; (8012bd8 <etharp_output+0x1fc>)
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	4619      	mov	r1, r3
 8012adc:	4a3f      	ldr	r2, [pc, #252]	; (8012bdc <etharp_output+0x200>)
 8012ade:	460b      	mov	r3, r1
 8012ae0:	005b      	lsls	r3, r3, #1
 8012ae2:	440b      	add	r3, r1
 8012ae4:	00db      	lsls	r3, r3, #3
 8012ae6:	4413      	add	r3, r2
 8012ae8:	3308      	adds	r3, #8
 8012aea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012aec:	68fa      	ldr	r2, [r7, #12]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d117      	bne.n	8012b22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	4b38      	ldr	r3, [pc, #224]	; (8012bd8 <etharp_output+0x1fc>)
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	4618      	mov	r0, r3
 8012afc:	4937      	ldr	r1, [pc, #220]	; (8012bdc <etharp_output+0x200>)
 8012afe:	4603      	mov	r3, r0
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	4403      	add	r3, r0
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	440b      	add	r3, r1
 8012b08:	3304      	adds	r3, #4
 8012b0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d108      	bne.n	8012b22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012b10:	4b31      	ldr	r3, [pc, #196]	; (8012bd8 <etharp_output+0x1fc>)
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	461a      	mov	r2, r3
 8012b16:	68b9      	ldr	r1, [r7, #8]
 8012b18:	68f8      	ldr	r0, [r7, #12]
 8012b1a:	f7ff fec5 	bl	80128a8 <etharp_output_to_arp_index>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	e04a      	b.n	8012bb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012b22:	2300      	movs	r3, #0
 8012b24:	75fb      	strb	r3, [r7, #23]
 8012b26:	e031      	b.n	8012b8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012b28:	7dfa      	ldrb	r2, [r7, #23]
 8012b2a:	492c      	ldr	r1, [pc, #176]	; (8012bdc <etharp_output+0x200>)
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	4413      	add	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	440b      	add	r3, r1
 8012b36:	3314      	adds	r3, #20
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d923      	bls.n	8012b86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012b3e:	7dfa      	ldrb	r2, [r7, #23]
 8012b40:	4926      	ldr	r1, [pc, #152]	; (8012bdc <etharp_output+0x200>)
 8012b42:	4613      	mov	r3, r2
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	4413      	add	r3, r2
 8012b48:	00db      	lsls	r3, r3, #3
 8012b4a:	440b      	add	r3, r1
 8012b4c:	3308      	adds	r3, #8
 8012b4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d117      	bne.n	8012b86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012b56:	69bb      	ldr	r3, [r7, #24]
 8012b58:	6819      	ldr	r1, [r3, #0]
 8012b5a:	7dfa      	ldrb	r2, [r7, #23]
 8012b5c:	481f      	ldr	r0, [pc, #124]	; (8012bdc <etharp_output+0x200>)
 8012b5e:	4613      	mov	r3, r2
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	4413      	add	r3, r2
 8012b64:	00db      	lsls	r3, r3, #3
 8012b66:	4403      	add	r3, r0
 8012b68:	3304      	adds	r3, #4
 8012b6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012b6c:	4299      	cmp	r1, r3
 8012b6e:	d10a      	bne.n	8012b86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012b70:	4a19      	ldr	r2, [pc, #100]	; (8012bd8 <etharp_output+0x1fc>)
 8012b72:	7dfb      	ldrb	r3, [r7, #23]
 8012b74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012b76:	7dfb      	ldrb	r3, [r7, #23]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	68b9      	ldr	r1, [r7, #8]
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f7ff fe93 	bl	80128a8 <etharp_output_to_arp_index>
 8012b82:	4603      	mov	r3, r0
 8012b84:	e018      	b.n	8012bb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012b86:	7dfb      	ldrb	r3, [r7, #23]
 8012b88:	3301      	adds	r3, #1
 8012b8a:	75fb      	strb	r3, [r7, #23]
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
 8012b8e:	2b09      	cmp	r3, #9
 8012b90:	d9ca      	bls.n	8012b28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	69b9      	ldr	r1, [r7, #24]
 8012b96:	68f8      	ldr	r0, [r7, #12]
 8012b98:	f000 f822 	bl	8012be0 <etharp_query>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	e00b      	b.n	8012bb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	68b9      	ldr	r1, [r7, #8]
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f000 faa1 	bl	80130f8 <ethernet_output>
 8012bb6:	4603      	mov	r3, r0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3720      	adds	r7, #32
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	0801dd44 	.word	0x0801dd44
 8012bc4:	0801dec0 	.word	0x0801dec0
 8012bc8:	0801dde8 	.word	0x0801dde8
 8012bcc:	0801df10 	.word	0x0801df10
 8012bd0:	0801deb0 	.word	0x0801deb0
 8012bd4:	08020ac0 	.word	0x08020ac0
 8012bd8:	20007558 	.word	0x20007558
 8012bdc:	20007468 	.word	0x20007468

08012be0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b08c      	sub	sp, #48	; 0x30
 8012be4:	af02      	add	r7, sp, #8
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	332a      	adds	r3, #42	; 0x2a
 8012bf0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012bf2:	23ff      	movs	r3, #255	; 0xff
 8012bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	68f9      	ldr	r1, [r7, #12]
 8012c02:	4618      	mov	r0, r3
 8012c04:	f000 fffa 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d10c      	bne.n	8012c28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c16:	2be0      	cmp	r3, #224	; 0xe0
 8012c18:	d006      	beq.n	8012c28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d003      	beq.n	8012c28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d102      	bne.n	8012c2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c28:	f06f 030f 	mvn.w	r3, #15
 8012c2c:	e102      	b.n	8012e34 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	2101      	movs	r1, #1
 8012c32:	68b8      	ldr	r0, [r7, #8]
 8012c34:	f7ff fb5c 	bl	80122f0 <etharp_find_entry>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	da02      	bge.n	8012c4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012c44:	8a7b      	ldrh	r3, [r7, #18]
 8012c46:	b25b      	sxtb	r3, r3
 8012c48:	e0f4      	b.n	8012e34 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012c4a:	8a7b      	ldrh	r3, [r7, #18]
 8012c4c:	2b7e      	cmp	r3, #126	; 0x7e
 8012c4e:	d906      	bls.n	8012c5e <etharp_query+0x7e>
 8012c50:	4b7a      	ldr	r3, [pc, #488]	; (8012e3c <etharp_query+0x25c>)
 8012c52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012c56:	497a      	ldr	r1, [pc, #488]	; (8012e40 <etharp_query+0x260>)
 8012c58:	487a      	ldr	r0, [pc, #488]	; (8012e44 <etharp_query+0x264>)
 8012c5a:	f009 ff15 	bl	801ca88 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012c5e:	8a7b      	ldrh	r3, [r7, #18]
 8012c60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012c62:	7c7a      	ldrb	r2, [r7, #17]
 8012c64:	4978      	ldr	r1, [pc, #480]	; (8012e48 <etharp_query+0x268>)
 8012c66:	4613      	mov	r3, r2
 8012c68:	005b      	lsls	r3, r3, #1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	00db      	lsls	r3, r3, #3
 8012c6e:	440b      	add	r3, r1
 8012c70:	3314      	adds	r3, #20
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d115      	bne.n	8012ca4 <etharp_query+0xc4>
    is_new_entry = 1;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012c7c:	7c7a      	ldrb	r2, [r7, #17]
 8012c7e:	4972      	ldr	r1, [pc, #456]	; (8012e48 <etharp_query+0x268>)
 8012c80:	4613      	mov	r3, r2
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	4413      	add	r3, r2
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	440b      	add	r3, r1
 8012c8a:	3314      	adds	r3, #20
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012c90:	7c7a      	ldrb	r2, [r7, #17]
 8012c92:	496d      	ldr	r1, [pc, #436]	; (8012e48 <etharp_query+0x268>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	440b      	add	r3, r1
 8012c9e:	3308      	adds	r3, #8
 8012ca0:	68fa      	ldr	r2, [r7, #12]
 8012ca2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012ca4:	7c7a      	ldrb	r2, [r7, #17]
 8012ca6:	4968      	ldr	r1, [pc, #416]	; (8012e48 <etharp_query+0x268>)
 8012ca8:	4613      	mov	r3, r2
 8012caa:	005b      	lsls	r3, r3, #1
 8012cac:	4413      	add	r3, r2
 8012cae:	00db      	lsls	r3, r3, #3
 8012cb0:	440b      	add	r3, r1
 8012cb2:	3314      	adds	r3, #20
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d011      	beq.n	8012cde <etharp_query+0xfe>
 8012cba:	7c7a      	ldrb	r2, [r7, #17]
 8012cbc:	4962      	ldr	r1, [pc, #392]	; (8012e48 <etharp_query+0x268>)
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	005b      	lsls	r3, r3, #1
 8012cc2:	4413      	add	r3, r2
 8012cc4:	00db      	lsls	r3, r3, #3
 8012cc6:	440b      	add	r3, r1
 8012cc8:	3314      	adds	r3, #20
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d806      	bhi.n	8012cde <etharp_query+0xfe>
 8012cd0:	4b5a      	ldr	r3, [pc, #360]	; (8012e3c <etharp_query+0x25c>)
 8012cd2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012cd6:	495d      	ldr	r1, [pc, #372]	; (8012e4c <etharp_query+0x26c>)
 8012cd8:	485a      	ldr	r0, [pc, #360]	; (8012e44 <etharp_query+0x264>)
 8012cda:	f009 fed5 	bl	801ca88 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012cde:	6a3b      	ldr	r3, [r7, #32]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d102      	bne.n	8012cea <etharp_query+0x10a>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d10c      	bne.n	8012d04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012cea:	68b9      	ldr	r1, [r7, #8]
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	f000 f963 	bl	8012fb8 <etharp_request>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d102      	bne.n	8012d04 <etharp_query+0x124>
      return result;
 8012cfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d02:	e097      	b.n	8012e34 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d106      	bne.n	8012d18 <etharp_query+0x138>
 8012d0a:	4b4c      	ldr	r3, [pc, #304]	; (8012e3c <etharp_query+0x25c>)
 8012d0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012d10:	494f      	ldr	r1, [pc, #316]	; (8012e50 <etharp_query+0x270>)
 8012d12:	484c      	ldr	r0, [pc, #304]	; (8012e44 <etharp_query+0x264>)
 8012d14:	f009 feb8 	bl	801ca88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012d18:	7c7a      	ldrb	r2, [r7, #17]
 8012d1a:	494b      	ldr	r1, [pc, #300]	; (8012e48 <etharp_query+0x268>)
 8012d1c:	4613      	mov	r3, r2
 8012d1e:	005b      	lsls	r3, r3, #1
 8012d20:	4413      	add	r3, r2
 8012d22:	00db      	lsls	r3, r3, #3
 8012d24:	440b      	add	r3, r1
 8012d26:	3314      	adds	r3, #20
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d918      	bls.n	8012d60 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012d2e:	4a49      	ldr	r2, [pc, #292]	; (8012e54 <etharp_query+0x274>)
 8012d30:	7c7b      	ldrb	r3, [r7, #17]
 8012d32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012d34:	7c7a      	ldrb	r2, [r7, #17]
 8012d36:	4613      	mov	r3, r2
 8012d38:	005b      	lsls	r3, r3, #1
 8012d3a:	4413      	add	r3, r2
 8012d3c:	00db      	lsls	r3, r3, #3
 8012d3e:	3308      	adds	r3, #8
 8012d40:	4a41      	ldr	r2, [pc, #260]	; (8012e48 <etharp_query+0x268>)
 8012d42:	4413      	add	r3, r2
 8012d44:	1d1a      	adds	r2, r3, #4
 8012d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	4613      	mov	r3, r2
 8012d4e:	697a      	ldr	r2, [r7, #20]
 8012d50:	6879      	ldr	r1, [r7, #4]
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f000 f9d0 	bl	80130f8 <ethernet_output>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d5e:	e067      	b.n	8012e30 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012d60:	7c7a      	ldrb	r2, [r7, #17]
 8012d62:	4939      	ldr	r1, [pc, #228]	; (8012e48 <etharp_query+0x268>)
 8012d64:	4613      	mov	r3, r2
 8012d66:	005b      	lsls	r3, r3, #1
 8012d68:	4413      	add	r3, r2
 8012d6a:	00db      	lsls	r3, r3, #3
 8012d6c:	440b      	add	r3, r1
 8012d6e:	3314      	adds	r3, #20
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	d15c      	bne.n	8012e30 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d7e:	e01c      	b.n	8012dba <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	895a      	ldrh	r2, [r3, #10]
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	891b      	ldrh	r3, [r3, #8]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d10a      	bne.n	8012da2 <etharp_query+0x1c2>
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d006      	beq.n	8012da2 <etharp_query+0x1c2>
 8012d94:	4b29      	ldr	r3, [pc, #164]	; (8012e3c <etharp_query+0x25c>)
 8012d96:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012d9a:	492f      	ldr	r1, [pc, #188]	; (8012e58 <etharp_query+0x278>)
 8012d9c:	4829      	ldr	r0, [pc, #164]	; (8012e44 <etharp_query+0x264>)
 8012d9e:	f009 fe73 	bl	801ca88 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	7b1b      	ldrb	r3, [r3, #12]
 8012da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d002      	beq.n	8012db4 <etharp_query+0x1d4>
        copy_needed = 1;
 8012dae:	2301      	movs	r3, #1
 8012db0:	61bb      	str	r3, [r7, #24]
        break;
 8012db2:	e005      	b.n	8012dc0 <etharp_query+0x1e0>
      }
      p = p->next;
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d1df      	bne.n	8012d80 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d007      	beq.n	8012dd6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012dcc:	200e      	movs	r0, #14
 8012dce:	f003 fbc3 	bl	8016558 <pbuf_clone>
 8012dd2:	61f8      	str	r0, [r7, #28]
 8012dd4:	e004      	b.n	8012de0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012dda:	69f8      	ldr	r0, [r7, #28]
 8012ddc:	f003 f9ea 	bl	80161b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d021      	beq.n	8012e2a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012de6:	7c7a      	ldrb	r2, [r7, #17]
 8012de8:	4917      	ldr	r1, [pc, #92]	; (8012e48 <etharp_query+0x268>)
 8012dea:	4613      	mov	r3, r2
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	4413      	add	r3, r2
 8012df0:	00db      	lsls	r3, r3, #3
 8012df2:	440b      	add	r3, r1
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d00a      	beq.n	8012e10 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012dfa:	7c7a      	ldrb	r2, [r7, #17]
 8012dfc:	4912      	ldr	r1, [pc, #72]	; (8012e48 <etharp_query+0x268>)
 8012dfe:	4613      	mov	r3, r2
 8012e00:	005b      	lsls	r3, r3, #1
 8012e02:	4413      	add	r3, r2
 8012e04:	00db      	lsls	r3, r3, #3
 8012e06:	440b      	add	r3, r1
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f003 f92c 	bl	8016068 <pbuf_free>
      }
      arp_table[i].q = p;
 8012e10:	7c7a      	ldrb	r2, [r7, #17]
 8012e12:	490d      	ldr	r1, [pc, #52]	; (8012e48 <etharp_query+0x268>)
 8012e14:	4613      	mov	r3, r2
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	4413      	add	r3, r2
 8012e1a:	00db      	lsls	r3, r3, #3
 8012e1c:	440b      	add	r3, r1
 8012e1e:	69fa      	ldr	r2, [r7, #28]
 8012e20:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012e22:	2300      	movs	r3, #0
 8012e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e28:	e002      	b.n	8012e30 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012e2a:	23ff      	movs	r3, #255	; 0xff
 8012e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3728      	adds	r7, #40	; 0x28
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	0801dd44 	.word	0x0801dd44
 8012e40:	0801df1c 	.word	0x0801df1c
 8012e44:	0801dde8 	.word	0x0801dde8
 8012e48:	20007468 	.word	0x20007468
 8012e4c:	0801df2c 	.word	0x0801df2c
 8012e50:	0801df10 	.word	0x0801df10
 8012e54:	20007558 	.word	0x20007558
 8012e58:	0801df54 	.word	0x0801df54

08012e5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b08a      	sub	sp, #40	; 0x28
 8012e60:	af02      	add	r7, sp, #8
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d106      	bne.n	8012e82 <etharp_raw+0x26>
 8012e74:	4b3a      	ldr	r3, [pc, #232]	; (8012f60 <etharp_raw+0x104>)
 8012e76:	f240 4257 	movw	r2, #1111	; 0x457
 8012e7a:	493a      	ldr	r1, [pc, #232]	; (8012f64 <etharp_raw+0x108>)
 8012e7c:	483a      	ldr	r0, [pc, #232]	; (8012f68 <etharp_raw+0x10c>)
 8012e7e:	f009 fe03 	bl	801ca88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012e82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e86:	211c      	movs	r1, #28
 8012e88:	200e      	movs	r0, #14
 8012e8a:	f002 fe0d 	bl	8015aa8 <pbuf_alloc>
 8012e8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d102      	bne.n	8012e9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e9a:	e05d      	b.n	8012f58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	895b      	ldrh	r3, [r3, #10]
 8012ea0:	2b1b      	cmp	r3, #27
 8012ea2:	d806      	bhi.n	8012eb2 <etharp_raw+0x56>
 8012ea4:	4b2e      	ldr	r3, [pc, #184]	; (8012f60 <etharp_raw+0x104>)
 8012ea6:	f240 4263 	movw	r2, #1123	; 0x463
 8012eaa:	4930      	ldr	r1, [pc, #192]	; (8012f6c <etharp_raw+0x110>)
 8012eac:	482e      	ldr	r0, [pc, #184]	; (8012f68 <etharp_raw+0x10c>)
 8012eae:	f009 fdeb 	bl	801ca88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012eb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fd fa6c 	bl	8010398 <lwip_htons>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ece:	2b06      	cmp	r3, #6
 8012ed0:	d006      	beq.n	8012ee0 <etharp_raw+0x84>
 8012ed2:	4b23      	ldr	r3, [pc, #140]	; (8012f60 <etharp_raw+0x104>)
 8012ed4:	f240 426a 	movw	r2, #1130	; 0x46a
 8012ed8:	4925      	ldr	r1, [pc, #148]	; (8012f70 <etharp_raw+0x114>)
 8012eda:	4823      	ldr	r0, [pc, #140]	; (8012f68 <etharp_raw+0x10c>)
 8012edc:	f009 fdd4 	bl	801ca88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	3308      	adds	r3, #8
 8012ee4:	2206      	movs	r2, #6
 8012ee6:	6839      	ldr	r1, [r7, #0]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f009 fdba 	bl	801ca62 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	3312      	adds	r3, #18
 8012ef2:	2206      	movs	r2, #6
 8012ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f009 fdb3 	bl	801ca62 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	330e      	adds	r3, #14
 8012f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f02:	6812      	ldr	r2, [r2, #0]
 8012f04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	3318      	adds	r3, #24
 8012f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f0c:	6812      	ldr	r2, [r2, #0]
 8012f0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	2200      	movs	r2, #0
 8012f14:	701a      	strb	r2, [r3, #0]
 8012f16:	2200      	movs	r2, #0
 8012f18:	f042 0201 	orr.w	r2, r2, #1
 8012f1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2200      	movs	r2, #0
 8012f22:	f042 0208 	orr.w	r2, r2, #8
 8012f26:	709a      	strb	r2, [r3, #2]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	2206      	movs	r2, #6
 8012f30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	2204      	movs	r2, #4
 8012f36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012f38:	f640 0306 	movw	r3, #2054	; 0x806
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	68ba      	ldr	r2, [r7, #8]
 8012f42:	69b9      	ldr	r1, [r7, #24]
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 f8d7 	bl	80130f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012f4a:	69b8      	ldr	r0, [r7, #24]
 8012f4c:	f003 f88c 	bl	8016068 <pbuf_free>
  p = NULL;
 8012f50:	2300      	movs	r3, #0
 8012f52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012f54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3720      	adds	r7, #32
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	0801dd44 	.word	0x0801dd44
 8012f64:	0801dec0 	.word	0x0801dec0
 8012f68:	0801dde8 	.word	0x0801dde8
 8012f6c:	0801df70 	.word	0x0801df70
 8012f70:	0801dfa4 	.word	0x0801dfa4

08012f74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b088      	sub	sp, #32
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f90:	2201      	movs	r2, #1
 8012f92:	9203      	str	r2, [sp, #12]
 8012f94:	68ba      	ldr	r2, [r7, #8]
 8012f96:	9202      	str	r2, [sp, #8]
 8012f98:	4a06      	ldr	r2, [pc, #24]	; (8012fb4 <etharp_request_dst+0x40>)
 8012f9a:	9201      	str	r2, [sp, #4]
 8012f9c:	9300      	str	r3, [sp, #0]
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	68f8      	ldr	r0, [r7, #12]
 8012fa4:	f7ff ff5a 	bl	8012e5c <etharp_raw>
 8012fa8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	08020ac8 	.word	0x08020ac8

08012fb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012fc2:	4a05      	ldr	r2, [pc, #20]	; (8012fd8 <etharp_request+0x20>)
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ff ffd4 	bl	8012f74 <etharp_request_dst>
 8012fcc:	4603      	mov	r3, r0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	08020ac0 	.word	0x08020ac0

08012fdc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b086      	sub	sp, #24
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012fe6:	230e      	movs	r3, #14
 8012fe8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	895b      	ldrh	r3, [r3, #10]
 8012fee:	2b0e      	cmp	r3, #14
 8012ff0:	d96e      	bls.n	80130d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	7bdb      	ldrb	r3, [r3, #15]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d106      	bne.n	8013008 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013000:	3301      	adds	r3, #1
 8013002:	b2da      	uxtb	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	7b1a      	ldrb	r2, [r3, #12]
 8013012:	7b5b      	ldrb	r3, [r3, #13]
 8013014:	021b      	lsls	r3, r3, #8
 8013016:	4313      	orrs	r3, r2
 8013018:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	f003 0301 	and.w	r3, r3, #1
 8013022:	2b00      	cmp	r3, #0
 8013024:	d023      	beq.n	801306e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	2b01      	cmp	r3, #1
 801302c:	d10f      	bne.n	801304e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	785b      	ldrb	r3, [r3, #1]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d11b      	bne.n	801306e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801303a:	2b5e      	cmp	r3, #94	; 0x5e
 801303c:	d117      	bne.n	801306e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	7b5b      	ldrb	r3, [r3, #13]
 8013042:	f043 0310 	orr.w	r3, r3, #16
 8013046:	b2da      	uxtb	r2, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	735a      	strb	r2, [r3, #13]
 801304c:	e00f      	b.n	801306e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	2206      	movs	r2, #6
 8013052:	4928      	ldr	r1, [pc, #160]	; (80130f4 <ethernet_input+0x118>)
 8013054:	4618      	mov	r0, r3
 8013056:	f009 fcf5 	bl	801ca44 <memcmp>
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d106      	bne.n	801306e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7b5b      	ldrb	r3, [r3, #13]
 8013064:	f043 0308 	orr.w	r3, r3, #8
 8013068:	b2da      	uxtb	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801306e:	89fb      	ldrh	r3, [r7, #14]
 8013070:	2b08      	cmp	r3, #8
 8013072:	d003      	beq.n	801307c <ethernet_input+0xa0>
 8013074:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013078:	d014      	beq.n	80130a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801307a:	e032      	b.n	80130e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013082:	f003 0308 	and.w	r3, r3, #8
 8013086:	2b00      	cmp	r3, #0
 8013088:	d024      	beq.n	80130d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801308a:	8afb      	ldrh	r3, [r7, #22]
 801308c:	4619      	mov	r1, r3
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f002 ff64 	bl	8015f5c <pbuf_remove_header>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d11e      	bne.n	80130d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801309a:	6839      	ldr	r1, [r7, #0]
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f000 fb95 	bl	80137cc <ip4_input>
      break;
 80130a2:	e013      	b.n	80130cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80130aa:	f003 0308 	and.w	r3, r3, #8
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d014      	beq.n	80130dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80130b2:	8afb      	ldrh	r3, [r7, #22]
 80130b4:	4619      	mov	r1, r3
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f002 ff50 	bl	8015f5c <pbuf_remove_header>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d10e      	bne.n	80130e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80130c2:	6839      	ldr	r1, [r7, #0]
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ff fb61 	bl	801278c <etharp_input>
      break;
 80130ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80130cc:	2300      	movs	r3, #0
 80130ce:	e00c      	b.n	80130ea <ethernet_input+0x10e>
    goto free_and_return;
 80130d0:	bf00      	nop
 80130d2:	e006      	b.n	80130e2 <ethernet_input+0x106>
        goto free_and_return;
 80130d4:	bf00      	nop
 80130d6:	e004      	b.n	80130e2 <ethernet_input+0x106>
        goto free_and_return;
 80130d8:	bf00      	nop
 80130da:	e002      	b.n	80130e2 <ethernet_input+0x106>
        goto free_and_return;
 80130dc:	bf00      	nop
 80130de:	e000      	b.n	80130e2 <ethernet_input+0x106>
        goto free_and_return;
 80130e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f002 ffc0 	bl	8016068 <pbuf_free>
  return ERR_OK;
 80130e8:	2300      	movs	r3, #0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	08020ac0 	.word	0x08020ac0

080130f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	607a      	str	r2, [r7, #4]
 8013104:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013106:	8c3b      	ldrh	r3, [r7, #32]
 8013108:	4618      	mov	r0, r3
 801310a:	f7fd f945 	bl	8010398 <lwip_htons>
 801310e:	4603      	mov	r3, r0
 8013110:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013112:	210e      	movs	r1, #14
 8013114:	68b8      	ldr	r0, [r7, #8]
 8013116:	f002 ff11 	bl	8015f3c <pbuf_add_header>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d125      	bne.n	801316c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	8afa      	ldrh	r2, [r7, #22]
 801312a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	2206      	movs	r2, #6
 8013130:	6839      	ldr	r1, [r7, #0]
 8013132:	4618      	mov	r0, r3
 8013134:	f009 fc95 	bl	801ca62 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	3306      	adds	r3, #6
 801313c:	2206      	movs	r2, #6
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	4618      	mov	r0, r3
 8013142:	f009 fc8e 	bl	801ca62 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801314c:	2b06      	cmp	r3, #6
 801314e:	d006      	beq.n	801315e <ethernet_output+0x66>
 8013150:	4b0a      	ldr	r3, [pc, #40]	; (801317c <ethernet_output+0x84>)
 8013152:	f240 1233 	movw	r2, #307	; 0x133
 8013156:	490a      	ldr	r1, [pc, #40]	; (8013180 <ethernet_output+0x88>)
 8013158:	480a      	ldr	r0, [pc, #40]	; (8013184 <ethernet_output+0x8c>)
 801315a:	f009 fc95 	bl	801ca88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	699b      	ldr	r3, [r3, #24]
 8013162:	68b9      	ldr	r1, [r7, #8]
 8013164:	68f8      	ldr	r0, [r7, #12]
 8013166:	4798      	blx	r3
 8013168:	4603      	mov	r3, r0
 801316a:	e002      	b.n	8013172 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801316c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801316e:	f06f 0301 	mvn.w	r3, #1
}
 8013172:	4618      	mov	r0, r3
 8013174:	3718      	adds	r7, #24
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	0801dfe8 	.word	0x0801dfe8
 8013180:	0801e04c 	.word	0x0801e04c
 8013184:	0801e080 	.word	0x0801e080

08013188 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b08e      	sub	sp, #56	; 0x38
 801318c:	af04      	add	r7, sp, #16
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013192:	4b87      	ldr	r3, [pc, #540]	; (80133b0 <icmp_input+0x228>)
 8013194:	689b      	ldr	r3, [r3, #8]
 8013196:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	f003 030f 	and.w	r3, r3, #15
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80131a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131aa:	2b13      	cmp	r3, #19
 80131ac:	f240 80e8 	bls.w	8013380 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	895b      	ldrh	r3, [r3, #10]
 80131b4:	2b03      	cmp	r3, #3
 80131b6:	f240 80e5 	bls.w	8013384 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80131c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	f000 80d2 	beq.w	8013372 <icmp_input+0x1ea>
 80131ce:	2b08      	cmp	r3, #8
 80131d0:	f040 80d2 	bne.w	8013378 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80131d4:	4b77      	ldr	r3, [pc, #476]	; (80133b4 <icmp_input+0x22c>)
 80131d6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80131d8:	4b75      	ldr	r3, [pc, #468]	; (80133b0 <icmp_input+0x228>)
 80131da:	695b      	ldr	r3, [r3, #20]
 80131dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131e0:	2be0      	cmp	r3, #224	; 0xe0
 80131e2:	f000 80d6 	beq.w	8013392 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80131e6:	4b72      	ldr	r3, [pc, #456]	; (80133b0 <icmp_input+0x228>)
 80131e8:	695a      	ldr	r2, [r3, #20]
 80131ea:	4b71      	ldr	r3, [pc, #452]	; (80133b0 <icmp_input+0x228>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4619      	mov	r1, r3
 80131f0:	4610      	mov	r0, r2
 80131f2:	f000 fd03 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	f040 80cc 	bne.w	8013396 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	891b      	ldrh	r3, [r3, #8]
 8013202:	2b07      	cmp	r3, #7
 8013204:	f240 80c0 	bls.w	8013388 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 f9e0 	bl	80135ce <inet_chksum_pbuf>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d003      	beq.n	801321c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f002 ff27 	bl	8016068 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801321a:	e0c5      	b.n	80133a8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801321c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801321e:	330e      	adds	r3, #14
 8013220:	4619      	mov	r1, r3
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f002 fe8a 	bl	8015f3c <pbuf_add_header>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d04b      	beq.n	80132c6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	891a      	ldrh	r2, [r3, #8]
 8013232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013234:	4413      	add	r3, r2
 8013236:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	891b      	ldrh	r3, [r3, #8]
 801323c:	8b7a      	ldrh	r2, [r7, #26]
 801323e:	429a      	cmp	r2, r3
 8013240:	f0c0 80ab 	bcc.w	801339a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013244:	8b7b      	ldrh	r3, [r7, #26]
 8013246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801324a:	4619      	mov	r1, r3
 801324c:	200e      	movs	r0, #14
 801324e:	f002 fc2b 	bl	8015aa8 <pbuf_alloc>
 8013252:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	2b00      	cmp	r3, #0
 8013258:	f000 80a1 	beq.w	801339e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	895b      	ldrh	r3, [r3, #10]
 8013260:	461a      	mov	r2, r3
 8013262:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013264:	3308      	adds	r3, #8
 8013266:	429a      	cmp	r2, r3
 8013268:	d203      	bcs.n	8013272 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801326a:	6978      	ldr	r0, [r7, #20]
 801326c:	f002 fefc 	bl	8016068 <pbuf_free>
          goto icmperr;
 8013270:	e096      	b.n	80133a0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801327a:	4618      	mov	r0, r3
 801327c:	f009 fbf1 	bl	801ca62 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013282:	4619      	mov	r1, r3
 8013284:	6978      	ldr	r0, [r7, #20]
 8013286:	f002 fe69 	bl	8015f5c <pbuf_remove_header>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d009      	beq.n	80132a4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013290:	4b49      	ldr	r3, [pc, #292]	; (80133b8 <icmp_input+0x230>)
 8013292:	22b6      	movs	r2, #182	; 0xb6
 8013294:	4949      	ldr	r1, [pc, #292]	; (80133bc <icmp_input+0x234>)
 8013296:	484a      	ldr	r0, [pc, #296]	; (80133c0 <icmp_input+0x238>)
 8013298:	f009 fbf6 	bl	801ca88 <iprintf>
          pbuf_free(r);
 801329c:	6978      	ldr	r0, [r7, #20]
 801329e:	f002 fee3 	bl	8016068 <pbuf_free>
          goto icmperr;
 80132a2:	e07d      	b.n	80133a0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80132a4:	6879      	ldr	r1, [r7, #4]
 80132a6:	6978      	ldr	r0, [r7, #20]
 80132a8:	f003 f812 	bl	80162d0 <pbuf_copy>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80132b2:	6978      	ldr	r0, [r7, #20]
 80132b4:	f002 fed8 	bl	8016068 <pbuf_free>
          goto icmperr;
 80132b8:	e072      	b.n	80133a0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f002 fed4 	bl	8016068 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	607b      	str	r3, [r7, #4]
 80132c4:	e00f      	b.n	80132e6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80132c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132c8:	330e      	adds	r3, #14
 80132ca:	4619      	mov	r1, r3
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f002 fe45 	bl	8015f5c <pbuf_remove_header>
 80132d2:	4603      	mov	r3, r0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d006      	beq.n	80132e6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80132d8:	4b37      	ldr	r3, [pc, #220]	; (80133b8 <icmp_input+0x230>)
 80132da:	22c7      	movs	r2, #199	; 0xc7
 80132dc:	4939      	ldr	r1, [pc, #228]	; (80133c4 <icmp_input+0x23c>)
 80132de:	4838      	ldr	r0, [pc, #224]	; (80133c0 <icmp_input+0x238>)
 80132e0:	f009 fbd2 	bl	801ca88 <iprintf>
          goto icmperr;
 80132e4:	e05c      	b.n	80133a0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80132ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132ee:	4619      	mov	r1, r3
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f002 fe23 	bl	8015f3c <pbuf_add_header>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d13c      	bne.n	8013376 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801330a:	4b29      	ldr	r3, [pc, #164]	; (80133b0 <icmp_input+0x228>)
 801330c:	691a      	ldr	r2, [r3, #16]
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2200      	movs	r2, #0
 8013316:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	885b      	ldrh	r3, [r3, #2]
 801331c:	b29b      	uxth	r3, r3
 801331e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013322:	4293      	cmp	r3, r2
 8013324:	d907      	bls.n	8013336 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	885b      	ldrh	r3, [r3, #2]
 801332a:	b29b      	uxth	r3, r3
 801332c:	3309      	adds	r3, #9
 801332e:	b29a      	uxth	r2, r3
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	805a      	strh	r2, [r3, #2]
 8013334:	e006      	b.n	8013344 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	885b      	ldrh	r3, [r3, #2]
 801333a:	b29b      	uxth	r3, r3
 801333c:	3308      	adds	r3, #8
 801333e:	b29a      	uxth	r2, r3
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	22ff      	movs	r2, #255	; 0xff
 8013348:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2200      	movs	r2, #0
 801334e:	729a      	strb	r2, [r3, #10]
 8013350:	2200      	movs	r2, #0
 8013352:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	9302      	str	r3, [sp, #8]
 8013358:	2301      	movs	r3, #1
 801335a:	9301      	str	r3, [sp, #4]
 801335c:	2300      	movs	r3, #0
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	23ff      	movs	r3, #255	; 0xff
 8013362:	2200      	movs	r2, #0
 8013364:	69f9      	ldr	r1, [r7, #28]
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f000 fb70 	bl	8013a4c <ip4_output_if>
 801336c:	4603      	mov	r3, r0
 801336e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013370:	e001      	b.n	8013376 <icmp_input+0x1ee>
      break;
 8013372:	bf00      	nop
 8013374:	e000      	b.n	8013378 <icmp_input+0x1f0>
      break;
 8013376:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f002 fe75 	bl	8016068 <pbuf_free>
  return;
 801337e:	e013      	b.n	80133a8 <icmp_input+0x220>
    goto lenerr;
 8013380:	bf00      	nop
 8013382:	e002      	b.n	801338a <icmp_input+0x202>
    goto lenerr;
 8013384:	bf00      	nop
 8013386:	e000      	b.n	801338a <icmp_input+0x202>
        goto lenerr;
 8013388:	bf00      	nop
lenerr:
  pbuf_free(p);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f002 fe6c 	bl	8016068 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013390:	e00a      	b.n	80133a8 <icmp_input+0x220>
        goto icmperr;
 8013392:	bf00      	nop
 8013394:	e004      	b.n	80133a0 <icmp_input+0x218>
        goto icmperr;
 8013396:	bf00      	nop
 8013398:	e002      	b.n	80133a0 <icmp_input+0x218>
          goto icmperr;
 801339a:	bf00      	nop
 801339c:	e000      	b.n	80133a0 <icmp_input+0x218>
          goto icmperr;
 801339e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f002 fe61 	bl	8016068 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80133a6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80133a8:	3728      	adds	r7, #40	; 0x28
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	20008658 	.word	0x20008658
 80133b4:	2000866c 	.word	0x2000866c
 80133b8:	0801e0a8 	.word	0x0801e0a8
 80133bc:	0801e10c 	.word	0x0801e10c
 80133c0:	0801e144 	.word	0x0801e144
 80133c4:	0801e16c 	.word	0x0801e16c

080133c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	460b      	mov	r3, r1
 80133d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80133d4:	78fb      	ldrb	r3, [r7, #3]
 80133d6:	461a      	mov	r2, r3
 80133d8:	2103      	movs	r1, #3
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 f814 	bl	8013408 <icmp_send_response>
}
 80133e0:	bf00      	nop
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	460b      	mov	r3, r1
 80133f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80133f4:	78fb      	ldrb	r3, [r7, #3]
 80133f6:	461a      	mov	r2, r3
 80133f8:	210b      	movs	r1, #11
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 f804 	bl	8013408 <icmp_send_response>
}
 8013400:	bf00      	nop
 8013402:	3708      	adds	r7, #8
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b08c      	sub	sp, #48	; 0x30
 801340c:	af04      	add	r7, sp, #16
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	460b      	mov	r3, r1
 8013412:	70fb      	strb	r3, [r7, #3]
 8013414:	4613      	mov	r3, r2
 8013416:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013418:	f44f 7220 	mov.w	r2, #640	; 0x280
 801341c:	2124      	movs	r1, #36	; 0x24
 801341e:	2022      	movs	r0, #34	; 0x22
 8013420:	f002 fb42 	bl	8015aa8 <pbuf_alloc>
 8013424:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d056      	beq.n	80134da <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	895b      	ldrh	r3, [r3, #10]
 8013430:	2b23      	cmp	r3, #35	; 0x23
 8013432:	d806      	bhi.n	8013442 <icmp_send_response+0x3a>
 8013434:	4b2b      	ldr	r3, [pc, #172]	; (80134e4 <icmp_send_response+0xdc>)
 8013436:	f240 1269 	movw	r2, #361	; 0x169
 801343a:	492b      	ldr	r1, [pc, #172]	; (80134e8 <icmp_send_response+0xe0>)
 801343c:	482b      	ldr	r0, [pc, #172]	; (80134ec <icmp_send_response+0xe4>)
 801343e:	f009 fb23 	bl	801ca88 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	78fa      	ldrb	r2, [r7, #3]
 8013452:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	78ba      	ldrb	r2, [r7, #2]
 8013458:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	2200      	movs	r2, #0
 801345e:	711a      	strb	r2, [r3, #4]
 8013460:	2200      	movs	r2, #0
 8013462:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	2200      	movs	r2, #0
 8013468:	719a      	strb	r2, [r3, #6]
 801346a:	2200      	movs	r2, #0
 801346c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	f103 0008 	add.w	r0, r3, #8
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	221c      	movs	r2, #28
 801347c:	4619      	mov	r1, r3
 801347e:	f009 faf0 	bl	801ca62 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013488:	f107 030c 	add.w	r3, r7, #12
 801348c:	4618      	mov	r0, r3
 801348e:	f000 f903 	bl	8013698 <ip4_route>
 8013492:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d01b      	beq.n	80134d2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	2200      	movs	r2, #0
 801349e:	709a      	strb	r2, [r3, #2]
 80134a0:	2200      	movs	r2, #0
 80134a2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	895b      	ldrh	r3, [r3, #10]
 80134a8:	4619      	mov	r1, r3
 80134aa:	6978      	ldr	r0, [r7, #20]
 80134ac:	f000 f87d 	bl	80135aa <inet_chksum>
 80134b0:	4603      	mov	r3, r0
 80134b2:	461a      	mov	r2, r3
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80134b8:	f107 020c 	add.w	r2, r7, #12
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	9302      	str	r3, [sp, #8]
 80134c0:	2301      	movs	r3, #1
 80134c2:	9301      	str	r3, [sp, #4]
 80134c4:	2300      	movs	r3, #0
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	23ff      	movs	r3, #255	; 0xff
 80134ca:	2100      	movs	r1, #0
 80134cc:	69f8      	ldr	r0, [r7, #28]
 80134ce:	f000 fabd 	bl	8013a4c <ip4_output_if>
  }
  pbuf_free(q);
 80134d2:	69f8      	ldr	r0, [r7, #28]
 80134d4:	f002 fdc8 	bl	8016068 <pbuf_free>
 80134d8:	e000      	b.n	80134dc <icmp_send_response+0xd4>
    return;
 80134da:	bf00      	nop
}
 80134dc:	3720      	adds	r7, #32
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	0801e0a8 	.word	0x0801e0a8
 80134e8:	0801e1a0 	.word	0x0801e1a0
 80134ec:	0801e144 	.word	0x0801e144

080134f0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b089      	sub	sp, #36	; 0x24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	f003 0301 	and.w	r3, r3, #1
 801350c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00d      	beq.n	8013530 <lwip_standard_chksum+0x40>
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	dd0a      	ble.n	8013530 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801351a:	69fa      	ldr	r2, [r7, #28]
 801351c:	1c53      	adds	r3, r2, #1
 801351e:	61fb      	str	r3, [r7, #28]
 8013520:	f107 030e 	add.w	r3, r7, #14
 8013524:	3301      	adds	r3, #1
 8013526:	7812      	ldrb	r2, [r2, #0]
 8013528:	701a      	strb	r2, [r3, #0]
    len--;
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	3b01      	subs	r3, #1
 801352e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013534:	e00a      	b.n	801354c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	1c9a      	adds	r2, r3, #2
 801353a:	61ba      	str	r2, [r7, #24]
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	461a      	mov	r2, r3
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	4413      	add	r3, r2
 8013544:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	3b02      	subs	r3, #2
 801354a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	2b01      	cmp	r3, #1
 8013550:	dcf1      	bgt.n	8013536 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	dd04      	ble.n	8013562 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013558:	f107 030e 	add.w	r3, r7, #14
 801355c:	69ba      	ldr	r2, [r7, #24]
 801355e:	7812      	ldrb	r2, [r2, #0]
 8013560:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8013562:	89fb      	ldrh	r3, [r7, #14]
 8013564:	461a      	mov	r2, r3
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	4413      	add	r3, r2
 801356a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	0c1a      	lsrs	r2, r3, #16
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	b29b      	uxth	r3, r3
 8013574:	4413      	add	r3, r2
 8013576:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	0c1a      	lsrs	r2, r3, #16
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	b29b      	uxth	r3, r3
 8013580:	4413      	add	r3, r2
 8013582:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d007      	beq.n	801359a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	021b      	lsls	r3, r3, #8
 801358e:	b29a      	uxth	r2, r3
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	0a1b      	lsrs	r3, r3, #8
 8013594:	b2db      	uxtb	r3, r3
 8013596:	4313      	orrs	r3, r2
 8013598:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	b29b      	uxth	r3, r3
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3724      	adds	r7, #36	; 0x24
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr

080135aa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b082      	sub	sp, #8
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	460b      	mov	r3, r1
 80135b4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80135b6:	887b      	ldrh	r3, [r7, #2]
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff ff98 	bl	80134f0 <lwip_standard_chksum>
 80135c0:	4603      	mov	r3, r0
 80135c2:	43db      	mvns	r3, r3
 80135c4:	b29b      	uxth	r3, r3
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}

080135ce <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80135ce:	b580      	push	{r7, lr}
 80135d0:	b086      	sub	sp, #24
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80135d6:	2300      	movs	r3, #0
 80135d8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80135da:	2300      	movs	r3, #0
 80135dc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	613b      	str	r3, [r7, #16]
 80135e2:	e02b      	b.n	801363c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	685a      	ldr	r2, [r3, #4]
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	895b      	ldrh	r3, [r3, #10]
 80135ec:	4619      	mov	r1, r3
 80135ee:	4610      	mov	r0, r2
 80135f0:	f7ff ff7e 	bl	80134f0 <lwip_standard_chksum>
 80135f4:	4603      	mov	r3, r0
 80135f6:	461a      	mov	r2, r3
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	4413      	add	r3, r2
 80135fc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	0c1a      	lsrs	r2, r3, #16
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	b29b      	uxth	r3, r3
 8013606:	4413      	add	r3, r2
 8013608:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	895b      	ldrh	r3, [r3, #10]
 801360e:	f003 0301 	and.w	r3, r3, #1
 8013612:	b29b      	uxth	r3, r3
 8013614:	2b00      	cmp	r3, #0
 8013616:	d00e      	beq.n	8013636 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	2b00      	cmp	r3, #0
 801361c:	bf0c      	ite	eq
 801361e:	2301      	moveq	r3, #1
 8013620:	2300      	movne	r3, #0
 8013622:	b2db      	uxtb	r3, r3
 8013624:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	021b      	lsls	r3, r3, #8
 801362a:	b29a      	uxth	r2, r3
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	0a1b      	lsrs	r3, r3, #8
 8013630:	b2db      	uxtb	r3, r3
 8013632:	4313      	orrs	r3, r2
 8013634:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	613b      	str	r3, [r7, #16]
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1d0      	bne.n	80135e4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d007      	beq.n	8013658 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	021b      	lsls	r3, r3, #8
 801364c:	b29a      	uxth	r2, r3
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	0a1b      	lsrs	r3, r3, #8
 8013652:	b2db      	uxtb	r3, r3
 8013654:	4313      	orrs	r3, r2
 8013656:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	b29b      	uxth	r3, r3
 801365c:	43db      	mvns	r3, r3
 801365e:	b29b      	uxth	r3, r3
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8013672:	f003 f819 	bl	80166a8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013676:	f001 fa01 	bl	8014a7c <mem_init>
  memp_init();
 801367a:	f001 fd65 	bl	8015148 <memp_init>
  pbuf_init();
  netif_init();
 801367e:	f001 fe71 	bl	8015364 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013682:	f008 fcff 	bl	801c084 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013686:	f003 f88b 	bl	80167a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801368a:	f008 fc43 	bl	801bf14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801368e:	bf00      	nop
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
	...

08013698 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80136a0:	4b33      	ldr	r3, [pc, #204]	; (8013770 <ip4_route+0xd8>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	60fb      	str	r3, [r7, #12]
 80136a6:	e036      	b.n	8013716 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136ae:	f003 0301 	and.w	r3, r3, #1
 80136b2:	b2db      	uxtb	r3, r3
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d02b      	beq.n	8013710 <ip4_route+0x78>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136be:	089b      	lsrs	r3, r3, #2
 80136c0:	f003 0301 	and.w	r3, r3, #1
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d022      	beq.n	8013710 <ip4_route+0x78>
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	3304      	adds	r3, #4
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d01d      	beq.n	8013710 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	3304      	adds	r3, #4
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	405a      	eors	r2, r3
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	3308      	adds	r3, #8
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4013      	ands	r3, r2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	e038      	b.n	8013762 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136f6:	f003 0302 	and.w	r3, r3, #2
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d108      	bne.n	8013710 <ip4_route+0x78>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	330c      	adds	r3, #12
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	429a      	cmp	r2, r3
 801370a:	d101      	bne.n	8013710 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	e028      	b.n	8013762 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	60fb      	str	r3, [r7, #12]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1c5      	bne.n	80136a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801371c:	4b15      	ldr	r3, [pc, #84]	; (8013774 <ip4_route+0xdc>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d01a      	beq.n	801375a <ip4_route+0xc2>
 8013724:	4b13      	ldr	r3, [pc, #76]	; (8013774 <ip4_route+0xdc>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801372c:	f003 0301 	and.w	r3, r3, #1
 8013730:	2b00      	cmp	r3, #0
 8013732:	d012      	beq.n	801375a <ip4_route+0xc2>
 8013734:	4b0f      	ldr	r3, [pc, #60]	; (8013774 <ip4_route+0xdc>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801373c:	f003 0304 	and.w	r3, r3, #4
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00a      	beq.n	801375a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013744:	4b0b      	ldr	r3, [pc, #44]	; (8013774 <ip4_route+0xdc>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	3304      	adds	r3, #4
 801374a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801374c:	2b00      	cmp	r3, #0
 801374e:	d004      	beq.n	801375a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	b2db      	uxtb	r3, r3
 8013756:	2b7f      	cmp	r3, #127	; 0x7f
 8013758:	d101      	bne.n	801375e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801375a:	2300      	movs	r3, #0
 801375c:	e001      	b.n	8013762 <ip4_route+0xca>
  }

  return netif_default;
 801375e:	4b05      	ldr	r3, [pc, #20]	; (8013774 <ip4_route+0xdc>)
 8013760:	681b      	ldr	r3, [r3, #0]
}
 8013762:	4618      	mov	r0, r3
 8013764:	3714      	adds	r7, #20
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	2000b728 	.word	0x2000b728
 8013774:	2000b72c 	.word	0x2000b72c

08013778 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013786:	f003 0301 	and.w	r3, r3, #1
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	d016      	beq.n	80137be <ip4_input_accept+0x46>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3304      	adds	r3, #4
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d011      	beq.n	80137be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801379a:	4b0b      	ldr	r3, [pc, #44]	; (80137c8 <ip4_input_accept+0x50>)
 801379c:	695a      	ldr	r2, [r3, #20]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	3304      	adds	r3, #4
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d008      	beq.n	80137ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80137a8:	4b07      	ldr	r3, [pc, #28]	; (80137c8 <ip4_input_accept+0x50>)
 80137aa:	695b      	ldr	r3, [r3, #20]
 80137ac:	6879      	ldr	r1, [r7, #4]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f000 fa24 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 80137b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d001      	beq.n	80137be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80137ba:	2301      	movs	r3, #1
 80137bc:	e000      	b.n	80137c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	20008658 	.word	0x20008658

080137cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b088      	sub	sp, #32
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80137d6:	2301      	movs	r3, #1
 80137d8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	091b      	lsrs	r3, r3, #4
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b04      	cmp	r3, #4
 80137ea:	d004      	beq.n	80137f6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f002 fc3b 	bl	8016068 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	e121      	b.n	8013a3a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	f003 030f 	and.w	r3, r3, #15
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	b2db      	uxtb	r3, r3
 8013804:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	885b      	ldrh	r3, [r3, #2]
 801380a:	b29b      	uxth	r3, r3
 801380c:	4618      	mov	r0, r3
 801380e:	f7fc fdc3 	bl	8010398 <lwip_htons>
 8013812:	4603      	mov	r3, r0
 8013814:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	891b      	ldrh	r3, [r3, #8]
 801381a:	8a3a      	ldrh	r2, [r7, #16]
 801381c:	429a      	cmp	r2, r3
 801381e:	d204      	bcs.n	801382a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013820:	8a3b      	ldrh	r3, [r7, #16]
 8013822:	4619      	mov	r1, r3
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f002 fa99 	bl	8015d5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	895b      	ldrh	r3, [r3, #10]
 801382e:	8a7a      	ldrh	r2, [r7, #18]
 8013830:	429a      	cmp	r2, r3
 8013832:	d807      	bhi.n	8013844 <ip4_input+0x78>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	891b      	ldrh	r3, [r3, #8]
 8013838:	8a3a      	ldrh	r2, [r7, #16]
 801383a:	429a      	cmp	r2, r3
 801383c:	d802      	bhi.n	8013844 <ip4_input+0x78>
 801383e:	8a7b      	ldrh	r3, [r7, #18]
 8013840:	2b13      	cmp	r3, #19
 8013842:	d804      	bhi.n	801384e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f002 fc0f 	bl	8016068 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801384a:	2300      	movs	r3, #0
 801384c:	e0f5      	b.n	8013a3a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801384e:	69fb      	ldr	r3, [r7, #28]
 8013850:	691b      	ldr	r3, [r3, #16]
 8013852:	4a7c      	ldr	r2, [pc, #496]	; (8013a44 <ip4_input+0x278>)
 8013854:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	4a7a      	ldr	r2, [pc, #488]	; (8013a44 <ip4_input+0x278>)
 801385c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801385e:	4b79      	ldr	r3, [pc, #484]	; (8013a44 <ip4_input+0x278>)
 8013860:	695b      	ldr	r3, [r3, #20]
 8013862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013866:	2be0      	cmp	r3, #224	; 0xe0
 8013868:	d112      	bne.n	8013890 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013870:	f003 0301 	and.w	r3, r3, #1
 8013874:	b2db      	uxtb	r3, r3
 8013876:	2b00      	cmp	r3, #0
 8013878:	d007      	beq.n	801388a <ip4_input+0xbe>
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	3304      	adds	r3, #4
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d002      	beq.n	801388a <ip4_input+0xbe>
      netif = inp;
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	61bb      	str	r3, [r7, #24]
 8013888:	e02a      	b.n	80138e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801388a:	2300      	movs	r3, #0
 801388c:	61bb      	str	r3, [r7, #24]
 801388e:	e027      	b.n	80138e0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013890:	6838      	ldr	r0, [r7, #0]
 8013892:	f7ff ff71 	bl	8013778 <ip4_input_accept>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <ip4_input+0xd6>
      netif = inp;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	61bb      	str	r3, [r7, #24]
 80138a0:	e01e      	b.n	80138e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 80138a2:	2300      	movs	r3, #0
 80138a4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80138a6:	4b67      	ldr	r3, [pc, #412]	; (8013a44 <ip4_input+0x278>)
 80138a8:	695b      	ldr	r3, [r3, #20]
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	2b7f      	cmp	r3, #127	; 0x7f
 80138ae:	d017      	beq.n	80138e0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80138b0:	4b65      	ldr	r3, [pc, #404]	; (8013a48 <ip4_input+0x27c>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	61bb      	str	r3, [r7, #24]
 80138b6:	e00e      	b.n	80138d6 <ip4_input+0x10a>
          if (netif == inp) {
 80138b8:	69ba      	ldr	r2, [r7, #24]
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	429a      	cmp	r2, r3
 80138be:	d006      	beq.n	80138ce <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80138c0:	69b8      	ldr	r0, [r7, #24]
 80138c2:	f7ff ff59 	bl	8013778 <ip4_input_accept>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d108      	bne.n	80138de <ip4_input+0x112>
 80138cc:	e000      	b.n	80138d0 <ip4_input+0x104>
            continue;
 80138ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	61bb      	str	r3, [r7, #24]
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d1ed      	bne.n	80138b8 <ip4_input+0xec>
 80138dc:	e000      	b.n	80138e0 <ip4_input+0x114>
            break;
 80138de:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d111      	bne.n	801390a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	7a5b      	ldrb	r3, [r3, #9]
 80138ea:	2b11      	cmp	r3, #17
 80138ec:	d10d      	bne.n	801390a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80138ee:	8a7b      	ldrh	r3, [r7, #18]
 80138f0:	69fa      	ldr	r2, [r7, #28]
 80138f2:	4413      	add	r3, r2
 80138f4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	885b      	ldrh	r3, [r3, #2]
 80138fa:	b29b      	uxth	r3, r3
 80138fc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013900:	d103      	bne.n	801390a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d017      	beq.n	8013940 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013910:	4b4c      	ldr	r3, [pc, #304]	; (8013a44 <ip4_input+0x278>)
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d013      	beq.n	8013940 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013918:	4b4a      	ldr	r3, [pc, #296]	; (8013a44 <ip4_input+0x278>)
 801391a:	691b      	ldr	r3, [r3, #16]
 801391c:	6839      	ldr	r1, [r7, #0]
 801391e:	4618      	mov	r0, r3
 8013920:	f000 f96c 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 8013924:	4603      	mov	r3, r0
 8013926:	2b00      	cmp	r3, #0
 8013928:	d105      	bne.n	8013936 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801392a:	4b46      	ldr	r3, [pc, #280]	; (8013a44 <ip4_input+0x278>)
 801392c:	691b      	ldr	r3, [r3, #16]
 801392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013932:	2be0      	cmp	r3, #224	; 0xe0
 8013934:	d104      	bne.n	8013940 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f002 fb96 	bl	8016068 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801393c:	2300      	movs	r3, #0
 801393e:	e07c      	b.n	8013a3a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013940:	69bb      	ldr	r3, [r7, #24]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d104      	bne.n	8013950 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f002 fb8e 	bl	8016068 <pbuf_free>
    return ERR_OK;
 801394c:	2300      	movs	r3, #0
 801394e:	e074      	b.n	8013a3a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	88db      	ldrh	r3, [r3, #6]
 8013954:	b29b      	uxth	r3, r3
 8013956:	461a      	mov	r2, r3
 8013958:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801395c:	4013      	ands	r3, r2
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00b      	beq.n	801397a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 fc90 	bl	8014288 <ip4_reass>
 8013968:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d101      	bne.n	8013974 <ip4_input+0x1a8>
      return ERR_OK;
 8013970:	2300      	movs	r3, #0
 8013972:	e062      	b.n	8013a3a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801397a:	4a32      	ldr	r2, [pc, #200]	; (8013a44 <ip4_input+0x278>)
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013980:	4a30      	ldr	r2, [pc, #192]	; (8013a44 <ip4_input+0x278>)
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013986:	4a2f      	ldr	r2, [pc, #188]	; (8013a44 <ip4_input+0x278>)
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	f003 030f 	and.w	r3, r3, #15
 8013994:	b2db      	uxtb	r3, r3
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	b2db      	uxtb	r3, r3
 801399a:	b29a      	uxth	r2, r3
 801399c:	4b29      	ldr	r3, [pc, #164]	; (8013a44 <ip4_input+0x278>)
 801399e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80139a0:	8a7b      	ldrh	r3, [r7, #18]
 80139a2:	4619      	mov	r1, r3
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f002 fad9 	bl	8015f5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	7a5b      	ldrb	r3, [r3, #9]
 80139ae:	2b06      	cmp	r3, #6
 80139b0:	d009      	beq.n	80139c6 <ip4_input+0x1fa>
 80139b2:	2b11      	cmp	r3, #17
 80139b4:	d002      	beq.n	80139bc <ip4_input+0x1f0>
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d00a      	beq.n	80139d0 <ip4_input+0x204>
 80139ba:	e00e      	b.n	80139da <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80139bc:	6839      	ldr	r1, [r7, #0]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f008 fc0e 	bl	801c1e0 <udp_input>
        break;
 80139c4:	e026      	b.n	8013a14 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80139c6:	6839      	ldr	r1, [r7, #0]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f004 fa77 	bl	8017ebc <tcp_input>
        break;
 80139ce:	e021      	b.n	8013a14 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80139d0:	6839      	ldr	r1, [r7, #0]
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ff fbd8 	bl	8013188 <icmp_input>
        break;
 80139d8:	e01c      	b.n	8013a14 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80139da:	4b1a      	ldr	r3, [pc, #104]	; (8013a44 <ip4_input+0x278>)
 80139dc:	695b      	ldr	r3, [r3, #20]
 80139de:	69b9      	ldr	r1, [r7, #24]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 f90b 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d10f      	bne.n	8013a0c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80139ec:	4b15      	ldr	r3, [pc, #84]	; (8013a44 <ip4_input+0x278>)
 80139ee:	695b      	ldr	r3, [r3, #20]
 80139f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80139f4:	2be0      	cmp	r3, #224	; 0xe0
 80139f6:	d009      	beq.n	8013a0c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80139f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80139fc:	4619      	mov	r1, r3
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f002 fb1f 	bl	8016042 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013a04:	2102      	movs	r1, #2
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f7ff fcde 	bl	80133c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f002 fb2b 	bl	8016068 <pbuf_free>
        break;
 8013a12:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013a14:	4b0b      	ldr	r3, [pc, #44]	; (8013a44 <ip4_input+0x278>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013a1a:	4b0a      	ldr	r3, [pc, #40]	; (8013a44 <ip4_input+0x278>)
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013a20:	4b08      	ldr	r3, [pc, #32]	; (8013a44 <ip4_input+0x278>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013a26:	4b07      	ldr	r3, [pc, #28]	; (8013a44 <ip4_input+0x278>)
 8013a28:	2200      	movs	r2, #0
 8013a2a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013a2c:	4b05      	ldr	r3, [pc, #20]	; (8013a44 <ip4_input+0x278>)
 8013a2e:	2200      	movs	r2, #0
 8013a30:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013a32:	4b04      	ldr	r3, [pc, #16]	; (8013a44 <ip4_input+0x278>)
 8013a34:	2200      	movs	r2, #0
 8013a36:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3720      	adds	r7, #32
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	20008658 	.word	0x20008658
 8013a48:	2000b728 	.word	0x2000b728

08013a4c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b08a      	sub	sp, #40	; 0x28
 8013a50:	af04      	add	r7, sp, #16
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	607a      	str	r2, [r7, #4]
 8013a58:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d009      	beq.n	8013a78 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d003      	beq.n	8013a72 <ip4_output_if+0x26>
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d102      	bne.n	8013a78 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	3304      	adds	r3, #4
 8013a76:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013a78:	78fa      	ldrb	r2, [r7, #3]
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	9302      	str	r3, [sp, #8]
 8013a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a82:	9301      	str	r3, [sp, #4]
 8013a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	687a      	ldr	r2, [r7, #4]
 8013a8e:	6979      	ldr	r1, [r7, #20]
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f000 f805 	bl	8013aa0 <ip4_output_if_src>
 8013a96:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b088      	sub	sp, #32
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	7b9b      	ldrb	r3, [r3, #14]
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d006      	beq.n	8013ac4 <ip4_output_if_src+0x24>
 8013ab6:	4b4b      	ldr	r3, [pc, #300]	; (8013be4 <ip4_output_if_src+0x144>)
 8013ab8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013abc:	494a      	ldr	r1, [pc, #296]	; (8013be8 <ip4_output_if_src+0x148>)
 8013abe:	484b      	ldr	r0, [pc, #300]	; (8013bec <ip4_output_if_src+0x14c>)
 8013ac0:	f008 ffe2 	bl	801ca88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d060      	beq.n	8013b8c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013aca:	2314      	movs	r3, #20
 8013acc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013ace:	2114      	movs	r1, #20
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f002 fa33 	bl	8015f3c <pbuf_add_header>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d002      	beq.n	8013ae2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013adc:	f06f 0301 	mvn.w	r3, #1
 8013ae0:	e07c      	b.n	8013bdc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	895b      	ldrh	r3, [r3, #10]
 8013aec:	2b13      	cmp	r3, #19
 8013aee:	d806      	bhi.n	8013afe <ip4_output_if_src+0x5e>
 8013af0:	4b3c      	ldr	r3, [pc, #240]	; (8013be4 <ip4_output_if_src+0x144>)
 8013af2:	f240 3289 	movw	r2, #905	; 0x389
 8013af6:	493e      	ldr	r1, [pc, #248]	; (8013bf0 <ip4_output_if_src+0x150>)
 8013af8:	483c      	ldr	r0, [pc, #240]	; (8013bec <ip4_output_if_src+0x14c>)
 8013afa:	f008 ffc5 	bl	801ca88 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	78fa      	ldrb	r2, [r7, #3]
 8013b02:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013b0a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013b14:	8b7b      	ldrh	r3, [r7, #26]
 8013b16:	089b      	lsrs	r3, r3, #2
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	b2db      	uxtb	r3, r3
 8013b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b20:	b2da      	uxtb	r2, r3
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013b2c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	891b      	ldrh	r3, [r3, #8]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fc fc30 	bl	8010398 <lwip_htons>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	2200      	movs	r2, #0
 8013b44:	719a      	strb	r2, [r3, #6]
 8013b46:	2200      	movs	r2, #0
 8013b48:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013b4a:	4b2a      	ldr	r3, [pc, #168]	; (8013bf4 <ip4_output_if_src+0x154>)
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fc fc22 	bl	8010398 <lwip_htons>
 8013b54:	4603      	mov	r3, r0
 8013b56:	461a      	mov	r2, r3
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013b5c:	4b25      	ldr	r3, [pc, #148]	; (8013bf4 <ip4_output_if_src+0x154>)
 8013b5e:	881b      	ldrh	r3, [r3, #0]
 8013b60:	3301      	adds	r3, #1
 8013b62:	b29a      	uxth	r2, r3
 8013b64:	4b23      	ldr	r3, [pc, #140]	; (8013bf4 <ip4_output_if_src+0x154>)
 8013b66:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d104      	bne.n	8013b78 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013b6e:	4b22      	ldr	r3, [pc, #136]	; (8013bf8 <ip4_output_if_src+0x158>)
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	60da      	str	r2, [r3, #12]
 8013b76:	e003      	b.n	8013b80 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	2200      	movs	r2, #0
 8013b84:	729a      	strb	r2, [r3, #10]
 8013b86:	2200      	movs	r2, #0
 8013b88:	72da      	strb	r2, [r3, #11]
 8013b8a:	e00f      	b.n	8013bac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	895b      	ldrh	r3, [r3, #10]
 8013b90:	2b13      	cmp	r3, #19
 8013b92:	d802      	bhi.n	8013b9a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b94:	f06f 0301 	mvn.w	r3, #1
 8013b98:	e020      	b.n	8013bdc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	691b      	ldr	r3, [r3, #16]
 8013ba4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ba6:	f107 0314 	add.w	r3, r7, #20
 8013baa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00c      	beq.n	8013bce <ip4_output_if_src+0x12e>
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	891a      	ldrh	r2, [r3, #8]
 8013bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d906      	bls.n	8013bce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f000 fd4b 	bl	8014660 <ip4_frag>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	e006      	b.n	8013bdc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd0:	695b      	ldr	r3, [r3, #20]
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	68f9      	ldr	r1, [r7, #12]
 8013bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bd8:	4798      	blx	r3
 8013bda:	4603      	mov	r3, r0
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3720      	adds	r7, #32
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	0801e1cc 	.word	0x0801e1cc
 8013be8:	0801e22c 	.word	0x0801e22c
 8013bec:	0801e238 	.word	0x0801e238
 8013bf0:	0801e260 	.word	0x0801e260
 8013bf4:	2000755a 	.word	0x2000755a
 8013bf8:	08020ad0 	.word	0x08020ad0

08013bfc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b085      	sub	sp, #20
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c10:	d002      	beq.n	8013c18 <ip4_addr_isbroadcast_u32+0x1c>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d101      	bne.n	8013c1c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e02a      	b.n	8013c72 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c22:	f003 0302 	and.w	r3, r3, #2
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	e021      	b.n	8013c72 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	3304      	adds	r3, #4
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d101      	bne.n	8013c3e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e019      	b.n	8013c72 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	3304      	adds	r3, #4
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	405a      	eors	r2, r3
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4013      	ands	r3, r2
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d10d      	bne.n	8013c70 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	3308      	adds	r3, #8
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	43da      	mvns	r2, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	3308      	adds	r3, #8
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d101      	bne.n	8013c70 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	e000      	b.n	8013c72 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013c70:	2300      	movs	r3, #0
  }
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr
	...

08013c80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013c86:	2300      	movs	r3, #0
 8013c88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013c8a:	4b12      	ldr	r3, [pc, #72]	; (8013cd4 <ip_reass_tmr+0x54>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013c90:	e018      	b.n	8013cc4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	7fdb      	ldrb	r3, [r3, #31]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00b      	beq.n	8013cb2 <ip_reass_tmr+0x32>
      r->timer--;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	7fdb      	ldrb	r3, [r3, #31]
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	b2da      	uxtb	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	60fb      	str	r3, [r7, #12]
 8013cb0:	e008      	b.n	8013cc4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013cbc:	68b9      	ldr	r1, [r7, #8]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f000 f80a 	bl	8013cd8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d1e3      	bne.n	8013c92 <ip_reass_tmr+0x12>
    }
  }
}
 8013cca:	bf00      	nop
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	2000755c 	.word	0x2000755c

08013cd8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b088      	sub	sp, #32
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013ce6:	683a      	ldr	r2, [r7, #0]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d105      	bne.n	8013cfa <ip_reass_free_complete_datagram+0x22>
 8013cee:	4b45      	ldr	r3, [pc, #276]	; (8013e04 <ip_reass_free_complete_datagram+0x12c>)
 8013cf0:	22ab      	movs	r2, #171	; 0xab
 8013cf2:	4945      	ldr	r1, [pc, #276]	; (8013e08 <ip_reass_free_complete_datagram+0x130>)
 8013cf4:	4845      	ldr	r0, [pc, #276]	; (8013e0c <ip_reass_free_complete_datagram+0x134>)
 8013cf6:	f008 fec7 	bl	801ca88 <iprintf>
  if (prev != NULL) {
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00a      	beq.n	8013d16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d005      	beq.n	8013d16 <ip_reass_free_complete_datagram+0x3e>
 8013d0a:	4b3e      	ldr	r3, [pc, #248]	; (8013e04 <ip_reass_free_complete_datagram+0x12c>)
 8013d0c:	22ad      	movs	r2, #173	; 0xad
 8013d0e:	4940      	ldr	r1, [pc, #256]	; (8013e10 <ip_reass_free_complete_datagram+0x138>)
 8013d10:	483e      	ldr	r0, [pc, #248]	; (8013e0c <ip_reass_free_complete_datagram+0x134>)
 8013d12:	f008 feb9 	bl	801ca88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	685b      	ldr	r3, [r3, #4]
 8013d1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	889b      	ldrh	r3, [r3, #4]
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d12a      	bne.n	8013d7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	6858      	ldr	r0, [r3, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	3308      	adds	r3, #8
 8013d3e:	2214      	movs	r2, #20
 8013d40:	4619      	mov	r1, r3
 8013d42:	f008 fe8e 	bl	801ca62 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013d46:	2101      	movs	r1, #1
 8013d48:	69b8      	ldr	r0, [r7, #24]
 8013d4a:	f7ff fb4d 	bl	80133e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013d4e:	69b8      	ldr	r0, [r7, #24]
 8013d50:	f002 fa18 	bl	8016184 <pbuf_clen>
 8013d54:	4603      	mov	r3, r0
 8013d56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d58:	8bfa      	ldrh	r2, [r7, #30]
 8013d5a:	8a7b      	ldrh	r3, [r7, #18]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d62:	db05      	blt.n	8013d70 <ip_reass_free_complete_datagram+0x98>
 8013d64:	4b27      	ldr	r3, [pc, #156]	; (8013e04 <ip_reass_free_complete_datagram+0x12c>)
 8013d66:	22bc      	movs	r2, #188	; 0xbc
 8013d68:	492a      	ldr	r1, [pc, #168]	; (8013e14 <ip_reass_free_complete_datagram+0x13c>)
 8013d6a:	4828      	ldr	r0, [pc, #160]	; (8013e0c <ip_reass_free_complete_datagram+0x134>)
 8013d6c:	f008 fe8c 	bl	801ca88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d70:	8bfa      	ldrh	r2, [r7, #30]
 8013d72:	8a7b      	ldrh	r3, [r7, #18]
 8013d74:	4413      	add	r3, r2
 8013d76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013d78:	69b8      	ldr	r0, [r7, #24]
 8013d7a:	f002 f975 	bl	8016068 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013d84:	e01f      	b.n	8013dc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f002 f9f4 	bl	8016184 <pbuf_clen>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013da0:	8bfa      	ldrh	r2, [r7, #30]
 8013da2:	8a7b      	ldrh	r3, [r7, #18]
 8013da4:	4413      	add	r3, r2
 8013da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013daa:	db05      	blt.n	8013db8 <ip_reass_free_complete_datagram+0xe0>
 8013dac:	4b15      	ldr	r3, [pc, #84]	; (8013e04 <ip_reass_free_complete_datagram+0x12c>)
 8013dae:	22cc      	movs	r2, #204	; 0xcc
 8013db0:	4918      	ldr	r1, [pc, #96]	; (8013e14 <ip_reass_free_complete_datagram+0x13c>)
 8013db2:	4816      	ldr	r0, [pc, #88]	; (8013e0c <ip_reass_free_complete_datagram+0x134>)
 8013db4:	f008 fe68 	bl	801ca88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013db8:	8bfa      	ldrh	r2, [r7, #30]
 8013dba:	8a7b      	ldrh	r3, [r7, #18]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f002 f951 	bl	8016068 <pbuf_free>
  while (p != NULL) {
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d1dc      	bne.n	8013d86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013dcc:	6839      	ldr	r1, [r7, #0]
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 f8c2 	bl	8013f58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013dd4:	4b10      	ldr	r3, [pc, #64]	; (8013e18 <ip_reass_free_complete_datagram+0x140>)
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	8bfa      	ldrh	r2, [r7, #30]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d905      	bls.n	8013dea <ip_reass_free_complete_datagram+0x112>
 8013dde:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <ip_reass_free_complete_datagram+0x12c>)
 8013de0:	22d2      	movs	r2, #210	; 0xd2
 8013de2:	490e      	ldr	r1, [pc, #56]	; (8013e1c <ip_reass_free_complete_datagram+0x144>)
 8013de4:	4809      	ldr	r0, [pc, #36]	; (8013e0c <ip_reass_free_complete_datagram+0x134>)
 8013de6:	f008 fe4f 	bl	801ca88 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013dea:	4b0b      	ldr	r3, [pc, #44]	; (8013e18 <ip_reass_free_complete_datagram+0x140>)
 8013dec:	881a      	ldrh	r2, [r3, #0]
 8013dee:	8bfb      	ldrh	r3, [r7, #30]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	4b08      	ldr	r3, [pc, #32]	; (8013e18 <ip_reass_free_complete_datagram+0x140>)
 8013df6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013df8:	8bfb      	ldrh	r3, [r7, #30]
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3720      	adds	r7, #32
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	0801e290 	.word	0x0801e290
 8013e08:	0801e2f8 	.word	0x0801e2f8
 8013e0c:	0801e304 	.word	0x0801e304
 8013e10:	0801e32c 	.word	0x0801e32c
 8013e14:	0801e340 	.word	0x0801e340
 8013e18:	20007560 	.word	0x20007560
 8013e1c:	0801e360 	.word	0x0801e360

08013e20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b08a      	sub	sp, #40	; 0x28
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013e36:	2300      	movs	r3, #0
 8013e38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013e3e:	4b28      	ldr	r3, [pc, #160]	; (8013ee0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013e44:	e030      	b.n	8013ea8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e48:	695a      	ldr	r2, [r3, #20]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d10c      	bne.n	8013e6c <ip_reass_remove_oldest_datagram+0x4c>
 8013e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e54:	699a      	ldr	r2, [r3, #24]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d106      	bne.n	8013e6c <ip_reass_remove_oldest_datagram+0x4c>
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	899a      	ldrh	r2, [r3, #12]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	889b      	ldrh	r3, [r3, #4]
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d014      	beq.n	8013e96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013e72:	6a3b      	ldr	r3, [r7, #32]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d104      	bne.n	8013e82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	61bb      	str	r3, [r7, #24]
 8013e80:	e009      	b.n	8013e96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e84:	7fda      	ldrb	r2, [r3, #31]
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	7fdb      	ldrb	r3, [r3, #31]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d803      	bhi.n	8013e96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d001      	beq.n	8013ea2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d1cb      	bne.n	8013e46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013eae:	6a3b      	ldr	r3, [r7, #32]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d008      	beq.n	8013ec6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013eb4:	69b9      	ldr	r1, [r7, #24]
 8013eb6:	6a38      	ldr	r0, [r7, #32]
 8013eb8:	f7ff ff0e 	bl	8013cd8 <ip_reass_free_complete_datagram>
 8013ebc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013ebe:	697a      	ldr	r2, [r7, #20]
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013ec6:	697a      	ldr	r2, [r7, #20]
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	da02      	bge.n	8013ed4 <ip_reass_remove_oldest_datagram+0xb4>
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	dcac      	bgt.n	8013e2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013ed4:	697b      	ldr	r3, [r7, #20]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3728      	adds	r7, #40	; 0x28
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	2000755c 	.word	0x2000755c

08013ee4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013eee:	2004      	movs	r0, #4
 8013ef0:	f001 f998 	bl	8015224 <memp_malloc>
 8013ef4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d110      	bne.n	8013f1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013efc:	6839      	ldr	r1, [r7, #0]
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff ff8e 	bl	8013e20 <ip_reass_remove_oldest_datagram>
 8013f04:	4602      	mov	r2, r0
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	dc03      	bgt.n	8013f14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013f0c:	2004      	movs	r0, #4
 8013f0e:	f001 f989 	bl	8015224 <memp_malloc>
 8013f12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	e016      	b.n	8013f4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013f1e:	2220      	movs	r2, #32
 8013f20:	2100      	movs	r1, #0
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f008 fda8 	bl	801ca78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	220f      	movs	r2, #15
 8013f2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013f2e:	4b09      	ldr	r3, [pc, #36]	; (8013f54 <ip_reass_enqueue_new_datagram+0x70>)
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013f36:	4a07      	ldr	r2, [pc, #28]	; (8013f54 <ip_reass_enqueue_new_datagram+0x70>)
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	2214      	movs	r2, #20
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f008 fd8c 	bl	801ca62 <memcpy>
  return ipr;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	2000755c 	.word	0x2000755c

08013f58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013f62:	4b10      	ldr	r3, [pc, #64]	; (8013fa4 <ip_reass_dequeue_datagram+0x4c>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d104      	bne.n	8013f76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a0c      	ldr	r2, [pc, #48]	; (8013fa4 <ip_reass_dequeue_datagram+0x4c>)
 8013f72:	6013      	str	r3, [r2, #0]
 8013f74:	e00d      	b.n	8013f92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <ip_reass_dequeue_datagram+0x32>
 8013f7c:	4b0a      	ldr	r3, [pc, #40]	; (8013fa8 <ip_reass_dequeue_datagram+0x50>)
 8013f7e:	f240 1245 	movw	r2, #325	; 0x145
 8013f82:	490a      	ldr	r1, [pc, #40]	; (8013fac <ip_reass_dequeue_datagram+0x54>)
 8013f84:	480a      	ldr	r0, [pc, #40]	; (8013fb0 <ip_reass_dequeue_datagram+0x58>)
 8013f86:	f008 fd7f 	bl	801ca88 <iprintf>
    prev->next = ipr->next;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013f92:	6879      	ldr	r1, [r7, #4]
 8013f94:	2004      	movs	r0, #4
 8013f96:	f001 f9bb 	bl	8015310 <memp_free>
}
 8013f9a:	bf00      	nop
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	2000755c 	.word	0x2000755c
 8013fa8:	0801e290 	.word	0x0801e290
 8013fac:	0801e384 	.word	0x0801e384
 8013fb0:	0801e304 	.word	0x0801e304

08013fb4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b08c      	sub	sp, #48	; 0x30
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	885b      	ldrh	r3, [r3, #2]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fc f9df 	bl	8010398 <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	f003 030f 	and.w	r3, r3, #15
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	009b      	lsls	r3, r3, #2
 8013fea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013fec:	7e7b      	ldrb	r3, [r7, #25]
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	8b7a      	ldrh	r2, [r7, #26]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d202      	bcs.n	8013ffc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ffa:	e135      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013ffc:	7e7b      	ldrb	r3, [r7, #25]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	8b7a      	ldrh	r2, [r7, #26]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	88db      	ldrh	r3, [r3, #6]
 801400a:	b29b      	uxth	r3, r3
 801400c:	4618      	mov	r0, r3
 801400e:	f7fc f9c3 	bl	8010398 <lwip_htons>
 8014012:	4603      	mov	r3, r0
 8014014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014018:	b29b      	uxth	r3, r3
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014026:	2200      	movs	r2, #0
 8014028:	701a      	strb	r2, [r3, #0]
 801402a:	2200      	movs	r2, #0
 801402c:	705a      	strb	r2, [r3, #1]
 801402e:	2200      	movs	r2, #0
 8014030:	709a      	strb	r2, [r3, #2]
 8014032:	2200      	movs	r2, #0
 8014034:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014038:	8afa      	ldrh	r2, [r7, #22]
 801403a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801403c:	8afa      	ldrh	r2, [r7, #22]
 801403e:	8b7b      	ldrh	r3, [r7, #26]
 8014040:	4413      	add	r3, r2
 8014042:	b29a      	uxth	r2, r3
 8014044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014046:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404a:	88db      	ldrh	r3, [r3, #6]
 801404c:	b29b      	uxth	r3, r3
 801404e:	8afa      	ldrh	r2, [r7, #22]
 8014050:	429a      	cmp	r2, r3
 8014052:	d902      	bls.n	801405a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014058:	e106      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	627b      	str	r3, [r7, #36]	; 0x24
 8014060:	e068      	b.n	8014134 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406a:	889b      	ldrh	r3, [r3, #4]
 801406c:	b29a      	uxth	r2, r3
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	889b      	ldrh	r3, [r3, #4]
 8014072:	b29b      	uxth	r3, r3
 8014074:	429a      	cmp	r2, r3
 8014076:	d235      	bcs.n	80140e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801407c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014080:	2b00      	cmp	r3, #0
 8014082:	d020      	beq.n	80140c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014086:	889b      	ldrh	r3, [r3, #4]
 8014088:	b29a      	uxth	r2, r3
 801408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408c:	88db      	ldrh	r3, [r3, #6]
 801408e:	b29b      	uxth	r3, r3
 8014090:	429a      	cmp	r2, r3
 8014092:	d307      	bcc.n	80140a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014096:	88db      	ldrh	r3, [r3, #6]
 8014098:	b29a      	uxth	r2, r3
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	889b      	ldrh	r3, [r3, #4]
 801409e:	b29b      	uxth	r3, r3
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d902      	bls.n	80140aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140a8:	e0de      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80140aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ac:	68ba      	ldr	r2, [r7, #8]
 80140ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80140b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b2:	88db      	ldrh	r3, [r3, #6]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b8:	889b      	ldrh	r3, [r3, #4]
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	429a      	cmp	r2, r3
 80140be:	d03d      	beq.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80140c0:	2300      	movs	r3, #0
 80140c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80140c4:	e03a      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80140c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c8:	88db      	ldrh	r3, [r3, #6]
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	889b      	ldrh	r3, [r3, #4]
 80140d0:	b29b      	uxth	r3, r3
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d902      	bls.n	80140dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140da:	e0c5      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	68ba      	ldr	r2, [r7, #8]
 80140e0:	605a      	str	r2, [r3, #4]
      break;
 80140e2:	e02b      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80140e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e6:	889b      	ldrh	r3, [r3, #4]
 80140e8:	b29a      	uxth	r2, r3
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	889b      	ldrh	r3, [r3, #4]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d102      	bne.n	80140fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140f8:	e0b6      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	889b      	ldrh	r3, [r3, #4]
 80140fe:	b29a      	uxth	r2, r3
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	88db      	ldrh	r3, [r3, #6]
 8014104:	b29b      	uxth	r3, r3
 8014106:	429a      	cmp	r2, r3
 8014108:	d202      	bcs.n	8014110 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801410a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801410e:	e0ab      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	2b00      	cmp	r3, #0
 8014114:	d009      	beq.n	801412a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014118:	88db      	ldrh	r3, [r3, #6]
 801411a:	b29a      	uxth	r2, r3
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	889b      	ldrh	r3, [r3, #4]
 8014120:	b29b      	uxth	r3, r3
 8014122:	429a      	cmp	r2, r3
 8014124:	d001      	beq.n	801412a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014136:	2b00      	cmp	r3, #0
 8014138:	d193      	bne.n	8014062 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801413a:	e000      	b.n	801413e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801413c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014140:	2b00      	cmp	r3, #0
 8014142:	d12d      	bne.n	80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014146:	2b00      	cmp	r3, #0
 8014148:	d01c      	beq.n	8014184 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414c:	88db      	ldrh	r3, [r3, #6]
 801414e:	b29a      	uxth	r2, r3
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	889b      	ldrh	r3, [r3, #4]
 8014154:	b29b      	uxth	r3, r3
 8014156:	429a      	cmp	r2, r3
 8014158:	d906      	bls.n	8014168 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801415a:	4b45      	ldr	r3, [pc, #276]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801415c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014160:	4944      	ldr	r1, [pc, #272]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014162:	4845      	ldr	r0, [pc, #276]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014164:	f008 fc90 	bl	801ca88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014170:	88db      	ldrh	r3, [r3, #6]
 8014172:	b29a      	uxth	r2, r3
 8014174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014176:	889b      	ldrh	r3, [r3, #4]
 8014178:	b29b      	uxth	r3, r3
 801417a:	429a      	cmp	r2, r3
 801417c:	d010      	beq.n	80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801417e:	2300      	movs	r3, #0
 8014180:	623b      	str	r3, [r7, #32]
 8014182:	e00d      	b.n	80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d006      	beq.n	801419a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801418c:	4b38      	ldr	r3, [pc, #224]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801418e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8014192:	493a      	ldr	r1, [pc, #232]	; (801427c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014194:	4838      	ldr	r0, [pc, #224]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014196:	f008 fc77 	bl	801ca88 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	68ba      	ldr	r2, [r7, #8]
 801419e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d105      	bne.n	80141b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	7f9b      	ldrb	r3, [r3, #30]
 80141aa:	f003 0301 	and.w	r3, r3, #1
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d059      	beq.n	8014266 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80141b2:	6a3b      	ldr	r3, [r7, #32]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d04f      	beq.n	8014258 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d006      	beq.n	80141ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	889b      	ldrh	r3, [r3, #4]
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d002      	beq.n	80141d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	623b      	str	r3, [r7, #32]
 80141d2:	e041      	b.n	8014258 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80141d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80141d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80141de:	e012      	b.n	8014206 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80141e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e8:	88db      	ldrh	r3, [r3, #6]
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ee:	889b      	ldrh	r3, [r3, #4]
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d002      	beq.n	80141fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80141f6:	2300      	movs	r3, #0
 80141f8:	623b      	str	r3, [r7, #32]
            break;
 80141fa:	e007      	b.n	801420c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80141fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1e9      	bne.n	80141e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d022      	beq.n	8014258 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d106      	bne.n	8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801421a:	4b15      	ldr	r3, [pc, #84]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801421c:	f240 12df 	movw	r2, #479	; 0x1df
 8014220:	4917      	ldr	r1, [pc, #92]	; (8014280 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014222:	4815      	ldr	r0, [pc, #84]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014224:	f008 fc30 	bl	801ca88 <iprintf>
          LWIP_ASSERT("sanity check",
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014230:	429a      	cmp	r2, r3
 8014232:	d106      	bne.n	8014242 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014234:	4b0e      	ldr	r3, [pc, #56]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014236:	f240 12e1 	movw	r2, #481	; 0x1e1
 801423a:	4911      	ldr	r1, [pc, #68]	; (8014280 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801423c:	480e      	ldr	r0, [pc, #56]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801423e:	f008 fc23 	bl	801ca88 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d006      	beq.n	8014258 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801424a:	4b09      	ldr	r3, [pc, #36]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801424c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014250:	490c      	ldr	r1, [pc, #48]	; (8014284 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014252:	4809      	ldr	r0, [pc, #36]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014254:	f008 fc18 	bl	801ca88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014258:	6a3b      	ldr	r3, [r7, #32]
 801425a:	2b00      	cmp	r3, #0
 801425c:	bf14      	ite	ne
 801425e:	2301      	movne	r3, #1
 8014260:	2300      	moveq	r3, #0
 8014262:	b2db      	uxtb	r3, r3
 8014264:	e000      	b.n	8014268 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014266:	2300      	movs	r3, #0
}
 8014268:	4618      	mov	r0, r3
 801426a:	3730      	adds	r7, #48	; 0x30
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	0801e290 	.word	0x0801e290
 8014274:	0801e3a0 	.word	0x0801e3a0
 8014278:	0801e304 	.word	0x0801e304
 801427c:	0801e3c0 	.word	0x0801e3c0
 8014280:	0801e3f8 	.word	0x0801e3f8
 8014284:	0801e408 	.word	0x0801e408

08014288 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b08e      	sub	sp, #56	; 0x38
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 030f 	and.w	r3, r3, #15
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	2b14      	cmp	r3, #20
 80142a6:	f040 8167 	bne.w	8014578 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	88db      	ldrh	r3, [r3, #6]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fc f871 	bl	8010398 <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142bc:	b29b      	uxth	r3, r3
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80142c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c4:	885b      	ldrh	r3, [r3, #2]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fc f865 	bl	8010398 <lwip_htons>
 80142ce:	4603      	mov	r3, r0
 80142d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80142d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	f003 030f 	and.w	r3, r3, #15
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80142e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142ea:	429a      	cmp	r2, r3
 80142ec:	f0c0 8146 	bcc.w	801457c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80142f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f001 ff41 	bl	8016184 <pbuf_clen>
 8014302:	4603      	mov	r3, r0
 8014304:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014306:	4ba3      	ldr	r3, [pc, #652]	; (8014594 <ip4_reass+0x30c>)
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	8c3b      	ldrh	r3, [r7, #32]
 801430e:	4413      	add	r3, r2
 8014310:	2b0a      	cmp	r3, #10
 8014312:	dd10      	ble.n	8014336 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014314:	8c3b      	ldrh	r3, [r7, #32]
 8014316:	4619      	mov	r1, r3
 8014318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801431a:	f7ff fd81 	bl	8013e20 <ip_reass_remove_oldest_datagram>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 812d 	beq.w	8014580 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014326:	4b9b      	ldr	r3, [pc, #620]	; (8014594 <ip4_reass+0x30c>)
 8014328:	881b      	ldrh	r3, [r3, #0]
 801432a:	461a      	mov	r2, r3
 801432c:	8c3b      	ldrh	r3, [r7, #32]
 801432e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014330:	2b0a      	cmp	r3, #10
 8014332:	f300 8125 	bgt.w	8014580 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014336:	4b98      	ldr	r3, [pc, #608]	; (8014598 <ip4_reass+0x310>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	633b      	str	r3, [r7, #48]	; 0x30
 801433c:	e015      	b.n	801436a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014340:	695a      	ldr	r2, [r3, #20]
 8014342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	429a      	cmp	r2, r3
 8014348:	d10c      	bne.n	8014364 <ip4_reass+0xdc>
 801434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434c:	699a      	ldr	r2, [r3, #24]
 801434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014350:	691b      	ldr	r3, [r3, #16]
 8014352:	429a      	cmp	r2, r3
 8014354:	d106      	bne.n	8014364 <ip4_reass+0xdc>
 8014356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014358:	899a      	ldrh	r2, [r3, #12]
 801435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435c:	889b      	ldrh	r3, [r3, #4]
 801435e:	b29b      	uxth	r3, r3
 8014360:	429a      	cmp	r2, r3
 8014362:	d006      	beq.n	8014372 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	633b      	str	r3, [r7, #48]	; 0x30
 801436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436c:	2b00      	cmp	r3, #0
 801436e:	d1e6      	bne.n	801433e <ip4_reass+0xb6>
 8014370:	e000      	b.n	8014374 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014372:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014376:	2b00      	cmp	r3, #0
 8014378:	d109      	bne.n	801438e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801437a:	8c3b      	ldrh	r3, [r7, #32]
 801437c:	4619      	mov	r1, r3
 801437e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014380:	f7ff fdb0 	bl	8013ee4 <ip_reass_enqueue_new_datagram>
 8014384:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	2b00      	cmp	r3, #0
 801438a:	d11c      	bne.n	80143c6 <ip4_reass+0x13e>
      goto nullreturn;
 801438c:	e0f9      	b.n	8014582 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	88db      	ldrh	r3, [r3, #6]
 8014392:	b29b      	uxth	r3, r3
 8014394:	4618      	mov	r0, r3
 8014396:	f7fb ffff 	bl	8010398 <lwip_htons>
 801439a:	4603      	mov	r3, r0
 801439c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d110      	bne.n	80143c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80143a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a6:	89db      	ldrh	r3, [r3, #14]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fb fff5 	bl	8010398 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d006      	beq.n	80143c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80143b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ba:	3308      	adds	r3, #8
 80143bc:	2214      	movs	r2, #20
 80143be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143c0:	4618      	mov	r0, r3
 80143c2:	f008 fb4e 	bl	801ca62 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	88db      	ldrh	r3, [r3, #6]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	f003 0320 	and.w	r3, r3, #32
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	bf0c      	ite	eq
 80143d4:	2301      	moveq	r3, #1
 80143d6:	2300      	movne	r3, #0
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d00e      	beq.n	8014400 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80143e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143e6:	4413      	add	r3, r2
 80143e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80143ea:	8b7a      	ldrh	r2, [r7, #26]
 80143ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143ee:	429a      	cmp	r2, r3
 80143f0:	f0c0 80a0 	bcc.w	8014534 <ip4_reass+0x2ac>
 80143f4:	8b7b      	ldrh	r3, [r7, #26]
 80143f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80143fa:	4293      	cmp	r3, r2
 80143fc:	f200 809a 	bhi.w	8014534 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014400:	69fa      	ldr	r2, [r7, #28]
 8014402:	6879      	ldr	r1, [r7, #4]
 8014404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014406:	f7ff fdd5 	bl	8013fb4 <ip_reass_chain_frag_into_datagram_and_validate>
 801440a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014412:	f000 8091 	beq.w	8014538 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014416:	4b5f      	ldr	r3, [pc, #380]	; (8014594 <ip4_reass+0x30c>)
 8014418:	881a      	ldrh	r2, [r3, #0]
 801441a:	8c3b      	ldrh	r3, [r7, #32]
 801441c:	4413      	add	r3, r2
 801441e:	b29a      	uxth	r2, r3
 8014420:	4b5c      	ldr	r3, [pc, #368]	; (8014594 <ip4_reass+0x30c>)
 8014422:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d00d      	beq.n	8014446 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801442a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801442c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801442e:	4413      	add	r3, r2
 8014430:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014434:	8a7a      	ldrh	r2, [r7, #18]
 8014436:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443a:	7f9b      	ldrb	r3, [r3, #30]
 801443c:	f043 0301 	orr.w	r3, r3, #1
 8014440:	b2da      	uxtb	r2, r3
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	2b01      	cmp	r3, #1
 801444a:	d171      	bne.n	8014530 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444e:	8b9b      	ldrh	r3, [r3, #28]
 8014450:	3314      	adds	r3, #20
 8014452:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014468:	3308      	adds	r3, #8
 801446a:	2214      	movs	r2, #20
 801446c:	4619      	mov	r1, r3
 801446e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014470:	f008 faf7 	bl	801ca62 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014474:	8a3b      	ldrh	r3, [r7, #16]
 8014476:	4618      	mov	r0, r3
 8014478:	f7fb ff8e 	bl	8010398 <lwip_htons>
 801447c:	4603      	mov	r3, r0
 801447e:	461a      	mov	r2, r3
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014486:	2200      	movs	r2, #0
 8014488:	719a      	strb	r2, [r3, #6]
 801448a:	2200      	movs	r2, #0
 801448c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014490:	2200      	movs	r2, #0
 8014492:	729a      	strb	r2, [r3, #10]
 8014494:	2200      	movs	r2, #0
 8014496:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801449e:	e00d      	b.n	80144bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80144a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80144a6:	2114      	movs	r1, #20
 80144a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80144aa:	f001 fd57 	bl	8015f5c <pbuf_remove_header>
      pbuf_cat(p, r);
 80144ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f001 fea7 	bl	8016204 <pbuf_cat>
      r = iprh->next_pbuf;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80144bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d1ee      	bne.n	80144a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80144c2:	4b35      	ldr	r3, [pc, #212]	; (8014598 <ip4_reass+0x310>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d102      	bne.n	80144d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80144cc:	2300      	movs	r3, #0
 80144ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144d0:	e010      	b.n	80144f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80144d2:	4b31      	ldr	r3, [pc, #196]	; (8014598 <ip4_reass+0x310>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144d8:	e007      	b.n	80144ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80144da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d006      	beq.n	80144f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1f4      	bne.n	80144da <ip4_reass+0x252>
 80144f0:	e000      	b.n	80144f4 <ip4_reass+0x26c>
          break;
 80144f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80144f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144f8:	f7ff fd2e 	bl	8013f58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f001 fe41 	bl	8016184 <pbuf_clen>
 8014502:	4603      	mov	r3, r0
 8014504:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014506:	4b23      	ldr	r3, [pc, #140]	; (8014594 <ip4_reass+0x30c>)
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	8c3a      	ldrh	r2, [r7, #32]
 801450c:	429a      	cmp	r2, r3
 801450e:	d906      	bls.n	801451e <ip4_reass+0x296>
 8014510:	4b22      	ldr	r3, [pc, #136]	; (801459c <ip4_reass+0x314>)
 8014512:	f240 229b 	movw	r2, #667	; 0x29b
 8014516:	4922      	ldr	r1, [pc, #136]	; (80145a0 <ip4_reass+0x318>)
 8014518:	4822      	ldr	r0, [pc, #136]	; (80145a4 <ip4_reass+0x31c>)
 801451a:	f008 fab5 	bl	801ca88 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801451e:	4b1d      	ldr	r3, [pc, #116]	; (8014594 <ip4_reass+0x30c>)
 8014520:	881a      	ldrh	r2, [r3, #0]
 8014522:	8c3b      	ldrh	r3, [r7, #32]
 8014524:	1ad3      	subs	r3, r2, r3
 8014526:	b29a      	uxth	r2, r3
 8014528:	4b1a      	ldr	r3, [pc, #104]	; (8014594 <ip4_reass+0x30c>)
 801452a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	e02c      	b.n	801458a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014530:	2300      	movs	r3, #0
 8014532:	e02a      	b.n	801458a <ip4_reass+0x302>

nullreturn_ipr:
 8014534:	bf00      	nop
 8014536:	e000      	b.n	801453a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014538:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453c:	2b00      	cmp	r3, #0
 801453e:	d106      	bne.n	801454e <ip4_reass+0x2c6>
 8014540:	4b16      	ldr	r3, [pc, #88]	; (801459c <ip4_reass+0x314>)
 8014542:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014546:	4918      	ldr	r1, [pc, #96]	; (80145a8 <ip4_reass+0x320>)
 8014548:	4816      	ldr	r0, [pc, #88]	; (80145a4 <ip4_reass+0x31c>)
 801454a:	f008 fa9d 	bl	801ca88 <iprintf>
  if (ipr->p == NULL) {
 801454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d114      	bne.n	8014580 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014556:	4b10      	ldr	r3, [pc, #64]	; (8014598 <ip4_reass+0x310>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801455c:	429a      	cmp	r2, r3
 801455e:	d006      	beq.n	801456e <ip4_reass+0x2e6>
 8014560:	4b0e      	ldr	r3, [pc, #56]	; (801459c <ip4_reass+0x314>)
 8014562:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014566:	4911      	ldr	r1, [pc, #68]	; (80145ac <ip4_reass+0x324>)
 8014568:	480e      	ldr	r0, [pc, #56]	; (80145a4 <ip4_reass+0x31c>)
 801456a:	f008 fa8d 	bl	801ca88 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801456e:	2100      	movs	r1, #0
 8014570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014572:	f7ff fcf1 	bl	8013f58 <ip_reass_dequeue_datagram>
 8014576:	e004      	b.n	8014582 <ip4_reass+0x2fa>
    goto nullreturn;
 8014578:	bf00      	nop
 801457a:	e002      	b.n	8014582 <ip4_reass+0x2fa>
    goto nullreturn;
 801457c:	bf00      	nop
 801457e:	e000      	b.n	8014582 <ip4_reass+0x2fa>
  }

nullreturn:
 8014580:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f001 fd70 	bl	8016068 <pbuf_free>
  return NULL;
 8014588:	2300      	movs	r3, #0
}
 801458a:	4618      	mov	r0, r3
 801458c:	3738      	adds	r7, #56	; 0x38
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20007560 	.word	0x20007560
 8014598:	2000755c 	.word	0x2000755c
 801459c:	0801e290 	.word	0x0801e290
 80145a0:	0801e42c 	.word	0x0801e42c
 80145a4:	0801e304 	.word	0x0801e304
 80145a8:	0801e448 	.word	0x0801e448
 80145ac:	0801e454 	.word	0x0801e454

080145b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80145b4:	2005      	movs	r0, #5
 80145b6:	f000 fe35 	bl	8015224 <memp_malloc>
 80145ba:	4603      	mov	r3, r0
}
 80145bc:	4618      	mov	r0, r3
 80145be:	bd80      	pop	{r7, pc}

080145c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d106      	bne.n	80145dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80145ce:	4b07      	ldr	r3, [pc, #28]	; (80145ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80145d0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80145d4:	4906      	ldr	r1, [pc, #24]	; (80145f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80145d6:	4807      	ldr	r0, [pc, #28]	; (80145f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80145d8:	f008 fa56 	bl	801ca88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80145dc:	6879      	ldr	r1, [r7, #4]
 80145de:	2005      	movs	r0, #5
 80145e0:	f000 fe96 	bl	8015310 <memp_free>
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	0801e290 	.word	0x0801e290
 80145f0:	0801e474 	.word	0x0801e474
 80145f4:	0801e304 	.word	0x0801e304

080145f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d106      	bne.n	8014618 <ipfrag_free_pbuf_custom+0x20>
 801460a:	4b11      	ldr	r3, [pc, #68]	; (8014650 <ipfrag_free_pbuf_custom+0x58>)
 801460c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014610:	4910      	ldr	r1, [pc, #64]	; (8014654 <ipfrag_free_pbuf_custom+0x5c>)
 8014612:	4811      	ldr	r0, [pc, #68]	; (8014658 <ipfrag_free_pbuf_custom+0x60>)
 8014614:	f008 fa38 	bl	801ca88 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014618:	68fa      	ldr	r2, [r7, #12]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	429a      	cmp	r2, r3
 801461e:	d006      	beq.n	801462e <ipfrag_free_pbuf_custom+0x36>
 8014620:	4b0b      	ldr	r3, [pc, #44]	; (8014650 <ipfrag_free_pbuf_custom+0x58>)
 8014622:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014626:	490d      	ldr	r1, [pc, #52]	; (801465c <ipfrag_free_pbuf_custom+0x64>)
 8014628:	480b      	ldr	r0, [pc, #44]	; (8014658 <ipfrag_free_pbuf_custom+0x60>)
 801462a:	f008 fa2d 	bl	801ca88 <iprintf>
  if (pcr->original != NULL) {
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	695b      	ldr	r3, [r3, #20]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d004      	beq.n	8014640 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	695b      	ldr	r3, [r3, #20]
 801463a:	4618      	mov	r0, r3
 801463c:	f001 fd14 	bl	8016068 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014640:	68f8      	ldr	r0, [r7, #12]
 8014642:	f7ff ffbd 	bl	80145c0 <ip_frag_free_pbuf_custom_ref>
}
 8014646:	bf00      	nop
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	0801e290 	.word	0x0801e290
 8014654:	0801e480 	.word	0x0801e480
 8014658:	0801e304 	.word	0x0801e304
 801465c:	0801e48c 	.word	0x0801e48c

08014660 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b094      	sub	sp, #80	; 0x50
 8014664:	af02      	add	r7, sp, #8
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801466c:	2300      	movs	r3, #0
 801466e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014676:	3b14      	subs	r3, #20
 8014678:	2b00      	cmp	r3, #0
 801467a:	da00      	bge.n	801467e <ip4_frag+0x1e>
 801467c:	3307      	adds	r3, #7
 801467e:	10db      	asrs	r3, r3, #3
 8014680:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014682:	2314      	movs	r3, #20
 8014684:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	f003 030f 	and.w	r3, r3, #15
 8014698:	b2db      	uxtb	r3, r3
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	b2db      	uxtb	r3, r3
 801469e:	2b14      	cmp	r3, #20
 80146a0:	d002      	beq.n	80146a8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80146a2:	f06f 0305 	mvn.w	r3, #5
 80146a6:	e10f      	b.n	80148c8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	895b      	ldrh	r3, [r3, #10]
 80146ac:	2b13      	cmp	r3, #19
 80146ae:	d809      	bhi.n	80146c4 <ip4_frag+0x64>
 80146b0:	4b87      	ldr	r3, [pc, #540]	; (80148d0 <ip4_frag+0x270>)
 80146b2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80146b6:	4987      	ldr	r1, [pc, #540]	; (80148d4 <ip4_frag+0x274>)
 80146b8:	4887      	ldr	r0, [pc, #540]	; (80148d8 <ip4_frag+0x278>)
 80146ba:	f008 f9e5 	bl	801ca88 <iprintf>
 80146be:	f06f 0305 	mvn.w	r3, #5
 80146c2:	e101      	b.n	80148c8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80146c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c6:	88db      	ldrh	r3, [r3, #6]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fb fe64 	bl	8010398 <lwip_htons>
 80146d0:	4603      	mov	r3, r0
 80146d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80146d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80146d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80146de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80146e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80146e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	891b      	ldrh	r3, [r3, #8]
 80146ea:	3b14      	subs	r3, #20
 80146ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80146f0:	e0e0      	b.n	80148b4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80146f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146fc:	4293      	cmp	r3, r2
 80146fe:	bf28      	it	cs
 8014700:	4613      	movcs	r3, r2
 8014702:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014704:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014708:	2114      	movs	r1, #20
 801470a:	200e      	movs	r0, #14
 801470c:	f001 f9cc 	bl	8015aa8 <pbuf_alloc>
 8014710:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014714:	2b00      	cmp	r3, #0
 8014716:	f000 80d4 	beq.w	80148c2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	895b      	ldrh	r3, [r3, #10]
 801471e:	2b13      	cmp	r3, #19
 8014720:	d806      	bhi.n	8014730 <ip4_frag+0xd0>
 8014722:	4b6b      	ldr	r3, [pc, #428]	; (80148d0 <ip4_frag+0x270>)
 8014724:	f240 3225 	movw	r2, #805	; 0x325
 8014728:	496c      	ldr	r1, [pc, #432]	; (80148dc <ip4_frag+0x27c>)
 801472a:	486b      	ldr	r0, [pc, #428]	; (80148d8 <ip4_frag+0x278>)
 801472c:	f008 f9ac 	bl	801ca88 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	2214      	movs	r2, #20
 8014736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014738:	4618      	mov	r0, r3
 801473a:	f008 f992 	bl	801ca62 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014746:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801474a:	e064      	b.n	8014816 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	895a      	ldrh	r2, [r3, #10]
 8014750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	895b      	ldrh	r3, [r3, #10]
 801475a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801475c:	429a      	cmp	r2, r3
 801475e:	d906      	bls.n	801476e <ip4_frag+0x10e>
 8014760:	4b5b      	ldr	r3, [pc, #364]	; (80148d0 <ip4_frag+0x270>)
 8014762:	f240 322d 	movw	r2, #813	; 0x32d
 8014766:	495e      	ldr	r1, [pc, #376]	; (80148e0 <ip4_frag+0x280>)
 8014768:	485b      	ldr	r0, [pc, #364]	; (80148d8 <ip4_frag+0x278>)
 801476a:	f008 f98d 	bl	801ca88 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801476e:	8bfa      	ldrh	r2, [r7, #30]
 8014770:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014774:	4293      	cmp	r3, r2
 8014776:	bf28      	it	cs
 8014778:	4613      	movcs	r3, r2
 801477a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801477e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014782:	2b00      	cmp	r3, #0
 8014784:	d105      	bne.n	8014792 <ip4_frag+0x132>
        poff = 0;
 8014786:	2300      	movs	r3, #0
 8014788:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	60fb      	str	r3, [r7, #12]
        continue;
 8014790:	e041      	b.n	8014816 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014792:	f7ff ff0d 	bl	80145b0 <ip_frag_alloc_pbuf_custom_ref>
 8014796:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d103      	bne.n	80147a6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801479e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147a0:	f001 fc62 	bl	8016068 <pbuf_free>
        goto memerr;
 80147a4:	e08e      	b.n	80148c4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80147a6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80147ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80147ae:	4413      	add	r3, r2
 80147b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80147b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80147b8:	9201      	str	r2, [sp, #4]
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	4603      	mov	r3, r0
 80147be:	2241      	movs	r2, #65	; 0x41
 80147c0:	2000      	movs	r0, #0
 80147c2:	f001 fa97 	bl	8015cf4 <pbuf_alloced_custom>
 80147c6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d106      	bne.n	80147dc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80147ce:	69b8      	ldr	r0, [r7, #24]
 80147d0:	f7ff fef6 	bl	80145c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80147d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147d6:	f001 fc47 	bl	8016068 <pbuf_free>
        goto memerr;
 80147da:	e073      	b.n	80148c4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80147dc:	68f8      	ldr	r0, [r7, #12]
 80147de:	f001 fce9 	bl	80161b4 <pbuf_ref>
      pcr->original = p;
 80147e2:	69bb      	ldr	r3, [r7, #24]
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	4a3e      	ldr	r2, [pc, #248]	; (80148e4 <ip4_frag+0x284>)
 80147ec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80147ee:	6979      	ldr	r1, [r7, #20]
 80147f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147f2:	f001 fd07 	bl	8016204 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80147f6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80147fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80147fe:	1ad3      	subs	r3, r2, r3
 8014800:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014804:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014808:	2b00      	cmp	r3, #0
 801480a:	d004      	beq.n	8014816 <ip4_frag+0x1b6>
        poff = 0;
 801480c:	2300      	movs	r3, #0
 801480e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801481a:	2b00      	cmp	r3, #0
 801481c:	d196      	bne.n	801474c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801481e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014820:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014824:	4413      	add	r3, r2
 8014826:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014828:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014830:	3b14      	subs	r3, #20
 8014832:	429a      	cmp	r2, r3
 8014834:	bfd4      	ite	le
 8014836:	2301      	movle	r3, #1
 8014838:	2300      	movgt	r3, #0
 801483a:	b2db      	uxtb	r3, r3
 801483c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801483e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014842:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014846:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d002      	beq.n	8014854 <ip4_frag+0x1f4>
 801484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014850:	2b00      	cmp	r3, #0
 8014852:	d003      	beq.n	801485c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014854:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801485a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801485c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801485e:	4618      	mov	r0, r3
 8014860:	f7fb fd9a 	bl	8010398 <lwip_htons>
 8014864:	4603      	mov	r3, r0
 8014866:	461a      	mov	r2, r3
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801486c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801486e:	3314      	adds	r3, #20
 8014870:	b29b      	uxth	r3, r3
 8014872:	4618      	mov	r0, r3
 8014874:	f7fb fd90 	bl	8010398 <lwip_htons>
 8014878:	4603      	mov	r3, r0
 801487a:	461a      	mov	r2, r3
 801487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014882:	2200      	movs	r2, #0
 8014884:	729a      	strb	r2, [r3, #10]
 8014886:	2200      	movs	r2, #0
 8014888:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	695b      	ldr	r3, [r3, #20]
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014892:	68b8      	ldr	r0, [r7, #8]
 8014894:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014898:	f001 fbe6 	bl	8016068 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801489c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80148a2:	1ad3      	subs	r3, r2, r3
 80148a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80148a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80148ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80148ae:	4413      	add	r3, r2
 80148b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80148b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	f47f af1a 	bne.w	80146f2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	e002      	b.n	80148c8 <ip4_frag+0x268>
      goto memerr;
 80148c2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80148c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3748      	adds	r7, #72	; 0x48
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	0801e290 	.word	0x0801e290
 80148d4:	0801e498 	.word	0x0801e498
 80148d8:	0801e304 	.word	0x0801e304
 80148dc:	0801e4b4 	.word	0x0801e4b4
 80148e0:	0801e4d4 	.word	0x0801e4d4
 80148e4:	080145f9 	.word	0x080145f9

080148e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	4603      	mov	r3, r0
 80148f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <ptr_to_mem+0x20>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	88fb      	ldrh	r3, [r7, #6]
 80148f8:	4413      	add	r3, r2
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	370c      	adds	r7, #12
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop
 8014908:	20007564 	.word	0x20007564

0801490c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801490c:	b480      	push	{r7}
 801490e:	b083      	sub	sp, #12
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	4a05      	ldr	r2, [pc, #20]	; (801492c <mem_to_ptr+0x20>)
 8014918:	6812      	ldr	r2, [r2, #0]
 801491a:	1a9b      	subs	r3, r3, r2
 801491c:	b29b      	uxth	r3, r3
}
 801491e:	4618      	mov	r0, r3
 8014920:	370c      	adds	r7, #12
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	20007564 	.word	0x20007564

08014930 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014930:	b590      	push	{r4, r7, lr}
 8014932:	b085      	sub	sp, #20
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014938:	4b47      	ldr	r3, [pc, #284]	; (8014a58 <plug_holes+0x128>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	429a      	cmp	r2, r3
 8014940:	d206      	bcs.n	8014950 <plug_holes+0x20>
 8014942:	4b46      	ldr	r3, [pc, #280]	; (8014a5c <plug_holes+0x12c>)
 8014944:	f240 12df 	movw	r2, #479	; 0x1df
 8014948:	4945      	ldr	r1, [pc, #276]	; (8014a60 <plug_holes+0x130>)
 801494a:	4846      	ldr	r0, [pc, #280]	; (8014a64 <plug_holes+0x134>)
 801494c:	f008 f89c 	bl	801ca88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014950:	4b45      	ldr	r3, [pc, #276]	; (8014a68 <plug_holes+0x138>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	429a      	cmp	r2, r3
 8014958:	d306      	bcc.n	8014968 <plug_holes+0x38>
 801495a:	4b40      	ldr	r3, [pc, #256]	; (8014a5c <plug_holes+0x12c>)
 801495c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014960:	4942      	ldr	r1, [pc, #264]	; (8014a6c <plug_holes+0x13c>)
 8014962:	4840      	ldr	r0, [pc, #256]	; (8014a64 <plug_holes+0x134>)
 8014964:	f008 f890 	bl	801ca88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	791b      	ldrb	r3, [r3, #4]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d006      	beq.n	801497e <plug_holes+0x4e>
 8014970:	4b3a      	ldr	r3, [pc, #232]	; (8014a5c <plug_holes+0x12c>)
 8014972:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014976:	493e      	ldr	r1, [pc, #248]	; (8014a70 <plug_holes+0x140>)
 8014978:	483a      	ldr	r0, [pc, #232]	; (8014a64 <plug_holes+0x134>)
 801497a:	f008 f885 	bl	801ca88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	881b      	ldrh	r3, [r3, #0]
 8014982:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014986:	4293      	cmp	r3, r2
 8014988:	d906      	bls.n	8014998 <plug_holes+0x68>
 801498a:	4b34      	ldr	r3, [pc, #208]	; (8014a5c <plug_holes+0x12c>)
 801498c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014990:	4938      	ldr	r1, [pc, #224]	; (8014a74 <plug_holes+0x144>)
 8014992:	4834      	ldr	r0, [pc, #208]	; (8014a64 <plug_holes+0x134>)
 8014994:	f008 f878 	bl	801ca88 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	881b      	ldrh	r3, [r3, #0]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff ffa3 	bl	80148e8 <ptr_to_mem>
 80149a2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d025      	beq.n	80149f8 <plug_holes+0xc8>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	791b      	ldrb	r3, [r3, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d121      	bne.n	80149f8 <plug_holes+0xc8>
 80149b4:	4b2c      	ldr	r3, [pc, #176]	; (8014a68 <plug_holes+0x138>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	68fa      	ldr	r2, [r7, #12]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d01c      	beq.n	80149f8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80149be:	4b2e      	ldr	r3, [pc, #184]	; (8014a78 <plug_holes+0x148>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	68fa      	ldr	r2, [r7, #12]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d102      	bne.n	80149ce <plug_holes+0x9e>
      lfree = mem;
 80149c8:	4a2b      	ldr	r2, [pc, #172]	; (8014a78 <plug_holes+0x148>)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	881a      	ldrh	r2, [r3, #0]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80149de:	4293      	cmp	r3, r2
 80149e0:	d00a      	beq.n	80149f8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	881b      	ldrh	r3, [r3, #0]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff ff7e 	bl	80148e8 <ptr_to_mem>
 80149ec:	4604      	mov	r4, r0
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f7ff ff8c 	bl	801490c <mem_to_ptr>
 80149f4:	4603      	mov	r3, r0
 80149f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	885b      	ldrh	r3, [r3, #2]
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff ff73 	bl	80148e8 <ptr_to_mem>
 8014a02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d020      	beq.n	8014a4e <plug_holes+0x11e>
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	791b      	ldrb	r3, [r3, #4]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d11c      	bne.n	8014a4e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014a14:	4b18      	ldr	r3, [pc, #96]	; (8014a78 <plug_holes+0x148>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d102      	bne.n	8014a24 <plug_holes+0xf4>
      lfree = pmem;
 8014a1e:	4a16      	ldr	r2, [pc, #88]	; (8014a78 <plug_holes+0x148>)
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	881a      	ldrh	r2, [r3, #0]
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	881b      	ldrh	r3, [r3, #0]
 8014a30:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014a34:	4293      	cmp	r3, r2
 8014a36:	d00a      	beq.n	8014a4e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7ff ff53 	bl	80148e8 <ptr_to_mem>
 8014a42:	4604      	mov	r4, r0
 8014a44:	68b8      	ldr	r0, [r7, #8]
 8014a46:	f7ff ff61 	bl	801490c <mem_to_ptr>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014a4e:	bf00      	nop
 8014a50:	3714      	adds	r7, #20
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd90      	pop	{r4, r7, pc}
 8014a56:	bf00      	nop
 8014a58:	20007564 	.word	0x20007564
 8014a5c:	0801e4e4 	.word	0x0801e4e4
 8014a60:	0801e540 	.word	0x0801e540
 8014a64:	0801e558 	.word	0x0801e558
 8014a68:	20007568 	.word	0x20007568
 8014a6c:	0801e580 	.word	0x0801e580
 8014a70:	0801e59c 	.word	0x0801e59c
 8014a74:	0801e5b8 	.word	0x0801e5b8
 8014a78:	20007570 	.word	0x20007570

08014a7c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014a82:	4b1d      	ldr	r3, [pc, #116]	; (8014af8 <mem_init+0x7c>)
 8014a84:	4a1d      	ldr	r2, [pc, #116]	; (8014afc <mem_init+0x80>)
 8014a86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014a88:	4b1b      	ldr	r3, [pc, #108]	; (8014af8 <mem_init+0x7c>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014a94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014aa2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8014aa6:	f7ff ff1f 	bl	80148e8 <ptr_to_mem>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	4b14      	ldr	r3, [pc, #80]	; (8014b00 <mem_init+0x84>)
 8014aae:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8014ab0:	4b13      	ldr	r3, [pc, #76]	; (8014b00 <mem_init+0x84>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014ab8:	4b11      	ldr	r3, [pc, #68]	; (8014b00 <mem_init+0x84>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014ac0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014ac2:	4b0f      	ldr	r3, [pc, #60]	; (8014b00 <mem_init+0x84>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014aca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014acc:	4b0a      	ldr	r3, [pc, #40]	; (8014af8 <mem_init+0x7c>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a0c      	ldr	r2, [pc, #48]	; (8014b04 <mem_init+0x88>)
 8014ad2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014ad4:	480c      	ldr	r0, [pc, #48]	; (8014b08 <mem_init+0x8c>)
 8014ad6:	f001 fdf3 	bl	80166c0 <sys_mutex_new>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d006      	beq.n	8014aee <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014ae0:	4b0a      	ldr	r3, [pc, #40]	; (8014b0c <mem_init+0x90>)
 8014ae2:	f240 221f 	movw	r2, #543	; 0x21f
 8014ae6:	490a      	ldr	r1, [pc, #40]	; (8014b10 <mem_init+0x94>)
 8014ae8:	480a      	ldr	r0, [pc, #40]	; (8014b14 <mem_init+0x98>)
 8014aea:	f007 ffcd 	bl	801ca88 <iprintf>
  }
}
 8014aee:	bf00      	nop
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	20007564 	.word	0x20007564
 8014afc:	30044000 	.word	0x30044000
 8014b00:	20007568 	.word	0x20007568
 8014b04:	20007570 	.word	0x20007570
 8014b08:	2000756c 	.word	0x2000756c
 8014b0c:	0801e4e4 	.word	0x0801e4e4
 8014b10:	0801e5e4 	.word	0x0801e5e4
 8014b14:	0801e558 	.word	0x0801e558

08014b18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f7ff fef3 	bl	801490c <mem_to_ptr>
 8014b26:	4603      	mov	r3, r0
 8014b28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	881b      	ldrh	r3, [r3, #0]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7ff feda 	bl	80148e8 <ptr_to_mem>
 8014b34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	885b      	ldrh	r3, [r3, #2]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7ff fed4 	bl	80148e8 <ptr_to_mem>
 8014b40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	881b      	ldrh	r3, [r3, #0]
 8014b46:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d819      	bhi.n	8014b82 <mem_link_valid+0x6a>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	885b      	ldrh	r3, [r3, #2]
 8014b52:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d813      	bhi.n	8014b82 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014b5e:	8afa      	ldrh	r2, [r7, #22]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d004      	beq.n	8014b6e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	8afa      	ldrh	r2, [r7, #22]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d109      	bne.n	8014b82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014b6e:	4b08      	ldr	r3, [pc, #32]	; (8014b90 <mem_link_valid+0x78>)
 8014b70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014b72:	693a      	ldr	r2, [r7, #16]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d006      	beq.n	8014b86 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	885b      	ldrh	r3, [r3, #2]
 8014b7c:	8afa      	ldrh	r2, [r7, #22]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d001      	beq.n	8014b86 <mem_link_valid+0x6e>
    return 0;
 8014b82:	2300      	movs	r3, #0
 8014b84:	e000      	b.n	8014b88 <mem_link_valid+0x70>
  }
  return 1;
 8014b86:	2301      	movs	r3, #1
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	20007568 	.word	0x20007568

08014b94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b088      	sub	sp, #32
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d070      	beq.n	8014c84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f003 0303 	and.w	r3, r3, #3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00d      	beq.n	8014bc8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014bac:	4b37      	ldr	r3, [pc, #220]	; (8014c8c <mem_free+0xf8>)
 8014bae:	f240 2273 	movw	r2, #627	; 0x273
 8014bb2:	4937      	ldr	r1, [pc, #220]	; (8014c90 <mem_free+0xfc>)
 8014bb4:	4837      	ldr	r0, [pc, #220]	; (8014c94 <mem_free+0x100>)
 8014bb6:	f007 ff67 	bl	801ca88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014bba:	f001 fdd3 	bl	8016764 <sys_arch_protect>
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f001 fddd 	bl	8016780 <sys_arch_unprotect>
    return;
 8014bc6:	e05e      	b.n	8014c86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	3b08      	subs	r3, #8
 8014bcc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014bce:	4b32      	ldr	r3, [pc, #200]	; (8014c98 <mem_free+0x104>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	69fa      	ldr	r2, [r7, #28]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d306      	bcc.n	8014be6 <mem_free+0x52>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f103 020c 	add.w	r2, r3, #12
 8014bde:	4b2f      	ldr	r3, [pc, #188]	; (8014c9c <mem_free+0x108>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d90d      	bls.n	8014c02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014be6:	4b29      	ldr	r3, [pc, #164]	; (8014c8c <mem_free+0xf8>)
 8014be8:	f240 227f 	movw	r2, #639	; 0x27f
 8014bec:	492c      	ldr	r1, [pc, #176]	; (8014ca0 <mem_free+0x10c>)
 8014bee:	4829      	ldr	r0, [pc, #164]	; (8014c94 <mem_free+0x100>)
 8014bf0:	f007 ff4a 	bl	801ca88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014bf4:	f001 fdb6 	bl	8016764 <sys_arch_protect>
 8014bf8:	6138      	str	r0, [r7, #16]
 8014bfa:	6938      	ldr	r0, [r7, #16]
 8014bfc:	f001 fdc0 	bl	8016780 <sys_arch_unprotect>
    return;
 8014c00:	e041      	b.n	8014c86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014c02:	4828      	ldr	r0, [pc, #160]	; (8014ca4 <mem_free+0x110>)
 8014c04:	f001 fd72 	bl	80166ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	791b      	ldrb	r3, [r3, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d110      	bne.n	8014c32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014c10:	4b1e      	ldr	r3, [pc, #120]	; (8014c8c <mem_free+0xf8>)
 8014c12:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014c16:	4924      	ldr	r1, [pc, #144]	; (8014ca8 <mem_free+0x114>)
 8014c18:	481e      	ldr	r0, [pc, #120]	; (8014c94 <mem_free+0x100>)
 8014c1a:	f007 ff35 	bl	801ca88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014c1e:	4821      	ldr	r0, [pc, #132]	; (8014ca4 <mem_free+0x110>)
 8014c20:	f001 fd73 	bl	801670a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014c24:	f001 fd9e 	bl	8016764 <sys_arch_protect>
 8014c28:	6178      	str	r0, [r7, #20]
 8014c2a:	6978      	ldr	r0, [r7, #20]
 8014c2c:	f001 fda8 	bl	8016780 <sys_arch_unprotect>
    return;
 8014c30:	e029      	b.n	8014c86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014c32:	69f8      	ldr	r0, [r7, #28]
 8014c34:	f7ff ff70 	bl	8014b18 <mem_link_valid>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d110      	bne.n	8014c60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014c3e:	4b13      	ldr	r3, [pc, #76]	; (8014c8c <mem_free+0xf8>)
 8014c40:	f240 2295 	movw	r2, #661	; 0x295
 8014c44:	4919      	ldr	r1, [pc, #100]	; (8014cac <mem_free+0x118>)
 8014c46:	4813      	ldr	r0, [pc, #76]	; (8014c94 <mem_free+0x100>)
 8014c48:	f007 ff1e 	bl	801ca88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014c4c:	4815      	ldr	r0, [pc, #84]	; (8014ca4 <mem_free+0x110>)
 8014c4e:	f001 fd5c 	bl	801670a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014c52:	f001 fd87 	bl	8016764 <sys_arch_protect>
 8014c56:	61b8      	str	r0, [r7, #24]
 8014c58:	69b8      	ldr	r0, [r7, #24]
 8014c5a:	f001 fd91 	bl	8016780 <sys_arch_unprotect>
    return;
 8014c5e:	e012      	b.n	8014c86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	2200      	movs	r2, #0
 8014c64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014c66:	4b12      	ldr	r3, [pc, #72]	; (8014cb0 <mem_free+0x11c>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	69fa      	ldr	r2, [r7, #28]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d202      	bcs.n	8014c76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014c70:	4a0f      	ldr	r2, [pc, #60]	; (8014cb0 <mem_free+0x11c>)
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014c76:	69f8      	ldr	r0, [r7, #28]
 8014c78:	f7ff fe5a 	bl	8014930 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014c7c:	4809      	ldr	r0, [pc, #36]	; (8014ca4 <mem_free+0x110>)
 8014c7e:	f001 fd44 	bl	801670a <sys_mutex_unlock>
 8014c82:	e000      	b.n	8014c86 <mem_free+0xf2>
    return;
 8014c84:	bf00      	nop
}
 8014c86:	3720      	adds	r7, #32
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	0801e4e4 	.word	0x0801e4e4
 8014c90:	0801e600 	.word	0x0801e600
 8014c94:	0801e558 	.word	0x0801e558
 8014c98:	20007564 	.word	0x20007564
 8014c9c:	20007568 	.word	0x20007568
 8014ca0:	0801e624 	.word	0x0801e624
 8014ca4:	2000756c 	.word	0x2000756c
 8014ca8:	0801e640 	.word	0x0801e640
 8014cac:	0801e668 	.word	0x0801e668
 8014cb0:	20007570 	.word	0x20007570

08014cb4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b088      	sub	sp, #32
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014cc0:	887b      	ldrh	r3, [r7, #2]
 8014cc2:	3303      	adds	r3, #3
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	f023 0303 	bic.w	r3, r3, #3
 8014cca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014ccc:	8bfb      	ldrh	r3, [r7, #30]
 8014cce:	2b0b      	cmp	r3, #11
 8014cd0:	d801      	bhi.n	8014cd6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014cd2:	230c      	movs	r3, #12
 8014cd4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014cd6:	8bfb      	ldrh	r3, [r7, #30]
 8014cd8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014cdc:	4293      	cmp	r3, r2
 8014cde:	d803      	bhi.n	8014ce8 <mem_trim+0x34>
 8014ce0:	8bfa      	ldrh	r2, [r7, #30]
 8014ce2:	887b      	ldrh	r3, [r7, #2]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d201      	bcs.n	8014cec <mem_trim+0x38>
    return NULL;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	e0dc      	b.n	8014ea6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014cec:	4b70      	ldr	r3, [pc, #448]	; (8014eb0 <mem_trim+0x1fc>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d304      	bcc.n	8014d00 <mem_trim+0x4c>
 8014cf6:	4b6f      	ldr	r3, [pc, #444]	; (8014eb4 <mem_trim+0x200>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d306      	bcc.n	8014d0e <mem_trim+0x5a>
 8014d00:	4b6d      	ldr	r3, [pc, #436]	; (8014eb8 <mem_trim+0x204>)
 8014d02:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014d06:	496d      	ldr	r1, [pc, #436]	; (8014ebc <mem_trim+0x208>)
 8014d08:	486d      	ldr	r0, [pc, #436]	; (8014ec0 <mem_trim+0x20c>)
 8014d0a:	f007 febd 	bl	801ca88 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014d0e:	4b68      	ldr	r3, [pc, #416]	; (8014eb0 <mem_trim+0x1fc>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	687a      	ldr	r2, [r7, #4]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d304      	bcc.n	8014d22 <mem_trim+0x6e>
 8014d18:	4b66      	ldr	r3, [pc, #408]	; (8014eb4 <mem_trim+0x200>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d307      	bcc.n	8014d32 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014d22:	f001 fd1f 	bl	8016764 <sys_arch_protect>
 8014d26:	60b8      	str	r0, [r7, #8]
 8014d28:	68b8      	ldr	r0, [r7, #8]
 8014d2a:	f001 fd29 	bl	8016780 <sys_arch_unprotect>
    return rmem;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	e0b9      	b.n	8014ea6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3b08      	subs	r3, #8
 8014d36:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014d38:	69b8      	ldr	r0, [r7, #24]
 8014d3a:	f7ff fde7 	bl	801490c <mem_to_ptr>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	881a      	ldrh	r2, [r3, #0]
 8014d46:	8afb      	ldrh	r3, [r7, #22]
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	3b08      	subs	r3, #8
 8014d4e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014d50:	8bfa      	ldrh	r2, [r7, #30]
 8014d52:	8abb      	ldrh	r3, [r7, #20]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d906      	bls.n	8014d66 <mem_trim+0xb2>
 8014d58:	4b57      	ldr	r3, [pc, #348]	; (8014eb8 <mem_trim+0x204>)
 8014d5a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014d5e:	4959      	ldr	r1, [pc, #356]	; (8014ec4 <mem_trim+0x210>)
 8014d60:	4857      	ldr	r0, [pc, #348]	; (8014ec0 <mem_trim+0x20c>)
 8014d62:	f007 fe91 	bl	801ca88 <iprintf>
  if (newsize > size) {
 8014d66:	8bfa      	ldrh	r2, [r7, #30]
 8014d68:	8abb      	ldrh	r3, [r7, #20]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d901      	bls.n	8014d72 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	e099      	b.n	8014ea6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8014d72:	8bfa      	ldrh	r2, [r7, #30]
 8014d74:	8abb      	ldrh	r3, [r7, #20]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d101      	bne.n	8014d7e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	e093      	b.n	8014ea6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014d7e:	4852      	ldr	r0, [pc, #328]	; (8014ec8 <mem_trim+0x214>)
 8014d80:	f001 fcb4 	bl	80166ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7ff fdad 	bl	80148e8 <ptr_to_mem>
 8014d8e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	791b      	ldrb	r3, [r3, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d141      	bne.n	8014e1c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014da0:	4293      	cmp	r3, r2
 8014da2:	d106      	bne.n	8014db2 <mem_trim+0xfe>
 8014da4:	4b44      	ldr	r3, [pc, #272]	; (8014eb8 <mem_trim+0x204>)
 8014da6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014daa:	4948      	ldr	r1, [pc, #288]	; (8014ecc <mem_trim+0x218>)
 8014dac:	4844      	ldr	r0, [pc, #272]	; (8014ec0 <mem_trim+0x20c>)
 8014dae:	f007 fe6b 	bl	801ca88 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014db8:	8afa      	ldrh	r2, [r7, #22]
 8014dba:	8bfb      	ldrh	r3, [r7, #30]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	3308      	adds	r3, #8
 8014dc2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014dc4:	4b42      	ldr	r3, [pc, #264]	; (8014ed0 <mem_trim+0x21c>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	693a      	ldr	r2, [r7, #16]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d106      	bne.n	8014ddc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8014dce:	89fb      	ldrh	r3, [r7, #14]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7ff fd89 	bl	80148e8 <ptr_to_mem>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	4b3d      	ldr	r3, [pc, #244]	; (8014ed0 <mem_trim+0x21c>)
 8014dda:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014ddc:	89fb      	ldrh	r3, [r7, #14]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7ff fd82 	bl	80148e8 <ptr_to_mem>
 8014de4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	2200      	movs	r2, #0
 8014dea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	89ba      	ldrh	r2, [r7, #12]
 8014df0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	8afa      	ldrh	r2, [r7, #22]
 8014df6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	89fa      	ldrh	r2, [r7, #14]
 8014dfc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	881b      	ldrh	r3, [r3, #0]
 8014e02:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d049      	beq.n	8014e9e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7ff fd6a 	bl	80148e8 <ptr_to_mem>
 8014e14:	4602      	mov	r2, r0
 8014e16:	89fb      	ldrh	r3, [r7, #14]
 8014e18:	8053      	strh	r3, [r2, #2]
 8014e1a:	e040      	b.n	8014e9e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014e1c:	8bfb      	ldrh	r3, [r7, #30]
 8014e1e:	f103 0214 	add.w	r2, r3, #20
 8014e22:	8abb      	ldrh	r3, [r7, #20]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d83a      	bhi.n	8014e9e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014e28:	8afa      	ldrh	r2, [r7, #22]
 8014e2a:	8bfb      	ldrh	r3, [r7, #30]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	3308      	adds	r3, #8
 8014e32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014e34:	69bb      	ldr	r3, [r7, #24]
 8014e36:	881b      	ldrh	r3, [r3, #0]
 8014e38:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d106      	bne.n	8014e4e <mem_trim+0x19a>
 8014e40:	4b1d      	ldr	r3, [pc, #116]	; (8014eb8 <mem_trim+0x204>)
 8014e42:	f240 3216 	movw	r2, #790	; 0x316
 8014e46:	4921      	ldr	r1, [pc, #132]	; (8014ecc <mem_trim+0x218>)
 8014e48:	481d      	ldr	r0, [pc, #116]	; (8014ec0 <mem_trim+0x20c>)
 8014e4a:	f007 fe1d 	bl	801ca88 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014e4e:	89fb      	ldrh	r3, [r7, #14]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff fd49 	bl	80148e8 <ptr_to_mem>
 8014e56:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014e58:	4b1d      	ldr	r3, [pc, #116]	; (8014ed0 <mem_trim+0x21c>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	693a      	ldr	r2, [r7, #16]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d202      	bcs.n	8014e68 <mem_trim+0x1b4>
      lfree = mem2;
 8014e62:	4a1b      	ldr	r2, [pc, #108]	; (8014ed0 <mem_trim+0x21c>)
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014e6e:	69bb      	ldr	r3, [r7, #24]
 8014e70:	881a      	ldrh	r2, [r3, #0]
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	8afa      	ldrh	r2, [r7, #22]
 8014e7a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	89fa      	ldrh	r2, [r7, #14]
 8014e80:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	881b      	ldrh	r3, [r3, #0]
 8014e86:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d007      	beq.n	8014e9e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	881b      	ldrh	r3, [r3, #0]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7ff fd28 	bl	80148e8 <ptr_to_mem>
 8014e98:	4602      	mov	r2, r0
 8014e9a:	89fb      	ldrh	r3, [r7, #14]
 8014e9c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014e9e:	480a      	ldr	r0, [pc, #40]	; (8014ec8 <mem_trim+0x214>)
 8014ea0:	f001 fc33 	bl	801670a <sys_mutex_unlock>
  return rmem;
 8014ea4:	687b      	ldr	r3, [r7, #4]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3720      	adds	r7, #32
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	20007564 	.word	0x20007564
 8014eb4:	20007568 	.word	0x20007568
 8014eb8:	0801e4e4 	.word	0x0801e4e4
 8014ebc:	0801e69c 	.word	0x0801e69c
 8014ec0:	0801e558 	.word	0x0801e558
 8014ec4:	0801e6b4 	.word	0x0801e6b4
 8014ec8:	2000756c 	.word	0x2000756c
 8014ecc:	0801e6d4 	.word	0x0801e6d4
 8014ed0:	20007570 	.word	0x20007570

08014ed4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b088      	sub	sp, #32
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4603      	mov	r3, r0
 8014edc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014ede:	88fb      	ldrh	r3, [r7, #6]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d101      	bne.n	8014ee8 <mem_malloc+0x14>
    return NULL;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	e0e6      	b.n	80150b6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014ee8:	88fb      	ldrh	r3, [r7, #6]
 8014eea:	3303      	adds	r3, #3
 8014eec:	b29b      	uxth	r3, r3
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014ef4:	8bbb      	ldrh	r3, [r7, #28]
 8014ef6:	2b0b      	cmp	r3, #11
 8014ef8:	d801      	bhi.n	8014efe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014efa:	230c      	movs	r3, #12
 8014efc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014efe:	8bbb      	ldrh	r3, [r7, #28]
 8014f00:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d803      	bhi.n	8014f10 <mem_malloc+0x3c>
 8014f08:	8bba      	ldrh	r2, [r7, #28]
 8014f0a:	88fb      	ldrh	r3, [r7, #6]
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d201      	bcs.n	8014f14 <mem_malloc+0x40>
    return NULL;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e0d0      	b.n	80150b6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014f14:	486a      	ldr	r0, [pc, #424]	; (80150c0 <mem_malloc+0x1ec>)
 8014f16:	f001 fbe9 	bl	80166ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014f1a:	4b6a      	ldr	r3, [pc, #424]	; (80150c4 <mem_malloc+0x1f0>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7ff fcf4 	bl	801490c <mem_to_ptr>
 8014f24:	4603      	mov	r3, r0
 8014f26:	83fb      	strh	r3, [r7, #30]
 8014f28:	e0b9      	b.n	801509e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014f2a:	8bfb      	ldrh	r3, [r7, #30]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7ff fcdb 	bl	80148e8 <ptr_to_mem>
 8014f32:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	791b      	ldrb	r3, [r3, #4]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f040 80a9 	bne.w	8015090 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	881b      	ldrh	r3, [r3, #0]
 8014f42:	461a      	mov	r2, r3
 8014f44:	8bfb      	ldrh	r3, [r7, #30]
 8014f46:	1ad3      	subs	r3, r2, r3
 8014f48:	f1a3 0208 	sub.w	r2, r3, #8
 8014f4c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	f0c0 809e 	bcc.w	8015090 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	881b      	ldrh	r3, [r3, #0]
 8014f58:	461a      	mov	r2, r3
 8014f5a:	8bfb      	ldrh	r3, [r7, #30]
 8014f5c:	1ad3      	subs	r3, r2, r3
 8014f5e:	f1a3 0208 	sub.w	r2, r3, #8
 8014f62:	8bbb      	ldrh	r3, [r7, #28]
 8014f64:	3314      	adds	r3, #20
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d335      	bcc.n	8014fd6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014f6a:	8bfa      	ldrh	r2, [r7, #30]
 8014f6c:	8bbb      	ldrh	r3, [r7, #28]
 8014f6e:	4413      	add	r3, r2
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	3308      	adds	r3, #8
 8014f74:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014f76:	8a7b      	ldrh	r3, [r7, #18]
 8014f78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	d106      	bne.n	8014f8e <mem_malloc+0xba>
 8014f80:	4b51      	ldr	r3, [pc, #324]	; (80150c8 <mem_malloc+0x1f4>)
 8014f82:	f240 3287 	movw	r2, #903	; 0x387
 8014f86:	4951      	ldr	r1, [pc, #324]	; (80150cc <mem_malloc+0x1f8>)
 8014f88:	4851      	ldr	r0, [pc, #324]	; (80150d0 <mem_malloc+0x1fc>)
 8014f8a:	f007 fd7d 	bl	801ca88 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014f8e:	8a7b      	ldrh	r3, [r7, #18]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff fca9 	bl	80148e8 <ptr_to_mem>
 8014f96:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	881a      	ldrh	r2, [r3, #0]
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	8bfa      	ldrh	r2, [r7, #30]
 8014faa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	8a7a      	ldrh	r2, [r7, #18]
 8014fb0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	881b      	ldrh	r3, [r3, #0]
 8014fbc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014fc0:	4293      	cmp	r3, r2
 8014fc2:	d00b      	beq.n	8014fdc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	881b      	ldrh	r3, [r3, #0]
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7ff fc8d 	bl	80148e8 <ptr_to_mem>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	8a7b      	ldrh	r3, [r7, #18]
 8014fd2:	8053      	strh	r3, [r2, #2]
 8014fd4:	e002      	b.n	8014fdc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	2201      	movs	r2, #1
 8014fda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014fdc:	4b39      	ldr	r3, [pc, #228]	; (80150c4 <mem_malloc+0x1f0>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	697a      	ldr	r2, [r7, #20]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d127      	bne.n	8015036 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8014fe6:	4b37      	ldr	r3, [pc, #220]	; (80150c4 <mem_malloc+0x1f0>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014fec:	e005      	b.n	8014ffa <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7ff fc78 	bl	80148e8 <ptr_to_mem>
 8014ff8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	791b      	ldrb	r3, [r3, #4]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d004      	beq.n	801500c <mem_malloc+0x138>
 8015002:	4b34      	ldr	r3, [pc, #208]	; (80150d4 <mem_malloc+0x200>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	69ba      	ldr	r2, [r7, #24]
 8015008:	429a      	cmp	r2, r3
 801500a:	d1f0      	bne.n	8014fee <mem_malloc+0x11a>
          }
          lfree = cur;
 801500c:	4a2d      	ldr	r2, [pc, #180]	; (80150c4 <mem_malloc+0x1f0>)
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015012:	4b2c      	ldr	r3, [pc, #176]	; (80150c4 <mem_malloc+0x1f0>)
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	4b2f      	ldr	r3, [pc, #188]	; (80150d4 <mem_malloc+0x200>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	429a      	cmp	r2, r3
 801501c:	d00b      	beq.n	8015036 <mem_malloc+0x162>
 801501e:	4b29      	ldr	r3, [pc, #164]	; (80150c4 <mem_malloc+0x1f0>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	791b      	ldrb	r3, [r3, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d006      	beq.n	8015036 <mem_malloc+0x162>
 8015028:	4b27      	ldr	r3, [pc, #156]	; (80150c8 <mem_malloc+0x1f4>)
 801502a:	f240 32b5 	movw	r2, #949	; 0x3b5
 801502e:	492a      	ldr	r1, [pc, #168]	; (80150d8 <mem_malloc+0x204>)
 8015030:	4827      	ldr	r0, [pc, #156]	; (80150d0 <mem_malloc+0x1fc>)
 8015032:	f007 fd29 	bl	801ca88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8015036:	4822      	ldr	r0, [pc, #136]	; (80150c0 <mem_malloc+0x1ec>)
 8015038:	f001 fb67 	bl	801670a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801503c:	8bba      	ldrh	r2, [r7, #28]
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	4413      	add	r3, r2
 8015042:	3308      	adds	r3, #8
 8015044:	4a23      	ldr	r2, [pc, #140]	; (80150d4 <mem_malloc+0x200>)
 8015046:	6812      	ldr	r2, [r2, #0]
 8015048:	4293      	cmp	r3, r2
 801504a:	d906      	bls.n	801505a <mem_malloc+0x186>
 801504c:	4b1e      	ldr	r3, [pc, #120]	; (80150c8 <mem_malloc+0x1f4>)
 801504e:	f240 32ba 	movw	r2, #954	; 0x3ba
 8015052:	4922      	ldr	r1, [pc, #136]	; (80150dc <mem_malloc+0x208>)
 8015054:	481e      	ldr	r0, [pc, #120]	; (80150d0 <mem_malloc+0x1fc>)
 8015056:	f007 fd17 	bl	801ca88 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	f003 0303 	and.w	r3, r3, #3
 8015060:	2b00      	cmp	r3, #0
 8015062:	d006      	beq.n	8015072 <mem_malloc+0x19e>
 8015064:	4b18      	ldr	r3, [pc, #96]	; (80150c8 <mem_malloc+0x1f4>)
 8015066:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 801506a:	491d      	ldr	r1, [pc, #116]	; (80150e0 <mem_malloc+0x20c>)
 801506c:	4818      	ldr	r0, [pc, #96]	; (80150d0 <mem_malloc+0x1fc>)
 801506e:	f007 fd0b 	bl	801ca88 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	f003 0303 	and.w	r3, r3, #3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d006      	beq.n	801508a <mem_malloc+0x1b6>
 801507c:	4b12      	ldr	r3, [pc, #72]	; (80150c8 <mem_malloc+0x1f4>)
 801507e:	f240 32be 	movw	r2, #958	; 0x3be
 8015082:	4918      	ldr	r1, [pc, #96]	; (80150e4 <mem_malloc+0x210>)
 8015084:	4812      	ldr	r0, [pc, #72]	; (80150d0 <mem_malloc+0x1fc>)
 8015086:	f007 fcff 	bl	801ca88 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	3308      	adds	r3, #8
 801508e:	e012      	b.n	80150b6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8015090:	8bfb      	ldrh	r3, [r7, #30]
 8015092:	4618      	mov	r0, r3
 8015094:	f7ff fc28 	bl	80148e8 <ptr_to_mem>
 8015098:	4603      	mov	r3, r0
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801509e:	8bfa      	ldrh	r2, [r7, #30]
 80150a0:	8bb9      	ldrh	r1, [r7, #28]
 80150a2:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 80150a6:	1a5b      	subs	r3, r3, r1
 80150a8:	429a      	cmp	r2, r3
 80150aa:	f4ff af3e 	bcc.w	8014f2a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80150ae:	4804      	ldr	r0, [pc, #16]	; (80150c0 <mem_malloc+0x1ec>)
 80150b0:	f001 fb2b 	bl	801670a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3720      	adds	r7, #32
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	2000756c 	.word	0x2000756c
 80150c4:	20007570 	.word	0x20007570
 80150c8:	0801e4e4 	.word	0x0801e4e4
 80150cc:	0801e6d4 	.word	0x0801e6d4
 80150d0:	0801e558 	.word	0x0801e558
 80150d4:	20007568 	.word	0x20007568
 80150d8:	0801e6e8 	.word	0x0801e6e8
 80150dc:	0801e704 	.word	0x0801e704
 80150e0:	0801e734 	.word	0x0801e734
 80150e4:	0801e764 	.word	0x0801e764

080150e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	689b      	ldr	r3, [r3, #8]
 80150f4:	2200      	movs	r2, #0
 80150f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	3303      	adds	r3, #3
 80150fe:	f023 0303 	bic.w	r3, r3, #3
 8015102:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015104:	2300      	movs	r3, #0
 8015106:	60fb      	str	r3, [r7, #12]
 8015108:	e011      	b.n	801512e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	689b      	ldr	r3, [r3, #8]
 8015118:	68ba      	ldr	r2, [r7, #8]
 801511a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	881b      	ldrh	r3, [r3, #0]
 8015120:	461a      	mov	r2, r3
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	4413      	add	r3, r2
 8015126:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3301      	adds	r3, #1
 801512c:	60fb      	str	r3, [r7, #12]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	885b      	ldrh	r3, [r3, #2]
 8015132:	461a      	mov	r2, r3
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	4293      	cmp	r3, r2
 8015138:	dbe7      	blt.n	801510a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801513a:	bf00      	nop
 801513c:	3714      	adds	r7, #20
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr
	...

08015148 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801514e:	2300      	movs	r3, #0
 8015150:	80fb      	strh	r3, [r7, #6]
 8015152:	e009      	b.n	8015168 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015154:	88fb      	ldrh	r3, [r7, #6]
 8015156:	4a08      	ldr	r2, [pc, #32]	; (8015178 <memp_init+0x30>)
 8015158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801515c:	4618      	mov	r0, r3
 801515e:	f7ff ffc3 	bl	80150e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015162:	88fb      	ldrh	r3, [r7, #6]
 8015164:	3301      	adds	r3, #1
 8015166:	80fb      	strh	r3, [r7, #6]
 8015168:	88fb      	ldrh	r3, [r7, #6]
 801516a:	2b0c      	cmp	r3, #12
 801516c:	d9f2      	bls.n	8015154 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801516e:	bf00      	nop
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	08020b74 	.word	0x08020b74

0801517c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8015184:	f001 faee 	bl	8016764 <sys_arch_protect>
 8015188:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	689b      	ldr	r3, [r3, #8]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d015      	beq.n	80151c4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	689b      	ldr	r3, [r3, #8]
 801519c:	68ba      	ldr	r2, [r7, #8]
 801519e:	6812      	ldr	r2, [r2, #0]
 80151a0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	f003 0303 	and.w	r3, r3, #3
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d006      	beq.n	80151ba <do_memp_malloc_pool+0x3e>
 80151ac:	4b09      	ldr	r3, [pc, #36]	; (80151d4 <do_memp_malloc_pool+0x58>)
 80151ae:	f240 1219 	movw	r2, #281	; 0x119
 80151b2:	4909      	ldr	r1, [pc, #36]	; (80151d8 <do_memp_malloc_pool+0x5c>)
 80151b4:	4809      	ldr	r0, [pc, #36]	; (80151dc <do_memp_malloc_pool+0x60>)
 80151b6:	f007 fc67 	bl	801ca88 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f001 fae0 	bl	8016780 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	e003      	b.n	80151cc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f001 fadb 	bl	8016780 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	0801e788 	.word	0x0801e788
 80151d8:	0801e7e4 	.word	0x0801e7e4
 80151dc:	0801e808 	.word	0x0801e808

080151e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d106      	bne.n	80151fc <memp_malloc_pool+0x1c>
 80151ee:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <memp_malloc_pool+0x38>)
 80151f0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80151f4:	4909      	ldr	r1, [pc, #36]	; (801521c <memp_malloc_pool+0x3c>)
 80151f6:	480a      	ldr	r0, [pc, #40]	; (8015220 <memp_malloc_pool+0x40>)
 80151f8:	f007 fc46 	bl	801ca88 <iprintf>
  if (desc == NULL) {
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d101      	bne.n	8015206 <memp_malloc_pool+0x26>
    return NULL;
 8015202:	2300      	movs	r3, #0
 8015204:	e003      	b.n	801520e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f7ff ffb8 	bl	801517c <do_memp_malloc_pool>
 801520c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801520e:	4618      	mov	r0, r3
 8015210:	3708      	adds	r7, #8
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	0801e788 	.word	0x0801e788
 801521c:	0801e830 	.word	0x0801e830
 8015220:	0801e808 	.word	0x0801e808

08015224 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b084      	sub	sp, #16
 8015228:	af00      	add	r7, sp, #0
 801522a:	4603      	mov	r3, r0
 801522c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801522e:	79fb      	ldrb	r3, [r7, #7]
 8015230:	2b0c      	cmp	r3, #12
 8015232:	d908      	bls.n	8015246 <memp_malloc+0x22>
 8015234:	4b0a      	ldr	r3, [pc, #40]	; (8015260 <memp_malloc+0x3c>)
 8015236:	f240 1257 	movw	r2, #343	; 0x157
 801523a:	490a      	ldr	r1, [pc, #40]	; (8015264 <memp_malloc+0x40>)
 801523c:	480a      	ldr	r0, [pc, #40]	; (8015268 <memp_malloc+0x44>)
 801523e:	f007 fc23 	bl	801ca88 <iprintf>
 8015242:	2300      	movs	r3, #0
 8015244:	e008      	b.n	8015258 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015246:	79fb      	ldrb	r3, [r7, #7]
 8015248:	4a08      	ldr	r2, [pc, #32]	; (801526c <memp_malloc+0x48>)
 801524a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801524e:	4618      	mov	r0, r3
 8015250:	f7ff ff94 	bl	801517c <do_memp_malloc_pool>
 8015254:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015256:	68fb      	ldr	r3, [r7, #12]
}
 8015258:	4618      	mov	r0, r3
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0801e788 	.word	0x0801e788
 8015264:	0801e844 	.word	0x0801e844
 8015268:	0801e808 	.word	0x0801e808
 801526c:	08020b74 	.word	0x08020b74

08015270 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	f003 0303 	and.w	r3, r3, #3
 8015280:	2b00      	cmp	r3, #0
 8015282:	d006      	beq.n	8015292 <do_memp_free_pool+0x22>
 8015284:	4b0d      	ldr	r3, [pc, #52]	; (80152bc <do_memp_free_pool+0x4c>)
 8015286:	f240 126d 	movw	r2, #365	; 0x16d
 801528a:	490d      	ldr	r1, [pc, #52]	; (80152c0 <do_memp_free_pool+0x50>)
 801528c:	480d      	ldr	r0, [pc, #52]	; (80152c4 <do_memp_free_pool+0x54>)
 801528e:	f007 fbfb 	bl	801ca88 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8015296:	f001 fa65 	bl	8016764 <sys_arch_protect>
 801529a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	681a      	ldr	r2, [r3, #0]
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	689b      	ldr	r3, [r3, #8]
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80152ae:	68b8      	ldr	r0, [r7, #8]
 80152b0:	f001 fa66 	bl	8016780 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80152b4:	bf00      	nop
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	0801e788 	.word	0x0801e788
 80152c0:	0801e864 	.word	0x0801e864
 80152c4:	0801e808 	.word	0x0801e808

080152c8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d106      	bne.n	80152e6 <memp_free_pool+0x1e>
 80152d8:	4b0a      	ldr	r3, [pc, #40]	; (8015304 <memp_free_pool+0x3c>)
 80152da:	f240 1295 	movw	r2, #405	; 0x195
 80152de:	490a      	ldr	r1, [pc, #40]	; (8015308 <memp_free_pool+0x40>)
 80152e0:	480a      	ldr	r0, [pc, #40]	; (801530c <memp_free_pool+0x44>)
 80152e2:	f007 fbd1 	bl	801ca88 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d007      	beq.n	80152fc <memp_free_pool+0x34>
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d004      	beq.n	80152fc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80152f2:	6839      	ldr	r1, [r7, #0]
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff ffbb 	bl	8015270 <do_memp_free_pool>
 80152fa:	e000      	b.n	80152fe <memp_free_pool+0x36>
    return;
 80152fc:	bf00      	nop
}
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}
 8015304:	0801e788 	.word	0x0801e788
 8015308:	0801e830 	.word	0x0801e830
 801530c:	0801e808 	.word	0x0801e808

08015310 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	4603      	mov	r3, r0
 8015318:	6039      	str	r1, [r7, #0]
 801531a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801531c:	79fb      	ldrb	r3, [r7, #7]
 801531e:	2b0c      	cmp	r3, #12
 8015320:	d907      	bls.n	8015332 <memp_free+0x22>
 8015322:	4b0c      	ldr	r3, [pc, #48]	; (8015354 <memp_free+0x44>)
 8015324:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015328:	490b      	ldr	r1, [pc, #44]	; (8015358 <memp_free+0x48>)
 801532a:	480c      	ldr	r0, [pc, #48]	; (801535c <memp_free+0x4c>)
 801532c:	f007 fbac 	bl	801ca88 <iprintf>
 8015330:	e00c      	b.n	801534c <memp_free+0x3c>

  if (mem == NULL) {
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d008      	beq.n	801534a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015338:	79fb      	ldrb	r3, [r7, #7]
 801533a:	4a09      	ldr	r2, [pc, #36]	; (8015360 <memp_free+0x50>)
 801533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015340:	6839      	ldr	r1, [r7, #0]
 8015342:	4618      	mov	r0, r3
 8015344:	f7ff ff94 	bl	8015270 <do_memp_free_pool>
 8015348:	e000      	b.n	801534c <memp_free+0x3c>
    return;
 801534a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	0801e788 	.word	0x0801e788
 8015358:	0801e884 	.word	0x0801e884
 801535c:	0801e808 	.word	0x0801e808
 8015360:	08020b74 	.word	0x08020b74

08015364 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015364:	b480      	push	{r7}
 8015366:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015368:	bf00      	nop
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
	...

08015374 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b086      	sub	sp, #24
 8015378:	af00      	add	r7, sp, #0
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
 8015380:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d108      	bne.n	801539a <netif_add+0x26>
 8015388:	4b5b      	ldr	r3, [pc, #364]	; (80154f8 <netif_add+0x184>)
 801538a:	f240 1227 	movw	r2, #295	; 0x127
 801538e:	495b      	ldr	r1, [pc, #364]	; (80154fc <netif_add+0x188>)
 8015390:	485b      	ldr	r0, [pc, #364]	; (8015500 <netif_add+0x18c>)
 8015392:	f007 fb79 	bl	801ca88 <iprintf>
 8015396:	2300      	movs	r3, #0
 8015398:	e0a9      	b.n	80154ee <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	2b00      	cmp	r3, #0
 801539e:	d108      	bne.n	80153b2 <netif_add+0x3e>
 80153a0:	4b55      	ldr	r3, [pc, #340]	; (80154f8 <netif_add+0x184>)
 80153a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80153a6:	4957      	ldr	r1, [pc, #348]	; (8015504 <netif_add+0x190>)
 80153a8:	4855      	ldr	r0, [pc, #340]	; (8015500 <netif_add+0x18c>)
 80153aa:	f007 fb6d 	bl	801ca88 <iprintf>
 80153ae:	2300      	movs	r3, #0
 80153b0:	e09d      	b.n	80154ee <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d101      	bne.n	80153bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80153b8:	4b53      	ldr	r3, [pc, #332]	; (8015508 <netif_add+0x194>)
 80153ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80153c2:	4b51      	ldr	r3, [pc, #324]	; (8015508 <netif_add+0x194>)
 80153c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d101      	bne.n	80153d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80153cc:	4b4e      	ldr	r3, [pc, #312]	; (8015508 <netif_add+0x194>)
 80153ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	2200      	movs	r2, #0
 80153d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2200      	movs	r2, #0
 80153da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2200      	movs	r2, #0
 80153e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	4a49      	ldr	r2, [pc, #292]	; (801550c <netif_add+0x198>)
 80153e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2200      	movs	r2, #0
 80153f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	3324      	adds	r3, #36	; 0x24
 80153fa:	2204      	movs	r2, #4
 80153fc:	2100      	movs	r1, #0
 80153fe:	4618      	mov	r0, r3
 8015400:	f007 fb3a 	bl	801ca78 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2200      	movs	r2, #0
 8015408:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	6a3a      	ldr	r2, [r7, #32]
 801540e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015410:	4b3f      	ldr	r3, [pc, #252]	; (8015510 <netif_add+0x19c>)
 8015412:	781a      	ldrb	r2, [r3, #0]
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801541e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	68b9      	ldr	r1, [r7, #8]
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	f000 f914 	bl	8015654 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	4798      	blx	r3
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d001      	beq.n	801543c <netif_add+0xc8>
    return NULL;
 8015438:	2300      	movs	r3, #0
 801543a:	e058      	b.n	80154ee <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015442:	2bff      	cmp	r3, #255	; 0xff
 8015444:	d103      	bne.n	801544e <netif_add+0xda>
        netif->num = 0;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2200      	movs	r2, #0
 801544a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801544e:	2300      	movs	r3, #0
 8015450:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015452:	4b30      	ldr	r3, [pc, #192]	; (8015514 <netif_add+0x1a0>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	617b      	str	r3, [r7, #20]
 8015458:	e02b      	b.n	80154b2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801545a:	697a      	ldr	r2, [r7, #20]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	429a      	cmp	r2, r3
 8015460:	d106      	bne.n	8015470 <netif_add+0xfc>
 8015462:	4b25      	ldr	r3, [pc, #148]	; (80154f8 <netif_add+0x184>)
 8015464:	f240 128b 	movw	r2, #395	; 0x18b
 8015468:	492b      	ldr	r1, [pc, #172]	; (8015518 <netif_add+0x1a4>)
 801546a:	4825      	ldr	r0, [pc, #148]	; (8015500 <netif_add+0x18c>)
 801546c:	f007 fb0c 	bl	801ca88 <iprintf>
        num_netifs++;
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	3301      	adds	r3, #1
 8015474:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	2bff      	cmp	r3, #255	; 0xff
 801547a:	dd06      	ble.n	801548a <netif_add+0x116>
 801547c:	4b1e      	ldr	r3, [pc, #120]	; (80154f8 <netif_add+0x184>)
 801547e:	f240 128d 	movw	r2, #397	; 0x18d
 8015482:	4926      	ldr	r1, [pc, #152]	; (801551c <netif_add+0x1a8>)
 8015484:	481e      	ldr	r0, [pc, #120]	; (8015500 <netif_add+0x18c>)
 8015486:	f007 faff 	bl	801ca88 <iprintf>
        if (netif2->num == netif->num) {
 801548a:	697b      	ldr	r3, [r7, #20]
 801548c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015496:	429a      	cmp	r2, r3
 8015498:	d108      	bne.n	80154ac <netif_add+0x138>
          netif->num++;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154a0:	3301      	adds	r3, #1
 80154a2:	b2da      	uxtb	r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80154aa:	e005      	b.n	80154b8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	617b      	str	r3, [r7, #20]
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d1d0      	bne.n	801545a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d1be      	bne.n	801543c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154c4:	2bfe      	cmp	r3, #254	; 0xfe
 80154c6:	d103      	bne.n	80154d0 <netif_add+0x15c>
    netif_num = 0;
 80154c8:	4b11      	ldr	r3, [pc, #68]	; (8015510 <netif_add+0x19c>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	701a      	strb	r2, [r3, #0]
 80154ce:	e006      	b.n	80154de <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154d6:	3301      	adds	r3, #1
 80154d8:	b2da      	uxtb	r2, r3
 80154da:	4b0d      	ldr	r3, [pc, #52]	; (8015510 <netif_add+0x19c>)
 80154dc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80154de:	4b0d      	ldr	r3, [pc, #52]	; (8015514 <netif_add+0x1a0>)
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80154e6:	4a0b      	ldr	r2, [pc, #44]	; (8015514 <netif_add+0x1a0>)
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80154ec:	68fb      	ldr	r3, [r7, #12]
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3718      	adds	r7, #24
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	0801e8a0 	.word	0x0801e8a0
 80154fc:	0801e960 	.word	0x0801e960
 8015500:	0801e91c 	.word	0x0801e91c
 8015504:	0801e97c 	.word	0x0801e97c
 8015508:	08020ad0 	.word	0x08020ad0
 801550c:	08015937 	.word	0x08015937
 8015510:	200075a8 	.word	0x200075a8
 8015514:	2000b728 	.word	0x2000b728
 8015518:	0801e9a0 	.word	0x0801e9a0
 801551c:	0801e9b4 	.word	0x0801e9b4

08015520 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801552a:	6839      	ldr	r1, [r7, #0]
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f002 fc73 	bl	8017e18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015532:	6839      	ldr	r1, [r7, #0]
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f007 fa31 	bl	801c99c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801553a:	bf00      	nop
 801553c:	3708      	adds	r7, #8
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
	...

08015544 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	60b9      	str	r1, [r7, #8]
 801554e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <netif_do_set_ipaddr+0x20>
 8015556:	4b1d      	ldr	r3, [pc, #116]	; (80155cc <netif_do_set_ipaddr+0x88>)
 8015558:	f240 12cb 	movw	r2, #459	; 0x1cb
 801555c:	491c      	ldr	r1, [pc, #112]	; (80155d0 <netif_do_set_ipaddr+0x8c>)
 801555e:	481d      	ldr	r0, [pc, #116]	; (80155d4 <netif_do_set_ipaddr+0x90>)
 8015560:	f007 fa92 	bl	801ca88 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d106      	bne.n	8015578 <netif_do_set_ipaddr+0x34>
 801556a:	4b18      	ldr	r3, [pc, #96]	; (80155cc <netif_do_set_ipaddr+0x88>)
 801556c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015570:	4917      	ldr	r1, [pc, #92]	; (80155d0 <netif_do_set_ipaddr+0x8c>)
 8015572:	4818      	ldr	r0, [pc, #96]	; (80155d4 <netif_do_set_ipaddr+0x90>)
 8015574:	f007 fa88 	bl	801ca88 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	3304      	adds	r3, #4
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	429a      	cmp	r2, r3
 8015584:	d01c      	beq.n	80155c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	3304      	adds	r3, #4
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015596:	f107 0314 	add.w	r3, r7, #20
 801559a:	4619      	mov	r1, r3
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f7ff ffbf 	bl	8015520 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d002      	beq.n	80155ae <netif_do_set_ipaddr+0x6a>
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	e000      	b.n	80155b0 <netif_do_set_ipaddr+0x6c>
 80155ae:	2300      	movs	r3, #0
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80155b4:	2101      	movs	r1, #1
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f000 f8d2 	bl	8015760 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80155bc:	2301      	movs	r3, #1
 80155be:	e000      	b.n	80155c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3718      	adds	r7, #24
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	0801e8a0 	.word	0x0801e8a0
 80155d0:	0801e9e4 	.word	0x0801e9e4
 80155d4:	0801e91c 	.word	0x0801e91c

080155d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80155d8:	b480      	push	{r7}
 80155da:	b085      	sub	sp, #20
 80155dc:	af00      	add	r7, sp, #0
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	3308      	adds	r3, #8
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d00a      	beq.n	8015608 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <netif_do_set_netmask+0x26>
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	e000      	b.n	8015600 <netif_do_set_netmask+0x28>
 80155fe:	2300      	movs	r3, #0
 8015600:	68fa      	ldr	r2, [r7, #12]
 8015602:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015604:	2301      	movs	r3, #1
 8015606:	e000      	b.n	801560a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3714      	adds	r7, #20
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015616:	b480      	push	{r7}
 8015618:	b085      	sub	sp, #20
 801561a:	af00      	add	r7, sp, #0
 801561c:	60f8      	str	r0, [r7, #12]
 801561e:	60b9      	str	r1, [r7, #8]
 8015620:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	330c      	adds	r3, #12
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	429a      	cmp	r2, r3
 801562e:	d00a      	beq.n	8015646 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d002      	beq.n	801563c <netif_do_set_gw+0x26>
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	e000      	b.n	801563e <netif_do_set_gw+0x28>
 801563c:	2300      	movs	r3, #0
 801563e:	68fa      	ldr	r2, [r7, #12]
 8015640:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015642:	2301      	movs	r3, #1
 8015644:	e000      	b.n	8015648 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015646:	2300      	movs	r3, #0
}
 8015648:	4618      	mov	r0, r3
 801564a:	3714      	adds	r7, #20
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr

08015654 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b088      	sub	sp, #32
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
 8015660:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015662:	2300      	movs	r3, #0
 8015664:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015666:	2300      	movs	r3, #0
 8015668:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d101      	bne.n	8015674 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015670:	4b1c      	ldr	r3, [pc, #112]	; (80156e4 <netif_set_addr+0x90>)
 8015672:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d101      	bne.n	801567e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801567a:	4b1a      	ldr	r3, [pc, #104]	; (80156e4 <netif_set_addr+0x90>)
 801567c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d101      	bne.n	8015688 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015684:	4b17      	ldr	r3, [pc, #92]	; (80156e4 <netif_set_addr+0x90>)
 8015686:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d003      	beq.n	8015696 <netif_set_addr+0x42>
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d101      	bne.n	801569a <netif_set_addr+0x46>
 8015696:	2301      	movs	r3, #1
 8015698:	e000      	b.n	801569c <netif_set_addr+0x48>
 801569a:	2300      	movs	r3, #0
 801569c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d006      	beq.n	80156b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80156a4:	f107 0310 	add.w	r3, r7, #16
 80156a8:	461a      	mov	r2, r3
 80156aa:	68b9      	ldr	r1, [r7, #8]
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f7ff ff49 	bl	8015544 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80156b2:	69fa      	ldr	r2, [r7, #28]
 80156b4:	6879      	ldr	r1, [r7, #4]
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7ff ff8e 	bl	80155d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80156bc:	69ba      	ldr	r2, [r7, #24]
 80156be:	6839      	ldr	r1, [r7, #0]
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	f7ff ffa8 	bl	8015616 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d106      	bne.n	80156da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80156cc:	f107 0310 	add.w	r3, r7, #16
 80156d0:	461a      	mov	r2, r3
 80156d2:	68b9      	ldr	r1, [r7, #8]
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f7ff ff35 	bl	8015544 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80156da:	bf00      	nop
 80156dc:	3720      	adds	r7, #32
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	08020ad0 	.word	0x08020ad0

080156e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80156e8:	b480      	push	{r7}
 80156ea:	b083      	sub	sp, #12
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80156f0:	4a04      	ldr	r2, [pc, #16]	; (8015704 <netif_set_default+0x1c>)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80156f6:	bf00      	nop
 80156f8:	370c      	adds	r7, #12
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr
 8015702:	bf00      	nop
 8015704:	2000b72c 	.word	0x2000b72c

08015708 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d107      	bne.n	8015726 <netif_set_up+0x1e>
 8015716:	4b0f      	ldr	r3, [pc, #60]	; (8015754 <netif_set_up+0x4c>)
 8015718:	f44f 7254 	mov.w	r2, #848	; 0x350
 801571c:	490e      	ldr	r1, [pc, #56]	; (8015758 <netif_set_up+0x50>)
 801571e:	480f      	ldr	r0, [pc, #60]	; (801575c <netif_set_up+0x54>)
 8015720:	f007 f9b2 	bl	801ca88 <iprintf>
 8015724:	e013      	b.n	801574e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801572c:	f003 0301 	and.w	r3, r3, #1
 8015730:	2b00      	cmp	r3, #0
 8015732:	d10c      	bne.n	801574e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801573a:	f043 0301 	orr.w	r3, r3, #1
 801573e:	b2da      	uxtb	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015746:	2103      	movs	r1, #3
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f000 f809 	bl	8015760 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	0801e8a0 	.word	0x0801e8a0
 8015758:	0801ea54 	.word	0x0801ea54
 801575c:	0801e91c 	.word	0x0801e91c

08015760 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	460b      	mov	r3, r1
 801576a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d106      	bne.n	8015780 <netif_issue_reports+0x20>
 8015772:	4b18      	ldr	r3, [pc, #96]	; (80157d4 <netif_issue_reports+0x74>)
 8015774:	f240 326d 	movw	r2, #877	; 0x36d
 8015778:	4917      	ldr	r1, [pc, #92]	; (80157d8 <netif_issue_reports+0x78>)
 801577a:	4818      	ldr	r0, [pc, #96]	; (80157dc <netif_issue_reports+0x7c>)
 801577c:	f007 f984 	bl	801ca88 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015786:	f003 0304 	and.w	r3, r3, #4
 801578a:	2b00      	cmp	r3, #0
 801578c:	d01e      	beq.n	80157cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015794:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015798:	2b00      	cmp	r3, #0
 801579a:	d017      	beq.n	80157cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801579c:	78fb      	ldrb	r3, [r7, #3]
 801579e:	f003 0301 	and.w	r3, r3, #1
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d013      	beq.n	80157ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	3304      	adds	r3, #4
 80157aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d00e      	beq.n	80157ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157b6:	f003 0308 	and.w	r3, r3, #8
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d007      	beq.n	80157ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	3304      	adds	r3, #4
 80157c2:	4619      	mov	r1, r3
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f7fd fbf7 	bl	8012fb8 <etharp_request>
 80157ca:	e000      	b.n	80157ce <netif_issue_reports+0x6e>
    return;
 80157cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	0801e8a0 	.word	0x0801e8a0
 80157d8:	0801ea70 	.word	0x0801ea70
 80157dc:	0801e91c 	.word	0x0801e91c

080157e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d107      	bne.n	80157fe <netif_set_down+0x1e>
 80157ee:	4b12      	ldr	r3, [pc, #72]	; (8015838 <netif_set_down+0x58>)
 80157f0:	f240 329b 	movw	r2, #923	; 0x39b
 80157f4:	4911      	ldr	r1, [pc, #68]	; (801583c <netif_set_down+0x5c>)
 80157f6:	4812      	ldr	r0, [pc, #72]	; (8015840 <netif_set_down+0x60>)
 80157f8:	f007 f946 	bl	801ca88 <iprintf>
 80157fc:	e019      	b.n	8015832 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015804:	f003 0301 	and.w	r3, r3, #1
 8015808:	2b00      	cmp	r3, #0
 801580a:	d012      	beq.n	8015832 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015812:	f023 0301 	bic.w	r3, r3, #1
 8015816:	b2da      	uxtb	r2, r3
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015824:	f003 0308 	and.w	r3, r3, #8
 8015828:	2b00      	cmp	r3, #0
 801582a:	d002      	beq.n	8015832 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f7fc ff7d 	bl	801272c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015832:	3708      	adds	r7, #8
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	0801e8a0 	.word	0x0801e8a0
 801583c:	0801ea94 	.word	0x0801ea94
 8015840:	0801e91c 	.word	0x0801e91c

08015844 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d107      	bne.n	8015862 <netif_set_link_up+0x1e>
 8015852:	4b15      	ldr	r3, [pc, #84]	; (80158a8 <netif_set_link_up+0x64>)
 8015854:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015858:	4914      	ldr	r1, [pc, #80]	; (80158ac <netif_set_link_up+0x68>)
 801585a:	4815      	ldr	r0, [pc, #84]	; (80158b0 <netif_set_link_up+0x6c>)
 801585c:	f007 f914 	bl	801ca88 <iprintf>
 8015860:	e01e      	b.n	80158a0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015868:	f003 0304 	and.w	r3, r3, #4
 801586c:	2b00      	cmp	r3, #0
 801586e:	d117      	bne.n	80158a0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015876:	f043 0304 	orr.w	r3, r3, #4
 801587a:	b2da      	uxtb	r2, r3
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f7fb f9b2 	bl	8010bec <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015888:	2103      	movs	r1, #3
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f7ff ff68 	bl	8015760 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	69db      	ldr	r3, [r3, #28]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d003      	beq.n	80158a0 <netif_set_link_up+0x5c>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	69db      	ldr	r3, [r3, #28]
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	0801e8a0 	.word	0x0801e8a0
 80158ac:	0801eab4 	.word	0x0801eab4
 80158b0:	0801e91c 	.word	0x0801e91c

080158b4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d107      	bne.n	80158d2 <netif_set_link_down+0x1e>
 80158c2:	4b11      	ldr	r3, [pc, #68]	; (8015908 <netif_set_link_down+0x54>)
 80158c4:	f240 4206 	movw	r2, #1030	; 0x406
 80158c8:	4910      	ldr	r1, [pc, #64]	; (801590c <netif_set_link_down+0x58>)
 80158ca:	4811      	ldr	r0, [pc, #68]	; (8015910 <netif_set_link_down+0x5c>)
 80158cc:	f007 f8dc 	bl	801ca88 <iprintf>
 80158d0:	e017      	b.n	8015902 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158d8:	f003 0304 	and.w	r3, r3, #4
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d010      	beq.n	8015902 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158e6:	f023 0304 	bic.w	r3, r3, #4
 80158ea:	b2da      	uxtb	r2, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	69db      	ldr	r3, [r3, #28]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d003      	beq.n	8015902 <netif_set_link_down+0x4e>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	69db      	ldr	r3, [r3, #28]
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	0801e8a0 	.word	0x0801e8a0
 801590c:	0801ead8 	.word	0x0801ead8
 8015910:	0801e91c 	.word	0x0801e91c

08015914 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d002      	beq.n	801592a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	683a      	ldr	r2, [r7, #0]
 8015928:	61da      	str	r2, [r3, #28]
  }
}
 801592a:	bf00      	nop
 801592c:	370c      	adds	r7, #12
 801592e:	46bd      	mov	sp, r7
 8015930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015934:	4770      	bx	lr

08015936 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8015936:	b480      	push	{r7}
 8015938:	b085      	sub	sp, #20
 801593a:	af00      	add	r7, sp, #0
 801593c:	60f8      	str	r0, [r7, #12]
 801593e:	60b9      	str	r1, [r7, #8]
 8015940:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015942:	f06f 030b 	mvn.w	r3, #11
}
 8015946:	4618      	mov	r0, r3
 8015948:	3714      	adds	r7, #20
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr
	...

08015954 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801595e:	79fb      	ldrb	r3, [r7, #7]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d013      	beq.n	801598c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015964:	4b0d      	ldr	r3, [pc, #52]	; (801599c <netif_get_by_index+0x48>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	60fb      	str	r3, [r7, #12]
 801596a:	e00c      	b.n	8015986 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015972:	3301      	adds	r3, #1
 8015974:	b2db      	uxtb	r3, r3
 8015976:	79fa      	ldrb	r2, [r7, #7]
 8015978:	429a      	cmp	r2, r3
 801597a:	d101      	bne.n	8015980 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	e006      	b.n	801598e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	60fb      	str	r3, [r7, #12]
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d1ef      	bne.n	801596c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801598c:	2300      	movs	r3, #0
}
 801598e:	4618      	mov	r0, r3
 8015990:	3714      	adds	r7, #20
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr
 801599a:	bf00      	nop
 801599c:	2000b728 	.word	0x2000b728

080159a0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80159a6:	f000 fedd 	bl	8016764 <sys_arch_protect>
 80159aa:	6038      	str	r0, [r7, #0]
 80159ac:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <pbuf_free_ooseq+0x44>)
 80159ae:	2200      	movs	r2, #0
 80159b0:	701a      	strb	r2, [r3, #0]
 80159b2:	6838      	ldr	r0, [r7, #0]
 80159b4:	f000 fee4 	bl	8016780 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80159b8:	4b0b      	ldr	r3, [pc, #44]	; (80159e8 <pbuf_free_ooseq+0x48>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	607b      	str	r3, [r7, #4]
 80159be:	e00a      	b.n	80159d6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d003      	beq.n	80159d0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f002 fa63 	bl	8017e94 <tcp_free_ooseq>
      return;
 80159ce:	e005      	b.n	80159dc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	607b      	str	r3, [r7, #4]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d1f1      	bne.n	80159c0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80159dc:	3708      	adds	r7, #8
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	2000b730 	.word	0x2000b730
 80159e8:	2000b740 	.word	0x2000b740

080159ec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80159f4:	f7ff ffd4 	bl	80159a0 <pbuf_free_ooseq>
}
 80159f8:	bf00      	nop
 80159fa:	3708      	adds	r7, #8
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8015a06:	f000 fead 	bl	8016764 <sys_arch_protect>
 8015a0a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015a0c:	4b0f      	ldr	r3, [pc, #60]	; (8015a4c <pbuf_pool_is_empty+0x4c>)
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8015a12:	4b0e      	ldr	r3, [pc, #56]	; (8015a4c <pbuf_pool_is_empty+0x4c>)
 8015a14:	2201      	movs	r2, #1
 8015a16:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f000 feb1 	bl	8016780 <sys_arch_unprotect>

  if (!queued) {
 8015a1e:	78fb      	ldrb	r3, [r7, #3]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10f      	bne.n	8015a44 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8015a24:	2100      	movs	r1, #0
 8015a26:	480a      	ldr	r0, [pc, #40]	; (8015a50 <pbuf_pool_is_empty+0x50>)
 8015a28:	f006 f906 	bl	801bc38 <tcpip_try_callback>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d008      	beq.n	8015a44 <pbuf_pool_is_empty+0x44>
 8015a32:	f000 fe97 	bl	8016764 <sys_arch_protect>
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	4b04      	ldr	r3, [pc, #16]	; (8015a4c <pbuf_pool_is_empty+0x4c>)
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	701a      	strb	r2, [r3, #0]
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f000 fe9e 	bl	8016780 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015a44:	bf00      	nop
 8015a46:	3708      	adds	r7, #8
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	2000b730 	.word	0x2000b730
 8015a50:	080159ed 	.word	0x080159ed

08015a54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	4611      	mov	r1, r2
 8015a60:	461a      	mov	r2, r3
 8015a62:	460b      	mov	r3, r1
 8015a64:	80fb      	strh	r3, [r7, #6]
 8015a66:	4613      	mov	r3, r2
 8015a68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	68ba      	ldr	r2, [r7, #8]
 8015a74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	88fa      	ldrh	r2, [r7, #6]
 8015a7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	88ba      	ldrh	r2, [r7, #4]
 8015a80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015a82:	8b3b      	ldrh	r3, [r7, #24]
 8015a84:	b2da      	uxtb	r2, r3
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	7f3a      	ldrb	r2, [r7, #28]
 8015a8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2201      	movs	r2, #1
 8015a94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	73da      	strb	r2, [r3, #15]
}
 8015a9c:	bf00      	nop
 8015a9e:	3714      	adds	r7, #20
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr

08015aa8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08c      	sub	sp, #48	; 0x30
 8015aac:	af02      	add	r7, sp, #8
 8015aae:	4603      	mov	r3, r0
 8015ab0:	71fb      	strb	r3, [r7, #7]
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	80bb      	strh	r3, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015aba:	79fb      	ldrb	r3, [r7, #7]
 8015abc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015abe:	887b      	ldrh	r3, [r7, #2]
 8015ac0:	2b41      	cmp	r3, #65	; 0x41
 8015ac2:	d00b      	beq.n	8015adc <pbuf_alloc+0x34>
 8015ac4:	2b41      	cmp	r3, #65	; 0x41
 8015ac6:	dc02      	bgt.n	8015ace <pbuf_alloc+0x26>
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	d007      	beq.n	8015adc <pbuf_alloc+0x34>
 8015acc:	e0c2      	b.n	8015c54 <pbuf_alloc+0x1ac>
 8015ace:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015ad2:	d00b      	beq.n	8015aec <pbuf_alloc+0x44>
 8015ad4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015ad8:	d070      	beq.n	8015bbc <pbuf_alloc+0x114>
 8015ada:	e0bb      	b.n	8015c54 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8015adc:	887a      	ldrh	r2, [r7, #2]
 8015ade:	88bb      	ldrh	r3, [r7, #4]
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	f000 f8d2 	bl	8015c8c <pbuf_alloc_reference>
 8015ae8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8015aea:	e0bd      	b.n	8015c68 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015aec:	2300      	movs	r3, #0
 8015aee:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015af0:	2300      	movs	r3, #0
 8015af2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015af4:	88bb      	ldrh	r3, [r7, #4]
 8015af6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015af8:	200c      	movs	r0, #12
 8015afa:	f7ff fb93 	bl	8015224 <memp_malloc>
 8015afe:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d109      	bne.n	8015b1a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8015b06:	f7ff ff7b 	bl	8015a00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8015b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d002      	beq.n	8015b16 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8015b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b12:	f000 faa9 	bl	8016068 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015b16:	2300      	movs	r3, #0
 8015b18:	e0a7      	b.n	8015c6a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8015b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b1c:	3303      	adds	r3, #3
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	f023 0303 	bic.w	r3, r3, #3
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	8b7a      	ldrh	r2, [r7, #26]
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	bf28      	it	cs
 8015b32:	4613      	movcs	r3, r2
 8015b34:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015b36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b38:	3310      	adds	r3, #16
 8015b3a:	693a      	ldr	r2, [r7, #16]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	3303      	adds	r3, #3
 8015b40:	f023 0303 	bic.w	r3, r3, #3
 8015b44:	4618      	mov	r0, r3
 8015b46:	89f9      	ldrh	r1, [r7, #14]
 8015b48:	8b7a      	ldrh	r2, [r7, #26]
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	887b      	ldrh	r3, [r7, #2]
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	460b      	mov	r3, r1
 8015b54:	4601      	mov	r1, r0
 8015b56:	6938      	ldr	r0, [r7, #16]
 8015b58:	f7ff ff7c 	bl	8015a54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	f003 0303 	and.w	r3, r3, #3
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d006      	beq.n	8015b76 <pbuf_alloc+0xce>
 8015b68:	4b42      	ldr	r3, [pc, #264]	; (8015c74 <pbuf_alloc+0x1cc>)
 8015b6a:	f240 1201 	movw	r2, #257	; 0x101
 8015b6e:	4942      	ldr	r1, [pc, #264]	; (8015c78 <pbuf_alloc+0x1d0>)
 8015b70:	4842      	ldr	r0, [pc, #264]	; (8015c7c <pbuf_alloc+0x1d4>)
 8015b72:	f006 ff89 	bl	801ca88 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b78:	3303      	adds	r3, #3
 8015b7a:	f023 0303 	bic.w	r3, r3, #3
 8015b7e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015b82:	d106      	bne.n	8015b92 <pbuf_alloc+0xea>
 8015b84:	4b3b      	ldr	r3, [pc, #236]	; (8015c74 <pbuf_alloc+0x1cc>)
 8015b86:	f240 1203 	movw	r2, #259	; 0x103
 8015b8a:	493d      	ldr	r1, [pc, #244]	; (8015c80 <pbuf_alloc+0x1d8>)
 8015b8c:	483b      	ldr	r0, [pc, #236]	; (8015c7c <pbuf_alloc+0x1d4>)
 8015b8e:	f006 ff7b 	bl	801ca88 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d102      	bne.n	8015b9e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8015b9c:	e002      	b.n	8015ba4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015b9e:	69fb      	ldr	r3, [r7, #28]
 8015ba0:	693a      	ldr	r2, [r7, #16]
 8015ba2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015ba8:	8b7a      	ldrh	r2, [r7, #26]
 8015baa:	89fb      	ldrh	r3, [r7, #14]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015bb4:	8b7b      	ldrh	r3, [r7, #26]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d19e      	bne.n	8015af8 <pbuf_alloc+0x50>
      break;
 8015bba:	e055      	b.n	8015c68 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015bbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bbe:	3303      	adds	r3, #3
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	f023 0303 	bic.w	r3, r3, #3
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	88bb      	ldrh	r3, [r7, #4]
 8015bca:	3303      	adds	r3, #3
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	f023 0303 	bic.w	r3, r3, #3
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	4413      	add	r3, r2
 8015bd6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015bd8:	8b3b      	ldrh	r3, [r7, #24]
 8015bda:	3310      	adds	r3, #16
 8015bdc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015bde:	8b3a      	ldrh	r2, [r7, #24]
 8015be0:	88bb      	ldrh	r3, [r7, #4]
 8015be2:	3303      	adds	r3, #3
 8015be4:	f023 0303 	bic.w	r3, r3, #3
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d306      	bcc.n	8015bfa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015bec:	8afa      	ldrh	r2, [r7, #22]
 8015bee:	88bb      	ldrh	r3, [r7, #4]
 8015bf0:	3303      	adds	r3, #3
 8015bf2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d201      	bcs.n	8015bfe <pbuf_alloc+0x156>
        return NULL;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	e035      	b.n	8015c6a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015bfe:	8afb      	ldrh	r3, [r7, #22]
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7ff f967 	bl	8014ed4 <mem_malloc>
 8015c06:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d101      	bne.n	8015c12 <pbuf_alloc+0x16a>
        return NULL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	e02b      	b.n	8015c6a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c14:	3310      	adds	r3, #16
 8015c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c18:	4413      	add	r3, r2
 8015c1a:	3303      	adds	r3, #3
 8015c1c:	f023 0303 	bic.w	r3, r3, #3
 8015c20:	4618      	mov	r0, r3
 8015c22:	88b9      	ldrh	r1, [r7, #4]
 8015c24:	88ba      	ldrh	r2, [r7, #4]
 8015c26:	2300      	movs	r3, #0
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	887b      	ldrh	r3, [r7, #2]
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	460b      	mov	r3, r1
 8015c30:	4601      	mov	r1, r0
 8015c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c34:	f7ff ff0e 	bl	8015a54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	f003 0303 	and.w	r3, r3, #3
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d010      	beq.n	8015c66 <pbuf_alloc+0x1be>
 8015c44:	4b0b      	ldr	r3, [pc, #44]	; (8015c74 <pbuf_alloc+0x1cc>)
 8015c46:	f240 1223 	movw	r2, #291	; 0x123
 8015c4a:	490e      	ldr	r1, [pc, #56]	; (8015c84 <pbuf_alloc+0x1dc>)
 8015c4c:	480b      	ldr	r0, [pc, #44]	; (8015c7c <pbuf_alloc+0x1d4>)
 8015c4e:	f006 ff1b 	bl	801ca88 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015c52:	e008      	b.n	8015c66 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015c54:	4b07      	ldr	r3, [pc, #28]	; (8015c74 <pbuf_alloc+0x1cc>)
 8015c56:	f240 1227 	movw	r2, #295	; 0x127
 8015c5a:	490b      	ldr	r1, [pc, #44]	; (8015c88 <pbuf_alloc+0x1e0>)
 8015c5c:	4807      	ldr	r0, [pc, #28]	; (8015c7c <pbuf_alloc+0x1d4>)
 8015c5e:	f006 ff13 	bl	801ca88 <iprintf>
      return NULL;
 8015c62:	2300      	movs	r3, #0
 8015c64:	e001      	b.n	8015c6a <pbuf_alloc+0x1c2>
      break;
 8015c66:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	3728      	adds	r7, #40	; 0x28
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	0801eafc 	.word	0x0801eafc
 8015c78:	0801eb58 	.word	0x0801eb58
 8015c7c:	0801eb88 	.word	0x0801eb88
 8015c80:	0801ebb0 	.word	0x0801ebb0
 8015c84:	0801ebe4 	.word	0x0801ebe4
 8015c88:	0801ec10 	.word	0x0801ec10

08015c8c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b086      	sub	sp, #24
 8015c90:	af02      	add	r7, sp, #8
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	807b      	strh	r3, [r7, #2]
 8015c98:	4613      	mov	r3, r2
 8015c9a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015c9c:	883b      	ldrh	r3, [r7, #0]
 8015c9e:	2b41      	cmp	r3, #65	; 0x41
 8015ca0:	d009      	beq.n	8015cb6 <pbuf_alloc_reference+0x2a>
 8015ca2:	883b      	ldrh	r3, [r7, #0]
 8015ca4:	2b01      	cmp	r3, #1
 8015ca6:	d006      	beq.n	8015cb6 <pbuf_alloc_reference+0x2a>
 8015ca8:	4b0f      	ldr	r3, [pc, #60]	; (8015ce8 <pbuf_alloc_reference+0x5c>)
 8015caa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015cae:	490f      	ldr	r1, [pc, #60]	; (8015cec <pbuf_alloc_reference+0x60>)
 8015cb0:	480f      	ldr	r0, [pc, #60]	; (8015cf0 <pbuf_alloc_reference+0x64>)
 8015cb2:	f006 fee9 	bl	801ca88 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015cb6:	200b      	movs	r0, #11
 8015cb8:	f7ff fab4 	bl	8015224 <memp_malloc>
 8015cbc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d101      	bne.n	8015cc8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	e00b      	b.n	8015ce0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015cc8:	8879      	ldrh	r1, [r7, #2]
 8015cca:	887a      	ldrh	r2, [r7, #2]
 8015ccc:	2300      	movs	r3, #0
 8015cce:	9301      	str	r3, [sp, #4]
 8015cd0:	883b      	ldrh	r3, [r7, #0]
 8015cd2:	9300      	str	r3, [sp, #0]
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	68f8      	ldr	r0, [r7, #12]
 8015cda:	f7ff febb 	bl	8015a54 <pbuf_init_alloced_pbuf>
  return p;
 8015cde:	68fb      	ldr	r3, [r7, #12]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3710      	adds	r7, #16
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	0801eafc 	.word	0x0801eafc
 8015cec:	0801ec2c 	.word	0x0801ec2c
 8015cf0:	0801eb88 	.word	0x0801eb88

08015cf4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b088      	sub	sp, #32
 8015cf8:	af02      	add	r7, sp, #8
 8015cfa:	607b      	str	r3, [r7, #4]
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	73fb      	strb	r3, [r7, #15]
 8015d00:	460b      	mov	r3, r1
 8015d02:	81bb      	strh	r3, [r7, #12]
 8015d04:	4613      	mov	r3, r2
 8015d06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015d08:	7bfb      	ldrb	r3, [r7, #15]
 8015d0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015d0c:	8a7b      	ldrh	r3, [r7, #18]
 8015d0e:	3303      	adds	r3, #3
 8015d10:	f023 0203 	bic.w	r2, r3, #3
 8015d14:	89bb      	ldrh	r3, [r7, #12]
 8015d16:	441a      	add	r2, r3
 8015d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d901      	bls.n	8015d22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	e018      	b.n	8015d54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d007      	beq.n	8015d38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015d28:	8a7b      	ldrh	r3, [r7, #18]
 8015d2a:	3303      	adds	r3, #3
 8015d2c:	f023 0303 	bic.w	r3, r3, #3
 8015d30:	6a3a      	ldr	r2, [r7, #32]
 8015d32:	4413      	add	r3, r2
 8015d34:	617b      	str	r3, [r7, #20]
 8015d36:	e001      	b.n	8015d3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	89b9      	ldrh	r1, [r7, #12]
 8015d40:	89ba      	ldrh	r2, [r7, #12]
 8015d42:	2302      	movs	r3, #2
 8015d44:	9301      	str	r3, [sp, #4]
 8015d46:	897b      	ldrh	r3, [r7, #10]
 8015d48:	9300      	str	r3, [sp, #0]
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	6979      	ldr	r1, [r7, #20]
 8015d4e:	f7ff fe81 	bl	8015a54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015d52:	687b      	ldr	r3, [r7, #4]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3718      	adds	r7, #24
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	460b      	mov	r3, r1
 8015d66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d106      	bne.n	8015d7c <pbuf_realloc+0x20>
 8015d6e:	4b3a      	ldr	r3, [pc, #232]	; (8015e58 <pbuf_realloc+0xfc>)
 8015d70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015d74:	4939      	ldr	r1, [pc, #228]	; (8015e5c <pbuf_realloc+0x100>)
 8015d76:	483a      	ldr	r0, [pc, #232]	; (8015e60 <pbuf_realloc+0x104>)
 8015d78:	f006 fe86 	bl	801ca88 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	891b      	ldrh	r3, [r3, #8]
 8015d80:	887a      	ldrh	r2, [r7, #2]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d264      	bcs.n	8015e50 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	891a      	ldrh	r2, [r3, #8]
 8015d8a:	887b      	ldrh	r3, [r7, #2]
 8015d8c:	1ad3      	subs	r3, r2, r3
 8015d8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015d90:	887b      	ldrh	r3, [r7, #2]
 8015d92:	817b      	strh	r3, [r7, #10]
  q = p;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015d98:	e018      	b.n	8015dcc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	895b      	ldrh	r3, [r3, #10]
 8015d9e:	897a      	ldrh	r2, [r7, #10]
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	891a      	ldrh	r2, [r3, #8]
 8015da8:	893b      	ldrh	r3, [r7, #8]
 8015daa:	1ad3      	subs	r3, r2, r3
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d106      	bne.n	8015dcc <pbuf_realloc+0x70>
 8015dbe:	4b26      	ldr	r3, [pc, #152]	; (8015e58 <pbuf_realloc+0xfc>)
 8015dc0:	f240 12af 	movw	r2, #431	; 0x1af
 8015dc4:	4927      	ldr	r1, [pc, #156]	; (8015e64 <pbuf_realloc+0x108>)
 8015dc6:	4826      	ldr	r0, [pc, #152]	; (8015e60 <pbuf_realloc+0x104>)
 8015dc8:	f006 fe5e 	bl	801ca88 <iprintf>
  while (rem_len > q->len) {
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	895b      	ldrh	r3, [r3, #10]
 8015dd0:	897a      	ldrh	r2, [r7, #10]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d8e1      	bhi.n	8015d9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	7b1b      	ldrb	r3, [r3, #12]
 8015dda:	f003 030f 	and.w	r3, r3, #15
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d122      	bne.n	8015e28 <pbuf_realloc+0xcc>
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	895b      	ldrh	r3, [r3, #10]
 8015de6:	897a      	ldrh	r2, [r7, #10]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d01d      	beq.n	8015e28 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	7b5b      	ldrb	r3, [r3, #13]
 8015df0:	f003 0302 	and.w	r3, r3, #2
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d117      	bne.n	8015e28 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	1ad3      	subs	r3, r2, r3
 8015e02:	b29a      	uxth	r2, r3
 8015e04:	897b      	ldrh	r3, [r7, #10]
 8015e06:	4413      	add	r3, r2
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	4619      	mov	r1, r3
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f7fe ff51 	bl	8014cb4 <mem_trim>
 8015e12:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d106      	bne.n	8015e28 <pbuf_realloc+0xcc>
 8015e1a:	4b0f      	ldr	r3, [pc, #60]	; (8015e58 <pbuf_realloc+0xfc>)
 8015e1c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015e20:	4911      	ldr	r1, [pc, #68]	; (8015e68 <pbuf_realloc+0x10c>)
 8015e22:	480f      	ldr	r0, [pc, #60]	; (8015e60 <pbuf_realloc+0x104>)
 8015e24:	f006 fe30 	bl	801ca88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	897a      	ldrh	r2, [r7, #10]
 8015e2c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	895a      	ldrh	r2, [r3, #10]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d004      	beq.n	8015e48 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	4618      	mov	r0, r3
 8015e44:	f000 f910 	bl	8016068 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
 8015e4e:	e000      	b.n	8015e52 <pbuf_realloc+0xf6>
    return;
 8015e50:	bf00      	nop

}
 8015e52:	3710      	adds	r7, #16
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	0801eafc 	.word	0x0801eafc
 8015e5c:	0801ec40 	.word	0x0801ec40
 8015e60:	0801eb88 	.word	0x0801eb88
 8015e64:	0801ec58 	.word	0x0801ec58
 8015e68:	0801ec70 	.word	0x0801ec70

08015e6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b086      	sub	sp, #24
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	4613      	mov	r3, r2
 8015e78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d106      	bne.n	8015e8e <pbuf_add_header_impl+0x22>
 8015e80:	4b2b      	ldr	r3, [pc, #172]	; (8015f30 <pbuf_add_header_impl+0xc4>)
 8015e82:	f240 12df 	movw	r2, #479	; 0x1df
 8015e86:	492b      	ldr	r1, [pc, #172]	; (8015f34 <pbuf_add_header_impl+0xc8>)
 8015e88:	482b      	ldr	r0, [pc, #172]	; (8015f38 <pbuf_add_header_impl+0xcc>)
 8015e8a:	f006 fdfd 	bl	801ca88 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d003      	beq.n	8015e9c <pbuf_add_header_impl+0x30>
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e9a:	d301      	bcc.n	8015ea0 <pbuf_add_header_impl+0x34>
    return 1;
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e043      	b.n	8015f28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <pbuf_add_header_impl+0x3e>
    return 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e03e      	b.n	8015f28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	891a      	ldrh	r2, [r3, #8]
 8015eb2:	8a7b      	ldrh	r3, [r7, #18]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	8a7a      	ldrh	r2, [r7, #18]
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d901      	bls.n	8015ec2 <pbuf_add_header_impl+0x56>
    return 1;
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e032      	b.n	8015f28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	7b1b      	ldrb	r3, [r3, #12]
 8015ec6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015ec8:	8a3b      	ldrh	r3, [r7, #16]
 8015eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d00c      	beq.n	8015eec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	685a      	ldr	r2, [r3, #4]
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	425b      	negs	r3, r3
 8015eda:	4413      	add	r3, r2
 8015edc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	3310      	adds	r3, #16
 8015ee2:	697a      	ldr	r2, [r7, #20]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d20d      	bcs.n	8015f04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	e01d      	b.n	8015f28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015eec:	79fb      	ldrb	r3, [r7, #7]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d006      	beq.n	8015f00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	685a      	ldr	r2, [r3, #4]
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	425b      	negs	r3, r3
 8015efa:	4413      	add	r3, r2
 8015efc:	617b      	str	r3, [r7, #20]
 8015efe:	e001      	b.n	8015f04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015f00:	2301      	movs	r3, #1
 8015f02:	e011      	b.n	8015f28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	697a      	ldr	r2, [r7, #20]
 8015f08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	895a      	ldrh	r2, [r3, #10]
 8015f0e:	8a7b      	ldrh	r3, [r7, #18]
 8015f10:	4413      	add	r3, r2
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	891a      	ldrh	r2, [r3, #8]
 8015f1c:	8a7b      	ldrh	r3, [r7, #18]
 8015f1e:	4413      	add	r3, r2
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	811a      	strh	r2, [r3, #8]


  return 0;
 8015f26:	2300      	movs	r3, #0
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3718      	adds	r7, #24
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	0801eafc 	.word	0x0801eafc
 8015f34:	0801ec8c 	.word	0x0801ec8c
 8015f38:	0801eb88 	.word	0x0801eb88

08015f3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015f46:	2200      	movs	r2, #0
 8015f48:	6839      	ldr	r1, [r7, #0]
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7ff ff8e 	bl	8015e6c <pbuf_add_header_impl>
 8015f50:	4603      	mov	r3, r0
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
	...

08015f5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d106      	bne.n	8015f7a <pbuf_remove_header+0x1e>
 8015f6c:	4b20      	ldr	r3, [pc, #128]	; (8015ff0 <pbuf_remove_header+0x94>)
 8015f6e:	f240 224b 	movw	r2, #587	; 0x24b
 8015f72:	4920      	ldr	r1, [pc, #128]	; (8015ff4 <pbuf_remove_header+0x98>)
 8015f74:	4820      	ldr	r0, [pc, #128]	; (8015ff8 <pbuf_remove_header+0x9c>)
 8015f76:	f006 fd87 	bl	801ca88 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d003      	beq.n	8015f88 <pbuf_remove_header+0x2c>
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f86:	d301      	bcc.n	8015f8c <pbuf_remove_header+0x30>
    return 1;
 8015f88:	2301      	movs	r3, #1
 8015f8a:	e02c      	b.n	8015fe6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d101      	bne.n	8015f96 <pbuf_remove_header+0x3a>
    return 0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	e027      	b.n	8015fe6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	895b      	ldrh	r3, [r3, #10]
 8015f9e:	89fa      	ldrh	r2, [r7, #14]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d908      	bls.n	8015fb6 <pbuf_remove_header+0x5a>
 8015fa4:	4b12      	ldr	r3, [pc, #72]	; (8015ff0 <pbuf_remove_header+0x94>)
 8015fa6:	f240 2255 	movw	r2, #597	; 0x255
 8015faa:	4914      	ldr	r1, [pc, #80]	; (8015ffc <pbuf_remove_header+0xa0>)
 8015fac:	4812      	ldr	r0, [pc, #72]	; (8015ff8 <pbuf_remove_header+0x9c>)
 8015fae:	f006 fd6b 	bl	801ca88 <iprintf>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e017      	b.n	8015fe6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	685b      	ldr	r3, [r3, #4]
 8015fba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	685a      	ldr	r2, [r3, #4]
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	441a      	add	r2, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	895a      	ldrh	r2, [r3, #10]
 8015fcc:	89fb      	ldrh	r3, [r7, #14]
 8015fce:	1ad3      	subs	r3, r2, r3
 8015fd0:	b29a      	uxth	r2, r3
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	891a      	ldrh	r2, [r3, #8]
 8015fda:	89fb      	ldrh	r3, [r7, #14]
 8015fdc:	1ad3      	subs	r3, r2, r3
 8015fde:	b29a      	uxth	r2, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015fe4:	2300      	movs	r3, #0
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3710      	adds	r7, #16
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	0801eafc 	.word	0x0801eafc
 8015ff4:	0801ec8c 	.word	0x0801ec8c
 8015ff8:	0801eb88 	.word	0x0801eb88
 8015ffc:	0801ec98 	.word	0x0801ec98

08016000 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	460b      	mov	r3, r1
 801600a:	807b      	strh	r3, [r7, #2]
 801600c:	4613      	mov	r3, r2
 801600e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8016010:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016014:	2b00      	cmp	r3, #0
 8016016:	da08      	bge.n	801602a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016018:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801601c:	425b      	negs	r3, r3
 801601e:	4619      	mov	r1, r3
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7ff ff9b 	bl	8015f5c <pbuf_remove_header>
 8016026:	4603      	mov	r3, r0
 8016028:	e007      	b.n	801603a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801602a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801602e:	787a      	ldrb	r2, [r7, #1]
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7ff ff1a 	bl	8015e6c <pbuf_add_header_impl>
 8016038:	4603      	mov	r3, r0
  }
}
 801603a:	4618      	mov	r0, r3
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}

08016042 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8016042:	b580      	push	{r7, lr}
 8016044:	b082      	sub	sp, #8
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
 801604a:	460b      	mov	r3, r1
 801604c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801604e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016052:	2201      	movs	r2, #1
 8016054:	4619      	mov	r1, r3
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7ff ffd2 	bl	8016000 <pbuf_header_impl>
 801605c:	4603      	mov	r3, r0
}
 801605e:	4618      	mov	r0, r3
 8016060:	3708      	adds	r7, #8
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
	...

08016068 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b088      	sub	sp, #32
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d10b      	bne.n	801608e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d106      	bne.n	801608a <pbuf_free+0x22>
 801607c:	4b3b      	ldr	r3, [pc, #236]	; (801616c <pbuf_free+0x104>)
 801607e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8016082:	493b      	ldr	r1, [pc, #236]	; (8016170 <pbuf_free+0x108>)
 8016084:	483b      	ldr	r0, [pc, #236]	; (8016174 <pbuf_free+0x10c>)
 8016086:	f006 fcff 	bl	801ca88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801608a:	2300      	movs	r3, #0
 801608c:	e069      	b.n	8016162 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801608e:	2300      	movs	r3, #0
 8016090:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8016092:	e062      	b.n	801615a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8016094:	f000 fb66 	bl	8016764 <sys_arch_protect>
 8016098:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	7b9b      	ldrb	r3, [r3, #14]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d106      	bne.n	80160b0 <pbuf_free+0x48>
 80160a2:	4b32      	ldr	r3, [pc, #200]	; (801616c <pbuf_free+0x104>)
 80160a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80160a8:	4933      	ldr	r1, [pc, #204]	; (8016178 <pbuf_free+0x110>)
 80160aa:	4832      	ldr	r0, [pc, #200]	; (8016174 <pbuf_free+0x10c>)
 80160ac:	f006 fcec 	bl	801ca88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	7b9b      	ldrb	r3, [r3, #14]
 80160b4:	3b01      	subs	r3, #1
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	739a      	strb	r2, [r3, #14]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	7b9b      	ldrb	r3, [r3, #14]
 80160c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80160c2:	69b8      	ldr	r0, [r7, #24]
 80160c4:	f000 fb5c 	bl	8016780 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80160c8:	7dfb      	ldrb	r3, [r7, #23]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d143      	bne.n	8016156 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	7b1b      	ldrb	r3, [r3, #12]
 80160d8:	f003 030f 	and.w	r3, r3, #15
 80160dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	7b5b      	ldrb	r3, [r3, #13]
 80160e2:	f003 0302 	and.w	r3, r3, #2
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d011      	beq.n	801610e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	691b      	ldr	r3, [r3, #16]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d106      	bne.n	8016104 <pbuf_free+0x9c>
 80160f6:	4b1d      	ldr	r3, [pc, #116]	; (801616c <pbuf_free+0x104>)
 80160f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80160fc:	491f      	ldr	r1, [pc, #124]	; (801617c <pbuf_free+0x114>)
 80160fe:	481d      	ldr	r0, [pc, #116]	; (8016174 <pbuf_free+0x10c>)
 8016100:	f006 fcc2 	bl	801ca88 <iprintf>
        pc->custom_free_function(p);
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	691b      	ldr	r3, [r3, #16]
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	4798      	blx	r3
 801610c:	e01d      	b.n	801614a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801610e:	7bfb      	ldrb	r3, [r7, #15]
 8016110:	2b02      	cmp	r3, #2
 8016112:	d104      	bne.n	801611e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016114:	6879      	ldr	r1, [r7, #4]
 8016116:	200c      	movs	r0, #12
 8016118:	f7ff f8fa 	bl	8015310 <memp_free>
 801611c:	e015      	b.n	801614a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801611e:	7bfb      	ldrb	r3, [r7, #15]
 8016120:	2b01      	cmp	r3, #1
 8016122:	d104      	bne.n	801612e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016124:	6879      	ldr	r1, [r7, #4]
 8016126:	200b      	movs	r0, #11
 8016128:	f7ff f8f2 	bl	8015310 <memp_free>
 801612c:	e00d      	b.n	801614a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801612e:	7bfb      	ldrb	r3, [r7, #15]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d103      	bne.n	801613c <pbuf_free+0xd4>
          mem_free(p);
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f7fe fd2d 	bl	8014b94 <mem_free>
 801613a:	e006      	b.n	801614a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801613c:	4b0b      	ldr	r3, [pc, #44]	; (801616c <pbuf_free+0x104>)
 801613e:	f240 320f 	movw	r2, #783	; 0x30f
 8016142:	490f      	ldr	r1, [pc, #60]	; (8016180 <pbuf_free+0x118>)
 8016144:	480b      	ldr	r0, [pc, #44]	; (8016174 <pbuf_free+0x10c>)
 8016146:	f006 fc9f 	bl	801ca88 <iprintf>
        }
      }
      count++;
 801614a:	7ffb      	ldrb	r3, [r7, #31]
 801614c:	3301      	adds	r3, #1
 801614e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	607b      	str	r3, [r7, #4]
 8016154:	e001      	b.n	801615a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016156:	2300      	movs	r3, #0
 8016158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d199      	bne.n	8016094 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016160:	7ffb      	ldrb	r3, [r7, #31]
}
 8016162:	4618      	mov	r0, r3
 8016164:	3720      	adds	r7, #32
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
 801616a:	bf00      	nop
 801616c:	0801eafc 	.word	0x0801eafc
 8016170:	0801ec8c 	.word	0x0801ec8c
 8016174:	0801eb88 	.word	0x0801eb88
 8016178:	0801ecb8 	.word	0x0801ecb8
 801617c:	0801ecd0 	.word	0x0801ecd0
 8016180:	0801ecf4 	.word	0x0801ecf4

08016184 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801618c:	2300      	movs	r3, #0
 801618e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016190:	e005      	b.n	801619e <pbuf_clen+0x1a>
    ++len;
 8016192:	89fb      	ldrh	r3, [r7, #14]
 8016194:	3301      	adds	r3, #1
 8016196:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d1f6      	bne.n	8016192 <pbuf_clen+0xe>
  }
  return len;
 80161a4:	89fb      	ldrh	r3, [r7, #14]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3714      	adds	r7, #20
 80161aa:	46bd      	mov	sp, r7
 80161ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b0:	4770      	bx	lr
	...

080161b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b084      	sub	sp, #16
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d016      	beq.n	80161f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80161c2:	f000 facf 	bl	8016764 <sys_arch_protect>
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	7b9b      	ldrb	r3, [r3, #14]
 80161cc:	3301      	adds	r3, #1
 80161ce:	b2da      	uxtb	r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	739a      	strb	r2, [r3, #14]
 80161d4:	68f8      	ldr	r0, [r7, #12]
 80161d6:	f000 fad3 	bl	8016780 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	7b9b      	ldrb	r3, [r3, #14]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d106      	bne.n	80161f0 <pbuf_ref+0x3c>
 80161e2:	4b05      	ldr	r3, [pc, #20]	; (80161f8 <pbuf_ref+0x44>)
 80161e4:	f240 3242 	movw	r2, #834	; 0x342
 80161e8:	4904      	ldr	r1, [pc, #16]	; (80161fc <pbuf_ref+0x48>)
 80161ea:	4805      	ldr	r0, [pc, #20]	; (8016200 <pbuf_ref+0x4c>)
 80161ec:	f006 fc4c 	bl	801ca88 <iprintf>
  }
}
 80161f0:	bf00      	nop
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	0801eafc 	.word	0x0801eafc
 80161fc:	0801ed08 	.word	0x0801ed08
 8016200:	0801eb88 	.word	0x0801eb88

08016204 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d002      	beq.n	801621a <pbuf_cat+0x16>
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d107      	bne.n	801622a <pbuf_cat+0x26>
 801621a:	4b20      	ldr	r3, [pc, #128]	; (801629c <pbuf_cat+0x98>)
 801621c:	f240 325a 	movw	r2, #858	; 0x35a
 8016220:	491f      	ldr	r1, [pc, #124]	; (80162a0 <pbuf_cat+0x9c>)
 8016222:	4820      	ldr	r0, [pc, #128]	; (80162a4 <pbuf_cat+0xa0>)
 8016224:	f006 fc30 	bl	801ca88 <iprintf>
 8016228:	e034      	b.n	8016294 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	60fb      	str	r3, [r7, #12]
 801622e:	e00a      	b.n	8016246 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	891a      	ldrh	r2, [r3, #8]
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	891b      	ldrh	r3, [r3, #8]
 8016238:	4413      	add	r3, r2
 801623a:	b29a      	uxth	r2, r3
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	60fb      	str	r3, [r7, #12]
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1f0      	bne.n	8016230 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	891a      	ldrh	r2, [r3, #8]
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	895b      	ldrh	r3, [r3, #10]
 8016256:	429a      	cmp	r2, r3
 8016258:	d006      	beq.n	8016268 <pbuf_cat+0x64>
 801625a:	4b10      	ldr	r3, [pc, #64]	; (801629c <pbuf_cat+0x98>)
 801625c:	f240 3262 	movw	r2, #866	; 0x362
 8016260:	4911      	ldr	r1, [pc, #68]	; (80162a8 <pbuf_cat+0xa4>)
 8016262:	4810      	ldr	r0, [pc, #64]	; (80162a4 <pbuf_cat+0xa0>)
 8016264:	f006 fc10 	bl	801ca88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d006      	beq.n	801627e <pbuf_cat+0x7a>
 8016270:	4b0a      	ldr	r3, [pc, #40]	; (801629c <pbuf_cat+0x98>)
 8016272:	f240 3263 	movw	r2, #867	; 0x363
 8016276:	490d      	ldr	r1, [pc, #52]	; (80162ac <pbuf_cat+0xa8>)
 8016278:	480a      	ldr	r0, [pc, #40]	; (80162a4 <pbuf_cat+0xa0>)
 801627a:	f006 fc05 	bl	801ca88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	891a      	ldrh	r2, [r3, #8]
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	891b      	ldrh	r3, [r3, #8]
 8016286:	4413      	add	r3, r2
 8016288:	b29a      	uxth	r2, r3
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	683a      	ldr	r2, [r7, #0]
 8016292:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016294:	3710      	adds	r7, #16
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	0801eafc 	.word	0x0801eafc
 80162a0:	0801ed1c 	.word	0x0801ed1c
 80162a4:	0801eb88 	.word	0x0801eb88
 80162a8:	0801ed54 	.word	0x0801ed54
 80162ac:	0801ed84 	.word	0x0801ed84

080162b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80162ba:	6839      	ldr	r1, [r7, #0]
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f7ff ffa1 	bl	8016204 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80162c2:	6838      	ldr	r0, [r7, #0]
 80162c4:	f7ff ff76 	bl	80161b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80162c8:	bf00      	nop
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b086      	sub	sp, #24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80162da:	2300      	movs	r3, #0
 80162dc:	617b      	str	r3, [r7, #20]
 80162de:	2300      	movs	r3, #0
 80162e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d008      	beq.n	80162fa <pbuf_copy+0x2a>
 80162e8:	683b      	ldr	r3, [r7, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d005      	beq.n	80162fa <pbuf_copy+0x2a>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	891a      	ldrh	r2, [r3, #8]
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	891b      	ldrh	r3, [r3, #8]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d209      	bcs.n	801630e <pbuf_copy+0x3e>
 80162fa:	4b57      	ldr	r3, [pc, #348]	; (8016458 <pbuf_copy+0x188>)
 80162fc:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016300:	4956      	ldr	r1, [pc, #344]	; (801645c <pbuf_copy+0x18c>)
 8016302:	4857      	ldr	r0, [pc, #348]	; (8016460 <pbuf_copy+0x190>)
 8016304:	f006 fbc0 	bl	801ca88 <iprintf>
 8016308:	f06f 030f 	mvn.w	r3, #15
 801630c:	e09f      	b.n	801644e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	895b      	ldrh	r3, [r3, #10]
 8016312:	461a      	mov	r2, r3
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	1ad2      	subs	r2, r2, r3
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	895b      	ldrh	r3, [r3, #10]
 801631c:	4619      	mov	r1, r3
 801631e:	693b      	ldr	r3, [r7, #16]
 8016320:	1acb      	subs	r3, r1, r3
 8016322:	429a      	cmp	r2, r3
 8016324:	d306      	bcc.n	8016334 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	895b      	ldrh	r3, [r3, #10]
 801632a:	461a      	mov	r2, r3
 801632c:	693b      	ldr	r3, [r7, #16]
 801632e:	1ad3      	subs	r3, r2, r3
 8016330:	60fb      	str	r3, [r7, #12]
 8016332:	e005      	b.n	8016340 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	895b      	ldrh	r3, [r3, #10]
 8016338:	461a      	mov	r2, r3
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	1ad3      	subs	r3, r2, r3
 801633e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	685a      	ldr	r2, [r3, #4]
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	18d0      	adds	r0, r2, r3
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	685a      	ldr	r2, [r3, #4]
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	4413      	add	r3, r2
 8016350:	68fa      	ldr	r2, [r7, #12]
 8016352:	4619      	mov	r1, r3
 8016354:	f006 fb85 	bl	801ca62 <memcpy>
    offset_to += len;
 8016358:	697a      	ldr	r2, [r7, #20]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	4413      	add	r3, r2
 801635e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016360:	693a      	ldr	r2, [r7, #16]
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	4413      	add	r3, r2
 8016366:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	895b      	ldrh	r3, [r3, #10]
 801636c:	461a      	mov	r2, r3
 801636e:	697b      	ldr	r3, [r7, #20]
 8016370:	4293      	cmp	r3, r2
 8016372:	d906      	bls.n	8016382 <pbuf_copy+0xb2>
 8016374:	4b38      	ldr	r3, [pc, #224]	; (8016458 <pbuf_copy+0x188>)
 8016376:	f240 32d9 	movw	r2, #985	; 0x3d9
 801637a:	493a      	ldr	r1, [pc, #232]	; (8016464 <pbuf_copy+0x194>)
 801637c:	4838      	ldr	r0, [pc, #224]	; (8016460 <pbuf_copy+0x190>)
 801637e:	f006 fb83 	bl	801ca88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	895b      	ldrh	r3, [r3, #10]
 8016386:	461a      	mov	r2, r3
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	4293      	cmp	r3, r2
 801638c:	d906      	bls.n	801639c <pbuf_copy+0xcc>
 801638e:	4b32      	ldr	r3, [pc, #200]	; (8016458 <pbuf_copy+0x188>)
 8016390:	f240 32da 	movw	r2, #986	; 0x3da
 8016394:	4934      	ldr	r1, [pc, #208]	; (8016468 <pbuf_copy+0x198>)
 8016396:	4832      	ldr	r0, [pc, #200]	; (8016460 <pbuf_copy+0x190>)
 8016398:	f006 fb76 	bl	801ca88 <iprintf>
    if (offset_from >= p_from->len) {
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	895b      	ldrh	r3, [r3, #10]
 80163a0:	461a      	mov	r2, r3
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	4293      	cmp	r3, r2
 80163a6:	d304      	bcc.n	80163b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80163a8:	2300      	movs	r3, #0
 80163aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	895b      	ldrh	r3, [r3, #10]
 80163b6:	461a      	mov	r2, r3
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d114      	bne.n	80163e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80163be:	2300      	movs	r3, #0
 80163c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10c      	bne.n	80163e8 <pbuf_copy+0x118>
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d009      	beq.n	80163e8 <pbuf_copy+0x118>
 80163d4:	4b20      	ldr	r3, [pc, #128]	; (8016458 <pbuf_copy+0x188>)
 80163d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80163da:	4924      	ldr	r1, [pc, #144]	; (801646c <pbuf_copy+0x19c>)
 80163dc:	4820      	ldr	r0, [pc, #128]	; (8016460 <pbuf_copy+0x190>)
 80163de:	f006 fb53 	bl	801ca88 <iprintf>
 80163e2:	f06f 030f 	mvn.w	r3, #15
 80163e6:	e032      	b.n	801644e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d013      	beq.n	8016416 <pbuf_copy+0x146>
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	895a      	ldrh	r2, [r3, #10]
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	891b      	ldrh	r3, [r3, #8]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d10d      	bne.n	8016416 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d009      	beq.n	8016416 <pbuf_copy+0x146>
 8016402:	4b15      	ldr	r3, [pc, #84]	; (8016458 <pbuf_copy+0x188>)
 8016404:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8016408:	4919      	ldr	r1, [pc, #100]	; (8016470 <pbuf_copy+0x1a0>)
 801640a:	4815      	ldr	r0, [pc, #84]	; (8016460 <pbuf_copy+0x190>)
 801640c:	f006 fb3c 	bl	801ca88 <iprintf>
 8016410:	f06f 0305 	mvn.w	r3, #5
 8016414:	e01b      	b.n	801644e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d013      	beq.n	8016444 <pbuf_copy+0x174>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	895a      	ldrh	r2, [r3, #10]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	891b      	ldrh	r3, [r3, #8]
 8016424:	429a      	cmp	r2, r3
 8016426:	d10d      	bne.n	8016444 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d009      	beq.n	8016444 <pbuf_copy+0x174>
 8016430:	4b09      	ldr	r3, [pc, #36]	; (8016458 <pbuf_copy+0x188>)
 8016432:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8016436:	490e      	ldr	r1, [pc, #56]	; (8016470 <pbuf_copy+0x1a0>)
 8016438:	4809      	ldr	r0, [pc, #36]	; (8016460 <pbuf_copy+0x190>)
 801643a:	f006 fb25 	bl	801ca88 <iprintf>
 801643e:	f06f 0305 	mvn.w	r3, #5
 8016442:	e004      	b.n	801644e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	f47f af61 	bne.w	801630e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801644c:	2300      	movs	r3, #0
}
 801644e:	4618      	mov	r0, r3
 8016450:	3718      	adds	r7, #24
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	0801eafc 	.word	0x0801eafc
 801645c:	0801edd0 	.word	0x0801edd0
 8016460:	0801eb88 	.word	0x0801eb88
 8016464:	0801ee00 	.word	0x0801ee00
 8016468:	0801ee18 	.word	0x0801ee18
 801646c:	0801ee34 	.word	0x0801ee34
 8016470:	0801ee44 	.word	0x0801ee44

08016474 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b088      	sub	sp, #32
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	4611      	mov	r1, r2
 8016480:	461a      	mov	r2, r3
 8016482:	460b      	mov	r3, r1
 8016484:	80fb      	strh	r3, [r7, #6]
 8016486:	4613      	mov	r3, r2
 8016488:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801648a:	2300      	movs	r3, #0
 801648c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801648e:	2300      	movs	r3, #0
 8016490:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d108      	bne.n	80164aa <pbuf_copy_partial+0x36>
 8016498:	4b2b      	ldr	r3, [pc, #172]	; (8016548 <pbuf_copy_partial+0xd4>)
 801649a:	f240 420a 	movw	r2, #1034	; 0x40a
 801649e:	492b      	ldr	r1, [pc, #172]	; (801654c <pbuf_copy_partial+0xd8>)
 80164a0:	482b      	ldr	r0, [pc, #172]	; (8016550 <pbuf_copy_partial+0xdc>)
 80164a2:	f006 faf1 	bl	801ca88 <iprintf>
 80164a6:	2300      	movs	r3, #0
 80164a8:	e04a      	b.n	8016540 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d108      	bne.n	80164c2 <pbuf_copy_partial+0x4e>
 80164b0:	4b25      	ldr	r3, [pc, #148]	; (8016548 <pbuf_copy_partial+0xd4>)
 80164b2:	f240 420b 	movw	r2, #1035	; 0x40b
 80164b6:	4927      	ldr	r1, [pc, #156]	; (8016554 <pbuf_copy_partial+0xe0>)
 80164b8:	4825      	ldr	r0, [pc, #148]	; (8016550 <pbuf_copy_partial+0xdc>)
 80164ba:	f006 fae5 	bl	801ca88 <iprintf>
 80164be:	2300      	movs	r3, #0
 80164c0:	e03e      	b.n	8016540 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	61fb      	str	r3, [r7, #28]
 80164c6:	e034      	b.n	8016532 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80164c8:	88bb      	ldrh	r3, [r7, #4]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00a      	beq.n	80164e4 <pbuf_copy_partial+0x70>
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	895b      	ldrh	r3, [r3, #10]
 80164d2:	88ba      	ldrh	r2, [r7, #4]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d305      	bcc.n	80164e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	895b      	ldrh	r3, [r3, #10]
 80164dc:	88ba      	ldrh	r2, [r7, #4]
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	80bb      	strh	r3, [r7, #4]
 80164e2:	e023      	b.n	801652c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	895a      	ldrh	r2, [r3, #10]
 80164e8:	88bb      	ldrh	r3, [r7, #4]
 80164ea:	1ad3      	subs	r3, r2, r3
 80164ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80164ee:	8b3a      	ldrh	r2, [r7, #24]
 80164f0:	88fb      	ldrh	r3, [r7, #6]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d901      	bls.n	80164fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80164f6:	88fb      	ldrh	r3, [r7, #6]
 80164f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80164fa:	8b7b      	ldrh	r3, [r7, #26]
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	18d0      	adds	r0, r2, r3
 8016500:	69fb      	ldr	r3, [r7, #28]
 8016502:	685a      	ldr	r2, [r3, #4]
 8016504:	88bb      	ldrh	r3, [r7, #4]
 8016506:	4413      	add	r3, r2
 8016508:	8b3a      	ldrh	r2, [r7, #24]
 801650a:	4619      	mov	r1, r3
 801650c:	f006 faa9 	bl	801ca62 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016510:	8afa      	ldrh	r2, [r7, #22]
 8016512:	8b3b      	ldrh	r3, [r7, #24]
 8016514:	4413      	add	r3, r2
 8016516:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016518:	8b7a      	ldrh	r2, [r7, #26]
 801651a:	8b3b      	ldrh	r3, [r7, #24]
 801651c:	4413      	add	r3, r2
 801651e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016520:	88fa      	ldrh	r2, [r7, #6]
 8016522:	8b3b      	ldrh	r3, [r7, #24]
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016528:	2300      	movs	r3, #0
 801652a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	61fb      	str	r3, [r7, #28]
 8016532:	88fb      	ldrh	r3, [r7, #6]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d002      	beq.n	801653e <pbuf_copy_partial+0xca>
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d1c4      	bne.n	80164c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801653e:	8afb      	ldrh	r3, [r7, #22]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3720      	adds	r7, #32
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	0801eafc 	.word	0x0801eafc
 801654c:	0801ee70 	.word	0x0801ee70
 8016550:	0801eb88 	.word	0x0801eb88
 8016554:	0801ee90 	.word	0x0801ee90

08016558 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	4603      	mov	r3, r0
 8016560:	603a      	str	r2, [r7, #0]
 8016562:	71fb      	strb	r3, [r7, #7]
 8016564:	460b      	mov	r3, r1
 8016566:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	8919      	ldrh	r1, [r3, #8]
 801656c:	88ba      	ldrh	r2, [r7, #4]
 801656e:	79fb      	ldrb	r3, [r7, #7]
 8016570:	4618      	mov	r0, r3
 8016572:	f7ff fa99 	bl	8015aa8 <pbuf_alloc>
 8016576:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d101      	bne.n	8016582 <pbuf_clone+0x2a>
    return NULL;
 801657e:	2300      	movs	r3, #0
 8016580:	e011      	b.n	80165a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016582:	6839      	ldr	r1, [r7, #0]
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f7ff fea3 	bl	80162d0 <pbuf_copy>
 801658a:	4603      	mov	r3, r0
 801658c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801658e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d006      	beq.n	80165a4 <pbuf_clone+0x4c>
 8016596:	4b06      	ldr	r3, [pc, #24]	; (80165b0 <pbuf_clone+0x58>)
 8016598:	f240 5224 	movw	r2, #1316	; 0x524
 801659c:	4905      	ldr	r1, [pc, #20]	; (80165b4 <pbuf_clone+0x5c>)
 801659e:	4806      	ldr	r0, [pc, #24]	; (80165b8 <pbuf_clone+0x60>)
 80165a0:	f006 fa72 	bl	801ca88 <iprintf>
  return q;
 80165a4:	68fb      	ldr	r3, [r7, #12]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	0801eafc 	.word	0x0801eafc
 80165b4:	0801ef9c 	.word	0x0801ef9c
 80165b8:	0801eb88 	.word	0x0801eb88

080165bc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
 80165c4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	2200      	movs	r2, #0
 80165ca:	2104      	movs	r1, #4
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7f6 fc8d 	bl	800ceec <osMessageQueueNew>
 80165d2:	4602      	mov	r2, r0
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d102      	bne.n	80165e6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80165e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165e4:	e000      	b.n	80165e8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80165e6:	2300      	movs	r3, #0
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3708      	adds	r7, #8
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b084      	sub	sp, #16
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6818      	ldr	r0, [r3, #0]
 80165fe:	4639      	mov	r1, r7
 8016600:	2300      	movs	r3, #0
 8016602:	2200      	movs	r2, #0
 8016604:	f7f6 fcf8 	bl	800cff8 <osMessageQueuePut>
 8016608:	4603      	mov	r3, r0
 801660a:	2b00      	cmp	r3, #0
 801660c:	d102      	bne.n	8016614 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801660e:	2300      	movs	r3, #0
 8016610:	73fb      	strb	r3, [r7, #15]
 8016612:	e001      	b.n	8016618 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016614:	23ff      	movs	r3, #255	; 0xff
 8016616:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3710      	adds	r7, #16
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016630:	f7f6 f8bc 	bl	800c7ac <osKernelGetTickCount>
 8016634:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d013      	beq.n	8016664 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	6818      	ldr	r0, [r3, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2200      	movs	r2, #0
 8016644:	68b9      	ldr	r1, [r7, #8]
 8016646:	f7f6 fd4b 	bl	800d0e0 <osMessageQueueGet>
 801664a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d105      	bne.n	801665e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016652:	f7f6 f8ab 	bl	800c7ac <osKernelGetTickCount>
 8016656:	4602      	mov	r2, r0
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	e00f      	b.n	801667e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801665e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016662:	e00c      	b.n	801667e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	6818      	ldr	r0, [r3, #0]
 8016668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801666c:	2200      	movs	r2, #0
 801666e:	68b9      	ldr	r1, [r7, #8]
 8016670:	f7f6 fd36 	bl	800d0e0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016674:	f7f6 f89a 	bl	800c7ac <osKernelGetTickCount>
 8016678:	4602      	mov	r2, r0
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801667e:	4618      	mov	r0, r3
 8016680:	3718      	adds	r7, #24
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016686:	b480      	push	{r7}
 8016688:	b083      	sub	sp, #12
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d101      	bne.n	801669a <sys_mbox_valid+0x14>
    return 0;
 8016696:	2300      	movs	r3, #0
 8016698:	e000      	b.n	801669c <sys_mbox_valid+0x16>
  else
    return 1;
 801669a:	2301      	movs	r3, #1
}
 801669c:	4618      	mov	r0, r3
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80166ac:	2000      	movs	r0, #0
 80166ae:	f7f6 f979 	bl	800c9a4 <osMutexNew>
 80166b2:	4602      	mov	r2, r0
 80166b4:	4b01      	ldr	r3, [pc, #4]	; (80166bc <sys_init+0x14>)
 80166b6:	601a      	str	r2, [r3, #0]
#endif
}
 80166b8:	bf00      	nop
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	2000b738 	.word	0x2000b738

080166c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80166c8:	2000      	movs	r0, #0
 80166ca:	f7f6 f96b 	bl	800c9a4 <osMutexNew>
 80166ce:	4602      	mov	r2, r0
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d102      	bne.n	80166e2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80166dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166e0:	e000      	b.n	80166e4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80166e2:	2300      	movs	r3, #0
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7f6 f9eb 	bl	800cad8 <osMutexAcquire>
#endif
}
 8016702:	bf00      	nop
 8016704:	3708      	adds	r7, #8
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}

0801670a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801670a:	b580      	push	{r7, lr}
 801670c:	b082      	sub	sp, #8
 801670e:	af00      	add	r7, sp, #0
 8016710:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4618      	mov	r0, r3
 8016718:	f7f6 fa3c 	bl	800cb94 <osMutexRelease>
}
 801671c:	bf00      	nop
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}

08016724 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b08e      	sub	sp, #56	; 0x38
 8016728:	af00      	add	r7, sp, #0
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	607a      	str	r2, [r7, #4]
 8016730:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016732:	f107 0314 	add.w	r3, r7, #20
 8016736:	2224      	movs	r2, #36	; 0x24
 8016738:	2100      	movs	r1, #0
 801673a:	4618      	mov	r0, r3
 801673c:	f006 f99c 	bl	801ca78 <memset>
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	617b      	str	r3, [r7, #20]
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	62bb      	str	r3, [r7, #40]	; 0x28
 8016748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801674a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801674c:	f107 0314 	add.w	r3, r7, #20
 8016750:	461a      	mov	r2, r3
 8016752:	6879      	ldr	r1, [r7, #4]
 8016754:	68b8      	ldr	r0, [r7, #8]
 8016756:	f7f6 f851 	bl	800c7fc <osThreadNew>
 801675a:	4603      	mov	r3, r0
#endif
}
 801675c:	4618      	mov	r0, r3
 801675e:	3738      	adds	r7, #56	; 0x38
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016768:	4b04      	ldr	r3, [pc, #16]	; (801677c <sys_arch_protect+0x18>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016770:	4618      	mov	r0, r3
 8016772:	f7f6 f9b1 	bl	800cad8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016776:	2301      	movs	r3, #1
}
 8016778:	4618      	mov	r0, r3
 801677a:	bd80      	pop	{r7, pc}
 801677c:	2000b738 	.word	0x2000b738

08016780 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016788:	4b04      	ldr	r3, [pc, #16]	; (801679c <sys_arch_unprotect+0x1c>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	4618      	mov	r0, r3
 801678e:	f7f6 fa01 	bl	800cb94 <osMutexRelease>
}
 8016792:	bf00      	nop
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	2000b738 	.word	0x2000b738

080167a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80167a4:	f006 f988 	bl	801cab8 <rand>
 80167a8:	4603      	mov	r3, r0
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	4b01      	ldr	r3, [pc, #4]	; (80167c0 <tcp_init+0x20>)
 80167ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80167bc:	bf00      	nop
 80167be:	bd80      	pop	{r7, pc}
 80167c0:	2000002c 	.word	0x2000002c

080167c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	7d1b      	ldrb	r3, [r3, #20]
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d105      	bne.n	80167e0 <tcp_free+0x1c>
 80167d4:	4b06      	ldr	r3, [pc, #24]	; (80167f0 <tcp_free+0x2c>)
 80167d6:	22d4      	movs	r2, #212	; 0xd4
 80167d8:	4906      	ldr	r1, [pc, #24]	; (80167f4 <tcp_free+0x30>)
 80167da:	4807      	ldr	r0, [pc, #28]	; (80167f8 <tcp_free+0x34>)
 80167dc:	f006 f954 	bl	801ca88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80167e0:	6879      	ldr	r1, [r7, #4]
 80167e2:	2001      	movs	r0, #1
 80167e4:	f7fe fd94 	bl	8015310 <memp_free>
}
 80167e8:	bf00      	nop
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	0801f028 	.word	0x0801f028
 80167f4:	0801f084 	.word	0x0801f084
 80167f8:	0801f098 	.word	0x0801f098

080167fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	7d1b      	ldrb	r3, [r3, #20]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d105      	bne.n	8016818 <tcp_free_listen+0x1c>
 801680c:	4b06      	ldr	r3, [pc, #24]	; (8016828 <tcp_free_listen+0x2c>)
 801680e:	22df      	movs	r2, #223	; 0xdf
 8016810:	4906      	ldr	r1, [pc, #24]	; (801682c <tcp_free_listen+0x30>)
 8016812:	4807      	ldr	r0, [pc, #28]	; (8016830 <tcp_free_listen+0x34>)
 8016814:	f006 f938 	bl	801ca88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016818:	6879      	ldr	r1, [r7, #4]
 801681a:	2002      	movs	r0, #2
 801681c:	f7fe fd78 	bl	8015310 <memp_free>
}
 8016820:	bf00      	nop
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}
 8016828:	0801f028 	.word	0x0801f028
 801682c:	0801f0c0 	.word	0x0801f0c0
 8016830:	0801f098 	.word	0x0801f098

08016834 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016838:	f000 fe98 	bl	801756c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801683c:	4b07      	ldr	r3, [pc, #28]	; (801685c <tcp_tmr+0x28>)
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	3301      	adds	r3, #1
 8016842:	b2da      	uxtb	r2, r3
 8016844:	4b05      	ldr	r3, [pc, #20]	; (801685c <tcp_tmr+0x28>)
 8016846:	701a      	strb	r2, [r3, #0]
 8016848:	4b04      	ldr	r3, [pc, #16]	; (801685c <tcp_tmr+0x28>)
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	f003 0301 	and.w	r3, r3, #1
 8016850:	2b00      	cmp	r3, #0
 8016852:	d001      	beq.n	8016858 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016854:	f000 fb4c 	bl	8016ef0 <tcp_slowtmr>
  }
}
 8016858:	bf00      	nop
 801685a:	bd80      	pop	{r7, pc}
 801685c:	200075a9 	.word	0x200075a9

08016860 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d105      	bne.n	801687c <tcp_remove_listener+0x1c>
 8016870:	4b0d      	ldr	r3, [pc, #52]	; (80168a8 <tcp_remove_listener+0x48>)
 8016872:	22ff      	movs	r2, #255	; 0xff
 8016874:	490d      	ldr	r1, [pc, #52]	; (80168ac <tcp_remove_listener+0x4c>)
 8016876:	480e      	ldr	r0, [pc, #56]	; (80168b0 <tcp_remove_listener+0x50>)
 8016878:	f006 f906 	bl	801ca88 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	60fb      	str	r3, [r7, #12]
 8016880:	e00a      	b.n	8016898 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016886:	683a      	ldr	r2, [r7, #0]
 8016888:	429a      	cmp	r2, r3
 801688a:	d102      	bne.n	8016892 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	2200      	movs	r2, #0
 8016890:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	68db      	ldr	r3, [r3, #12]
 8016896:	60fb      	str	r3, [r7, #12]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d1f1      	bne.n	8016882 <tcp_remove_listener+0x22>
    }
  }
}
 801689e:	bf00      	nop
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	0801f028 	.word	0x0801f028
 80168ac:	0801f0dc 	.word	0x0801f0dc
 80168b0:	0801f098 	.word	0x0801f098

080168b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d106      	bne.n	80168d0 <tcp_listen_closed+0x1c>
 80168c2:	4b14      	ldr	r3, [pc, #80]	; (8016914 <tcp_listen_closed+0x60>)
 80168c4:	f240 1211 	movw	r2, #273	; 0x111
 80168c8:	4913      	ldr	r1, [pc, #76]	; (8016918 <tcp_listen_closed+0x64>)
 80168ca:	4814      	ldr	r0, [pc, #80]	; (801691c <tcp_listen_closed+0x68>)
 80168cc:	f006 f8dc 	bl	801ca88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	7d1b      	ldrb	r3, [r3, #20]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d006      	beq.n	80168e6 <tcp_listen_closed+0x32>
 80168d8:	4b0e      	ldr	r3, [pc, #56]	; (8016914 <tcp_listen_closed+0x60>)
 80168da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80168de:	4910      	ldr	r1, [pc, #64]	; (8016920 <tcp_listen_closed+0x6c>)
 80168e0:	480e      	ldr	r0, [pc, #56]	; (801691c <tcp_listen_closed+0x68>)
 80168e2:	f006 f8d1 	bl	801ca88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80168e6:	2301      	movs	r3, #1
 80168e8:	60fb      	str	r3, [r7, #12]
 80168ea:	e00b      	b.n	8016904 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80168ec:	4a0d      	ldr	r2, [pc, #52]	; (8016924 <tcp_listen_closed+0x70>)
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	6879      	ldr	r1, [r7, #4]
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7ff ffb1 	bl	8016860 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3301      	adds	r3, #1
 8016902:	60fb      	str	r3, [r7, #12]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	2b03      	cmp	r3, #3
 8016908:	d9f0      	bls.n	80168ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801690a:	bf00      	nop
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	0801f028 	.word	0x0801f028
 8016918:	0801f104 	.word	0x0801f104
 801691c:	0801f098 	.word	0x0801f098
 8016920:	0801f110 	.word	0x0801f110
 8016924:	08020bc0 	.word	0x08020bc0

08016928 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016928:	b5b0      	push	{r4, r5, r7, lr}
 801692a:	b088      	sub	sp, #32
 801692c:	af04      	add	r7, sp, #16
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	460b      	mov	r3, r1
 8016932:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d106      	bne.n	8016948 <tcp_close_shutdown+0x20>
 801693a:	4b61      	ldr	r3, [pc, #388]	; (8016ac0 <tcp_close_shutdown+0x198>)
 801693c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016940:	4960      	ldr	r1, [pc, #384]	; (8016ac4 <tcp_close_shutdown+0x19c>)
 8016942:	4861      	ldr	r0, [pc, #388]	; (8016ac8 <tcp_close_shutdown+0x1a0>)
 8016944:	f006 f8a0 	bl	801ca88 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016948:	78fb      	ldrb	r3, [r7, #3]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d066      	beq.n	8016a1c <tcp_close_shutdown+0xf4>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	7d1b      	ldrb	r3, [r3, #20]
 8016952:	2b04      	cmp	r3, #4
 8016954:	d003      	beq.n	801695e <tcp_close_shutdown+0x36>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	7d1b      	ldrb	r3, [r3, #20]
 801695a:	2b07      	cmp	r3, #7
 801695c:	d15e      	bne.n	8016a1c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016962:	2b00      	cmp	r3, #0
 8016964:	d104      	bne.n	8016970 <tcp_close_shutdown+0x48>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801696a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801696e:	d055      	beq.n	8016a1c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	8b5b      	ldrh	r3, [r3, #26]
 8016974:	f003 0310 	and.w	r3, r3, #16
 8016978:	2b00      	cmp	r3, #0
 801697a:	d106      	bne.n	801698a <tcp_close_shutdown+0x62>
 801697c:	4b50      	ldr	r3, [pc, #320]	; (8016ac0 <tcp_close_shutdown+0x198>)
 801697e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016982:	4952      	ldr	r1, [pc, #328]	; (8016acc <tcp_close_shutdown+0x1a4>)
 8016984:	4850      	ldr	r0, [pc, #320]	; (8016ac8 <tcp_close_shutdown+0x1a0>)
 8016986:	f006 f87f 	bl	801ca88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016992:	687d      	ldr	r5, [r7, #4]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	3304      	adds	r3, #4
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	8ad2      	ldrh	r2, [r2, #22]
 801699c:	6879      	ldr	r1, [r7, #4]
 801699e:	8b09      	ldrh	r1, [r1, #24]
 80169a0:	9102      	str	r1, [sp, #8]
 80169a2:	9201      	str	r2, [sp, #4]
 80169a4:	9300      	str	r3, [sp, #0]
 80169a6:	462b      	mov	r3, r5
 80169a8:	4622      	mov	r2, r4
 80169aa:	4601      	mov	r1, r0
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f004 fe91 	bl	801b6d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f001 f8ba 	bl	8017b2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80169b8:	4b45      	ldr	r3, [pc, #276]	; (8016ad0 <tcp_close_shutdown+0x1a8>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	429a      	cmp	r2, r3
 80169c0:	d105      	bne.n	80169ce <tcp_close_shutdown+0xa6>
 80169c2:	4b43      	ldr	r3, [pc, #268]	; (8016ad0 <tcp_close_shutdown+0x1a8>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	4a41      	ldr	r2, [pc, #260]	; (8016ad0 <tcp_close_shutdown+0x1a8>)
 80169ca:	6013      	str	r3, [r2, #0]
 80169cc:	e013      	b.n	80169f6 <tcp_close_shutdown+0xce>
 80169ce:	4b40      	ldr	r3, [pc, #256]	; (8016ad0 <tcp_close_shutdown+0x1a8>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	60fb      	str	r3, [r7, #12]
 80169d4:	e00c      	b.n	80169f0 <tcp_close_shutdown+0xc8>
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d104      	bne.n	80169ea <tcp_close_shutdown+0xc2>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	68da      	ldr	r2, [r3, #12]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	60da      	str	r2, [r3, #12]
 80169e8:	e005      	b.n	80169f6 <tcp_close_shutdown+0xce>
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	68db      	ldr	r3, [r3, #12]
 80169ee:	60fb      	str	r3, [r7, #12]
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1ef      	bne.n	80169d6 <tcp_close_shutdown+0xae>
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2200      	movs	r2, #0
 80169fa:	60da      	str	r2, [r3, #12]
 80169fc:	4b35      	ldr	r3, [pc, #212]	; (8016ad4 <tcp_close_shutdown+0x1ac>)
 80169fe:	2201      	movs	r2, #1
 8016a00:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016a02:	4b35      	ldr	r3, [pc, #212]	; (8016ad8 <tcp_close_shutdown+0x1b0>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d102      	bne.n	8016a12 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016a0c:	f003 fd4c 	bl	801a4a8 <tcp_trigger_input_pcb_close>
 8016a10:	e002      	b.n	8016a18 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7ff fed6 	bl	80167c4 <tcp_free>
      }
      return ERR_OK;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	e04d      	b.n	8016ab8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	7d1b      	ldrb	r3, [r3, #20]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d02d      	beq.n	8016a80 <tcp_close_shutdown+0x158>
 8016a24:	2b02      	cmp	r3, #2
 8016a26:	d036      	beq.n	8016a96 <tcp_close_shutdown+0x16e>
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d13f      	bne.n	8016aac <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	8adb      	ldrh	r3, [r3, #22]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d021      	beq.n	8016a78 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016a34:	4b29      	ldr	r3, [pc, #164]	; (8016adc <tcp_close_shutdown+0x1b4>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d105      	bne.n	8016a4a <tcp_close_shutdown+0x122>
 8016a3e:	4b27      	ldr	r3, [pc, #156]	; (8016adc <tcp_close_shutdown+0x1b4>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	4a25      	ldr	r2, [pc, #148]	; (8016adc <tcp_close_shutdown+0x1b4>)
 8016a46:	6013      	str	r3, [r2, #0]
 8016a48:	e013      	b.n	8016a72 <tcp_close_shutdown+0x14a>
 8016a4a:	4b24      	ldr	r3, [pc, #144]	; (8016adc <tcp_close_shutdown+0x1b4>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	60bb      	str	r3, [r7, #8]
 8016a50:	e00c      	b.n	8016a6c <tcp_close_shutdown+0x144>
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	68db      	ldr	r3, [r3, #12]
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d104      	bne.n	8016a66 <tcp_close_shutdown+0x13e>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	68da      	ldr	r2, [r3, #12]
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	60da      	str	r2, [r3, #12]
 8016a64:	e005      	b.n	8016a72 <tcp_close_shutdown+0x14a>
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	60bb      	str	r3, [r7, #8]
 8016a6c:	68bb      	ldr	r3, [r7, #8]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d1ef      	bne.n	8016a52 <tcp_close_shutdown+0x12a>
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2200      	movs	r2, #0
 8016a76:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f7ff fea3 	bl	80167c4 <tcp_free>
      break;
 8016a7e:	e01a      	b.n	8016ab6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f7ff ff17 	bl	80168b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016a86:	6879      	ldr	r1, [r7, #4]
 8016a88:	4815      	ldr	r0, [pc, #84]	; (8016ae0 <tcp_close_shutdown+0x1b8>)
 8016a8a:	f001 f89f 	bl	8017bcc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f7ff feb4 	bl	80167fc <tcp_free_listen>
      break;
 8016a94:	e00f      	b.n	8016ab6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016a96:	6879      	ldr	r1, [r7, #4]
 8016a98:	480d      	ldr	r0, [pc, #52]	; (8016ad0 <tcp_close_shutdown+0x1a8>)
 8016a9a:	f001 f897 	bl	8017bcc <tcp_pcb_remove>
 8016a9e:	4b0d      	ldr	r3, [pc, #52]	; (8016ad4 <tcp_close_shutdown+0x1ac>)
 8016aa0:	2201      	movs	r2, #1
 8016aa2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f7ff fe8d 	bl	80167c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016aaa:	e004      	b.n	8016ab6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f000 f819 	bl	8016ae4 <tcp_close_shutdown_fin>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	e000      	b.n	8016ab8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8016ab6:	2300      	movs	r3, #0
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3710      	adds	r7, #16
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bdb0      	pop	{r4, r5, r7, pc}
 8016ac0:	0801f028 	.word	0x0801f028
 8016ac4:	0801f128 	.word	0x0801f128
 8016ac8:	0801f098 	.word	0x0801f098
 8016acc:	0801f148 	.word	0x0801f148
 8016ad0:	2000b740 	.word	0x2000b740
 8016ad4:	2000b73c 	.word	0x2000b73c
 8016ad8:	2000b754 	.word	0x2000b754
 8016adc:	2000b74c 	.word	0x2000b74c
 8016ae0:	2000b748 	.word	0x2000b748

08016ae4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d106      	bne.n	8016b00 <tcp_close_shutdown_fin+0x1c>
 8016af2:	4b2c      	ldr	r3, [pc, #176]	; (8016ba4 <tcp_close_shutdown_fin+0xc0>)
 8016af4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016af8:	492b      	ldr	r1, [pc, #172]	; (8016ba8 <tcp_close_shutdown_fin+0xc4>)
 8016afa:	482c      	ldr	r0, [pc, #176]	; (8016bac <tcp_close_shutdown_fin+0xc8>)
 8016afc:	f005 ffc4 	bl	801ca88 <iprintf>

  switch (pcb->state) {
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	7d1b      	ldrb	r3, [r3, #20]
 8016b04:	2b04      	cmp	r3, #4
 8016b06:	d010      	beq.n	8016b2a <tcp_close_shutdown_fin+0x46>
 8016b08:	2b07      	cmp	r3, #7
 8016b0a:	d01b      	beq.n	8016b44 <tcp_close_shutdown_fin+0x60>
 8016b0c:	2b03      	cmp	r3, #3
 8016b0e:	d126      	bne.n	8016b5e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f003 fedb 	bl	801a8cc <tcp_send_fin>
 8016b16:	4603      	mov	r3, r0
 8016b18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d11f      	bne.n	8016b62 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2205      	movs	r2, #5
 8016b26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016b28:	e01b      	b.n	8016b62 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f003 fece 	bl	801a8cc <tcp_send_fin>
 8016b30:	4603      	mov	r3, r0
 8016b32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d114      	bne.n	8016b66 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2205      	movs	r2, #5
 8016b40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016b42:	e010      	b.n	8016b66 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	f003 fec1 	bl	801a8cc <tcp_send_fin>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d109      	bne.n	8016b6a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2209      	movs	r2, #9
 8016b5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016b5c:	e005      	b.n	8016b6a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e01c      	b.n	8016b9c <tcp_close_shutdown_fin+0xb8>
      break;
 8016b62:	bf00      	nop
 8016b64:	e002      	b.n	8016b6c <tcp_close_shutdown_fin+0x88>
      break;
 8016b66:	bf00      	nop
 8016b68:	e000      	b.n	8016b6c <tcp_close_shutdown_fin+0x88>
      break;
 8016b6a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d103      	bne.n	8016b7c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f003 ffe7 	bl	801ab48 <tcp_output>
 8016b7a:	e00d      	b.n	8016b98 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8016b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b84:	d108      	bne.n	8016b98 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	8b5b      	ldrh	r3, [r3, #26]
 8016b8a:	f043 0308 	orr.w	r3, r3, #8
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016b94:	2300      	movs	r3, #0
 8016b96:	e001      	b.n	8016b9c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8016b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3710      	adds	r7, #16
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	0801f028 	.word	0x0801f028
 8016ba8:	0801f104 	.word	0x0801f104
 8016bac:	0801f098 	.word	0x0801f098

08016bb0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d109      	bne.n	8016bd2 <tcp_close+0x22>
 8016bbe:	4b0f      	ldr	r3, [pc, #60]	; (8016bfc <tcp_close+0x4c>)
 8016bc0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016bc4:	490e      	ldr	r1, [pc, #56]	; (8016c00 <tcp_close+0x50>)
 8016bc6:	480f      	ldr	r0, [pc, #60]	; (8016c04 <tcp_close+0x54>)
 8016bc8:	f005 ff5e 	bl	801ca88 <iprintf>
 8016bcc:	f06f 030f 	mvn.w	r3, #15
 8016bd0:	e00f      	b.n	8016bf2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	7d1b      	ldrb	r3, [r3, #20]
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	d006      	beq.n	8016be8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	8b5b      	ldrh	r3, [r3, #26]
 8016bde:	f043 0310 	orr.w	r3, r3, #16
 8016be2:	b29a      	uxth	r2, r3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016be8:	2101      	movs	r1, #1
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f7ff fe9c 	bl	8016928 <tcp_close_shutdown>
 8016bf0:	4603      	mov	r3, r0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3708      	adds	r7, #8
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
 8016bfa:	bf00      	nop
 8016bfc:	0801f028 	.word	0x0801f028
 8016c00:	0801f164 	.word	0x0801f164
 8016c04:	0801f098 	.word	0x0801f098

08016c08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b08e      	sub	sp, #56	; 0x38
 8016c0c:	af04      	add	r7, sp, #16
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d107      	bne.n	8016c28 <tcp_abandon+0x20>
 8016c18:	4b52      	ldr	r3, [pc, #328]	; (8016d64 <tcp_abandon+0x15c>)
 8016c1a:	f240 223d 	movw	r2, #573	; 0x23d
 8016c1e:	4952      	ldr	r1, [pc, #328]	; (8016d68 <tcp_abandon+0x160>)
 8016c20:	4852      	ldr	r0, [pc, #328]	; (8016d6c <tcp_abandon+0x164>)
 8016c22:	f005 ff31 	bl	801ca88 <iprintf>
 8016c26:	e099      	b.n	8016d5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	7d1b      	ldrb	r3, [r3, #20]
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	d106      	bne.n	8016c3e <tcp_abandon+0x36>
 8016c30:	4b4c      	ldr	r3, [pc, #304]	; (8016d64 <tcp_abandon+0x15c>)
 8016c32:	f240 2241 	movw	r2, #577	; 0x241
 8016c36:	494e      	ldr	r1, [pc, #312]	; (8016d70 <tcp_abandon+0x168>)
 8016c38:	484c      	ldr	r0, [pc, #304]	; (8016d6c <tcp_abandon+0x164>)
 8016c3a:	f005 ff25 	bl	801ca88 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	7d1b      	ldrb	r3, [r3, #20]
 8016c42:	2b0a      	cmp	r3, #10
 8016c44:	d107      	bne.n	8016c56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016c46:	6879      	ldr	r1, [r7, #4]
 8016c48:	484a      	ldr	r0, [pc, #296]	; (8016d74 <tcp_abandon+0x16c>)
 8016c4a:	f000 ffbf 	bl	8017bcc <tcp_pcb_remove>
    tcp_free(pcb);
 8016c4e:	6878      	ldr	r0, [r7, #4]
 8016c50:	f7ff fdb8 	bl	80167c4 <tcp_free>
 8016c54:	e082      	b.n	8016d5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016c56:	2300      	movs	r3, #0
 8016c58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	691b      	ldr	r3, [r3, #16]
 8016c76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	7d1b      	ldrb	r3, [r3, #20]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d126      	bne.n	8016cce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	8adb      	ldrh	r3, [r3, #22]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d02e      	beq.n	8016ce6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016c88:	4b3b      	ldr	r3, [pc, #236]	; (8016d78 <tcp_abandon+0x170>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d105      	bne.n	8016c9e <tcp_abandon+0x96>
 8016c92:	4b39      	ldr	r3, [pc, #228]	; (8016d78 <tcp_abandon+0x170>)
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	4a37      	ldr	r2, [pc, #220]	; (8016d78 <tcp_abandon+0x170>)
 8016c9a:	6013      	str	r3, [r2, #0]
 8016c9c:	e013      	b.n	8016cc6 <tcp_abandon+0xbe>
 8016c9e:	4b36      	ldr	r3, [pc, #216]	; (8016d78 <tcp_abandon+0x170>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	61fb      	str	r3, [r7, #28]
 8016ca4:	e00c      	b.n	8016cc0 <tcp_abandon+0xb8>
 8016ca6:	69fb      	ldr	r3, [r7, #28]
 8016ca8:	68db      	ldr	r3, [r3, #12]
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d104      	bne.n	8016cba <tcp_abandon+0xb2>
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	68da      	ldr	r2, [r3, #12]
 8016cb4:	69fb      	ldr	r3, [r7, #28]
 8016cb6:	60da      	str	r2, [r3, #12]
 8016cb8:	e005      	b.n	8016cc6 <tcp_abandon+0xbe>
 8016cba:	69fb      	ldr	r3, [r7, #28]
 8016cbc:	68db      	ldr	r3, [r3, #12]
 8016cbe:	61fb      	str	r3, [r7, #28]
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d1ef      	bne.n	8016ca6 <tcp_abandon+0x9e>
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2200      	movs	r2, #0
 8016cca:	60da      	str	r2, [r3, #12]
 8016ccc:	e00b      	b.n	8016ce6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	8adb      	ldrh	r3, [r3, #22]
 8016cd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016cd8:	6879      	ldr	r1, [r7, #4]
 8016cda:	4828      	ldr	r0, [pc, #160]	; (8016d7c <tcp_abandon+0x174>)
 8016cdc:	f000 ff76 	bl	8017bcc <tcp_pcb_remove>
 8016ce0:	4b27      	ldr	r3, [pc, #156]	; (8016d80 <tcp_abandon+0x178>)
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d004      	beq.n	8016cf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f000 fd1a 	bl	801772c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d004      	beq.n	8016d0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d04:	4618      	mov	r0, r3
 8016d06:	f000 fd11 	bl	801772c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d16:	4618      	mov	r0, r3
 8016d18:	f000 fd08 	bl	801772c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00e      	beq.n	8016d40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016d22:	6879      	ldr	r1, [r7, #4]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	3304      	adds	r3, #4
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	8b12      	ldrh	r2, [r2, #24]
 8016d2c:	9202      	str	r2, [sp, #8]
 8016d2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016d30:	9201      	str	r2, [sp, #4]
 8016d32:	9300      	str	r3, [sp, #0]
 8016d34:	460b      	mov	r3, r1
 8016d36:	697a      	ldr	r2, [r7, #20]
 8016d38:	69b9      	ldr	r1, [r7, #24]
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f004 fcca 	bl	801b6d4 <tcp_rst>
    }
    last_state = pcb->state;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	7d1b      	ldrb	r3, [r3, #20]
 8016d44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f7ff fd3c 	bl	80167c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d004      	beq.n	8016d5c <tcp_abandon+0x154>
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	f06f 010c 	mvn.w	r1, #12
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	4798      	blx	r3
  }
}
 8016d5c:	3728      	adds	r7, #40	; 0x28
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	0801f028 	.word	0x0801f028
 8016d68:	0801f198 	.word	0x0801f198
 8016d6c:	0801f098 	.word	0x0801f098
 8016d70:	0801f1b4 	.word	0x0801f1b4
 8016d74:	2000b750 	.word	0x2000b750
 8016d78:	2000b74c 	.word	0x2000b74c
 8016d7c:	2000b740 	.word	0x2000b740
 8016d80:	2000b73c 	.word	0x2000b73c

08016d84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b082      	sub	sp, #8
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016d8c:	2101      	movs	r1, #1
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f7ff ff3a 	bl	8016c08 <tcp_abandon>
}
 8016d94:	bf00      	nop
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d106      	bne.n	8016db8 <tcp_update_rcv_ann_wnd+0x1c>
 8016daa:	4b25      	ldr	r3, [pc, #148]	; (8016e40 <tcp_update_rcv_ann_wnd+0xa4>)
 8016dac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016db0:	4924      	ldr	r1, [pc, #144]	; (8016e44 <tcp_update_rcv_ann_wnd+0xa8>)
 8016db2:	4825      	ldr	r0, [pc, #148]	; (8016e48 <tcp_update_rcv_ann_wnd+0xac>)
 8016db4:	f005 fe68 	bl	801ca88 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dbc:	687a      	ldr	r2, [r7, #4]
 8016dbe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016dc0:	4413      	add	r3, r2
 8016dc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016dcc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016dd0:	bf28      	it	cs
 8016dd2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016dd6:	b292      	uxth	r2, r2
 8016dd8:	4413      	add	r3, r2
 8016dda:	68fa      	ldr	r2, [r7, #12]
 8016ddc:	1ad3      	subs	r3, r2, r3
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	db08      	blt.n	8016df4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dee:	68fa      	ldr	r2, [r7, #12]
 8016df0:	1ad3      	subs	r3, r2, r3
 8016df2:	e020      	b.n	8016e36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dfc:	1ad3      	subs	r3, r2, r3
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	dd03      	ble.n	8016e0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016e08:	e014      	b.n	8016e34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e1c:	d306      	bcc.n	8016e2c <tcp_update_rcv_ann_wnd+0x90>
 8016e1e:	4b08      	ldr	r3, [pc, #32]	; (8016e40 <tcp_update_rcv_ann_wnd+0xa4>)
 8016e20:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016e24:	4909      	ldr	r1, [pc, #36]	; (8016e4c <tcp_update_rcv_ann_wnd+0xb0>)
 8016e26:	4808      	ldr	r0, [pc, #32]	; (8016e48 <tcp_update_rcv_ann_wnd+0xac>)
 8016e28:	f005 fe2e 	bl	801ca88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	b29a      	uxth	r2, r3
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016e34:	2300      	movs	r3, #0
  }
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	0801f028 	.word	0x0801f028
 8016e44:	0801f2b0 	.word	0x0801f2b0
 8016e48:	0801f098 	.word	0x0801f098
 8016e4c:	0801f2d4 	.word	0x0801f2d4

08016e50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	460b      	mov	r3, r1
 8016e5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d107      	bne.n	8016e72 <tcp_recved+0x22>
 8016e62:	4b1f      	ldr	r3, [pc, #124]	; (8016ee0 <tcp_recved+0x90>)
 8016e64:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016e68:	491e      	ldr	r1, [pc, #120]	; (8016ee4 <tcp_recved+0x94>)
 8016e6a:	481f      	ldr	r0, [pc, #124]	; (8016ee8 <tcp_recved+0x98>)
 8016e6c:	f005 fe0c 	bl	801ca88 <iprintf>
 8016e70:	e032      	b.n	8016ed8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	7d1b      	ldrb	r3, [r3, #20]
 8016e76:	2b01      	cmp	r3, #1
 8016e78:	d106      	bne.n	8016e88 <tcp_recved+0x38>
 8016e7a:	4b19      	ldr	r3, [pc, #100]	; (8016ee0 <tcp_recved+0x90>)
 8016e7c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8016e80:	491a      	ldr	r1, [pc, #104]	; (8016eec <tcp_recved+0x9c>)
 8016e82:	4819      	ldr	r0, [pc, #100]	; (8016ee8 <tcp_recved+0x98>)
 8016e84:	f005 fe00 	bl	801ca88 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e8c:	887b      	ldrh	r3, [r7, #2]
 8016e8e:	4413      	add	r3, r2
 8016e90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016e92:	89fb      	ldrh	r3, [r7, #14]
 8016e94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e98:	d804      	bhi.n	8016ea4 <tcp_recved+0x54>
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e9e:	89fa      	ldrh	r2, [r7, #14]
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d204      	bcs.n	8016eae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016eaa:	851a      	strh	r2, [r3, #40]	; 0x28
 8016eac:	e002      	b.n	8016eb4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	89fa      	ldrh	r2, [r7, #14]
 8016eb2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f7ff ff71 	bl	8016d9c <tcp_update_rcv_ann_wnd>
 8016eba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016ec2:	d309      	bcc.n	8016ed8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	8b5b      	ldrh	r3, [r3, #26]
 8016ec8:	f043 0302 	orr.w	r3, r3, #2
 8016ecc:	b29a      	uxth	r2, r3
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f003 fe38 	bl	801ab48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016ed8:	3710      	adds	r7, #16
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	0801f028 	.word	0x0801f028
 8016ee4:	0801f2f0 	.word	0x0801f2f0
 8016ee8:	0801f098 	.word	0x0801f098
 8016eec:	0801f308 	.word	0x0801f308

08016ef0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016ef0:	b5b0      	push	{r4, r5, r7, lr}
 8016ef2:	b090      	sub	sp, #64	; 0x40
 8016ef4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016efc:	4b94      	ldr	r3, [pc, #592]	; (8017150 <tcp_slowtmr+0x260>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	3301      	adds	r3, #1
 8016f02:	4a93      	ldr	r2, [pc, #588]	; (8017150 <tcp_slowtmr+0x260>)
 8016f04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016f06:	4b93      	ldr	r3, [pc, #588]	; (8017154 <tcp_slowtmr+0x264>)
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	b2da      	uxtb	r2, r3
 8016f0e:	4b91      	ldr	r3, [pc, #580]	; (8017154 <tcp_slowtmr+0x264>)
 8016f10:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016f12:	2300      	movs	r3, #0
 8016f14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016f16:	4b90      	ldr	r3, [pc, #576]	; (8017158 <tcp_slowtmr+0x268>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016f1c:	e29d      	b.n	801745a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f20:	7d1b      	ldrb	r3, [r3, #20]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d106      	bne.n	8016f34 <tcp_slowtmr+0x44>
 8016f26:	4b8d      	ldr	r3, [pc, #564]	; (801715c <tcp_slowtmr+0x26c>)
 8016f28:	f240 42be 	movw	r2, #1214	; 0x4be
 8016f2c:	498c      	ldr	r1, [pc, #560]	; (8017160 <tcp_slowtmr+0x270>)
 8016f2e:	488d      	ldr	r0, [pc, #564]	; (8017164 <tcp_slowtmr+0x274>)
 8016f30:	f005 fdaa 	bl	801ca88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	7d1b      	ldrb	r3, [r3, #20]
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d106      	bne.n	8016f4a <tcp_slowtmr+0x5a>
 8016f3c:	4b87      	ldr	r3, [pc, #540]	; (801715c <tcp_slowtmr+0x26c>)
 8016f3e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016f42:	4989      	ldr	r1, [pc, #548]	; (8017168 <tcp_slowtmr+0x278>)
 8016f44:	4887      	ldr	r0, [pc, #540]	; (8017164 <tcp_slowtmr+0x274>)
 8016f46:	f005 fd9f 	bl	801ca88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	7d1b      	ldrb	r3, [r3, #20]
 8016f4e:	2b0a      	cmp	r3, #10
 8016f50:	d106      	bne.n	8016f60 <tcp_slowtmr+0x70>
 8016f52:	4b82      	ldr	r3, [pc, #520]	; (801715c <tcp_slowtmr+0x26c>)
 8016f54:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016f58:	4984      	ldr	r1, [pc, #528]	; (801716c <tcp_slowtmr+0x27c>)
 8016f5a:	4882      	ldr	r0, [pc, #520]	; (8017164 <tcp_slowtmr+0x274>)
 8016f5c:	f005 fd94 	bl	801ca88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f62:	7f9a      	ldrb	r2, [r3, #30]
 8016f64:	4b7b      	ldr	r3, [pc, #492]	; (8017154 <tcp_slowtmr+0x264>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d105      	bne.n	8016f78 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f72:	68db      	ldr	r3, [r3, #12]
 8016f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016f76:	e270      	b.n	801745a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016f78:	4b76      	ldr	r3, [pc, #472]	; (8017154 <tcp_slowtmr+0x264>)
 8016f7a:	781a      	ldrb	r2, [r3, #0]
 8016f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016f80:	2300      	movs	r3, #0
 8016f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016f86:	2300      	movs	r3, #0
 8016f88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	7d1b      	ldrb	r3, [r3, #20]
 8016f90:	2b02      	cmp	r3, #2
 8016f92:	d10a      	bne.n	8016faa <tcp_slowtmr+0xba>
 8016f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f9a:	2b05      	cmp	r3, #5
 8016f9c:	d905      	bls.n	8016faa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016fa8:	e11e      	b.n	80171e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016fb0:	2b0b      	cmp	r3, #11
 8016fb2:	d905      	bls.n	8016fc0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fb8:	3301      	adds	r3, #1
 8016fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016fbe:	e113      	b.n	80171e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d075      	beq.n	80170b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d006      	beq.n	8016fe0 <tcp_slowtmr+0xf0>
 8016fd2:	4b62      	ldr	r3, [pc, #392]	; (801715c <tcp_slowtmr+0x26c>)
 8016fd4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016fd8:	4965      	ldr	r1, [pc, #404]	; (8017170 <tcp_slowtmr+0x280>)
 8016fda:	4862      	ldr	r0, [pc, #392]	; (8017164 <tcp_slowtmr+0x274>)
 8016fdc:	f005 fd54 	bl	801ca88 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d106      	bne.n	8016ff6 <tcp_slowtmr+0x106>
 8016fe8:	4b5c      	ldr	r3, [pc, #368]	; (801715c <tcp_slowtmr+0x26c>)
 8016fea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016fee:	4961      	ldr	r1, [pc, #388]	; (8017174 <tcp_slowtmr+0x284>)
 8016ff0:	485c      	ldr	r0, [pc, #368]	; (8017164 <tcp_slowtmr+0x274>)
 8016ff2:	f005 fd49 	bl	801ca88 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016ffc:	2b0b      	cmp	r3, #11
 8016ffe:	d905      	bls.n	801700c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017004:	3301      	adds	r3, #1
 8017006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801700a:	e0ed      	b.n	80171e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017012:	3b01      	subs	r3, #1
 8017014:	4a58      	ldr	r2, [pc, #352]	; (8017178 <tcp_slowtmr+0x288>)
 8017016:	5cd3      	ldrb	r3, [r2, r3]
 8017018:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017020:	7c7a      	ldrb	r2, [r7, #17]
 8017022:	429a      	cmp	r2, r3
 8017024:	d907      	bls.n	8017036 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8017026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017028:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801702c:	3301      	adds	r3, #1
 801702e:	b2da      	uxtb	r2, r3
 8017030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017032:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8017036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017038:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801703c:	7c7a      	ldrb	r2, [r7, #17]
 801703e:	429a      	cmp	r2, r3
 8017040:	f200 80d2 	bhi.w	80171e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017044:	2301      	movs	r3, #1
 8017046:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801704a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801704e:	2b00      	cmp	r3, #0
 8017050:	d108      	bne.n	8017064 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017054:	f004 fc32 	bl	801b8bc <tcp_zero_window_probe>
 8017058:	4603      	mov	r3, r0
 801705a:	2b00      	cmp	r3, #0
 801705c:	d014      	beq.n	8017088 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801705e:	2300      	movs	r3, #0
 8017060:	623b      	str	r3, [r7, #32]
 8017062:	e011      	b.n	8017088 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801706a:	4619      	mov	r1, r3
 801706c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801706e:	f003 fae5 	bl	801a63c <tcp_split_unsent_seg>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d107      	bne.n	8017088 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801707a:	f003 fd65 	bl	801ab48 <tcp_output>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d101      	bne.n	8017088 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017084:	2300      	movs	r3, #0
 8017086:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017088:	6a3b      	ldr	r3, [r7, #32]
 801708a:	2b00      	cmp	r3, #0
 801708c:	f000 80ac 	beq.w	80171e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017092:	2200      	movs	r2, #0
 8017094:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801709e:	2b06      	cmp	r3, #6
 80170a0:	f200 80a2 	bhi.w	80171e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80170a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80170aa:	3301      	adds	r3, #1
 80170ac:	b2da      	uxtb	r2, r3
 80170ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80170b4:	e098      	b.n	80171e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170bc:	2b00      	cmp	r3, #0
 80170be:	db0f      	blt.n	80170e0 <tcp_slowtmr+0x1f0>
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80170ca:	4293      	cmp	r3, r2
 80170cc:	d008      	beq.n	80170e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80170ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170d4:	b29b      	uxth	r3, r3
 80170d6:	3301      	adds	r3, #1
 80170d8:	b29b      	uxth	r3, r3
 80170da:	b21a      	sxth	r2, r3
 80170dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80170e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80170ec:	429a      	cmp	r2, r3
 80170ee:	db7b      	blt.n	80171e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80170f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170f2:	f004 f821 	bl	801b138 <tcp_rexmit_rto_prepare>
 80170f6:	4603      	mov	r3, r0
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d007      	beq.n	801710c <tcp_slowtmr+0x21c>
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017100:	2b00      	cmp	r3, #0
 8017102:	d171      	bne.n	80171e8 <tcp_slowtmr+0x2f8>
 8017104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017108:	2b00      	cmp	r3, #0
 801710a:	d06d      	beq.n	80171e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710e:	7d1b      	ldrb	r3, [r3, #20]
 8017110:	2b02      	cmp	r3, #2
 8017112:	d03a      	beq.n	801718a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801711a:	2b0c      	cmp	r3, #12
 801711c:	bf28      	it	cs
 801711e:	230c      	movcs	r3, #12
 8017120:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017124:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017128:	10db      	asrs	r3, r3, #3
 801712a:	b21b      	sxth	r3, r3
 801712c:	461a      	mov	r2, r3
 801712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017130:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017134:	4413      	add	r3, r2
 8017136:	7efa      	ldrb	r2, [r7, #27]
 8017138:	4910      	ldr	r1, [pc, #64]	; (801717c <tcp_slowtmr+0x28c>)
 801713a:	5c8a      	ldrb	r2, [r1, r2]
 801713c:	4093      	lsls	r3, r2
 801713e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017146:	4293      	cmp	r3, r2
 8017148:	dc1a      	bgt.n	8017180 <tcp_slowtmr+0x290>
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	b21a      	sxth	r2, r3
 801714e:	e019      	b.n	8017184 <tcp_slowtmr+0x294>
 8017150:	2000b744 	.word	0x2000b744
 8017154:	200075aa 	.word	0x200075aa
 8017158:	2000b740 	.word	0x2000b740
 801715c:	0801f028 	.word	0x0801f028
 8017160:	0801f398 	.word	0x0801f398
 8017164:	0801f098 	.word	0x0801f098
 8017168:	0801f3c4 	.word	0x0801f3c4
 801716c:	0801f3f0 	.word	0x0801f3f0
 8017170:	0801f420 	.word	0x0801f420
 8017174:	0801f454 	.word	0x0801f454
 8017178:	08020bb8 	.word	0x08020bb8
 801717c:	08020ba8 	.word	0x08020ba8
 8017180:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718c:	2200      	movs	r2, #0
 801718e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017192:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017198:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801719c:	4293      	cmp	r3, r2
 801719e:	bf28      	it	cs
 80171a0:	4613      	movcs	r3, r2
 80171a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80171a4:	8a7b      	ldrh	r3, [r7, #18]
 80171a6:	085b      	lsrs	r3, r3, #1
 80171a8:	b29a      	uxth	r2, r3
 80171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80171b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80171b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171ba:	005b      	lsls	r3, r3, #1
 80171bc:	b29b      	uxth	r3, r3
 80171be:	429a      	cmp	r2, r3
 80171c0:	d206      	bcs.n	80171d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80171c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171c6:	005b      	lsls	r3, r3, #1
 80171c8:	b29a      	uxth	r2, r3
 80171ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80171d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80171d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80171da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171dc:	2200      	movs	r2, #0
 80171de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80171e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171e4:	f004 f818 	bl	801b218 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80171e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ea:	7d1b      	ldrb	r3, [r3, #20]
 80171ec:	2b06      	cmp	r3, #6
 80171ee:	d111      	bne.n	8017214 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f2:	8b5b      	ldrh	r3, [r3, #26]
 80171f4:	f003 0310 	and.w	r3, r3, #16
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d00b      	beq.n	8017214 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80171fc:	4b9c      	ldr	r3, [pc, #624]	; (8017470 <tcp_slowtmr+0x580>)
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017202:	6a1b      	ldr	r3, [r3, #32]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	2b28      	cmp	r3, #40	; 0x28
 8017208:	d904      	bls.n	8017214 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801720a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801720e:	3301      	adds	r3, #1
 8017210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017216:	7a5b      	ldrb	r3, [r3, #9]
 8017218:	f003 0308 	and.w	r3, r3, #8
 801721c:	2b00      	cmp	r3, #0
 801721e:	d04a      	beq.n	80172b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017222:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017224:	2b04      	cmp	r3, #4
 8017226:	d003      	beq.n	8017230 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801722c:	2b07      	cmp	r3, #7
 801722e:	d142      	bne.n	80172b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017230:	4b8f      	ldr	r3, [pc, #572]	; (8017470 <tcp_slowtmr+0x580>)
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017236:	6a1b      	ldr	r3, [r3, #32]
 8017238:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017240:	4b8c      	ldr	r3, [pc, #560]	; (8017474 <tcp_slowtmr+0x584>)
 8017242:	440b      	add	r3, r1
 8017244:	498c      	ldr	r1, [pc, #560]	; (8017478 <tcp_slowtmr+0x588>)
 8017246:	fba1 1303 	umull	r1, r3, r1, r3
 801724a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801724c:	429a      	cmp	r2, r3
 801724e:	d90a      	bls.n	8017266 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017254:	3301      	adds	r3, #1
 8017256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801725a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801725e:	3301      	adds	r3, #1
 8017260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017264:	e027      	b.n	80172b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017266:	4b82      	ldr	r3, [pc, #520]	; (8017470 <tcp_slowtmr+0x580>)
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726c:	6a1b      	ldr	r3, [r3, #32]
 801726e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017272:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017278:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801727c:	4618      	mov	r0, r3
 801727e:	4b7f      	ldr	r3, [pc, #508]	; (801747c <tcp_slowtmr+0x58c>)
 8017280:	fb03 f300 	mul.w	r3, r3, r0
 8017284:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017286:	497c      	ldr	r1, [pc, #496]	; (8017478 <tcp_slowtmr+0x588>)
 8017288:	fba1 1303 	umull	r1, r3, r1, r3
 801728c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801728e:	429a      	cmp	r2, r3
 8017290:	d911      	bls.n	80172b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8017292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017294:	f004 fad2 	bl	801b83c <tcp_keepalive>
 8017298:	4603      	mov	r3, r0
 801729a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801729e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d107      	bne.n	80172b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80172a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80172ac:	3301      	adds	r3, #1
 80172ae:	b2da      	uxtb	r2, r3
 80172b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80172b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d011      	beq.n	80172e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80172be:	4b6c      	ldr	r3, [pc, #432]	; (8017470 <tcp_slowtmr+0x580>)
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c4:	6a1b      	ldr	r3, [r3, #32]
 80172c6:	1ad2      	subs	r2, r2, r3
 80172c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80172ce:	4619      	mov	r1, r3
 80172d0:	460b      	mov	r3, r1
 80172d2:	005b      	lsls	r3, r3, #1
 80172d4:	440b      	add	r3, r1
 80172d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80172d8:	429a      	cmp	r2, r3
 80172da:	d302      	bcc.n	80172e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80172dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172de:	f000 fdd9 	bl	8017e94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80172e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e4:	7d1b      	ldrb	r3, [r3, #20]
 80172e6:	2b03      	cmp	r3, #3
 80172e8:	d10b      	bne.n	8017302 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80172ea:	4b61      	ldr	r3, [pc, #388]	; (8017470 <tcp_slowtmr+0x580>)
 80172ec:	681a      	ldr	r2, [r3, #0]
 80172ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f0:	6a1b      	ldr	r3, [r3, #32]
 80172f2:	1ad3      	subs	r3, r2, r3
 80172f4:	2b28      	cmp	r3, #40	; 0x28
 80172f6:	d904      	bls.n	8017302 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80172f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172fc:	3301      	adds	r3, #1
 80172fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017304:	7d1b      	ldrb	r3, [r3, #20]
 8017306:	2b09      	cmp	r3, #9
 8017308:	d10b      	bne.n	8017322 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801730a:	4b59      	ldr	r3, [pc, #356]	; (8017470 <tcp_slowtmr+0x580>)
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017310:	6a1b      	ldr	r3, [r3, #32]
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	2bf0      	cmp	r3, #240	; 0xf0
 8017316:	d904      	bls.n	8017322 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801731c:	3301      	adds	r3, #1
 801731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017326:	2b00      	cmp	r3, #0
 8017328:	d060      	beq.n	80173ec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017330:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017334:	f000 fbfa 	bl	8017b2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	2b00      	cmp	r3, #0
 801733c:	d010      	beq.n	8017360 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801733e:	4b50      	ldr	r3, [pc, #320]	; (8017480 <tcp_slowtmr+0x590>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017344:	429a      	cmp	r2, r3
 8017346:	d106      	bne.n	8017356 <tcp_slowtmr+0x466>
 8017348:	4b4e      	ldr	r3, [pc, #312]	; (8017484 <tcp_slowtmr+0x594>)
 801734a:	f240 526d 	movw	r2, #1389	; 0x56d
 801734e:	494e      	ldr	r1, [pc, #312]	; (8017488 <tcp_slowtmr+0x598>)
 8017350:	484e      	ldr	r0, [pc, #312]	; (801748c <tcp_slowtmr+0x59c>)
 8017352:	f005 fb99 	bl	801ca88 <iprintf>
        prev->next = pcb->next;
 8017356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017358:	68da      	ldr	r2, [r3, #12]
 801735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735c:	60da      	str	r2, [r3, #12]
 801735e:	e00f      	b.n	8017380 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017360:	4b47      	ldr	r3, [pc, #284]	; (8017480 <tcp_slowtmr+0x590>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017366:	429a      	cmp	r2, r3
 8017368:	d006      	beq.n	8017378 <tcp_slowtmr+0x488>
 801736a:	4b46      	ldr	r3, [pc, #280]	; (8017484 <tcp_slowtmr+0x594>)
 801736c:	f240 5271 	movw	r2, #1393	; 0x571
 8017370:	4947      	ldr	r1, [pc, #284]	; (8017490 <tcp_slowtmr+0x5a0>)
 8017372:	4846      	ldr	r0, [pc, #280]	; (801748c <tcp_slowtmr+0x59c>)
 8017374:	f005 fb88 	bl	801ca88 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737a:	68db      	ldr	r3, [r3, #12]
 801737c:	4a40      	ldr	r2, [pc, #256]	; (8017480 <tcp_slowtmr+0x590>)
 801737e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017384:	2b00      	cmp	r3, #0
 8017386:	d013      	beq.n	80173b0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017390:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017394:	3304      	adds	r3, #4
 8017396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017398:	8ad2      	ldrh	r2, [r2, #22]
 801739a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801739c:	8b09      	ldrh	r1, [r1, #24]
 801739e:	9102      	str	r1, [sp, #8]
 80173a0:	9201      	str	r2, [sp, #4]
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	462b      	mov	r3, r5
 80173a6:	4622      	mov	r2, r4
 80173a8:	4601      	mov	r1, r0
 80173aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173ac:	f004 f992 	bl	801b6d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80173b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b2:	691b      	ldr	r3, [r3, #16]
 80173b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80173b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b8:	7d1b      	ldrb	r3, [r3, #20]
 80173ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80173c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c2:	68db      	ldr	r3, [r3, #12]
 80173c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80173c6:	6838      	ldr	r0, [r7, #0]
 80173c8:	f7ff f9fc 	bl	80167c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80173cc:	4b31      	ldr	r3, [pc, #196]	; (8017494 <tcp_slowtmr+0x5a4>)
 80173ce:	2200      	movs	r2, #0
 80173d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d004      	beq.n	80173e2 <tcp_slowtmr+0x4f2>
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	f06f 010c 	mvn.w	r1, #12
 80173de:	68b8      	ldr	r0, [r7, #8]
 80173e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80173e2:	4b2c      	ldr	r3, [pc, #176]	; (8017494 <tcp_slowtmr+0x5a4>)
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d037      	beq.n	801745a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80173ea:	e592      	b.n	8016f12 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80173ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80173f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f2:	68db      	ldr	r3, [r3, #12]
 80173f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80173f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f8:	7f1b      	ldrb	r3, [r3, #28]
 80173fa:	3301      	adds	r3, #1
 80173fc:	b2da      	uxtb	r2, r3
 80173fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017400:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017404:	7f1a      	ldrb	r2, [r3, #28]
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	7f5b      	ldrb	r3, [r3, #29]
 801740a:	429a      	cmp	r2, r3
 801740c:	d325      	bcc.n	801745a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	2200      	movs	r2, #0
 8017412:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017414:	4b1f      	ldr	r3, [pc, #124]	; (8017494 <tcp_slowtmr+0x5a4>)
 8017416:	2200      	movs	r2, #0
 8017418:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017420:	2b00      	cmp	r3, #0
 8017422:	d00b      	beq.n	801743c <tcp_slowtmr+0x54c>
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801742a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801742c:	6912      	ldr	r2, [r2, #16]
 801742e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017430:	4610      	mov	r0, r2
 8017432:	4798      	blx	r3
 8017434:	4603      	mov	r3, r0
 8017436:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801743a:	e002      	b.n	8017442 <tcp_slowtmr+0x552>
 801743c:	2300      	movs	r3, #0
 801743e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017442:	4b14      	ldr	r3, [pc, #80]	; (8017494 <tcp_slowtmr+0x5a4>)
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d000      	beq.n	801744c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801744a:	e562      	b.n	8016f12 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801744c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017450:	2b00      	cmp	r3, #0
 8017452:	d102      	bne.n	801745a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017456:	f003 fb77 	bl	801ab48 <tcp_output>
  while (pcb != NULL) {
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	2b00      	cmp	r3, #0
 801745e:	f47f ad5e 	bne.w	8016f1e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017462:	2300      	movs	r3, #0
 8017464:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <tcp_slowtmr+0x5a8>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801746c:	e069      	b.n	8017542 <tcp_slowtmr+0x652>
 801746e:	bf00      	nop
 8017470:	2000b744 	.word	0x2000b744
 8017474:	000a4cb8 	.word	0x000a4cb8
 8017478:	10624dd3 	.word	0x10624dd3
 801747c:	000124f8 	.word	0x000124f8
 8017480:	2000b740 	.word	0x2000b740
 8017484:	0801f028 	.word	0x0801f028
 8017488:	0801f48c 	.word	0x0801f48c
 801748c:	0801f098 	.word	0x0801f098
 8017490:	0801f4b8 	.word	0x0801f4b8
 8017494:	2000b73c 	.word	0x2000b73c
 8017498:	2000b750 	.word	0x2000b750
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749e:	7d1b      	ldrb	r3, [r3, #20]
 80174a0:	2b0a      	cmp	r3, #10
 80174a2:	d006      	beq.n	80174b2 <tcp_slowtmr+0x5c2>
 80174a4:	4b2a      	ldr	r3, [pc, #168]	; (8017550 <tcp_slowtmr+0x660>)
 80174a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80174aa:	492a      	ldr	r1, [pc, #168]	; (8017554 <tcp_slowtmr+0x664>)
 80174ac:	482a      	ldr	r0, [pc, #168]	; (8017558 <tcp_slowtmr+0x668>)
 80174ae:	f005 faeb 	bl	801ca88 <iprintf>
    pcb_remove = 0;
 80174b2:	2300      	movs	r3, #0
 80174b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80174b8:	4b28      	ldr	r3, [pc, #160]	; (801755c <tcp_slowtmr+0x66c>)
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174be:	6a1b      	ldr	r3, [r3, #32]
 80174c0:	1ad3      	subs	r3, r2, r3
 80174c2:	2bf0      	cmp	r3, #240	; 0xf0
 80174c4:	d904      	bls.n	80174d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80174c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174ca:	3301      	adds	r3, #1
 80174cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80174d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d02f      	beq.n	8017538 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80174d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174da:	f000 fb27 	bl	8017b2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80174de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d010      	beq.n	8017506 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80174e4:	4b1e      	ldr	r3, [pc, #120]	; (8017560 <tcp_slowtmr+0x670>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d106      	bne.n	80174fc <tcp_slowtmr+0x60c>
 80174ee:	4b18      	ldr	r3, [pc, #96]	; (8017550 <tcp_slowtmr+0x660>)
 80174f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80174f4:	491b      	ldr	r1, [pc, #108]	; (8017564 <tcp_slowtmr+0x674>)
 80174f6:	4818      	ldr	r0, [pc, #96]	; (8017558 <tcp_slowtmr+0x668>)
 80174f8:	f005 fac6 	bl	801ca88 <iprintf>
        prev->next = pcb->next;
 80174fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fe:	68da      	ldr	r2, [r3, #12]
 8017500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017502:	60da      	str	r2, [r3, #12]
 8017504:	e00f      	b.n	8017526 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017506:	4b16      	ldr	r3, [pc, #88]	; (8017560 <tcp_slowtmr+0x670>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801750c:	429a      	cmp	r2, r3
 801750e:	d006      	beq.n	801751e <tcp_slowtmr+0x62e>
 8017510:	4b0f      	ldr	r3, [pc, #60]	; (8017550 <tcp_slowtmr+0x660>)
 8017512:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017516:	4914      	ldr	r1, [pc, #80]	; (8017568 <tcp_slowtmr+0x678>)
 8017518:	480f      	ldr	r0, [pc, #60]	; (8017558 <tcp_slowtmr+0x668>)
 801751a:	f005 fab5 	bl	801ca88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	4a0f      	ldr	r2, [pc, #60]	; (8017560 <tcp_slowtmr+0x670>)
 8017524:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017528:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017530:	69f8      	ldr	r0, [r7, #28]
 8017532:	f7ff f947 	bl	80167c4 <tcp_free>
 8017536:	e004      	b.n	8017542 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1a9      	bne.n	801749c <tcp_slowtmr+0x5ac>
    }
  }
}
 8017548:	bf00      	nop
 801754a:	3730      	adds	r7, #48	; 0x30
 801754c:	46bd      	mov	sp, r7
 801754e:	bdb0      	pop	{r4, r5, r7, pc}
 8017550:	0801f028 	.word	0x0801f028
 8017554:	0801f4e4 	.word	0x0801f4e4
 8017558:	0801f098 	.word	0x0801f098
 801755c:	2000b744 	.word	0x2000b744
 8017560:	2000b750 	.word	0x2000b750
 8017564:	0801f514 	.word	0x0801f514
 8017568:	0801f53c 	.word	0x0801f53c

0801756c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017572:	4b2d      	ldr	r3, [pc, #180]	; (8017628 <tcp_fasttmr+0xbc>)
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	3301      	adds	r3, #1
 8017578:	b2da      	uxtb	r2, r3
 801757a:	4b2b      	ldr	r3, [pc, #172]	; (8017628 <tcp_fasttmr+0xbc>)
 801757c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801757e:	4b2b      	ldr	r3, [pc, #172]	; (801762c <tcp_fasttmr+0xc0>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017584:	e048      	b.n	8017618 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	7f9a      	ldrb	r2, [r3, #30]
 801758a:	4b27      	ldr	r3, [pc, #156]	; (8017628 <tcp_fasttmr+0xbc>)
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	429a      	cmp	r2, r3
 8017590:	d03f      	beq.n	8017612 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017592:	4b25      	ldr	r3, [pc, #148]	; (8017628 <tcp_fasttmr+0xbc>)
 8017594:	781a      	ldrb	r2, [r3, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	8b5b      	ldrh	r3, [r3, #26]
 801759e:	f003 0301 	and.w	r3, r3, #1
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d010      	beq.n	80175c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	8b5b      	ldrh	r3, [r3, #26]
 80175aa:	f043 0302 	orr.w	r3, r3, #2
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f003 fac7 	bl	801ab48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	8b5b      	ldrh	r3, [r3, #26]
 80175be:	f023 0303 	bic.w	r3, r3, #3
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	8b5b      	ldrh	r3, [r3, #26]
 80175cc:	f003 0308 	and.w	r3, r3, #8
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d009      	beq.n	80175e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	8b5b      	ldrh	r3, [r3, #26]
 80175d8:	f023 0308 	bic.w	r3, r3, #8
 80175dc:	b29a      	uxth	r2, r3
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7ff fa7e 	bl	8016ae4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d00a      	beq.n	801760c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80175f6:	4b0e      	ldr	r3, [pc, #56]	; (8017630 <tcp_fasttmr+0xc4>)
 80175f8:	2200      	movs	r2, #0
 80175fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f000 f819 	bl	8017634 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017602:	4b0b      	ldr	r3, [pc, #44]	; (8017630 <tcp_fasttmr+0xc4>)
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d000      	beq.n	801760c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801760a:	e7b8      	b.n	801757e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	607b      	str	r3, [r7, #4]
 8017610:	e002      	b.n	8017618 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	68db      	ldr	r3, [r3, #12]
 8017616:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1b3      	bne.n	8017586 <tcp_fasttmr+0x1a>
    }
  }
}
 801761e:	bf00      	nop
 8017620:	3708      	adds	r7, #8
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	200075aa 	.word	0x200075aa
 801762c:	2000b740 	.word	0x2000b740
 8017630:	2000b73c 	.word	0x2000b73c

08017634 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017634:	b590      	push	{r4, r7, lr}
 8017636:	b085      	sub	sp, #20
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d109      	bne.n	8017656 <tcp_process_refused_data+0x22>
 8017642:	4b37      	ldr	r3, [pc, #220]	; (8017720 <tcp_process_refused_data+0xec>)
 8017644:	f240 6209 	movw	r2, #1545	; 0x609
 8017648:	4936      	ldr	r1, [pc, #216]	; (8017724 <tcp_process_refused_data+0xf0>)
 801764a:	4837      	ldr	r0, [pc, #220]	; (8017728 <tcp_process_refused_data+0xf4>)
 801764c:	f005 fa1c 	bl	801ca88 <iprintf>
 8017650:	f06f 030f 	mvn.w	r3, #15
 8017654:	e060      	b.n	8017718 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801765a:	7b5b      	ldrb	r3, [r3, #13]
 801765c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017662:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2200      	movs	r2, #0
 8017668:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017670:	2b00      	cmp	r3, #0
 8017672:	d00b      	beq.n	801768c <tcp_process_refused_data+0x58>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6918      	ldr	r0, [r3, #16]
 801767e:	2300      	movs	r3, #0
 8017680:	68ba      	ldr	r2, [r7, #8]
 8017682:	6879      	ldr	r1, [r7, #4]
 8017684:	47a0      	blx	r4
 8017686:	4603      	mov	r3, r0
 8017688:	73fb      	strb	r3, [r7, #15]
 801768a:	e007      	b.n	801769c <tcp_process_refused_data+0x68>
 801768c:	2300      	movs	r3, #0
 801768e:	68ba      	ldr	r2, [r7, #8]
 8017690:	6879      	ldr	r1, [r7, #4]
 8017692:	2000      	movs	r0, #0
 8017694:	f000 f8a2 	bl	80177dc <tcp_recv_null>
 8017698:	4603      	mov	r3, r0
 801769a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d12a      	bne.n	80176fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80176a4:	7bbb      	ldrb	r3, [r7, #14]
 80176a6:	f003 0320 	and.w	r3, r3, #32
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d033      	beq.n	8017716 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80176b6:	d005      	beq.n	80176c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176bc:	3301      	adds	r3, #1
 80176be:	b29a      	uxth	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00b      	beq.n	80176e6 <tcp_process_refused_data+0xb2>
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6918      	ldr	r0, [r3, #16]
 80176d8:	2300      	movs	r3, #0
 80176da:	2200      	movs	r2, #0
 80176dc:	6879      	ldr	r1, [r7, #4]
 80176de:	47a0      	blx	r4
 80176e0:	4603      	mov	r3, r0
 80176e2:	73fb      	strb	r3, [r7, #15]
 80176e4:	e001      	b.n	80176ea <tcp_process_refused_data+0xb6>
 80176e6:	2300      	movs	r3, #0
 80176e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80176ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176ee:	f113 0f0d 	cmn.w	r3, #13
 80176f2:	d110      	bne.n	8017716 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80176f4:	f06f 030c 	mvn.w	r3, #12
 80176f8:	e00e      	b.n	8017718 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80176fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176fe:	f113 0f0d 	cmn.w	r3, #13
 8017702:	d102      	bne.n	801770a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017704:	f06f 030c 	mvn.w	r3, #12
 8017708:	e006      	b.n	8017718 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017710:	f06f 0304 	mvn.w	r3, #4
 8017714:	e000      	b.n	8017718 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017716:	2300      	movs	r3, #0
}
 8017718:	4618      	mov	r0, r3
 801771a:	3714      	adds	r7, #20
 801771c:	46bd      	mov	sp, r7
 801771e:	bd90      	pop	{r4, r7, pc}
 8017720:	0801f028 	.word	0x0801f028
 8017724:	0801f564 	.word	0x0801f564
 8017728:	0801f098 	.word	0x0801f098

0801772c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b084      	sub	sp, #16
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017734:	e007      	b.n	8017746 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f000 f809 	bl	8017754 <tcp_seg_free>
    seg = next;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d1f4      	bne.n	8017736 <tcp_segs_free+0xa>
  }
}
 801774c:	bf00      	nop
 801774e:	3710      	adds	r7, #16
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d00c      	beq.n	801777c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	685b      	ldr	r3, [r3, #4]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d004      	beq.n	8017774 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	685b      	ldr	r3, [r3, #4]
 801776e:	4618      	mov	r0, r3
 8017770:	f7fe fc7a 	bl	8016068 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017774:	6879      	ldr	r1, [r7, #4]
 8017776:	2003      	movs	r0, #3
 8017778:	f7fd fdca 	bl	8015310 <memp_free>
  }
}
 801777c:	bf00      	nop
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d106      	bne.n	80177a0 <tcp_seg_copy+0x1c>
 8017792:	4b0f      	ldr	r3, [pc, #60]	; (80177d0 <tcp_seg_copy+0x4c>)
 8017794:	f240 6282 	movw	r2, #1666	; 0x682
 8017798:	490e      	ldr	r1, [pc, #56]	; (80177d4 <tcp_seg_copy+0x50>)
 801779a:	480f      	ldr	r0, [pc, #60]	; (80177d8 <tcp_seg_copy+0x54>)
 801779c:	f005 f974 	bl	801ca88 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80177a0:	2003      	movs	r0, #3
 80177a2:	f7fd fd3f 	bl	8015224 <memp_malloc>
 80177a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d101      	bne.n	80177b2 <tcp_seg_copy+0x2e>
    return NULL;
 80177ae:	2300      	movs	r3, #0
 80177b0:	e00a      	b.n	80177c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80177b2:	2210      	movs	r2, #16
 80177b4:	6879      	ldr	r1, [r7, #4]
 80177b6:	68f8      	ldr	r0, [r7, #12]
 80177b8:	f005 f953 	bl	801ca62 <memcpy>
  pbuf_ref(cseg->p);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7fe fcf7 	bl	80161b4 <pbuf_ref>
  return cseg;
 80177c6:	68fb      	ldr	r3, [r7, #12]
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3710      	adds	r7, #16
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	0801f028 	.word	0x0801f028
 80177d4:	0801f5a8 	.word	0x0801f5a8
 80177d8:	0801f098 	.word	0x0801f098

080177dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	60b9      	str	r1, [r7, #8]
 80177e6:	607a      	str	r2, [r7, #4]
 80177e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d109      	bne.n	8017804 <tcp_recv_null+0x28>
 80177f0:	4b12      	ldr	r3, [pc, #72]	; (801783c <tcp_recv_null+0x60>)
 80177f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80177f6:	4912      	ldr	r1, [pc, #72]	; (8017840 <tcp_recv_null+0x64>)
 80177f8:	4812      	ldr	r0, [pc, #72]	; (8017844 <tcp_recv_null+0x68>)
 80177fa:	f005 f945 	bl	801ca88 <iprintf>
 80177fe:	f06f 030f 	mvn.w	r3, #15
 8017802:	e016      	b.n	8017832 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d009      	beq.n	801781e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	891b      	ldrh	r3, [r3, #8]
 801780e:	4619      	mov	r1, r3
 8017810:	68b8      	ldr	r0, [r7, #8]
 8017812:	f7ff fb1d 	bl	8016e50 <tcp_recved>
    pbuf_free(p);
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7fe fc26 	bl	8016068 <pbuf_free>
 801781c:	e008      	b.n	8017830 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801781e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d104      	bne.n	8017830 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017826:	68b8      	ldr	r0, [r7, #8]
 8017828:	f7ff f9c2 	bl	8016bb0 <tcp_close>
 801782c:	4603      	mov	r3, r0
 801782e:	e000      	b.n	8017832 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017830:	2300      	movs	r3, #0
}
 8017832:	4618      	mov	r0, r3
 8017834:	3710      	adds	r7, #16
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}
 801783a:	bf00      	nop
 801783c:	0801f028 	.word	0x0801f028
 8017840:	0801f5c4 	.word	0x0801f5c4
 8017844:	0801f098 	.word	0x0801f098

08017848 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b086      	sub	sp, #24
 801784c:	af00      	add	r7, sp, #0
 801784e:	4603      	mov	r3, r0
 8017850:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017856:	2b00      	cmp	r3, #0
 8017858:	db01      	blt.n	801785e <tcp_kill_prio+0x16>
 801785a:	79fb      	ldrb	r3, [r7, #7]
 801785c:	e000      	b.n	8017860 <tcp_kill_prio+0x18>
 801785e:	237f      	movs	r3, #127	; 0x7f
 8017860:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017862:	7afb      	ldrb	r3, [r7, #11]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d034      	beq.n	80178d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017868:	7afb      	ldrb	r3, [r7, #11]
 801786a:	3b01      	subs	r3, #1
 801786c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801786e:	2300      	movs	r3, #0
 8017870:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017872:	2300      	movs	r3, #0
 8017874:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017876:	4b19      	ldr	r3, [pc, #100]	; (80178dc <tcp_kill_prio+0x94>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	617b      	str	r3, [r7, #20]
 801787c:	e01f      	b.n	80178be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801787e:	697b      	ldr	r3, [r7, #20]
 8017880:	7d5b      	ldrb	r3, [r3, #21]
 8017882:	7afa      	ldrb	r2, [r7, #11]
 8017884:	429a      	cmp	r2, r3
 8017886:	d80c      	bhi.n	80178a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801788c:	7afa      	ldrb	r2, [r7, #11]
 801788e:	429a      	cmp	r2, r3
 8017890:	d112      	bne.n	80178b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017892:	4b13      	ldr	r3, [pc, #76]	; (80178e0 <tcp_kill_prio+0x98>)
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	6a1b      	ldr	r3, [r3, #32]
 801789a:	1ad3      	subs	r3, r2, r3
 801789c:	68fa      	ldr	r2, [r7, #12]
 801789e:	429a      	cmp	r2, r3
 80178a0:	d80a      	bhi.n	80178b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80178a2:	4b0f      	ldr	r3, [pc, #60]	; (80178e0 <tcp_kill_prio+0x98>)
 80178a4:	681a      	ldr	r2, [r3, #0]
 80178a6:	697b      	ldr	r3, [r7, #20]
 80178a8:	6a1b      	ldr	r3, [r3, #32]
 80178aa:	1ad3      	subs	r3, r2, r3
 80178ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80178ae:	697b      	ldr	r3, [r7, #20]
 80178b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	7d5b      	ldrb	r3, [r3, #21]
 80178b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	617b      	str	r3, [r7, #20]
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d1dc      	bne.n	801787e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d004      	beq.n	80178d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80178ca:	6938      	ldr	r0, [r7, #16]
 80178cc:	f7ff fa5a 	bl	8016d84 <tcp_abort>
 80178d0:	e000      	b.n	80178d4 <tcp_kill_prio+0x8c>
    return;
 80178d2:	bf00      	nop
  }
}
 80178d4:	3718      	adds	r7, #24
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
 80178da:	bf00      	nop
 80178dc:	2000b740 	.word	0x2000b740
 80178e0:	2000b744 	.word	0x2000b744

080178e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	4603      	mov	r3, r0
 80178ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80178ee:	79fb      	ldrb	r3, [r7, #7]
 80178f0:	2b08      	cmp	r3, #8
 80178f2:	d009      	beq.n	8017908 <tcp_kill_state+0x24>
 80178f4:	79fb      	ldrb	r3, [r7, #7]
 80178f6:	2b09      	cmp	r3, #9
 80178f8:	d006      	beq.n	8017908 <tcp_kill_state+0x24>
 80178fa:	4b1a      	ldr	r3, [pc, #104]	; (8017964 <tcp_kill_state+0x80>)
 80178fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017900:	4919      	ldr	r1, [pc, #100]	; (8017968 <tcp_kill_state+0x84>)
 8017902:	481a      	ldr	r0, [pc, #104]	; (801796c <tcp_kill_state+0x88>)
 8017904:	f005 f8c0 	bl	801ca88 <iprintf>

  inactivity = 0;
 8017908:	2300      	movs	r3, #0
 801790a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801790c:	2300      	movs	r3, #0
 801790e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017910:	4b17      	ldr	r3, [pc, #92]	; (8017970 <tcp_kill_state+0x8c>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	617b      	str	r3, [r7, #20]
 8017916:	e017      	b.n	8017948 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	7d1b      	ldrb	r3, [r3, #20]
 801791c:	79fa      	ldrb	r2, [r7, #7]
 801791e:	429a      	cmp	r2, r3
 8017920:	d10f      	bne.n	8017942 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017922:	4b14      	ldr	r3, [pc, #80]	; (8017974 <tcp_kill_state+0x90>)
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	6a1b      	ldr	r3, [r3, #32]
 801792a:	1ad3      	subs	r3, r2, r3
 801792c:	68fa      	ldr	r2, [r7, #12]
 801792e:	429a      	cmp	r2, r3
 8017930:	d807      	bhi.n	8017942 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017932:	4b10      	ldr	r3, [pc, #64]	; (8017974 <tcp_kill_state+0x90>)
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	6a1b      	ldr	r3, [r3, #32]
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017942:	697b      	ldr	r3, [r7, #20]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	617b      	str	r3, [r7, #20]
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d1e4      	bne.n	8017918 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d003      	beq.n	801795c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017954:	2100      	movs	r1, #0
 8017956:	6938      	ldr	r0, [r7, #16]
 8017958:	f7ff f956 	bl	8016c08 <tcp_abandon>
  }
}
 801795c:	bf00      	nop
 801795e:	3718      	adds	r7, #24
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	0801f028 	.word	0x0801f028
 8017968:	0801f5e0 	.word	0x0801f5e0
 801796c:	0801f098 	.word	0x0801f098
 8017970:	2000b740 	.word	0x2000b740
 8017974:	2000b744 	.word	0x2000b744

08017978 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801797e:	2300      	movs	r3, #0
 8017980:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017982:	2300      	movs	r3, #0
 8017984:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017986:	4b12      	ldr	r3, [pc, #72]	; (80179d0 <tcp_kill_timewait+0x58>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	60fb      	str	r3, [r7, #12]
 801798c:	e012      	b.n	80179b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801798e:	4b11      	ldr	r3, [pc, #68]	; (80179d4 <tcp_kill_timewait+0x5c>)
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	6a1b      	ldr	r3, [r3, #32]
 8017996:	1ad3      	subs	r3, r2, r3
 8017998:	687a      	ldr	r2, [r7, #4]
 801799a:	429a      	cmp	r2, r3
 801799c:	d807      	bhi.n	80179ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801799e:	4b0d      	ldr	r3, [pc, #52]	; (80179d4 <tcp_kill_timewait+0x5c>)
 80179a0:	681a      	ldr	r2, [r3, #0]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	6a1b      	ldr	r3, [r3, #32]
 80179a6:	1ad3      	subs	r3, r2, r3
 80179a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	60fb      	str	r3, [r7, #12]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d1e9      	bne.n	801798e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d002      	beq.n	80179c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80179c0:	68b8      	ldr	r0, [r7, #8]
 80179c2:	f7ff f9df 	bl	8016d84 <tcp_abort>
  }
}
 80179c6:	bf00      	nop
 80179c8:	3710      	adds	r7, #16
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
 80179ce:	bf00      	nop
 80179d0:	2000b750 	.word	0x2000b750
 80179d4:	2000b744 	.word	0x2000b744

080179d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80179de:	4b10      	ldr	r3, [pc, #64]	; (8017a20 <tcp_handle_closepend+0x48>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80179e4:	e014      	b.n	8017a10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	68db      	ldr	r3, [r3, #12]
 80179ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	8b5b      	ldrh	r3, [r3, #26]
 80179f0:	f003 0308 	and.w	r3, r3, #8
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d009      	beq.n	8017a0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	8b5b      	ldrh	r3, [r3, #26]
 80179fc:	f023 0308 	bic.w	r3, r3, #8
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7ff f86c 	bl	8016ae4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1e7      	bne.n	80179e6 <tcp_handle_closepend+0xe>
  }
}
 8017a16:	bf00      	nop
 8017a18:	3708      	adds	r7, #8
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	2000b740 	.word	0x2000b740

08017a24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b084      	sub	sp, #16
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a2e:	2001      	movs	r0, #1
 8017a30:	f7fd fbf8 	bl	8015224 <memp_malloc>
 8017a34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d126      	bne.n	8017a8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017a3c:	f7ff ffcc 	bl	80179d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017a40:	f7ff ff9a 	bl	8017978 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a44:	2001      	movs	r0, #1
 8017a46:	f7fd fbed 	bl	8015224 <memp_malloc>
 8017a4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d11b      	bne.n	8017a8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017a52:	2009      	movs	r0, #9
 8017a54:	f7ff ff46 	bl	80178e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a58:	2001      	movs	r0, #1
 8017a5a:	f7fd fbe3 	bl	8015224 <memp_malloc>
 8017a5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d111      	bne.n	8017a8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017a66:	2008      	movs	r0, #8
 8017a68:	f7ff ff3c 	bl	80178e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a6c:	2001      	movs	r0, #1
 8017a6e:	f7fd fbd9 	bl	8015224 <memp_malloc>
 8017a72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d107      	bne.n	8017a8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017a7a:	79fb      	ldrb	r3, [r7, #7]
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7ff fee3 	bl	8017848 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a82:	2001      	movs	r0, #1
 8017a84:	f7fd fbce 	bl	8015224 <memp_malloc>
 8017a88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d03f      	beq.n	8017b10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017a90:	229c      	movs	r2, #156	; 0x9c
 8017a92:	2100      	movs	r1, #0
 8017a94:	68f8      	ldr	r0, [r7, #12]
 8017a96:	f004 ffef 	bl	801ca78 <memset>
    pcb->prio = prio;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	79fa      	ldrb	r2, [r7, #7]
 8017a9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017aa6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	22ff      	movs	r2, #255	; 0xff
 8017abe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ac6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	2206      	movs	r2, #6
 8017acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2206      	movs	r2, #6
 8017ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017adc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	2201      	movs	r2, #1
 8017ae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017ae6:	4b0d      	ldr	r3, [pc, #52]	; (8017b1c <tcp_alloc+0xf8>)
 8017ae8:	681a      	ldr	r2, [r3, #0]
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017aee:	4b0c      	ldr	r3, [pc, #48]	; (8017b20 <tcp_alloc+0xfc>)
 8017af0:	781a      	ldrb	r2, [r3, #0]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017afc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	4a08      	ldr	r2, [pc, #32]	; (8017b24 <tcp_alloc+0x100>)
 8017b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	4a07      	ldr	r2, [pc, #28]	; (8017b28 <tcp_alloc+0x104>)
 8017b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017b10:	68fb      	ldr	r3, [r7, #12]
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	3710      	adds	r7, #16
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bd80      	pop	{r7, pc}
 8017b1a:	bf00      	nop
 8017b1c:	2000b744 	.word	0x2000b744
 8017b20:	200075aa 	.word	0x200075aa
 8017b24:	080177dd 	.word	0x080177dd
 8017b28:	006ddd00 	.word	0x006ddd00

08017b2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b082      	sub	sp, #8
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d107      	bne.n	8017b4a <tcp_pcb_purge+0x1e>
 8017b3a:	4b21      	ldr	r3, [pc, #132]	; (8017bc0 <tcp_pcb_purge+0x94>)
 8017b3c:	f640 0251 	movw	r2, #2129	; 0x851
 8017b40:	4920      	ldr	r1, [pc, #128]	; (8017bc4 <tcp_pcb_purge+0x98>)
 8017b42:	4821      	ldr	r0, [pc, #132]	; (8017bc8 <tcp_pcb_purge+0x9c>)
 8017b44:	f004 ffa0 	bl	801ca88 <iprintf>
 8017b48:	e037      	b.n	8017bba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	7d1b      	ldrb	r3, [r3, #20]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d033      	beq.n	8017bba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017b56:	2b0a      	cmp	r3, #10
 8017b58:	d02f      	beq.n	8017bba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017b5e:	2b01      	cmp	r3, #1
 8017b60:	d02b      	beq.n	8017bba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d007      	beq.n	8017b7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7fe fa7a 	bl	8016068 <pbuf_free>
      pcb->refused_data = NULL;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2200      	movs	r2, #0
 8017b78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d002      	beq.n	8017b88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f000 f986 	bl	8017e94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7ff fdc9 	bl	801772c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7ff fdc4 	bl	801772c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017bba:	3708      	adds	r7, #8
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	0801f028 	.word	0x0801f028
 8017bc4:	0801f6a0 	.word	0x0801f6a0
 8017bc8:	0801f098 	.word	0x0801f098

08017bcc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d106      	bne.n	8017bea <tcp_pcb_remove+0x1e>
 8017bdc:	4b3e      	ldr	r3, [pc, #248]	; (8017cd8 <tcp_pcb_remove+0x10c>)
 8017bde:	f640 0283 	movw	r2, #2179	; 0x883
 8017be2:	493e      	ldr	r1, [pc, #248]	; (8017cdc <tcp_pcb_remove+0x110>)
 8017be4:	483e      	ldr	r0, [pc, #248]	; (8017ce0 <tcp_pcb_remove+0x114>)
 8017be6:	f004 ff4f 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d106      	bne.n	8017bfe <tcp_pcb_remove+0x32>
 8017bf0:	4b39      	ldr	r3, [pc, #228]	; (8017cd8 <tcp_pcb_remove+0x10c>)
 8017bf2:	f640 0284 	movw	r2, #2180	; 0x884
 8017bf6:	493b      	ldr	r1, [pc, #236]	; (8017ce4 <tcp_pcb_remove+0x118>)
 8017bf8:	4839      	ldr	r0, [pc, #228]	; (8017ce0 <tcp_pcb_remove+0x114>)
 8017bfa:	f004 ff45 	bl	801ca88 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	683a      	ldr	r2, [r7, #0]
 8017c04:	429a      	cmp	r2, r3
 8017c06:	d105      	bne.n	8017c14 <tcp_pcb_remove+0x48>
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	68da      	ldr	r2, [r3, #12]
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	601a      	str	r2, [r3, #0]
 8017c12:	e013      	b.n	8017c3c <tcp_pcb_remove+0x70>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	60fb      	str	r3, [r7, #12]
 8017c1a:	e00c      	b.n	8017c36 <tcp_pcb_remove+0x6a>
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	68db      	ldr	r3, [r3, #12]
 8017c20:	683a      	ldr	r2, [r7, #0]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d104      	bne.n	8017c30 <tcp_pcb_remove+0x64>
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	68da      	ldr	r2, [r3, #12]
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	60da      	str	r2, [r3, #12]
 8017c2e:	e005      	b.n	8017c3c <tcp_pcb_remove+0x70>
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	68db      	ldr	r3, [r3, #12]
 8017c34:	60fb      	str	r3, [r7, #12]
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d1ef      	bne.n	8017c1c <tcp_pcb_remove+0x50>
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	2200      	movs	r2, #0
 8017c40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017c42:	6838      	ldr	r0, [r7, #0]
 8017c44:	f7ff ff72 	bl	8017b2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	7d1b      	ldrb	r3, [r3, #20]
 8017c4c:	2b0a      	cmp	r3, #10
 8017c4e:	d013      	beq.n	8017c78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d00f      	beq.n	8017c78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	8b5b      	ldrh	r3, [r3, #26]
 8017c5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d009      	beq.n	8017c78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017c64:	683b      	ldr	r3, [r7, #0]
 8017c66:	8b5b      	ldrh	r3, [r3, #26]
 8017c68:	f043 0302 	orr.w	r3, r3, #2
 8017c6c:	b29a      	uxth	r2, r3
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017c72:	6838      	ldr	r0, [r7, #0]
 8017c74:	f002 ff68 	bl	801ab48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	7d1b      	ldrb	r3, [r3, #20]
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d020      	beq.n	8017cc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d006      	beq.n	8017c96 <tcp_pcb_remove+0xca>
 8017c88:	4b13      	ldr	r3, [pc, #76]	; (8017cd8 <tcp_pcb_remove+0x10c>)
 8017c8a:	f640 0293 	movw	r2, #2195	; 0x893
 8017c8e:	4916      	ldr	r1, [pc, #88]	; (8017ce8 <tcp_pcb_remove+0x11c>)
 8017c90:	4813      	ldr	r0, [pc, #76]	; (8017ce0 <tcp_pcb_remove+0x114>)
 8017c92:	f004 fef9 	bl	801ca88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d006      	beq.n	8017cac <tcp_pcb_remove+0xe0>
 8017c9e:	4b0e      	ldr	r3, [pc, #56]	; (8017cd8 <tcp_pcb_remove+0x10c>)
 8017ca0:	f640 0294 	movw	r2, #2196	; 0x894
 8017ca4:	4911      	ldr	r1, [pc, #68]	; (8017cec <tcp_pcb_remove+0x120>)
 8017ca6:	480e      	ldr	r0, [pc, #56]	; (8017ce0 <tcp_pcb_remove+0x114>)
 8017ca8:	f004 feee 	bl	801ca88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d006      	beq.n	8017cc2 <tcp_pcb_remove+0xf6>
 8017cb4:	4b08      	ldr	r3, [pc, #32]	; (8017cd8 <tcp_pcb_remove+0x10c>)
 8017cb6:	f640 0296 	movw	r2, #2198	; 0x896
 8017cba:	490d      	ldr	r1, [pc, #52]	; (8017cf0 <tcp_pcb_remove+0x124>)
 8017cbc:	4808      	ldr	r0, [pc, #32]	; (8017ce0 <tcp_pcb_remove+0x114>)
 8017cbe:	f004 fee3 	bl	801ca88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017cce:	bf00      	nop
 8017cd0:	3710      	adds	r7, #16
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	0801f028 	.word	0x0801f028
 8017cdc:	0801f6bc 	.word	0x0801f6bc
 8017ce0:	0801f098 	.word	0x0801f098
 8017ce4:	0801f6d8 	.word	0x0801f6d8
 8017ce8:	0801f6f8 	.word	0x0801f6f8
 8017cec:	0801f710 	.word	0x0801f710
 8017cf0:	0801f72c 	.word	0x0801f72c

08017cf4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d106      	bne.n	8017d10 <tcp_next_iss+0x1c>
 8017d02:	4b0a      	ldr	r3, [pc, #40]	; (8017d2c <tcp_next_iss+0x38>)
 8017d04:	f640 02af 	movw	r2, #2223	; 0x8af
 8017d08:	4909      	ldr	r1, [pc, #36]	; (8017d30 <tcp_next_iss+0x3c>)
 8017d0a:	480a      	ldr	r0, [pc, #40]	; (8017d34 <tcp_next_iss+0x40>)
 8017d0c:	f004 febc 	bl	801ca88 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017d10:	4b09      	ldr	r3, [pc, #36]	; (8017d38 <tcp_next_iss+0x44>)
 8017d12:	681a      	ldr	r2, [r3, #0]
 8017d14:	4b09      	ldr	r3, [pc, #36]	; (8017d3c <tcp_next_iss+0x48>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	4413      	add	r3, r2
 8017d1a:	4a07      	ldr	r2, [pc, #28]	; (8017d38 <tcp_next_iss+0x44>)
 8017d1c:	6013      	str	r3, [r2, #0]
  return iss;
 8017d1e:	4b06      	ldr	r3, [pc, #24]	; (8017d38 <tcp_next_iss+0x44>)
 8017d20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	0801f028 	.word	0x0801f028
 8017d30:	0801f744 	.word	0x0801f744
 8017d34:	0801f098 	.word	0x0801f098
 8017d38:	20000030 	.word	0x20000030
 8017d3c:	2000b744 	.word	0x2000b744

08017d40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b086      	sub	sp, #24
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	4603      	mov	r3, r0
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
 8017d4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d106      	bne.n	8017d62 <tcp_eff_send_mss_netif+0x22>
 8017d54:	4b14      	ldr	r3, [pc, #80]	; (8017da8 <tcp_eff_send_mss_netif+0x68>)
 8017d56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017d5a:	4914      	ldr	r1, [pc, #80]	; (8017dac <tcp_eff_send_mss_netif+0x6c>)
 8017d5c:	4814      	ldr	r0, [pc, #80]	; (8017db0 <tcp_eff_send_mss_netif+0x70>)
 8017d5e:	f004 fe93 	bl	801ca88 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d101      	bne.n	8017d6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017d68:	89fb      	ldrh	r3, [r7, #14]
 8017d6a:	e019      	b.n	8017da0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017d72:	8afb      	ldrh	r3, [r7, #22]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d012      	beq.n	8017d9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017d78:	2328      	movs	r3, #40	; 0x28
 8017d7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017d7c:	8afa      	ldrh	r2, [r7, #22]
 8017d7e:	8abb      	ldrh	r3, [r7, #20]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d904      	bls.n	8017d8e <tcp_eff_send_mss_netif+0x4e>
 8017d84:	8afa      	ldrh	r2, [r7, #22]
 8017d86:	8abb      	ldrh	r3, [r7, #20]
 8017d88:	1ad3      	subs	r3, r2, r3
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	e000      	b.n	8017d90 <tcp_eff_send_mss_netif+0x50>
 8017d8e:	2300      	movs	r3, #0
 8017d90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017d92:	8a7a      	ldrh	r2, [r7, #18]
 8017d94:	89fb      	ldrh	r3, [r7, #14]
 8017d96:	4293      	cmp	r3, r2
 8017d98:	bf28      	it	cs
 8017d9a:	4613      	movcs	r3, r2
 8017d9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3718      	adds	r7, #24
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	0801f028 	.word	0x0801f028
 8017dac:	0801f760 	.word	0x0801f760
 8017db0:	0801f098 	.word	0x0801f098

08017db4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b084      	sub	sp, #16
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d119      	bne.n	8017dfc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017dc8:	4b10      	ldr	r3, [pc, #64]	; (8017e0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017dca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017dce:	4910      	ldr	r1, [pc, #64]	; (8017e10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017dd0:	4810      	ldr	r0, [pc, #64]	; (8017e14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017dd2:	f004 fe59 	bl	801ca88 <iprintf>

  while (pcb != NULL) {
 8017dd6:	e011      	b.n	8017dfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681a      	ldr	r2, [r3, #0]
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d108      	bne.n	8017df6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	68db      	ldr	r3, [r3, #12]
 8017de8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f7fe ffca 	bl	8016d84 <tcp_abort>
      pcb = next;
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	60fb      	str	r3, [r7, #12]
 8017df4:	e002      	b.n	8017dfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	68db      	ldr	r3, [r3, #12]
 8017dfa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d1ea      	bne.n	8017dd8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017e02:	bf00      	nop
 8017e04:	3710      	adds	r7, #16
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
 8017e0a:	bf00      	nop
 8017e0c:	0801f028 	.word	0x0801f028
 8017e10:	0801f788 	.word	0x0801f788
 8017e14:	0801f098 	.word	0x0801f098

08017e18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
 8017e20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d02a      	beq.n	8017e7e <tcp_netif_ip_addr_changed+0x66>
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d026      	beq.n	8017e7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017e30:	4b15      	ldr	r3, [pc, #84]	; (8017e88 <tcp_netif_ip_addr_changed+0x70>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	4619      	mov	r1, r3
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f7ff ffbc 	bl	8017db4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017e3c:	4b13      	ldr	r3, [pc, #76]	; (8017e8c <tcp_netif_ip_addr_changed+0x74>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	4619      	mov	r1, r3
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f7ff ffb6 	bl	8017db4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017e48:	683b      	ldr	r3, [r7, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d017      	beq.n	8017e7e <tcp_netif_ip_addr_changed+0x66>
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d013      	beq.n	8017e7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017e56:	4b0e      	ldr	r3, [pc, #56]	; (8017e90 <tcp_netif_ip_addr_changed+0x78>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	60fb      	str	r3, [r7, #12]
 8017e5c:	e00c      	b.n	8017e78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	681a      	ldr	r2, [r3, #0]
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d103      	bne.n	8017e72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	68db      	ldr	r3, [r3, #12]
 8017e76:	60fb      	str	r3, [r7, #12]
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d1ef      	bne.n	8017e5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017e7e:	bf00      	nop
 8017e80:	3710      	adds	r7, #16
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	2000b740 	.word	0x2000b740
 8017e8c:	2000b74c 	.word	0x2000b74c
 8017e90:	2000b748 	.word	0x2000b748

08017e94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b082      	sub	sp, #8
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d007      	beq.n	8017eb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7ff fc3f 	bl	801772c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017eb4:	bf00      	nop
 8017eb6:	3708      	adds	r7, #8
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017ebc:	b590      	push	{r4, r7, lr}
 8017ebe:	b08d      	sub	sp, #52	; 0x34
 8017ec0:	af04      	add	r7, sp, #16
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d105      	bne.n	8017ed8 <tcp_input+0x1c>
 8017ecc:	4b9b      	ldr	r3, [pc, #620]	; (801813c <tcp_input+0x280>)
 8017ece:	2283      	movs	r2, #131	; 0x83
 8017ed0:	499b      	ldr	r1, [pc, #620]	; (8018140 <tcp_input+0x284>)
 8017ed2:	489c      	ldr	r0, [pc, #624]	; (8018144 <tcp_input+0x288>)
 8017ed4:	f004 fdd8 	bl	801ca88 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	4a9a      	ldr	r2, [pc, #616]	; (8018148 <tcp_input+0x28c>)
 8017ede:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	895b      	ldrh	r3, [r3, #10]
 8017ee4:	2b13      	cmp	r3, #19
 8017ee6:	f240 83c4 	bls.w	8018672 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017eea:	4b98      	ldr	r3, [pc, #608]	; (801814c <tcp_input+0x290>)
 8017eec:	695a      	ldr	r2, [r3, #20]
 8017eee:	4b97      	ldr	r3, [pc, #604]	; (801814c <tcp_input+0x290>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7fb fe81 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 8017efa:	4603      	mov	r3, r0
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	f040 83ba 	bne.w	8018676 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017f02:	4b92      	ldr	r3, [pc, #584]	; (801814c <tcp_input+0x290>)
 8017f04:	695b      	ldr	r3, [r3, #20]
 8017f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017f0a:	2be0      	cmp	r3, #224	; 0xe0
 8017f0c:	f000 83b3 	beq.w	8018676 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017f10:	4b8d      	ldr	r3, [pc, #564]	; (8018148 <tcp_input+0x28c>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	899b      	ldrh	r3, [r3, #12]
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7f8 fa3d 	bl	8010398 <lwip_htons>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	0b1b      	lsrs	r3, r3, #12
 8017f22:	b29b      	uxth	r3, r3
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	009b      	lsls	r3, r3, #2
 8017f28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017f2a:	7cbb      	ldrb	r3, [r7, #18]
 8017f2c:	2b13      	cmp	r3, #19
 8017f2e:	f240 83a2 	bls.w	8018676 <tcp_input+0x7ba>
 8017f32:	7cbb      	ldrb	r3, [r7, #18]
 8017f34:	b29a      	uxth	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	891b      	ldrh	r3, [r3, #8]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	f200 839b 	bhi.w	8018676 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017f40:	7cbb      	ldrb	r3, [r7, #18]
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	3b14      	subs	r3, #20
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	4b81      	ldr	r3, [pc, #516]	; (8018150 <tcp_input+0x294>)
 8017f4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017f4c:	4b81      	ldr	r3, [pc, #516]	; (8018154 <tcp_input+0x298>)
 8017f4e:	2200      	movs	r2, #0
 8017f50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	895a      	ldrh	r2, [r3, #10]
 8017f56:	7cbb      	ldrb	r3, [r7, #18]
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d309      	bcc.n	8017f72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017f5e:	4b7c      	ldr	r3, [pc, #496]	; (8018150 <tcp_input+0x294>)
 8017f60:	881a      	ldrh	r2, [r3, #0]
 8017f62:	4b7d      	ldr	r3, [pc, #500]	; (8018158 <tcp_input+0x29c>)
 8017f64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017f66:	7cbb      	ldrb	r3, [r7, #18]
 8017f68:	4619      	mov	r1, r3
 8017f6a:	6878      	ldr	r0, [r7, #4]
 8017f6c:	f7fd fff6 	bl	8015f5c <pbuf_remove_header>
 8017f70:	e04e      	b.n	8018010 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d105      	bne.n	8017f86 <tcp_input+0xca>
 8017f7a:	4b70      	ldr	r3, [pc, #448]	; (801813c <tcp_input+0x280>)
 8017f7c:	22c2      	movs	r2, #194	; 0xc2
 8017f7e:	4977      	ldr	r1, [pc, #476]	; (801815c <tcp_input+0x2a0>)
 8017f80:	4870      	ldr	r0, [pc, #448]	; (8018144 <tcp_input+0x288>)
 8017f82:	f004 fd81 	bl	801ca88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017f86:	2114      	movs	r1, #20
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f7fd ffe7 	bl	8015f5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	895a      	ldrh	r2, [r3, #10]
 8017f92:	4b71      	ldr	r3, [pc, #452]	; (8018158 <tcp_input+0x29c>)
 8017f94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017f96:	4b6e      	ldr	r3, [pc, #440]	; (8018150 <tcp_input+0x294>)
 8017f98:	881a      	ldrh	r2, [r3, #0]
 8017f9a:	4b6f      	ldr	r3, [pc, #444]	; (8018158 <tcp_input+0x29c>)
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	1ad3      	subs	r3, r2, r3
 8017fa0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017fa2:	4b6d      	ldr	r3, [pc, #436]	; (8018158 <tcp_input+0x29c>)
 8017fa4:	881b      	ldrh	r3, [r3, #0]
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7fd ffd7 	bl	8015f5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	895b      	ldrh	r3, [r3, #10]
 8017fb4:	8a3a      	ldrh	r2, [r7, #16]
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	f200 835f 	bhi.w	801867a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	685b      	ldr	r3, [r3, #4]
 8017fc2:	4a64      	ldr	r2, [pc, #400]	; (8018154 <tcp_input+0x298>)
 8017fc4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	8a3a      	ldrh	r2, [r7, #16]
 8017fcc:	4611      	mov	r1, r2
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fd ffc4 	bl	8015f5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	891a      	ldrh	r2, [r3, #8]
 8017fd8:	8a3b      	ldrh	r3, [r7, #16]
 8017fda:	1ad3      	subs	r3, r2, r3
 8017fdc:	b29a      	uxth	r2, r3
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	895b      	ldrh	r3, [r3, #10]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d005      	beq.n	8017ff6 <tcp_input+0x13a>
 8017fea:	4b54      	ldr	r3, [pc, #336]	; (801813c <tcp_input+0x280>)
 8017fec:	22df      	movs	r2, #223	; 0xdf
 8017fee:	495c      	ldr	r1, [pc, #368]	; (8018160 <tcp_input+0x2a4>)
 8017ff0:	4854      	ldr	r0, [pc, #336]	; (8018144 <tcp_input+0x288>)
 8017ff2:	f004 fd49 	bl	801ca88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	891a      	ldrh	r2, [r3, #8]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	891b      	ldrh	r3, [r3, #8]
 8018000:	429a      	cmp	r2, r3
 8018002:	d005      	beq.n	8018010 <tcp_input+0x154>
 8018004:	4b4d      	ldr	r3, [pc, #308]	; (801813c <tcp_input+0x280>)
 8018006:	22e0      	movs	r2, #224	; 0xe0
 8018008:	4956      	ldr	r1, [pc, #344]	; (8018164 <tcp_input+0x2a8>)
 801800a:	484e      	ldr	r0, [pc, #312]	; (8018144 <tcp_input+0x288>)
 801800c:	f004 fd3c 	bl	801ca88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018010:	4b4d      	ldr	r3, [pc, #308]	; (8018148 <tcp_input+0x28c>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	881b      	ldrh	r3, [r3, #0]
 8018016:	b29a      	uxth	r2, r3
 8018018:	4b4b      	ldr	r3, [pc, #300]	; (8018148 <tcp_input+0x28c>)
 801801a:	681c      	ldr	r4, [r3, #0]
 801801c:	4610      	mov	r0, r2
 801801e:	f7f8 f9bb 	bl	8010398 <lwip_htons>
 8018022:	4603      	mov	r3, r0
 8018024:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018026:	4b48      	ldr	r3, [pc, #288]	; (8018148 <tcp_input+0x28c>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	885b      	ldrh	r3, [r3, #2]
 801802c:	b29a      	uxth	r2, r3
 801802e:	4b46      	ldr	r3, [pc, #280]	; (8018148 <tcp_input+0x28c>)
 8018030:	681c      	ldr	r4, [r3, #0]
 8018032:	4610      	mov	r0, r2
 8018034:	f7f8 f9b0 	bl	8010398 <lwip_htons>
 8018038:	4603      	mov	r3, r0
 801803a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801803c:	4b42      	ldr	r3, [pc, #264]	; (8018148 <tcp_input+0x28c>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	685a      	ldr	r2, [r3, #4]
 8018042:	4b41      	ldr	r3, [pc, #260]	; (8018148 <tcp_input+0x28c>)
 8018044:	681c      	ldr	r4, [r3, #0]
 8018046:	4610      	mov	r0, r2
 8018048:	f7f8 f9bb 	bl	80103c2 <lwip_htonl>
 801804c:	4603      	mov	r3, r0
 801804e:	6063      	str	r3, [r4, #4]
 8018050:	6863      	ldr	r3, [r4, #4]
 8018052:	4a45      	ldr	r2, [pc, #276]	; (8018168 <tcp_input+0x2ac>)
 8018054:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018056:	4b3c      	ldr	r3, [pc, #240]	; (8018148 <tcp_input+0x28c>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	689a      	ldr	r2, [r3, #8]
 801805c:	4b3a      	ldr	r3, [pc, #232]	; (8018148 <tcp_input+0x28c>)
 801805e:	681c      	ldr	r4, [r3, #0]
 8018060:	4610      	mov	r0, r2
 8018062:	f7f8 f9ae 	bl	80103c2 <lwip_htonl>
 8018066:	4603      	mov	r3, r0
 8018068:	60a3      	str	r3, [r4, #8]
 801806a:	68a3      	ldr	r3, [r4, #8]
 801806c:	4a3f      	ldr	r2, [pc, #252]	; (801816c <tcp_input+0x2b0>)
 801806e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018070:	4b35      	ldr	r3, [pc, #212]	; (8018148 <tcp_input+0x28c>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	89db      	ldrh	r3, [r3, #14]
 8018076:	b29a      	uxth	r2, r3
 8018078:	4b33      	ldr	r3, [pc, #204]	; (8018148 <tcp_input+0x28c>)
 801807a:	681c      	ldr	r4, [r3, #0]
 801807c:	4610      	mov	r0, r2
 801807e:	f7f8 f98b 	bl	8010398 <lwip_htons>
 8018082:	4603      	mov	r3, r0
 8018084:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018086:	4b30      	ldr	r3, [pc, #192]	; (8018148 <tcp_input+0x28c>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	899b      	ldrh	r3, [r3, #12]
 801808c:	b29b      	uxth	r3, r3
 801808e:	4618      	mov	r0, r3
 8018090:	f7f8 f982 	bl	8010398 <lwip_htons>
 8018094:	4603      	mov	r3, r0
 8018096:	b2db      	uxtb	r3, r3
 8018098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801809c:	b2da      	uxtb	r2, r3
 801809e:	4b34      	ldr	r3, [pc, #208]	; (8018170 <tcp_input+0x2b4>)
 80180a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	891a      	ldrh	r2, [r3, #8]
 80180a6:	4b33      	ldr	r3, [pc, #204]	; (8018174 <tcp_input+0x2b8>)
 80180a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80180aa:	4b31      	ldr	r3, [pc, #196]	; (8018170 <tcp_input+0x2b4>)
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	f003 0303 	and.w	r3, r3, #3
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d00c      	beq.n	80180d0 <tcp_input+0x214>
    tcplen++;
 80180b6:	4b2f      	ldr	r3, [pc, #188]	; (8018174 <tcp_input+0x2b8>)
 80180b8:	881b      	ldrh	r3, [r3, #0]
 80180ba:	3301      	adds	r3, #1
 80180bc:	b29a      	uxth	r2, r3
 80180be:	4b2d      	ldr	r3, [pc, #180]	; (8018174 <tcp_input+0x2b8>)
 80180c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	891a      	ldrh	r2, [r3, #8]
 80180c6:	4b2b      	ldr	r3, [pc, #172]	; (8018174 <tcp_input+0x2b8>)
 80180c8:	881b      	ldrh	r3, [r3, #0]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	f200 82d7 	bhi.w	801867e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80180d0:	2300      	movs	r3, #0
 80180d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180d4:	4b28      	ldr	r3, [pc, #160]	; (8018178 <tcp_input+0x2bc>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	61fb      	str	r3, [r7, #28]
 80180da:	e09d      	b.n	8018218 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80180dc:	69fb      	ldr	r3, [r7, #28]
 80180de:	7d1b      	ldrb	r3, [r3, #20]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d105      	bne.n	80180f0 <tcp_input+0x234>
 80180e4:	4b15      	ldr	r3, [pc, #84]	; (801813c <tcp_input+0x280>)
 80180e6:	22fb      	movs	r2, #251	; 0xfb
 80180e8:	4924      	ldr	r1, [pc, #144]	; (801817c <tcp_input+0x2c0>)
 80180ea:	4816      	ldr	r0, [pc, #88]	; (8018144 <tcp_input+0x288>)
 80180ec:	f004 fccc 	bl	801ca88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	7d1b      	ldrb	r3, [r3, #20]
 80180f4:	2b0a      	cmp	r3, #10
 80180f6:	d105      	bne.n	8018104 <tcp_input+0x248>
 80180f8:	4b10      	ldr	r3, [pc, #64]	; (801813c <tcp_input+0x280>)
 80180fa:	22fc      	movs	r2, #252	; 0xfc
 80180fc:	4920      	ldr	r1, [pc, #128]	; (8018180 <tcp_input+0x2c4>)
 80180fe:	4811      	ldr	r0, [pc, #68]	; (8018144 <tcp_input+0x288>)
 8018100:	f004 fcc2 	bl	801ca88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	7d1b      	ldrb	r3, [r3, #20]
 8018108:	2b01      	cmp	r3, #1
 801810a:	d105      	bne.n	8018118 <tcp_input+0x25c>
 801810c:	4b0b      	ldr	r3, [pc, #44]	; (801813c <tcp_input+0x280>)
 801810e:	22fd      	movs	r2, #253	; 0xfd
 8018110:	491c      	ldr	r1, [pc, #112]	; (8018184 <tcp_input+0x2c8>)
 8018112:	480c      	ldr	r0, [pc, #48]	; (8018144 <tcp_input+0x288>)
 8018114:	f004 fcb8 	bl	801ca88 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018118:	69fb      	ldr	r3, [r7, #28]
 801811a:	7a1b      	ldrb	r3, [r3, #8]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d033      	beq.n	8018188 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018120:	69fb      	ldr	r3, [r7, #28]
 8018122:	7a1a      	ldrb	r2, [r3, #8]
 8018124:	4b09      	ldr	r3, [pc, #36]	; (801814c <tcp_input+0x290>)
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801812c:	3301      	adds	r3, #1
 801812e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018130:	429a      	cmp	r2, r3
 8018132:	d029      	beq.n	8018188 <tcp_input+0x2cc>
      prev = pcb;
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	61bb      	str	r3, [r7, #24]
      continue;
 8018138:	e06b      	b.n	8018212 <tcp_input+0x356>
 801813a:	bf00      	nop
 801813c:	0801f7bc 	.word	0x0801f7bc
 8018140:	0801f81c 	.word	0x0801f81c
 8018144:	0801f834 	.word	0x0801f834
 8018148:	200075bc 	.word	0x200075bc
 801814c:	20008658 	.word	0x20008658
 8018150:	200075c0 	.word	0x200075c0
 8018154:	200075c4 	.word	0x200075c4
 8018158:	200075c2 	.word	0x200075c2
 801815c:	0801f85c 	.word	0x0801f85c
 8018160:	0801f86c 	.word	0x0801f86c
 8018164:	0801f878 	.word	0x0801f878
 8018168:	200075cc 	.word	0x200075cc
 801816c:	200075d0 	.word	0x200075d0
 8018170:	200075d8 	.word	0x200075d8
 8018174:	200075d6 	.word	0x200075d6
 8018178:	2000b740 	.word	0x2000b740
 801817c:	0801f898 	.word	0x0801f898
 8018180:	0801f8c0 	.word	0x0801f8c0
 8018184:	0801f8ec 	.word	0x0801f8ec
    }

    if (pcb->remote_port == tcphdr->src &&
 8018188:	69fb      	ldr	r3, [r7, #28]
 801818a:	8b1a      	ldrh	r2, [r3, #24]
 801818c:	4b94      	ldr	r3, [pc, #592]	; (80183e0 <tcp_input+0x524>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	881b      	ldrh	r3, [r3, #0]
 8018192:	b29b      	uxth	r3, r3
 8018194:	429a      	cmp	r2, r3
 8018196:	d13a      	bne.n	801820e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018198:	69fb      	ldr	r3, [r7, #28]
 801819a:	8ada      	ldrh	r2, [r3, #22]
 801819c:	4b90      	ldr	r3, [pc, #576]	; (80183e0 <tcp_input+0x524>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	885b      	ldrh	r3, [r3, #2]
 80181a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d132      	bne.n	801820e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	685a      	ldr	r2, [r3, #4]
 80181ac:	4b8d      	ldr	r3, [pc, #564]	; (80183e4 <tcp_input+0x528>)
 80181ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d12c      	bne.n	801820e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80181b4:	69fb      	ldr	r3, [r7, #28]
 80181b6:	681a      	ldr	r2, [r3, #0]
 80181b8:	4b8a      	ldr	r3, [pc, #552]	; (80183e4 <tcp_input+0x528>)
 80181ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80181bc:	429a      	cmp	r2, r3
 80181be:	d126      	bne.n	801820e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	69fa      	ldr	r2, [r7, #28]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d106      	bne.n	80181d8 <tcp_input+0x31c>
 80181ca:	4b87      	ldr	r3, [pc, #540]	; (80183e8 <tcp_input+0x52c>)
 80181cc:	f240 120d 	movw	r2, #269	; 0x10d
 80181d0:	4986      	ldr	r1, [pc, #536]	; (80183ec <tcp_input+0x530>)
 80181d2:	4887      	ldr	r0, [pc, #540]	; (80183f0 <tcp_input+0x534>)
 80181d4:	f004 fc58 	bl	801ca88 <iprintf>
      if (prev != NULL) {
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d00a      	beq.n	80181f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80181de:	69fb      	ldr	r3, [r7, #28]
 80181e0:	68da      	ldr	r2, [r3, #12]
 80181e2:	69bb      	ldr	r3, [r7, #24]
 80181e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80181e6:	4b83      	ldr	r3, [pc, #524]	; (80183f4 <tcp_input+0x538>)
 80181e8:	681a      	ldr	r2, [r3, #0]
 80181ea:	69fb      	ldr	r3, [r7, #28]
 80181ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80181ee:	4a81      	ldr	r2, [pc, #516]	; (80183f4 <tcp_input+0x538>)
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80181f4:	69fb      	ldr	r3, [r7, #28]
 80181f6:	68db      	ldr	r3, [r3, #12]
 80181f8:	69fa      	ldr	r2, [r7, #28]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d111      	bne.n	8018222 <tcp_input+0x366>
 80181fe:	4b7a      	ldr	r3, [pc, #488]	; (80183e8 <tcp_input+0x52c>)
 8018200:	f240 1215 	movw	r2, #277	; 0x115
 8018204:	497c      	ldr	r1, [pc, #496]	; (80183f8 <tcp_input+0x53c>)
 8018206:	487a      	ldr	r0, [pc, #488]	; (80183f0 <tcp_input+0x534>)
 8018208:	f004 fc3e 	bl	801ca88 <iprintf>
      break;
 801820c:	e009      	b.n	8018222 <tcp_input+0x366>
    }
    prev = pcb;
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	68db      	ldr	r3, [r3, #12]
 8018216:	61fb      	str	r3, [r7, #28]
 8018218:	69fb      	ldr	r3, [r7, #28]
 801821a:	2b00      	cmp	r3, #0
 801821c:	f47f af5e 	bne.w	80180dc <tcp_input+0x220>
 8018220:	e000      	b.n	8018224 <tcp_input+0x368>
      break;
 8018222:	bf00      	nop
  }

  if (pcb == NULL) {
 8018224:	69fb      	ldr	r3, [r7, #28]
 8018226:	2b00      	cmp	r3, #0
 8018228:	f040 8095 	bne.w	8018356 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801822c:	4b73      	ldr	r3, [pc, #460]	; (80183fc <tcp_input+0x540>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	61fb      	str	r3, [r7, #28]
 8018232:	e03f      	b.n	80182b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018234:	69fb      	ldr	r3, [r7, #28]
 8018236:	7d1b      	ldrb	r3, [r3, #20]
 8018238:	2b0a      	cmp	r3, #10
 801823a:	d006      	beq.n	801824a <tcp_input+0x38e>
 801823c:	4b6a      	ldr	r3, [pc, #424]	; (80183e8 <tcp_input+0x52c>)
 801823e:	f240 121f 	movw	r2, #287	; 0x11f
 8018242:	496f      	ldr	r1, [pc, #444]	; (8018400 <tcp_input+0x544>)
 8018244:	486a      	ldr	r0, [pc, #424]	; (80183f0 <tcp_input+0x534>)
 8018246:	f004 fc1f 	bl	801ca88 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801824a:	69fb      	ldr	r3, [r7, #28]
 801824c:	7a1b      	ldrb	r3, [r3, #8]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d009      	beq.n	8018266 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018252:	69fb      	ldr	r3, [r7, #28]
 8018254:	7a1a      	ldrb	r2, [r3, #8]
 8018256:	4b63      	ldr	r3, [pc, #396]	; (80183e4 <tcp_input+0x528>)
 8018258:	685b      	ldr	r3, [r3, #4]
 801825a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801825e:	3301      	adds	r3, #1
 8018260:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018262:	429a      	cmp	r2, r3
 8018264:	d122      	bne.n	80182ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018266:	69fb      	ldr	r3, [r7, #28]
 8018268:	8b1a      	ldrh	r2, [r3, #24]
 801826a:	4b5d      	ldr	r3, [pc, #372]	; (80183e0 <tcp_input+0x524>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	881b      	ldrh	r3, [r3, #0]
 8018270:	b29b      	uxth	r3, r3
 8018272:	429a      	cmp	r2, r3
 8018274:	d11b      	bne.n	80182ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	8ada      	ldrh	r2, [r3, #22]
 801827a:	4b59      	ldr	r3, [pc, #356]	; (80183e0 <tcp_input+0x524>)
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	885b      	ldrh	r3, [r3, #2]
 8018280:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018282:	429a      	cmp	r2, r3
 8018284:	d113      	bne.n	80182ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018286:	69fb      	ldr	r3, [r7, #28]
 8018288:	685a      	ldr	r2, [r3, #4]
 801828a:	4b56      	ldr	r3, [pc, #344]	; (80183e4 <tcp_input+0x528>)
 801828c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801828e:	429a      	cmp	r2, r3
 8018290:	d10d      	bne.n	80182ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018292:	69fb      	ldr	r3, [r7, #28]
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	4b53      	ldr	r3, [pc, #332]	; (80183e4 <tcp_input+0x528>)
 8018298:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801829a:	429a      	cmp	r2, r3
 801829c:	d107      	bne.n	80182ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801829e:	69f8      	ldr	r0, [r7, #28]
 80182a0:	f000 fb52 	bl	8018948 <tcp_timewait_input>
        }
        pbuf_free(p);
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f7fd fedf 	bl	8016068 <pbuf_free>
        return;
 80182aa:	e1ee      	b.n	801868a <tcp_input+0x7ce>
        continue;
 80182ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	68db      	ldr	r3, [r3, #12]
 80182b2:	61fb      	str	r3, [r7, #28]
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d1bc      	bne.n	8018234 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80182ba:	2300      	movs	r3, #0
 80182bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80182be:	4b51      	ldr	r3, [pc, #324]	; (8018404 <tcp_input+0x548>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	617b      	str	r3, [r7, #20]
 80182c4:	e02a      	b.n	801831c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	7a1b      	ldrb	r3, [r3, #8]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d00c      	beq.n	80182e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80182ce:	697b      	ldr	r3, [r7, #20]
 80182d0:	7a1a      	ldrb	r2, [r3, #8]
 80182d2:	4b44      	ldr	r3, [pc, #272]	; (80183e4 <tcp_input+0x528>)
 80182d4:	685b      	ldr	r3, [r3, #4]
 80182d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80182da:	3301      	adds	r3, #1
 80182dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80182de:	429a      	cmp	r2, r3
 80182e0:	d002      	beq.n	80182e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	61bb      	str	r3, [r7, #24]
        continue;
 80182e6:	e016      	b.n	8018316 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80182e8:	697b      	ldr	r3, [r7, #20]
 80182ea:	8ada      	ldrh	r2, [r3, #22]
 80182ec:	4b3c      	ldr	r3, [pc, #240]	; (80183e0 <tcp_input+0x524>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	885b      	ldrh	r3, [r3, #2]
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d10c      	bne.n	8018312 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80182f8:	697b      	ldr	r3, [r7, #20]
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	4b39      	ldr	r3, [pc, #228]	; (80183e4 <tcp_input+0x528>)
 80182fe:	695b      	ldr	r3, [r3, #20]
 8018300:	429a      	cmp	r2, r3
 8018302:	d00f      	beq.n	8018324 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00d      	beq.n	8018326 <tcp_input+0x46a>
 801830a:	697b      	ldr	r3, [r7, #20]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d009      	beq.n	8018326 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018312:	697b      	ldr	r3, [r7, #20]
 8018314:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018316:	697b      	ldr	r3, [r7, #20]
 8018318:	68db      	ldr	r3, [r3, #12]
 801831a:	617b      	str	r3, [r7, #20]
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d1d1      	bne.n	80182c6 <tcp_input+0x40a>
 8018322:	e000      	b.n	8018326 <tcp_input+0x46a>
            break;
 8018324:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d014      	beq.n	8018356 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d00a      	beq.n	8018348 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	68da      	ldr	r2, [r3, #12]
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801833a:	4b32      	ldr	r3, [pc, #200]	; (8018404 <tcp_input+0x548>)
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018342:	4a30      	ldr	r2, [pc, #192]	; (8018404 <tcp_input+0x548>)
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018348:	6978      	ldr	r0, [r7, #20]
 801834a:	f000 f9ff 	bl	801874c <tcp_listen_input>
      }
      pbuf_free(p);
 801834e:	6878      	ldr	r0, [r7, #4]
 8018350:	f7fd fe8a 	bl	8016068 <pbuf_free>
      return;
 8018354:	e199      	b.n	801868a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018356:	69fb      	ldr	r3, [r7, #28]
 8018358:	2b00      	cmp	r3, #0
 801835a:	f000 8160 	beq.w	801861e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801835e:	4b2a      	ldr	r3, [pc, #168]	; (8018408 <tcp_input+0x54c>)
 8018360:	2200      	movs	r2, #0
 8018362:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	891a      	ldrh	r2, [r3, #8]
 8018368:	4b27      	ldr	r3, [pc, #156]	; (8018408 <tcp_input+0x54c>)
 801836a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801836c:	4a26      	ldr	r2, [pc, #152]	; (8018408 <tcp_input+0x54c>)
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018372:	4b1b      	ldr	r3, [pc, #108]	; (80183e0 <tcp_input+0x524>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	4a24      	ldr	r2, [pc, #144]	; (8018408 <tcp_input+0x54c>)
 8018378:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801837a:	4b24      	ldr	r3, [pc, #144]	; (801840c <tcp_input+0x550>)
 801837c:	2200      	movs	r2, #0
 801837e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018380:	4b23      	ldr	r3, [pc, #140]	; (8018410 <tcp_input+0x554>)
 8018382:	2200      	movs	r2, #0
 8018384:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018386:	4b23      	ldr	r3, [pc, #140]	; (8018414 <tcp_input+0x558>)
 8018388:	2200      	movs	r2, #0
 801838a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801838c:	4b22      	ldr	r3, [pc, #136]	; (8018418 <tcp_input+0x55c>)
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	f003 0308 	and.w	r3, r3, #8
 8018394:	2b00      	cmp	r3, #0
 8018396:	d006      	beq.n	80183a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	7b5b      	ldrb	r3, [r3, #13]
 801839c:	f043 0301 	orr.w	r3, r3, #1
 80183a0:	b2da      	uxtb	r2, r3
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d038      	beq.n	8018420 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80183ae:	69f8      	ldr	r0, [r7, #28]
 80183b0:	f7ff f940 	bl	8017634 <tcp_process_refused_data>
 80183b4:	4603      	mov	r3, r0
 80183b6:	f113 0f0d 	cmn.w	r3, #13
 80183ba:	d007      	beq.n	80183cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d02d      	beq.n	8018420 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80183c4:	4b15      	ldr	r3, [pc, #84]	; (801841c <tcp_input+0x560>)
 80183c6:	881b      	ldrh	r3, [r3, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d029      	beq.n	8018420 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80183cc:	69fb      	ldr	r3, [r7, #28]
 80183ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	f040 8104 	bne.w	80185de <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80183d6:	69f8      	ldr	r0, [r7, #28]
 80183d8:	f003 f9ce 	bl	801b778 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80183dc:	e0ff      	b.n	80185de <tcp_input+0x722>
 80183de:	bf00      	nop
 80183e0:	200075bc 	.word	0x200075bc
 80183e4:	20008658 	.word	0x20008658
 80183e8:	0801f7bc 	.word	0x0801f7bc
 80183ec:	0801f914 	.word	0x0801f914
 80183f0:	0801f834 	.word	0x0801f834
 80183f4:	2000b740 	.word	0x2000b740
 80183f8:	0801f940 	.word	0x0801f940
 80183fc:	2000b750 	.word	0x2000b750
 8018400:	0801f96c 	.word	0x0801f96c
 8018404:	2000b748 	.word	0x2000b748
 8018408:	200075ac 	.word	0x200075ac
 801840c:	200075dc 	.word	0x200075dc
 8018410:	200075d9 	.word	0x200075d9
 8018414:	200075d4 	.word	0x200075d4
 8018418:	200075d8 	.word	0x200075d8
 801841c:	200075d6 	.word	0x200075d6
      }
    }
    tcp_input_pcb = pcb;
 8018420:	4a9b      	ldr	r2, [pc, #620]	; (8018690 <tcp_input+0x7d4>)
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018426:	69f8      	ldr	r0, [r7, #28]
 8018428:	f000 fb0a 	bl	8018a40 <tcp_process>
 801842c:	4603      	mov	r3, r0
 801842e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018434:	f113 0f0d 	cmn.w	r3, #13
 8018438:	f000 80d3 	beq.w	80185e2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801843c:	4b95      	ldr	r3, [pc, #596]	; (8018694 <tcp_input+0x7d8>)
 801843e:	781b      	ldrb	r3, [r3, #0]
 8018440:	f003 0308 	and.w	r3, r3, #8
 8018444:	2b00      	cmp	r3, #0
 8018446:	d015      	beq.n	8018474 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018448:	69fb      	ldr	r3, [r7, #28]
 801844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801844e:	2b00      	cmp	r3, #0
 8018450:	d008      	beq.n	8018464 <tcp_input+0x5a8>
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018458:	69fa      	ldr	r2, [r7, #28]
 801845a:	6912      	ldr	r2, [r2, #16]
 801845c:	f06f 010d 	mvn.w	r1, #13
 8018460:	4610      	mov	r0, r2
 8018462:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018464:	69f9      	ldr	r1, [r7, #28]
 8018466:	488c      	ldr	r0, [pc, #560]	; (8018698 <tcp_input+0x7dc>)
 8018468:	f7ff fbb0 	bl	8017bcc <tcp_pcb_remove>
        tcp_free(pcb);
 801846c:	69f8      	ldr	r0, [r7, #28]
 801846e:	f7fe f9a9 	bl	80167c4 <tcp_free>
 8018472:	e0c1      	b.n	80185f8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018474:	2300      	movs	r3, #0
 8018476:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018478:	4b88      	ldr	r3, [pc, #544]	; (801869c <tcp_input+0x7e0>)
 801847a:	881b      	ldrh	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d01d      	beq.n	80184bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018480:	4b86      	ldr	r3, [pc, #536]	; (801869c <tcp_input+0x7e0>)
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018486:	69fb      	ldr	r3, [r7, #28]
 8018488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801848c:	2b00      	cmp	r3, #0
 801848e:	d00a      	beq.n	80184a6 <tcp_input+0x5ea>
 8018490:	69fb      	ldr	r3, [r7, #28]
 8018492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018496:	69fa      	ldr	r2, [r7, #28]
 8018498:	6910      	ldr	r0, [r2, #16]
 801849a:	89fa      	ldrh	r2, [r7, #14]
 801849c:	69f9      	ldr	r1, [r7, #28]
 801849e:	4798      	blx	r3
 80184a0:	4603      	mov	r3, r0
 80184a2:	74fb      	strb	r3, [r7, #19]
 80184a4:	e001      	b.n	80184aa <tcp_input+0x5ee>
 80184a6:	2300      	movs	r3, #0
 80184a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80184aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80184ae:	f113 0f0d 	cmn.w	r3, #13
 80184b2:	f000 8098 	beq.w	80185e6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80184b6:	4b79      	ldr	r3, [pc, #484]	; (801869c <tcp_input+0x7e0>)
 80184b8:	2200      	movs	r2, #0
 80184ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80184bc:	69f8      	ldr	r0, [r7, #28]
 80184be:	f000 f905 	bl	80186cc <tcp_input_delayed_close>
 80184c2:	4603      	mov	r3, r0
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	f040 8090 	bne.w	80185ea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80184ca:	4b75      	ldr	r3, [pc, #468]	; (80186a0 <tcp_input+0x7e4>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d041      	beq.n	8018556 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d006      	beq.n	80184e8 <tcp_input+0x62c>
 80184da:	4b72      	ldr	r3, [pc, #456]	; (80186a4 <tcp_input+0x7e8>)
 80184dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80184e0:	4971      	ldr	r1, [pc, #452]	; (80186a8 <tcp_input+0x7ec>)
 80184e2:	4872      	ldr	r0, [pc, #456]	; (80186ac <tcp_input+0x7f0>)
 80184e4:	f004 fad0 	bl	801ca88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	8b5b      	ldrh	r3, [r3, #26]
 80184ec:	f003 0310 	and.w	r3, r3, #16
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d008      	beq.n	8018506 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80184f4:	4b6a      	ldr	r3, [pc, #424]	; (80186a0 <tcp_input+0x7e4>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7fd fdb5 	bl	8016068 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80184fe:	69f8      	ldr	r0, [r7, #28]
 8018500:	f7fe fc40 	bl	8016d84 <tcp_abort>
            goto aborted;
 8018504:	e078      	b.n	80185f8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018506:	69fb      	ldr	r3, [r7, #28]
 8018508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801850c:	2b00      	cmp	r3, #0
 801850e:	d00c      	beq.n	801852a <tcp_input+0x66e>
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018516:	69fb      	ldr	r3, [r7, #28]
 8018518:	6918      	ldr	r0, [r3, #16]
 801851a:	4b61      	ldr	r3, [pc, #388]	; (80186a0 <tcp_input+0x7e4>)
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	2300      	movs	r3, #0
 8018520:	69f9      	ldr	r1, [r7, #28]
 8018522:	47a0      	blx	r4
 8018524:	4603      	mov	r3, r0
 8018526:	74fb      	strb	r3, [r7, #19]
 8018528:	e008      	b.n	801853c <tcp_input+0x680>
 801852a:	4b5d      	ldr	r3, [pc, #372]	; (80186a0 <tcp_input+0x7e4>)
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	2300      	movs	r3, #0
 8018530:	69f9      	ldr	r1, [r7, #28]
 8018532:	2000      	movs	r0, #0
 8018534:	f7ff f952 	bl	80177dc <tcp_recv_null>
 8018538:	4603      	mov	r3, r0
 801853a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801853c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018540:	f113 0f0d 	cmn.w	r3, #13
 8018544:	d053      	beq.n	80185ee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018546:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d003      	beq.n	8018556 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801854e:	4b54      	ldr	r3, [pc, #336]	; (80186a0 <tcp_input+0x7e4>)
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	69fb      	ldr	r3, [r7, #28]
 8018554:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018556:	4b4f      	ldr	r3, [pc, #316]	; (8018694 <tcp_input+0x7d8>)
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	f003 0320 	and.w	r3, r3, #32
 801855e:	2b00      	cmp	r3, #0
 8018560:	d030      	beq.n	80185c4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018566:	2b00      	cmp	r3, #0
 8018568:	d009      	beq.n	801857e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801856a:	69fb      	ldr	r3, [r7, #28]
 801856c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801856e:	7b5a      	ldrb	r2, [r3, #13]
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018574:	f042 0220 	orr.w	r2, r2, #32
 8018578:	b2d2      	uxtb	r2, r2
 801857a:	735a      	strb	r2, [r3, #13]
 801857c:	e022      	b.n	80185c4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801857e:	69fb      	ldr	r3, [r7, #28]
 8018580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018582:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018586:	d005      	beq.n	8018594 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018588:	69fb      	ldr	r3, [r7, #28]
 801858a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801858c:	3301      	adds	r3, #1
 801858e:	b29a      	uxth	r2, r3
 8018590:	69fb      	ldr	r3, [r7, #28]
 8018592:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00b      	beq.n	80185b6 <tcp_input+0x6fa>
 801859e:	69fb      	ldr	r3, [r7, #28]
 80185a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80185a4:	69fb      	ldr	r3, [r7, #28]
 80185a6:	6918      	ldr	r0, [r3, #16]
 80185a8:	2300      	movs	r3, #0
 80185aa:	2200      	movs	r2, #0
 80185ac:	69f9      	ldr	r1, [r7, #28]
 80185ae:	47a0      	blx	r4
 80185b0:	4603      	mov	r3, r0
 80185b2:	74fb      	strb	r3, [r7, #19]
 80185b4:	e001      	b.n	80185ba <tcp_input+0x6fe>
 80185b6:	2300      	movs	r3, #0
 80185b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80185ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185be:	f113 0f0d 	cmn.w	r3, #13
 80185c2:	d016      	beq.n	80185f2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80185c4:	4b32      	ldr	r3, [pc, #200]	; (8018690 <tcp_input+0x7d4>)
 80185c6:	2200      	movs	r2, #0
 80185c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80185ca:	69f8      	ldr	r0, [r7, #28]
 80185cc:	f000 f87e 	bl	80186cc <tcp_input_delayed_close>
 80185d0:	4603      	mov	r3, r0
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d10f      	bne.n	80185f6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80185d6:	69f8      	ldr	r0, [r7, #28]
 80185d8:	f002 fab6 	bl	801ab48 <tcp_output>
 80185dc:	e00c      	b.n	80185f8 <tcp_input+0x73c>
        goto aborted;
 80185de:	bf00      	nop
 80185e0:	e00a      	b.n	80185f8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80185e2:	bf00      	nop
 80185e4:	e008      	b.n	80185f8 <tcp_input+0x73c>
              goto aborted;
 80185e6:	bf00      	nop
 80185e8:	e006      	b.n	80185f8 <tcp_input+0x73c>
          goto aborted;
 80185ea:	bf00      	nop
 80185ec:	e004      	b.n	80185f8 <tcp_input+0x73c>
            goto aborted;
 80185ee:	bf00      	nop
 80185f0:	e002      	b.n	80185f8 <tcp_input+0x73c>
              goto aborted;
 80185f2:	bf00      	nop
 80185f4:	e000      	b.n	80185f8 <tcp_input+0x73c>
          goto aborted;
 80185f6:	bf00      	nop
    tcp_input_pcb = NULL;
 80185f8:	4b25      	ldr	r3, [pc, #148]	; (8018690 <tcp_input+0x7d4>)
 80185fa:	2200      	movs	r2, #0
 80185fc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80185fe:	4b28      	ldr	r3, [pc, #160]	; (80186a0 <tcp_input+0x7e4>)
 8018600:	2200      	movs	r2, #0
 8018602:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018604:	4b2a      	ldr	r3, [pc, #168]	; (80186b0 <tcp_input+0x7f4>)
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d03d      	beq.n	8018688 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801860c:	4b28      	ldr	r3, [pc, #160]	; (80186b0 <tcp_input+0x7f4>)
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	4618      	mov	r0, r3
 8018612:	f7fd fd29 	bl	8016068 <pbuf_free>
      inseg.p = NULL;
 8018616:	4b26      	ldr	r3, [pc, #152]	; (80186b0 <tcp_input+0x7f4>)
 8018618:	2200      	movs	r2, #0
 801861a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801861c:	e034      	b.n	8018688 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801861e:	4b25      	ldr	r3, [pc, #148]	; (80186b4 <tcp_input+0x7f8>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	899b      	ldrh	r3, [r3, #12]
 8018624:	b29b      	uxth	r3, r3
 8018626:	4618      	mov	r0, r3
 8018628:	f7f7 feb6 	bl	8010398 <lwip_htons>
 801862c:	4603      	mov	r3, r0
 801862e:	b2db      	uxtb	r3, r3
 8018630:	f003 0304 	and.w	r3, r3, #4
 8018634:	2b00      	cmp	r3, #0
 8018636:	d118      	bne.n	801866a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018638:	4b1f      	ldr	r3, [pc, #124]	; (80186b8 <tcp_input+0x7fc>)
 801863a:	6819      	ldr	r1, [r3, #0]
 801863c:	4b1f      	ldr	r3, [pc, #124]	; (80186bc <tcp_input+0x800>)
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	461a      	mov	r2, r3
 8018642:	4b1f      	ldr	r3, [pc, #124]	; (80186c0 <tcp_input+0x804>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018648:	4b1a      	ldr	r3, [pc, #104]	; (80186b4 <tcp_input+0x7f8>)
 801864a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801864c:	885b      	ldrh	r3, [r3, #2]
 801864e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018650:	4a18      	ldr	r2, [pc, #96]	; (80186b4 <tcp_input+0x7f8>)
 8018652:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018654:	8812      	ldrh	r2, [r2, #0]
 8018656:	b292      	uxth	r2, r2
 8018658:	9202      	str	r2, [sp, #8]
 801865a:	9301      	str	r3, [sp, #4]
 801865c:	4b19      	ldr	r3, [pc, #100]	; (80186c4 <tcp_input+0x808>)
 801865e:	9300      	str	r3, [sp, #0]
 8018660:	4b19      	ldr	r3, [pc, #100]	; (80186c8 <tcp_input+0x80c>)
 8018662:	4602      	mov	r2, r0
 8018664:	2000      	movs	r0, #0
 8018666:	f003 f835 	bl	801b6d4 <tcp_rst>
    pbuf_free(p);
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	f7fd fcfc 	bl	8016068 <pbuf_free>
  return;
 8018670:	e00a      	b.n	8018688 <tcp_input+0x7cc>
    goto dropped;
 8018672:	bf00      	nop
 8018674:	e004      	b.n	8018680 <tcp_input+0x7c4>
dropped:
 8018676:	bf00      	nop
 8018678:	e002      	b.n	8018680 <tcp_input+0x7c4>
      goto dropped;
 801867a:	bf00      	nop
 801867c:	e000      	b.n	8018680 <tcp_input+0x7c4>
      goto dropped;
 801867e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018680:	6878      	ldr	r0, [r7, #4]
 8018682:	f7fd fcf1 	bl	8016068 <pbuf_free>
 8018686:	e000      	b.n	801868a <tcp_input+0x7ce>
  return;
 8018688:	bf00      	nop
}
 801868a:	3724      	adds	r7, #36	; 0x24
 801868c:	46bd      	mov	sp, r7
 801868e:	bd90      	pop	{r4, r7, pc}
 8018690:	2000b754 	.word	0x2000b754
 8018694:	200075d9 	.word	0x200075d9
 8018698:	2000b740 	.word	0x2000b740
 801869c:	200075d4 	.word	0x200075d4
 80186a0:	200075dc 	.word	0x200075dc
 80186a4:	0801f7bc 	.word	0x0801f7bc
 80186a8:	0801f99c 	.word	0x0801f99c
 80186ac:	0801f834 	.word	0x0801f834
 80186b0:	200075ac 	.word	0x200075ac
 80186b4:	200075bc 	.word	0x200075bc
 80186b8:	200075d0 	.word	0x200075d0
 80186bc:	200075d6 	.word	0x200075d6
 80186c0:	200075cc 	.word	0x200075cc
 80186c4:	20008668 	.word	0x20008668
 80186c8:	2000866c 	.word	0x2000866c

080186cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d106      	bne.n	80186e8 <tcp_input_delayed_close+0x1c>
 80186da:	4b17      	ldr	r3, [pc, #92]	; (8018738 <tcp_input_delayed_close+0x6c>)
 80186dc:	f240 225a 	movw	r2, #602	; 0x25a
 80186e0:	4916      	ldr	r1, [pc, #88]	; (801873c <tcp_input_delayed_close+0x70>)
 80186e2:	4817      	ldr	r0, [pc, #92]	; (8018740 <tcp_input_delayed_close+0x74>)
 80186e4:	f004 f9d0 	bl	801ca88 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80186e8:	4b16      	ldr	r3, [pc, #88]	; (8018744 <tcp_input_delayed_close+0x78>)
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	f003 0310 	and.w	r3, r3, #16
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d01c      	beq.n	801872e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	8b5b      	ldrh	r3, [r3, #26]
 80186f8:	f003 0310 	and.w	r3, r3, #16
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d10d      	bne.n	801871c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018706:	2b00      	cmp	r3, #0
 8018708:	d008      	beq.n	801871c <tcp_input_delayed_close+0x50>
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018710:	687a      	ldr	r2, [r7, #4]
 8018712:	6912      	ldr	r2, [r2, #16]
 8018714:	f06f 010e 	mvn.w	r1, #14
 8018718:	4610      	mov	r0, r2
 801871a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801871c:	6879      	ldr	r1, [r7, #4]
 801871e:	480a      	ldr	r0, [pc, #40]	; (8018748 <tcp_input_delayed_close+0x7c>)
 8018720:	f7ff fa54 	bl	8017bcc <tcp_pcb_remove>
    tcp_free(pcb);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f7fe f84d 	bl	80167c4 <tcp_free>
    return 1;
 801872a:	2301      	movs	r3, #1
 801872c:	e000      	b.n	8018730 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801872e:	2300      	movs	r3, #0
}
 8018730:	4618      	mov	r0, r3
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	0801f7bc 	.word	0x0801f7bc
 801873c:	0801f9b8 	.word	0x0801f9b8
 8018740:	0801f834 	.word	0x0801f834
 8018744:	200075d9 	.word	0x200075d9
 8018748:	2000b740 	.word	0x2000b740

0801874c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801874c:	b590      	push	{r4, r7, lr}
 801874e:	b08b      	sub	sp, #44	; 0x2c
 8018750:	af04      	add	r7, sp, #16
 8018752:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018754:	4b6f      	ldr	r3, [pc, #444]	; (8018914 <tcp_listen_input+0x1c8>)
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	f003 0304 	and.w	r3, r3, #4
 801875c:	2b00      	cmp	r3, #0
 801875e:	f040 80d3 	bne.w	8018908 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d106      	bne.n	8018776 <tcp_listen_input+0x2a>
 8018768:	4b6b      	ldr	r3, [pc, #428]	; (8018918 <tcp_listen_input+0x1cc>)
 801876a:	f240 2281 	movw	r2, #641	; 0x281
 801876e:	496b      	ldr	r1, [pc, #428]	; (801891c <tcp_listen_input+0x1d0>)
 8018770:	486b      	ldr	r0, [pc, #428]	; (8018920 <tcp_listen_input+0x1d4>)
 8018772:	f004 f989 	bl	801ca88 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018776:	4b67      	ldr	r3, [pc, #412]	; (8018914 <tcp_listen_input+0x1c8>)
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	f003 0310 	and.w	r3, r3, #16
 801877e:	2b00      	cmp	r3, #0
 8018780:	d019      	beq.n	80187b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018782:	4b68      	ldr	r3, [pc, #416]	; (8018924 <tcp_listen_input+0x1d8>)
 8018784:	6819      	ldr	r1, [r3, #0]
 8018786:	4b68      	ldr	r3, [pc, #416]	; (8018928 <tcp_listen_input+0x1dc>)
 8018788:	881b      	ldrh	r3, [r3, #0]
 801878a:	461a      	mov	r2, r3
 801878c:	4b67      	ldr	r3, [pc, #412]	; (801892c <tcp_listen_input+0x1e0>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018792:	4b67      	ldr	r3, [pc, #412]	; (8018930 <tcp_listen_input+0x1e4>)
 8018794:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018796:	885b      	ldrh	r3, [r3, #2]
 8018798:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801879a:	4a65      	ldr	r2, [pc, #404]	; (8018930 <tcp_listen_input+0x1e4>)
 801879c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801879e:	8812      	ldrh	r2, [r2, #0]
 80187a0:	b292      	uxth	r2, r2
 80187a2:	9202      	str	r2, [sp, #8]
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	4b63      	ldr	r3, [pc, #396]	; (8018934 <tcp_listen_input+0x1e8>)
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	4b63      	ldr	r3, [pc, #396]	; (8018938 <tcp_listen_input+0x1ec>)
 80187ac:	4602      	mov	r2, r0
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f002 ff90 	bl	801b6d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80187b4:	e0aa      	b.n	801890c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80187b6:	4b57      	ldr	r3, [pc, #348]	; (8018914 <tcp_listen_input+0x1c8>)
 80187b8:	781b      	ldrb	r3, [r3, #0]
 80187ba:	f003 0302 	and.w	r3, r3, #2
 80187be:	2b00      	cmp	r3, #0
 80187c0:	f000 80a4 	beq.w	801890c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	7d5b      	ldrb	r3, [r3, #21]
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7ff f92b 	bl	8017a24 <tcp_alloc>
 80187ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d111      	bne.n	80187fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	699b      	ldr	r3, [r3, #24]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d00a      	beq.n	80187f4 <tcp_listen_input+0xa8>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	699b      	ldr	r3, [r3, #24]
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	6910      	ldr	r0, [r2, #16]
 80187e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187ea:	2100      	movs	r1, #0
 80187ec:	4798      	blx	r3
 80187ee:	4603      	mov	r3, r0
 80187f0:	73bb      	strb	r3, [r7, #14]
      return;
 80187f2:	e08c      	b.n	801890e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80187f4:	23f0      	movs	r3, #240	; 0xf0
 80187f6:	73bb      	strb	r3, [r7, #14]
      return;
 80187f8:	e089      	b.n	801890e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80187fa:	4b50      	ldr	r3, [pc, #320]	; (801893c <tcp_listen_input+0x1f0>)
 80187fc:	695a      	ldr	r2, [r3, #20]
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018802:	4b4e      	ldr	r3, [pc, #312]	; (801893c <tcp_listen_input+0x1f0>)
 8018804:	691a      	ldr	r2, [r3, #16]
 8018806:	697b      	ldr	r3, [r7, #20]
 8018808:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	8ada      	ldrh	r2, [r3, #22]
 801880e:	697b      	ldr	r3, [r7, #20]
 8018810:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018812:	4b47      	ldr	r3, [pc, #284]	; (8018930 <tcp_listen_input+0x1e4>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	881b      	ldrh	r3, [r3, #0]
 8018818:	b29a      	uxth	r2, r3
 801881a:	697b      	ldr	r3, [r7, #20]
 801881c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	2203      	movs	r2, #3
 8018822:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018824:	4b41      	ldr	r3, [pc, #260]	; (801892c <tcp_listen_input+0x1e0>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	1c5a      	adds	r2, r3, #1
 801882a:	697b      	ldr	r3, [r7, #20]
 801882c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018836:	6978      	ldr	r0, [r7, #20]
 8018838:	f7ff fa5c 	bl	8017cf4 <tcp_next_iss>
 801883c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801883e:	697b      	ldr	r3, [r7, #20]
 8018840:	693a      	ldr	r2, [r7, #16]
 8018842:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018844:	697b      	ldr	r3, [r7, #20]
 8018846:	693a      	ldr	r2, [r7, #16]
 8018848:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	693a      	ldr	r2, [r7, #16]
 801884e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	693a      	ldr	r2, [r7, #16]
 8018854:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018856:	4b35      	ldr	r3, [pc, #212]	; (801892c <tcp_listen_input+0x1e0>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	1e5a      	subs	r2, r3, #1
 801885c:	697b      	ldr	r3, [r7, #20]
 801885e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	691a      	ldr	r2, [r3, #16]
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018868:	697b      	ldr	r3, [r7, #20]
 801886a:	687a      	ldr	r2, [r7, #4]
 801886c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	7a5b      	ldrb	r3, [r3, #9]
 8018872:	f003 030c 	and.w	r3, r3, #12
 8018876:	b2da      	uxtb	r2, r3
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	7a1a      	ldrb	r2, [r3, #8]
 8018880:	697b      	ldr	r3, [r7, #20]
 8018882:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018884:	4b2e      	ldr	r3, [pc, #184]	; (8018940 <tcp_listen_input+0x1f4>)
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	60da      	str	r2, [r3, #12]
 801888c:	4a2c      	ldr	r2, [pc, #176]	; (8018940 <tcp_listen_input+0x1f4>)
 801888e:	697b      	ldr	r3, [r7, #20]
 8018890:	6013      	str	r3, [r2, #0]
 8018892:	f003 fa7f 	bl	801bd94 <tcp_timer_needed>
 8018896:	4b2b      	ldr	r3, [pc, #172]	; (8018944 <tcp_listen_input+0x1f8>)
 8018898:	2201      	movs	r2, #1
 801889a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801889c:	6978      	ldr	r0, [r7, #20]
 801889e:	f001 fd8f 	bl	801a3c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80188a2:	4b23      	ldr	r3, [pc, #140]	; (8018930 <tcp_listen_input+0x1e4>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	89db      	ldrh	r3, [r3, #14]
 80188a8:	b29a      	uxth	r2, r3
 80188aa:	697b      	ldr	r3, [r7, #20]
 80188ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80188b0:	697b      	ldr	r3, [r7, #20]
 80188b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	3304      	adds	r3, #4
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7fa fee7 	bl	8013698 <ip4_route>
 80188ca:	4601      	mov	r1, r0
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	3304      	adds	r3, #4
 80188d0:	461a      	mov	r2, r3
 80188d2:	4620      	mov	r0, r4
 80188d4:	f7ff fa34 	bl	8017d40 <tcp_eff_send_mss_netif>
 80188d8:	4603      	mov	r3, r0
 80188da:	461a      	mov	r2, r3
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80188e0:	2112      	movs	r1, #18
 80188e2:	6978      	ldr	r0, [r7, #20]
 80188e4:	f002 f842 	bl	801a96c <tcp_enqueue_flags>
 80188e8:	4603      	mov	r3, r0
 80188ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80188ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d004      	beq.n	80188fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80188f4:	2100      	movs	r1, #0
 80188f6:	6978      	ldr	r0, [r7, #20]
 80188f8:	f7fe f986 	bl	8016c08 <tcp_abandon>
      return;
 80188fc:	e007      	b.n	801890e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80188fe:	6978      	ldr	r0, [r7, #20]
 8018900:	f002 f922 	bl	801ab48 <tcp_output>
  return;
 8018904:	bf00      	nop
 8018906:	e001      	b.n	801890c <tcp_listen_input+0x1c0>
    return;
 8018908:	bf00      	nop
 801890a:	e000      	b.n	801890e <tcp_listen_input+0x1c2>
  return;
 801890c:	bf00      	nop
}
 801890e:	371c      	adds	r7, #28
 8018910:	46bd      	mov	sp, r7
 8018912:	bd90      	pop	{r4, r7, pc}
 8018914:	200075d8 	.word	0x200075d8
 8018918:	0801f7bc 	.word	0x0801f7bc
 801891c:	0801f9e0 	.word	0x0801f9e0
 8018920:	0801f834 	.word	0x0801f834
 8018924:	200075d0 	.word	0x200075d0
 8018928:	200075d6 	.word	0x200075d6
 801892c:	200075cc 	.word	0x200075cc
 8018930:	200075bc 	.word	0x200075bc
 8018934:	20008668 	.word	0x20008668
 8018938:	2000866c 	.word	0x2000866c
 801893c:	20008658 	.word	0x20008658
 8018940:	2000b740 	.word	0x2000b740
 8018944:	2000b73c 	.word	0x2000b73c

08018948 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b086      	sub	sp, #24
 801894c:	af04      	add	r7, sp, #16
 801894e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018950:	4b30      	ldr	r3, [pc, #192]	; (8018a14 <tcp_timewait_input+0xcc>)
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	f003 0304 	and.w	r3, r3, #4
 8018958:	2b00      	cmp	r3, #0
 801895a:	d154      	bne.n	8018a06 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d106      	bne.n	8018970 <tcp_timewait_input+0x28>
 8018962:	4b2d      	ldr	r3, [pc, #180]	; (8018a18 <tcp_timewait_input+0xd0>)
 8018964:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018968:	492c      	ldr	r1, [pc, #176]	; (8018a1c <tcp_timewait_input+0xd4>)
 801896a:	482d      	ldr	r0, [pc, #180]	; (8018a20 <tcp_timewait_input+0xd8>)
 801896c:	f004 f88c 	bl	801ca88 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018970:	4b28      	ldr	r3, [pc, #160]	; (8018a14 <tcp_timewait_input+0xcc>)
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	f003 0302 	and.w	r3, r3, #2
 8018978:	2b00      	cmp	r3, #0
 801897a:	d02a      	beq.n	80189d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801897c:	4b29      	ldr	r3, [pc, #164]	; (8018a24 <tcp_timewait_input+0xdc>)
 801897e:	681a      	ldr	r2, [r3, #0]
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018984:	1ad3      	subs	r3, r2, r3
 8018986:	2b00      	cmp	r3, #0
 8018988:	db2d      	blt.n	80189e6 <tcp_timewait_input+0x9e>
 801898a:	4b26      	ldr	r3, [pc, #152]	; (8018a24 <tcp_timewait_input+0xdc>)
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018992:	6879      	ldr	r1, [r7, #4]
 8018994:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018996:	440b      	add	r3, r1
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	2b00      	cmp	r3, #0
 801899c:	dc23      	bgt.n	80189e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801899e:	4b22      	ldr	r3, [pc, #136]	; (8018a28 <tcp_timewait_input+0xe0>)
 80189a0:	6819      	ldr	r1, [r3, #0]
 80189a2:	4b22      	ldr	r3, [pc, #136]	; (8018a2c <tcp_timewait_input+0xe4>)
 80189a4:	881b      	ldrh	r3, [r3, #0]
 80189a6:	461a      	mov	r2, r3
 80189a8:	4b1e      	ldr	r3, [pc, #120]	; (8018a24 <tcp_timewait_input+0xdc>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189ae:	4b20      	ldr	r3, [pc, #128]	; (8018a30 <tcp_timewait_input+0xe8>)
 80189b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189b2:	885b      	ldrh	r3, [r3, #2]
 80189b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189b6:	4a1e      	ldr	r2, [pc, #120]	; (8018a30 <tcp_timewait_input+0xe8>)
 80189b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189ba:	8812      	ldrh	r2, [r2, #0]
 80189bc:	b292      	uxth	r2, r2
 80189be:	9202      	str	r2, [sp, #8]
 80189c0:	9301      	str	r3, [sp, #4]
 80189c2:	4b1c      	ldr	r3, [pc, #112]	; (8018a34 <tcp_timewait_input+0xec>)
 80189c4:	9300      	str	r3, [sp, #0]
 80189c6:	4b1c      	ldr	r3, [pc, #112]	; (8018a38 <tcp_timewait_input+0xf0>)
 80189c8:	4602      	mov	r2, r0
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	f002 fe82 	bl	801b6d4 <tcp_rst>
      return;
 80189d0:	e01c      	b.n	8018a0c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80189d2:	4b10      	ldr	r3, [pc, #64]	; (8018a14 <tcp_timewait_input+0xcc>)
 80189d4:	781b      	ldrb	r3, [r3, #0]
 80189d6:	f003 0301 	and.w	r3, r3, #1
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d003      	beq.n	80189e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80189de:	4b17      	ldr	r3, [pc, #92]	; (8018a3c <tcp_timewait_input+0xf4>)
 80189e0:	681a      	ldr	r2, [r3, #0]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80189e6:	4b11      	ldr	r3, [pc, #68]	; (8018a2c <tcp_timewait_input+0xe4>)
 80189e8:	881b      	ldrh	r3, [r3, #0]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d00d      	beq.n	8018a0a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	8b5b      	ldrh	r3, [r3, #26]
 80189f2:	f043 0302 	orr.w	r3, r3, #2
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80189fc:	6878      	ldr	r0, [r7, #4]
 80189fe:	f002 f8a3 	bl	801ab48 <tcp_output>
  }
  return;
 8018a02:	bf00      	nop
 8018a04:	e001      	b.n	8018a0a <tcp_timewait_input+0xc2>
    return;
 8018a06:	bf00      	nop
 8018a08:	e000      	b.n	8018a0c <tcp_timewait_input+0xc4>
  return;
 8018a0a:	bf00      	nop
}
 8018a0c:	3708      	adds	r7, #8
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	200075d8 	.word	0x200075d8
 8018a18:	0801f7bc 	.word	0x0801f7bc
 8018a1c:	0801fa00 	.word	0x0801fa00
 8018a20:	0801f834 	.word	0x0801f834
 8018a24:	200075cc 	.word	0x200075cc
 8018a28:	200075d0 	.word	0x200075d0
 8018a2c:	200075d6 	.word	0x200075d6
 8018a30:	200075bc 	.word	0x200075bc
 8018a34:	20008668 	.word	0x20008668
 8018a38:	2000866c 	.word	0x2000866c
 8018a3c:	2000b744 	.word	0x2000b744

08018a40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018a40:	b590      	push	{r4, r7, lr}
 8018a42:	b08d      	sub	sp, #52	; 0x34
 8018a44:	af04      	add	r7, sp, #16
 8018a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018a48:	2300      	movs	r3, #0
 8018a4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d106      	bne.n	8018a64 <tcp_process+0x24>
 8018a56:	4ba5      	ldr	r3, [pc, #660]	; (8018cec <tcp_process+0x2ac>)
 8018a58:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018a5c:	49a4      	ldr	r1, [pc, #656]	; (8018cf0 <tcp_process+0x2b0>)
 8018a5e:	48a5      	ldr	r0, [pc, #660]	; (8018cf4 <tcp_process+0x2b4>)
 8018a60:	f004 f812 	bl	801ca88 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018a64:	4ba4      	ldr	r3, [pc, #656]	; (8018cf8 <tcp_process+0x2b8>)
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	f003 0304 	and.w	r3, r3, #4
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d04e      	beq.n	8018b0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	7d1b      	ldrb	r3, [r3, #20]
 8018a74:	2b02      	cmp	r3, #2
 8018a76:	d108      	bne.n	8018a8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a7c:	4b9f      	ldr	r3, [pc, #636]	; (8018cfc <tcp_process+0x2bc>)
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d123      	bne.n	8018acc <tcp_process+0x8c>
        acceptable = 1;
 8018a84:	2301      	movs	r3, #1
 8018a86:	76fb      	strb	r3, [r7, #27]
 8018a88:	e020      	b.n	8018acc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a8e:	4b9c      	ldr	r3, [pc, #624]	; (8018d00 <tcp_process+0x2c0>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d102      	bne.n	8018a9c <tcp_process+0x5c>
        acceptable = 1;
 8018a96:	2301      	movs	r3, #1
 8018a98:	76fb      	strb	r3, [r7, #27]
 8018a9a:	e017      	b.n	8018acc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018a9c:	4b98      	ldr	r3, [pc, #608]	; (8018d00 <tcp_process+0x2c0>)
 8018a9e:	681a      	ldr	r2, [r3, #0]
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aa4:	1ad3      	subs	r3, r2, r3
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	db10      	blt.n	8018acc <tcp_process+0x8c>
 8018aaa:	4b95      	ldr	r3, [pc, #596]	; (8018d00 <tcp_process+0x2c0>)
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab2:	6879      	ldr	r1, [r7, #4]
 8018ab4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ab6:	440b      	add	r3, r1
 8018ab8:	1ad3      	subs	r3, r2, r3
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	dc06      	bgt.n	8018acc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	8b5b      	ldrh	r3, [r3, #26]
 8018ac2:	f043 0302 	orr.w	r3, r3, #2
 8018ac6:	b29a      	uxth	r2, r3
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018acc:	7efb      	ldrb	r3, [r7, #27]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d01b      	beq.n	8018b0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	7d1b      	ldrb	r3, [r3, #20]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d106      	bne.n	8018ae8 <tcp_process+0xa8>
 8018ada:	4b84      	ldr	r3, [pc, #528]	; (8018cec <tcp_process+0x2ac>)
 8018adc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018ae0:	4988      	ldr	r1, [pc, #544]	; (8018d04 <tcp_process+0x2c4>)
 8018ae2:	4884      	ldr	r0, [pc, #528]	; (8018cf4 <tcp_process+0x2b4>)
 8018ae4:	f003 ffd0 	bl	801ca88 <iprintf>
      recv_flags |= TF_RESET;
 8018ae8:	4b87      	ldr	r3, [pc, #540]	; (8018d08 <tcp_process+0x2c8>)
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	f043 0308 	orr.w	r3, r3, #8
 8018af0:	b2da      	uxtb	r2, r3
 8018af2:	4b85      	ldr	r3, [pc, #532]	; (8018d08 <tcp_process+0x2c8>)
 8018af4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	8b5b      	ldrh	r3, [r3, #26]
 8018afa:	f023 0301 	bic.w	r3, r3, #1
 8018afe:	b29a      	uxth	r2, r3
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018b04:	f06f 030d 	mvn.w	r3, #13
 8018b08:	e37a      	b.n	8019200 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	e378      	b.n	8019200 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018b0e:	4b7a      	ldr	r3, [pc, #488]	; (8018cf8 <tcp_process+0x2b8>)
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	f003 0302 	and.w	r3, r3, #2
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d010      	beq.n	8018b3c <tcp_process+0xfc>
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	7d1b      	ldrb	r3, [r3, #20]
 8018b1e:	2b02      	cmp	r3, #2
 8018b20:	d00c      	beq.n	8018b3c <tcp_process+0xfc>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	7d1b      	ldrb	r3, [r3, #20]
 8018b26:	2b03      	cmp	r3, #3
 8018b28:	d008      	beq.n	8018b3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	8b5b      	ldrh	r3, [r3, #26]
 8018b2e:	f043 0302 	orr.w	r3, r3, #2
 8018b32:	b29a      	uxth	r2, r3
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018b38:	2300      	movs	r3, #0
 8018b3a:	e361      	b.n	8019200 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	8b5b      	ldrh	r3, [r3, #26]
 8018b40:	f003 0310 	and.w	r3, r3, #16
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d103      	bne.n	8018b50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018b48:	4b70      	ldr	r3, [pc, #448]	; (8018d0c <tcp_process+0x2cc>)
 8018b4a:	681a      	ldr	r2, [r3, #0]
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f001 fc2d 	bl	801a3c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	7d1b      	ldrb	r3, [r3, #20]
 8018b6a:	3b02      	subs	r3, #2
 8018b6c:	2b07      	cmp	r3, #7
 8018b6e:	f200 8337 	bhi.w	80191e0 <tcp_process+0x7a0>
 8018b72:	a201      	add	r2, pc, #4	; (adr r2, 8018b78 <tcp_process+0x138>)
 8018b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b78:	08018b99 	.word	0x08018b99
 8018b7c:	08018dc9 	.word	0x08018dc9
 8018b80:	08018f41 	.word	0x08018f41
 8018b84:	08018f6b 	.word	0x08018f6b
 8018b88:	0801908f 	.word	0x0801908f
 8018b8c:	08018f41 	.word	0x08018f41
 8018b90:	0801911b 	.word	0x0801911b
 8018b94:	080191ab 	.word	0x080191ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018b98:	4b57      	ldr	r3, [pc, #348]	; (8018cf8 <tcp_process+0x2b8>)
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	f003 0310 	and.w	r3, r3, #16
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	f000 80e4 	beq.w	8018d6e <tcp_process+0x32e>
 8018ba6:	4b54      	ldr	r3, [pc, #336]	; (8018cf8 <tcp_process+0x2b8>)
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	f003 0302 	and.w	r3, r3, #2
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	f000 80dd 	beq.w	8018d6e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bb8:	1c5a      	adds	r2, r3, #1
 8018bba:	4b50      	ldr	r3, [pc, #320]	; (8018cfc <tcp_process+0x2bc>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	f040 80d5 	bne.w	8018d6e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018bc4:	4b4e      	ldr	r3, [pc, #312]	; (8018d00 <tcp_process+0x2c0>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	1c5a      	adds	r2, r3, #1
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018bd6:	4b49      	ldr	r3, [pc, #292]	; (8018cfc <tcp_process+0x2bc>)
 8018bd8:	681a      	ldr	r2, [r3, #0]
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018bde:	4b4c      	ldr	r3, [pc, #304]	; (8018d10 <tcp_process+0x2d0>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	89db      	ldrh	r3, [r3, #14]
 8018be4:	b29a      	uxth	r2, r3
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018bf8:	4b41      	ldr	r3, [pc, #260]	; (8018d00 <tcp_process+0x2c0>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	1e5a      	subs	r2, r3, #1
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2204      	movs	r2, #4
 8018c06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	3304      	adds	r3, #4
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7fa fd41 	bl	8013698 <ip4_route>
 8018c16:	4601      	mov	r1, r0
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	3304      	adds	r3, #4
 8018c1c:	461a      	mov	r2, r3
 8018c1e:	4620      	mov	r0, r4
 8018c20:	f7ff f88e 	bl	8017d40 <tcp_eff_send_mss_netif>
 8018c24:	4603      	mov	r3, r0
 8018c26:	461a      	mov	r2, r3
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c30:	009a      	lsls	r2, r3, #2
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	f241 111c 	movw	r1, #4380	; 0x111c
 8018c3c:	428b      	cmp	r3, r1
 8018c3e:	bf38      	it	cc
 8018c40:	460b      	movcc	r3, r1
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d204      	bcs.n	8018c50 <tcp_process+0x210>
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c4a:	009b      	lsls	r3, r3, #2
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	e00d      	b.n	8018c6c <tcp_process+0x22c>
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c54:	005b      	lsls	r3, r3, #1
 8018c56:	f241 121c 	movw	r2, #4380	; 0x111c
 8018c5a:	4293      	cmp	r3, r2
 8018c5c:	d904      	bls.n	8018c68 <tcp_process+0x228>
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c62:	005b      	lsls	r3, r3, #1
 8018c64:	b29b      	uxth	r3, r3
 8018c66:	e001      	b.n	8018c6c <tcp_process+0x22c>
 8018c68:	f241 131c 	movw	r3, #4380	; 0x111c
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d106      	bne.n	8018c8a <tcp_process+0x24a>
 8018c7c:	4b1b      	ldr	r3, [pc, #108]	; (8018cec <tcp_process+0x2ac>)
 8018c7e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018c82:	4924      	ldr	r1, [pc, #144]	; (8018d14 <tcp_process+0x2d4>)
 8018c84:	481b      	ldr	r0, [pc, #108]	; (8018cf4 <tcp_process+0x2b4>)
 8018c86:	f003 feff 	bl	801ca88 <iprintf>
        --pcb->snd_queuelen;
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018c90:	3b01      	subs	r3, #1
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018ca0:	69fb      	ldr	r3, [r7, #28]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d111      	bne.n	8018cca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018caa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018cac:	69fb      	ldr	r3, [r7, #28]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d106      	bne.n	8018cc0 <tcp_process+0x280>
 8018cb2:	4b0e      	ldr	r3, [pc, #56]	; (8018cec <tcp_process+0x2ac>)
 8018cb4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018cb8:	4917      	ldr	r1, [pc, #92]	; (8018d18 <tcp_process+0x2d8>)
 8018cba:	480e      	ldr	r0, [pc, #56]	; (8018cf4 <tcp_process+0x2b4>)
 8018cbc:	f003 fee4 	bl	801ca88 <iprintf>
          pcb->unsent = rseg->next;
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	681a      	ldr	r2, [r3, #0]
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	66da      	str	r2, [r3, #108]	; 0x6c
 8018cc8:	e003      	b.n	8018cd2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018cca:	69fb      	ldr	r3, [r7, #28]
 8018ccc:	681a      	ldr	r2, [r3, #0]
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018cd2:	69f8      	ldr	r0, [r7, #28]
 8018cd4:	f7fe fd3e 	bl	8017754 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d11d      	bne.n	8018d1c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ce6:	861a      	strh	r2, [r3, #48]	; 0x30
 8018ce8:	e01f      	b.n	8018d2a <tcp_process+0x2ea>
 8018cea:	bf00      	nop
 8018cec:	0801f7bc 	.word	0x0801f7bc
 8018cf0:	0801fa20 	.word	0x0801fa20
 8018cf4:	0801f834 	.word	0x0801f834
 8018cf8:	200075d8 	.word	0x200075d8
 8018cfc:	200075d0 	.word	0x200075d0
 8018d00:	200075cc 	.word	0x200075cc
 8018d04:	0801fa3c 	.word	0x0801fa3c
 8018d08:	200075d9 	.word	0x200075d9
 8018d0c:	2000b744 	.word	0x2000b744
 8018d10:	200075bc 	.word	0x200075bc
 8018d14:	0801fa5c 	.word	0x0801fa5c
 8018d18:	0801fa74 	.word	0x0801fa74
        } else {
          pcb->rtime = 0;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	2200      	movs	r2, #0
 8018d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d00a      	beq.n	8018d4a <tcp_process+0x30a>
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d3a:	687a      	ldr	r2, [r7, #4]
 8018d3c:	6910      	ldr	r0, [r2, #16]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	6879      	ldr	r1, [r7, #4]
 8018d42:	4798      	blx	r3
 8018d44:	4603      	mov	r3, r0
 8018d46:	76bb      	strb	r3, [r7, #26]
 8018d48:	e001      	b.n	8018d4e <tcp_process+0x30e>
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018d4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018d52:	f113 0f0d 	cmn.w	r3, #13
 8018d56:	d102      	bne.n	8018d5e <tcp_process+0x31e>
          return ERR_ABRT;
 8018d58:	f06f 030c 	mvn.w	r3, #12
 8018d5c:	e250      	b.n	8019200 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	8b5b      	ldrh	r3, [r3, #26]
 8018d62:	f043 0302 	orr.w	r3, r3, #2
 8018d66:	b29a      	uxth	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018d6c:	e23a      	b.n	80191e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018d6e:	4b9d      	ldr	r3, [pc, #628]	; (8018fe4 <tcp_process+0x5a4>)
 8018d70:	781b      	ldrb	r3, [r3, #0]
 8018d72:	f003 0310 	and.w	r3, r3, #16
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	f000 8234 	beq.w	80191e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d7c:	4b9a      	ldr	r3, [pc, #616]	; (8018fe8 <tcp_process+0x5a8>)
 8018d7e:	6819      	ldr	r1, [r3, #0]
 8018d80:	4b9a      	ldr	r3, [pc, #616]	; (8018fec <tcp_process+0x5ac>)
 8018d82:	881b      	ldrh	r3, [r3, #0]
 8018d84:	461a      	mov	r2, r3
 8018d86:	4b9a      	ldr	r3, [pc, #616]	; (8018ff0 <tcp_process+0x5b0>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d8c:	4b99      	ldr	r3, [pc, #612]	; (8018ff4 <tcp_process+0x5b4>)
 8018d8e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d90:	885b      	ldrh	r3, [r3, #2]
 8018d92:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d94:	4a97      	ldr	r2, [pc, #604]	; (8018ff4 <tcp_process+0x5b4>)
 8018d96:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d98:	8812      	ldrh	r2, [r2, #0]
 8018d9a:	b292      	uxth	r2, r2
 8018d9c:	9202      	str	r2, [sp, #8]
 8018d9e:	9301      	str	r3, [sp, #4]
 8018da0:	4b95      	ldr	r3, [pc, #596]	; (8018ff8 <tcp_process+0x5b8>)
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	4b95      	ldr	r3, [pc, #596]	; (8018ffc <tcp_process+0x5bc>)
 8018da6:	4602      	mov	r2, r0
 8018da8:	6878      	ldr	r0, [r7, #4]
 8018daa:	f002 fc93 	bl	801b6d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018db4:	2b05      	cmp	r3, #5
 8018db6:	f200 8215 	bhi.w	80191e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018dc0:	6878      	ldr	r0, [r7, #4]
 8018dc2:	f002 fa51 	bl	801b268 <tcp_rexmit_rto>
      break;
 8018dc6:	e20d      	b.n	80191e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018dc8:	4b86      	ldr	r3, [pc, #536]	; (8018fe4 <tcp_process+0x5a4>)
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	f003 0310 	and.w	r3, r3, #16
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	f000 80a1 	beq.w	8018f18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018dd6:	4b84      	ldr	r3, [pc, #528]	; (8018fe8 <tcp_process+0x5a8>)
 8018dd8:	681a      	ldr	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dde:	1ad3      	subs	r3, r2, r3
 8018de0:	3b01      	subs	r3, #1
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	db7e      	blt.n	8018ee4 <tcp_process+0x4a4>
 8018de6:	4b80      	ldr	r3, [pc, #512]	; (8018fe8 <tcp_process+0x5a8>)
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018dee:	1ad3      	subs	r3, r2, r3
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	dc77      	bgt.n	8018ee4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2204      	movs	r2, #4
 8018df8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d102      	bne.n	8018e08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018e02:	23fa      	movs	r3, #250	; 0xfa
 8018e04:	76bb      	strb	r3, [r7, #26]
 8018e06:	e01d      	b.n	8018e44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e0c:	699b      	ldr	r3, [r3, #24]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d106      	bne.n	8018e20 <tcp_process+0x3e0>
 8018e12:	4b7b      	ldr	r3, [pc, #492]	; (8019000 <tcp_process+0x5c0>)
 8018e14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018e18:	497a      	ldr	r1, [pc, #488]	; (8019004 <tcp_process+0x5c4>)
 8018e1a:	487b      	ldr	r0, [pc, #492]	; (8019008 <tcp_process+0x5c8>)
 8018e1c:	f003 fe34 	bl	801ca88 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e24:	699b      	ldr	r3, [r3, #24]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00a      	beq.n	8018e40 <tcp_process+0x400>
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018e2e:	699b      	ldr	r3, [r3, #24]
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	6910      	ldr	r0, [r2, #16]
 8018e34:	2200      	movs	r2, #0
 8018e36:	6879      	ldr	r1, [r7, #4]
 8018e38:	4798      	blx	r3
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	76bb      	strb	r3, [r7, #26]
 8018e3e:	e001      	b.n	8018e44 <tcp_process+0x404>
 8018e40:	23f0      	movs	r3, #240	; 0xf0
 8018e42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018e44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d00a      	beq.n	8018e62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018e4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018e50:	f113 0f0d 	cmn.w	r3, #13
 8018e54:	d002      	beq.n	8018e5c <tcp_process+0x41c>
              tcp_abort(pcb);
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f7fd ff94 	bl	8016d84 <tcp_abort>
            }
            return ERR_ABRT;
 8018e5c:	f06f 030c 	mvn.w	r3, #12
 8018e60:	e1ce      	b.n	8019200 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	f000 fae0 	bl	8019428 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018e68:	4b68      	ldr	r3, [pc, #416]	; (801900c <tcp_process+0x5cc>)
 8018e6a:	881b      	ldrh	r3, [r3, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d005      	beq.n	8018e7c <tcp_process+0x43c>
            recv_acked--;
 8018e70:	4b66      	ldr	r3, [pc, #408]	; (801900c <tcp_process+0x5cc>)
 8018e72:	881b      	ldrh	r3, [r3, #0]
 8018e74:	3b01      	subs	r3, #1
 8018e76:	b29a      	uxth	r2, r3
 8018e78:	4b64      	ldr	r3, [pc, #400]	; (801900c <tcp_process+0x5cc>)
 8018e7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e80:	009a      	lsls	r2, r3, #2
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e86:	005b      	lsls	r3, r3, #1
 8018e88:	f241 111c 	movw	r1, #4380	; 0x111c
 8018e8c:	428b      	cmp	r3, r1
 8018e8e:	bf38      	it	cc
 8018e90:	460b      	movcc	r3, r1
 8018e92:	429a      	cmp	r2, r3
 8018e94:	d204      	bcs.n	8018ea0 <tcp_process+0x460>
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e9a:	009b      	lsls	r3, r3, #2
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	e00d      	b.n	8018ebc <tcp_process+0x47c>
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ea4:	005b      	lsls	r3, r3, #1
 8018ea6:	f241 121c 	movw	r2, #4380	; 0x111c
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d904      	bls.n	8018eb8 <tcp_process+0x478>
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	e001      	b.n	8018ebc <tcp_process+0x47c>
 8018eb8:	f241 131c 	movw	r3, #4380	; 0x111c
 8018ebc:	687a      	ldr	r2, [r7, #4]
 8018ebe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018ec2:	4b53      	ldr	r3, [pc, #332]	; (8019010 <tcp_process+0x5d0>)
 8018ec4:	781b      	ldrb	r3, [r3, #0]
 8018ec6:	f003 0320 	and.w	r3, r3, #32
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d037      	beq.n	8018f3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	8b5b      	ldrh	r3, [r3, #26]
 8018ed2:	f043 0302 	orr.w	r3, r3, #2
 8018ed6:	b29a      	uxth	r2, r3
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2207      	movs	r2, #7
 8018ee0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018ee2:	e02c      	b.n	8018f3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ee4:	4b40      	ldr	r3, [pc, #256]	; (8018fe8 <tcp_process+0x5a8>)
 8018ee6:	6819      	ldr	r1, [r3, #0]
 8018ee8:	4b40      	ldr	r3, [pc, #256]	; (8018fec <tcp_process+0x5ac>)
 8018eea:	881b      	ldrh	r3, [r3, #0]
 8018eec:	461a      	mov	r2, r3
 8018eee:	4b40      	ldr	r3, [pc, #256]	; (8018ff0 <tcp_process+0x5b0>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ef4:	4b3f      	ldr	r3, [pc, #252]	; (8018ff4 <tcp_process+0x5b4>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ef8:	885b      	ldrh	r3, [r3, #2]
 8018efa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018efc:	4a3d      	ldr	r2, [pc, #244]	; (8018ff4 <tcp_process+0x5b4>)
 8018efe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f00:	8812      	ldrh	r2, [r2, #0]
 8018f02:	b292      	uxth	r2, r2
 8018f04:	9202      	str	r2, [sp, #8]
 8018f06:	9301      	str	r3, [sp, #4]
 8018f08:	4b3b      	ldr	r3, [pc, #236]	; (8018ff8 <tcp_process+0x5b8>)
 8018f0a:	9300      	str	r3, [sp, #0]
 8018f0c:	4b3b      	ldr	r3, [pc, #236]	; (8018ffc <tcp_process+0x5bc>)
 8018f0e:	4602      	mov	r2, r0
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f002 fbdf 	bl	801b6d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018f16:	e167      	b.n	80191e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018f18:	4b32      	ldr	r3, [pc, #200]	; (8018fe4 <tcp_process+0x5a4>)
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	f003 0302 	and.w	r3, r3, #2
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	f000 8161 	beq.w	80191e8 <tcp_process+0x7a8>
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2a:	1e5a      	subs	r2, r3, #1
 8018f2c:	4b30      	ldr	r3, [pc, #192]	; (8018ff0 <tcp_process+0x5b0>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	429a      	cmp	r2, r3
 8018f32:	f040 8159 	bne.w	80191e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f002 f9b8 	bl	801b2ac <tcp_rexmit>
      break;
 8018f3c:	e154      	b.n	80191e8 <tcp_process+0x7a8>
 8018f3e:	e153      	b.n	80191e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f000 fa71 	bl	8019428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018f46:	4b32      	ldr	r3, [pc, #200]	; (8019010 <tcp_process+0x5d0>)
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	f003 0320 	and.w	r3, r3, #32
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	f000 814c 	beq.w	80191ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	8b5b      	ldrh	r3, [r3, #26]
 8018f58:	f043 0302 	orr.w	r3, r3, #2
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2207      	movs	r2, #7
 8018f66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018f68:	e140      	b.n	80191ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018f6a:	6878      	ldr	r0, [r7, #4]
 8018f6c:	f000 fa5c 	bl	8019428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018f70:	4b27      	ldr	r3, [pc, #156]	; (8019010 <tcp_process+0x5d0>)
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	f003 0320 	and.w	r3, r3, #32
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d071      	beq.n	8019060 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018f7c:	4b19      	ldr	r3, [pc, #100]	; (8018fe4 <tcp_process+0x5a4>)
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	f003 0310 	and.w	r3, r3, #16
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d060      	beq.n	801904a <tcp_process+0x60a>
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f8c:	4b16      	ldr	r3, [pc, #88]	; (8018fe8 <tcp_process+0x5a8>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	429a      	cmp	r2, r3
 8018f92:	d15a      	bne.n	801904a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d156      	bne.n	801904a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	8b5b      	ldrh	r3, [r3, #26]
 8018fa0:	f043 0302 	orr.w	r3, r3, #2
 8018fa4:	b29a      	uxth	r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f7fe fdbe 	bl	8017b2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018fb0:	4b18      	ldr	r3, [pc, #96]	; (8019014 <tcp_process+0x5d4>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d105      	bne.n	8018fc6 <tcp_process+0x586>
 8018fba:	4b16      	ldr	r3, [pc, #88]	; (8019014 <tcp_process+0x5d4>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	4a14      	ldr	r2, [pc, #80]	; (8019014 <tcp_process+0x5d4>)
 8018fc2:	6013      	str	r3, [r2, #0]
 8018fc4:	e02e      	b.n	8019024 <tcp_process+0x5e4>
 8018fc6:	4b13      	ldr	r3, [pc, #76]	; (8019014 <tcp_process+0x5d4>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	617b      	str	r3, [r7, #20]
 8018fcc:	e027      	b.n	801901e <tcp_process+0x5de>
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	68db      	ldr	r3, [r3, #12]
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	429a      	cmp	r2, r3
 8018fd6:	d11f      	bne.n	8019018 <tcp_process+0x5d8>
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	68da      	ldr	r2, [r3, #12]
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	60da      	str	r2, [r3, #12]
 8018fe0:	e020      	b.n	8019024 <tcp_process+0x5e4>
 8018fe2:	bf00      	nop
 8018fe4:	200075d8 	.word	0x200075d8
 8018fe8:	200075d0 	.word	0x200075d0
 8018fec:	200075d6 	.word	0x200075d6
 8018ff0:	200075cc 	.word	0x200075cc
 8018ff4:	200075bc 	.word	0x200075bc
 8018ff8:	20008668 	.word	0x20008668
 8018ffc:	2000866c 	.word	0x2000866c
 8019000:	0801f7bc 	.word	0x0801f7bc
 8019004:	0801fa88 	.word	0x0801fa88
 8019008:	0801f834 	.word	0x0801f834
 801900c:	200075d4 	.word	0x200075d4
 8019010:	200075d9 	.word	0x200075d9
 8019014:	2000b740 	.word	0x2000b740
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	617b      	str	r3, [r7, #20]
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d1d4      	bne.n	8018fce <tcp_process+0x58e>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2200      	movs	r2, #0
 8019028:	60da      	str	r2, [r3, #12]
 801902a:	4b77      	ldr	r3, [pc, #476]	; (8019208 <tcp_process+0x7c8>)
 801902c:	2201      	movs	r2, #1
 801902e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	220a      	movs	r2, #10
 8019034:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019036:	4b75      	ldr	r3, [pc, #468]	; (801920c <tcp_process+0x7cc>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	60da      	str	r2, [r3, #12]
 801903e:	4a73      	ldr	r2, [pc, #460]	; (801920c <tcp_process+0x7cc>)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6013      	str	r3, [r2, #0]
 8019044:	f002 fea6 	bl	801bd94 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019048:	e0d2      	b.n	80191f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	8b5b      	ldrh	r3, [r3, #26]
 801904e:	f043 0302 	orr.w	r3, r3, #2
 8019052:	b29a      	uxth	r2, r3
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2208      	movs	r2, #8
 801905c:	751a      	strb	r2, [r3, #20]
      break;
 801905e:	e0c7      	b.n	80191f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019060:	4b6b      	ldr	r3, [pc, #428]	; (8019210 <tcp_process+0x7d0>)
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	f003 0310 	and.w	r3, r3, #16
 8019068:	2b00      	cmp	r3, #0
 801906a:	f000 80c1 	beq.w	80191f0 <tcp_process+0x7b0>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019072:	4b68      	ldr	r3, [pc, #416]	; (8019214 <tcp_process+0x7d4>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	429a      	cmp	r2, r3
 8019078:	f040 80ba 	bne.w	80191f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019080:	2b00      	cmp	r3, #0
 8019082:	f040 80b5 	bne.w	80191f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2206      	movs	r2, #6
 801908a:	751a      	strb	r2, [r3, #20]
      break;
 801908c:	e0b0      	b.n	80191f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801908e:	6878      	ldr	r0, [r7, #4]
 8019090:	f000 f9ca 	bl	8019428 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019094:	4b60      	ldr	r3, [pc, #384]	; (8019218 <tcp_process+0x7d8>)
 8019096:	781b      	ldrb	r3, [r3, #0]
 8019098:	f003 0320 	and.w	r3, r3, #32
 801909c:	2b00      	cmp	r3, #0
 801909e:	f000 80a9 	beq.w	80191f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	8b5b      	ldrh	r3, [r3, #26]
 80190a6:	f043 0302 	orr.w	r3, r3, #2
 80190aa:	b29a      	uxth	r2, r3
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f7fe fd3b 	bl	8017b2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80190b6:	4b59      	ldr	r3, [pc, #356]	; (801921c <tcp_process+0x7dc>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	429a      	cmp	r2, r3
 80190be:	d105      	bne.n	80190cc <tcp_process+0x68c>
 80190c0:	4b56      	ldr	r3, [pc, #344]	; (801921c <tcp_process+0x7dc>)
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	4a55      	ldr	r2, [pc, #340]	; (801921c <tcp_process+0x7dc>)
 80190c8:	6013      	str	r3, [r2, #0]
 80190ca:	e013      	b.n	80190f4 <tcp_process+0x6b4>
 80190cc:	4b53      	ldr	r3, [pc, #332]	; (801921c <tcp_process+0x7dc>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	613b      	str	r3, [r7, #16]
 80190d2:	e00c      	b.n	80190ee <tcp_process+0x6ae>
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	687a      	ldr	r2, [r7, #4]
 80190da:	429a      	cmp	r2, r3
 80190dc:	d104      	bne.n	80190e8 <tcp_process+0x6a8>
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	68da      	ldr	r2, [r3, #12]
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	60da      	str	r2, [r3, #12]
 80190e6:	e005      	b.n	80190f4 <tcp_process+0x6b4>
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	68db      	ldr	r3, [r3, #12]
 80190ec:	613b      	str	r3, [r7, #16]
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d1ef      	bne.n	80190d4 <tcp_process+0x694>
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2200      	movs	r2, #0
 80190f8:	60da      	str	r2, [r3, #12]
 80190fa:	4b43      	ldr	r3, [pc, #268]	; (8019208 <tcp_process+0x7c8>)
 80190fc:	2201      	movs	r2, #1
 80190fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	220a      	movs	r2, #10
 8019104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019106:	4b41      	ldr	r3, [pc, #260]	; (801920c <tcp_process+0x7cc>)
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	60da      	str	r2, [r3, #12]
 801910e:	4a3f      	ldr	r2, [pc, #252]	; (801920c <tcp_process+0x7cc>)
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6013      	str	r3, [r2, #0]
 8019114:	f002 fe3e 	bl	801bd94 <tcp_timer_needed>
      }
      break;
 8019118:	e06c      	b.n	80191f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801911a:	6878      	ldr	r0, [r7, #4]
 801911c:	f000 f984 	bl	8019428 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019120:	4b3b      	ldr	r3, [pc, #236]	; (8019210 <tcp_process+0x7d0>)
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	f003 0310 	and.w	r3, r3, #16
 8019128:	2b00      	cmp	r3, #0
 801912a:	d065      	beq.n	80191f8 <tcp_process+0x7b8>
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019130:	4b38      	ldr	r3, [pc, #224]	; (8019214 <tcp_process+0x7d4>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	429a      	cmp	r2, r3
 8019136:	d15f      	bne.n	80191f8 <tcp_process+0x7b8>
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801913c:	2b00      	cmp	r3, #0
 801913e:	d15b      	bne.n	80191f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f7fe fcf3 	bl	8017b2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019146:	4b35      	ldr	r3, [pc, #212]	; (801921c <tcp_process+0x7dc>)
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	687a      	ldr	r2, [r7, #4]
 801914c:	429a      	cmp	r2, r3
 801914e:	d105      	bne.n	801915c <tcp_process+0x71c>
 8019150:	4b32      	ldr	r3, [pc, #200]	; (801921c <tcp_process+0x7dc>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	68db      	ldr	r3, [r3, #12]
 8019156:	4a31      	ldr	r2, [pc, #196]	; (801921c <tcp_process+0x7dc>)
 8019158:	6013      	str	r3, [r2, #0]
 801915a:	e013      	b.n	8019184 <tcp_process+0x744>
 801915c:	4b2f      	ldr	r3, [pc, #188]	; (801921c <tcp_process+0x7dc>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	60fb      	str	r3, [r7, #12]
 8019162:	e00c      	b.n	801917e <tcp_process+0x73e>
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	68db      	ldr	r3, [r3, #12]
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	429a      	cmp	r2, r3
 801916c:	d104      	bne.n	8019178 <tcp_process+0x738>
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	68da      	ldr	r2, [r3, #12]
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	60da      	str	r2, [r3, #12]
 8019176:	e005      	b.n	8019184 <tcp_process+0x744>
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	60fb      	str	r3, [r7, #12]
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d1ef      	bne.n	8019164 <tcp_process+0x724>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2200      	movs	r2, #0
 8019188:	60da      	str	r2, [r3, #12]
 801918a:	4b1f      	ldr	r3, [pc, #124]	; (8019208 <tcp_process+0x7c8>)
 801918c:	2201      	movs	r2, #1
 801918e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	220a      	movs	r2, #10
 8019194:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019196:	4b1d      	ldr	r3, [pc, #116]	; (801920c <tcp_process+0x7cc>)
 8019198:	681a      	ldr	r2, [r3, #0]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	60da      	str	r2, [r3, #12]
 801919e:	4a1b      	ldr	r2, [pc, #108]	; (801920c <tcp_process+0x7cc>)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6013      	str	r3, [r2, #0]
 80191a4:	f002 fdf6 	bl	801bd94 <tcp_timer_needed>
      }
      break;
 80191a8:	e026      	b.n	80191f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f000 f93c 	bl	8019428 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80191b0:	4b17      	ldr	r3, [pc, #92]	; (8019210 <tcp_process+0x7d0>)
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	f003 0310 	and.w	r3, r3, #16
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d01f      	beq.n	80191fc <tcp_process+0x7bc>
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80191c0:	4b14      	ldr	r3, [pc, #80]	; (8019214 <tcp_process+0x7d4>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d119      	bne.n	80191fc <tcp_process+0x7bc>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d115      	bne.n	80191fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80191d0:	4b11      	ldr	r3, [pc, #68]	; (8019218 <tcp_process+0x7d8>)
 80191d2:	781b      	ldrb	r3, [r3, #0]
 80191d4:	f043 0310 	orr.w	r3, r3, #16
 80191d8:	b2da      	uxtb	r2, r3
 80191da:	4b0f      	ldr	r3, [pc, #60]	; (8019218 <tcp_process+0x7d8>)
 80191dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80191de:	e00d      	b.n	80191fc <tcp_process+0x7bc>
    default:
      break;
 80191e0:	bf00      	nop
 80191e2:	e00c      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191e4:	bf00      	nop
 80191e6:	e00a      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191e8:	bf00      	nop
 80191ea:	e008      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191ec:	bf00      	nop
 80191ee:	e006      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191f0:	bf00      	nop
 80191f2:	e004      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191f4:	bf00      	nop
 80191f6:	e002      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191f8:	bf00      	nop
 80191fa:	e000      	b.n	80191fe <tcp_process+0x7be>
      break;
 80191fc:	bf00      	nop
  }
  return ERR_OK;
 80191fe:	2300      	movs	r3, #0
}
 8019200:	4618      	mov	r0, r3
 8019202:	3724      	adds	r7, #36	; 0x24
 8019204:	46bd      	mov	sp, r7
 8019206:	bd90      	pop	{r4, r7, pc}
 8019208:	2000b73c 	.word	0x2000b73c
 801920c:	2000b750 	.word	0x2000b750
 8019210:	200075d8 	.word	0x200075d8
 8019214:	200075d0 	.word	0x200075d0
 8019218:	200075d9 	.word	0x200075d9
 801921c:	2000b740 	.word	0x2000b740

08019220 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019220:	b590      	push	{r4, r7, lr}
 8019222:	b085      	sub	sp, #20
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d106      	bne.n	801923e <tcp_oos_insert_segment+0x1e>
 8019230:	4b3b      	ldr	r3, [pc, #236]	; (8019320 <tcp_oos_insert_segment+0x100>)
 8019232:	f240 421f 	movw	r2, #1055	; 0x41f
 8019236:	493b      	ldr	r1, [pc, #236]	; (8019324 <tcp_oos_insert_segment+0x104>)
 8019238:	483b      	ldr	r0, [pc, #236]	; (8019328 <tcp_oos_insert_segment+0x108>)
 801923a:	f003 fc25 	bl	801ca88 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	899b      	ldrh	r3, [r3, #12]
 8019244:	b29b      	uxth	r3, r3
 8019246:	4618      	mov	r0, r3
 8019248:	f7f7 f8a6 	bl	8010398 <lwip_htons>
 801924c:	4603      	mov	r3, r0
 801924e:	b2db      	uxtb	r3, r3
 8019250:	f003 0301 	and.w	r3, r3, #1
 8019254:	2b00      	cmp	r3, #0
 8019256:	d028      	beq.n	80192aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019258:	6838      	ldr	r0, [r7, #0]
 801925a:	f7fe fa67 	bl	801772c <tcp_segs_free>
    next = NULL;
 801925e:	2300      	movs	r3, #0
 8019260:	603b      	str	r3, [r7, #0]
 8019262:	e056      	b.n	8019312 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	68db      	ldr	r3, [r3, #12]
 8019268:	899b      	ldrh	r3, [r3, #12]
 801926a:	b29b      	uxth	r3, r3
 801926c:	4618      	mov	r0, r3
 801926e:	f7f7 f893 	bl	8010398 <lwip_htons>
 8019272:	4603      	mov	r3, r0
 8019274:	b2db      	uxtb	r3, r3
 8019276:	f003 0301 	and.w	r3, r3, #1
 801927a:	2b00      	cmp	r3, #0
 801927c:	d00d      	beq.n	801929a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	68db      	ldr	r3, [r3, #12]
 8019282:	899b      	ldrh	r3, [r3, #12]
 8019284:	b29c      	uxth	r4, r3
 8019286:	2001      	movs	r0, #1
 8019288:	f7f7 f886 	bl	8010398 <lwip_htons>
 801928c:	4603      	mov	r3, r0
 801928e:	461a      	mov	r2, r3
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	68db      	ldr	r3, [r3, #12]
 8019294:	4322      	orrs	r2, r4
 8019296:	b292      	uxth	r2, r2
 8019298:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801929a:	683b      	ldr	r3, [r7, #0]
 801929c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80192a4:	68f8      	ldr	r0, [r7, #12]
 80192a6:	f7fe fa55 	bl	8017754 <tcp_seg_free>
    while (next &&
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d00e      	beq.n	80192ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	891b      	ldrh	r3, [r3, #8]
 80192b4:	461a      	mov	r2, r3
 80192b6:	4b1d      	ldr	r3, [pc, #116]	; (801932c <tcp_oos_insert_segment+0x10c>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	441a      	add	r2, r3
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	68db      	ldr	r3, [r3, #12]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	6839      	ldr	r1, [r7, #0]
 80192c4:	8909      	ldrh	r1, [r1, #8]
 80192c6:	440b      	add	r3, r1
 80192c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	daca      	bge.n	8019264 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d01e      	beq.n	8019312 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	891b      	ldrh	r3, [r3, #8]
 80192d8:	461a      	mov	r2, r3
 80192da:	4b14      	ldr	r3, [pc, #80]	; (801932c <tcp_oos_insert_segment+0x10c>)
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	441a      	add	r2, r3
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	68db      	ldr	r3, [r3, #12]
 80192e4:	685b      	ldr	r3, [r3, #4]
 80192e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	dd12      	ble.n	8019312 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	68db      	ldr	r3, [r3, #12]
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	b29a      	uxth	r2, r3
 80192f4:	4b0d      	ldr	r3, [pc, #52]	; (801932c <tcp_oos_insert_segment+0x10c>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	1ad3      	subs	r3, r2, r3
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	685a      	ldr	r2, [r3, #4]
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	891b      	ldrh	r3, [r3, #8]
 801930a:	4619      	mov	r1, r3
 801930c:	4610      	mov	r0, r2
 801930e:	f7fc fd25 	bl	8015d5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	683a      	ldr	r2, [r7, #0]
 8019316:	601a      	str	r2, [r3, #0]
}
 8019318:	bf00      	nop
 801931a:	3714      	adds	r7, #20
 801931c:	46bd      	mov	sp, r7
 801931e:	bd90      	pop	{r4, r7, pc}
 8019320:	0801f7bc 	.word	0x0801f7bc
 8019324:	0801faa8 	.word	0x0801faa8
 8019328:	0801f834 	.word	0x0801f834
 801932c:	200075cc 	.word	0x200075cc

08019330 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019330:	b5b0      	push	{r4, r5, r7, lr}
 8019332:	b086      	sub	sp, #24
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
 801933c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801933e:	e03e      	b.n	80193be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	4618      	mov	r0, r3
 8019350:	f7fc ff18 	bl	8016184 <pbuf_clen>
 8019354:	4603      	mov	r3, r0
 8019356:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801935e:	8a7a      	ldrh	r2, [r7, #18]
 8019360:	429a      	cmp	r2, r3
 8019362:	d906      	bls.n	8019372 <tcp_free_acked_segments+0x42>
 8019364:	4b2a      	ldr	r3, [pc, #168]	; (8019410 <tcp_free_acked_segments+0xe0>)
 8019366:	f240 4257 	movw	r2, #1111	; 0x457
 801936a:	492a      	ldr	r1, [pc, #168]	; (8019414 <tcp_free_acked_segments+0xe4>)
 801936c:	482a      	ldr	r0, [pc, #168]	; (8019418 <tcp_free_acked_segments+0xe8>)
 801936e:	f003 fb8b 	bl	801ca88 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019378:	8a7b      	ldrh	r3, [r7, #18]
 801937a:	1ad3      	subs	r3, r2, r3
 801937c:	b29a      	uxth	r2, r3
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019384:	697b      	ldr	r3, [r7, #20]
 8019386:	891a      	ldrh	r2, [r3, #8]
 8019388:	4b24      	ldr	r3, [pc, #144]	; (801941c <tcp_free_acked_segments+0xec>)
 801938a:	881b      	ldrh	r3, [r3, #0]
 801938c:	4413      	add	r3, r2
 801938e:	b29a      	uxth	r2, r3
 8019390:	4b22      	ldr	r3, [pc, #136]	; (801941c <tcp_free_acked_segments+0xec>)
 8019392:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019394:	6978      	ldr	r0, [r7, #20]
 8019396:	f7fe f9dd 	bl	8017754 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d00c      	beq.n	80193be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d109      	bne.n	80193be <tcp_free_acked_segments+0x8e>
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d106      	bne.n	80193be <tcp_free_acked_segments+0x8e>
 80193b0:	4b17      	ldr	r3, [pc, #92]	; (8019410 <tcp_free_acked_segments+0xe0>)
 80193b2:	f240 4262 	movw	r2, #1122	; 0x462
 80193b6:	491a      	ldr	r1, [pc, #104]	; (8019420 <tcp_free_acked_segments+0xf0>)
 80193b8:	4817      	ldr	r0, [pc, #92]	; (8019418 <tcp_free_acked_segments+0xe8>)
 80193ba:	f003 fb65 	bl	801ca88 <iprintf>
  while (seg_list != NULL &&
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d020      	beq.n	8019406 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	68db      	ldr	r3, [r3, #12]
 80193c8:	685b      	ldr	r3, [r3, #4]
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7f6 fff9 	bl	80103c2 <lwip_htonl>
 80193d0:	4604      	mov	r4, r0
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	891b      	ldrh	r3, [r3, #8]
 80193d6:	461d      	mov	r5, r3
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	899b      	ldrh	r3, [r3, #12]
 80193de:	b29b      	uxth	r3, r3
 80193e0:	4618      	mov	r0, r3
 80193e2:	f7f6 ffd9 	bl	8010398 <lwip_htons>
 80193e6:	4603      	mov	r3, r0
 80193e8:	b2db      	uxtb	r3, r3
 80193ea:	f003 0303 	and.w	r3, r3, #3
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d001      	beq.n	80193f6 <tcp_free_acked_segments+0xc6>
 80193f2:	2301      	movs	r3, #1
 80193f4:	e000      	b.n	80193f8 <tcp_free_acked_segments+0xc8>
 80193f6:	2300      	movs	r3, #0
 80193f8:	442b      	add	r3, r5
 80193fa:	18e2      	adds	r2, r4, r3
 80193fc:	4b09      	ldr	r3, [pc, #36]	; (8019424 <tcp_free_acked_segments+0xf4>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019402:	2b00      	cmp	r3, #0
 8019404:	dd9c      	ble.n	8019340 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019406:	68bb      	ldr	r3, [r7, #8]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3718      	adds	r7, #24
 801940c:	46bd      	mov	sp, r7
 801940e:	bdb0      	pop	{r4, r5, r7, pc}
 8019410:	0801f7bc 	.word	0x0801f7bc
 8019414:	0801fad0 	.word	0x0801fad0
 8019418:	0801f834 	.word	0x0801f834
 801941c:	200075d4 	.word	0x200075d4
 8019420:	0801faf8 	.word	0x0801faf8
 8019424:	200075d0 	.word	0x200075d0

08019428 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019428:	b5b0      	push	{r4, r5, r7, lr}
 801942a:	b094      	sub	sp, #80	; 0x50
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d106      	bne.n	8019448 <tcp_receive+0x20>
 801943a:	4ba6      	ldr	r3, [pc, #664]	; (80196d4 <tcp_receive+0x2ac>)
 801943c:	f240 427b 	movw	r2, #1147	; 0x47b
 8019440:	49a5      	ldr	r1, [pc, #660]	; (80196d8 <tcp_receive+0x2b0>)
 8019442:	48a6      	ldr	r0, [pc, #664]	; (80196dc <tcp_receive+0x2b4>)
 8019444:	f003 fb20 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	7d1b      	ldrb	r3, [r3, #20]
 801944c:	2b03      	cmp	r3, #3
 801944e:	d806      	bhi.n	801945e <tcp_receive+0x36>
 8019450:	4ba0      	ldr	r3, [pc, #640]	; (80196d4 <tcp_receive+0x2ac>)
 8019452:	f240 427c 	movw	r2, #1148	; 0x47c
 8019456:	49a2      	ldr	r1, [pc, #648]	; (80196e0 <tcp_receive+0x2b8>)
 8019458:	48a0      	ldr	r0, [pc, #640]	; (80196dc <tcp_receive+0x2b4>)
 801945a:	f003 fb15 	bl	801ca88 <iprintf>

  if (flags & TCP_ACK) {
 801945e:	4ba1      	ldr	r3, [pc, #644]	; (80196e4 <tcp_receive+0x2bc>)
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	f003 0310 	and.w	r3, r3, #16
 8019466:	2b00      	cmp	r3, #0
 8019468:	f000 8263 	beq.w	8019932 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019472:	461a      	mov	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019478:	4413      	add	r3, r2
 801947a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019480:	4b99      	ldr	r3, [pc, #612]	; (80196e8 <tcp_receive+0x2c0>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	1ad3      	subs	r3, r2, r3
 8019486:	2b00      	cmp	r3, #0
 8019488:	db1b      	blt.n	80194c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801948e:	4b96      	ldr	r3, [pc, #600]	; (80196e8 <tcp_receive+0x2c0>)
 8019490:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019492:	429a      	cmp	r2, r3
 8019494:	d106      	bne.n	80194a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801949a:	4b94      	ldr	r3, [pc, #592]	; (80196ec <tcp_receive+0x2c4>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	1ad3      	subs	r3, r2, r3
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	db0e      	blt.n	80194c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80194a8:	4b90      	ldr	r3, [pc, #576]	; (80196ec <tcp_receive+0x2c4>)
 80194aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d125      	bne.n	80194fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80194b0:	4b8f      	ldr	r3, [pc, #572]	; (80196f0 <tcp_receive+0x2c8>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	89db      	ldrh	r3, [r3, #14]
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80194be:	429a      	cmp	r2, r3
 80194c0:	d91c      	bls.n	80194fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80194c2:	4b8b      	ldr	r3, [pc, #556]	; (80196f0 <tcp_receive+0x2c8>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	89db      	ldrh	r3, [r3, #14]
 80194c8:	b29a      	uxth	r2, r3
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80194dc:	429a      	cmp	r2, r3
 80194de:	d205      	bcs.n	80194ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80194ec:	4b7e      	ldr	r3, [pc, #504]	; (80196e8 <tcp_receive+0x2c0>)
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80194f4:	4b7d      	ldr	r3, [pc, #500]	; (80196ec <tcp_receive+0x2c4>)
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80194fc:	4b7b      	ldr	r3, [pc, #492]	; (80196ec <tcp_receive+0x2c4>)
 80194fe:	681a      	ldr	r2, [r3, #0]
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019504:	1ad3      	subs	r3, r2, r3
 8019506:	2b00      	cmp	r3, #0
 8019508:	dc58      	bgt.n	80195bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801950a:	4b7a      	ldr	r3, [pc, #488]	; (80196f4 <tcp_receive+0x2cc>)
 801950c:	881b      	ldrh	r3, [r3, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d14b      	bne.n	80195aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019516:	687a      	ldr	r2, [r7, #4]
 8019518:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801951c:	4413      	add	r3, r2
 801951e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019520:	429a      	cmp	r2, r3
 8019522:	d142      	bne.n	80195aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801952a:	2b00      	cmp	r3, #0
 801952c:	db3d      	blt.n	80195aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019532:	4b6e      	ldr	r3, [pc, #440]	; (80196ec <tcp_receive+0x2c4>)
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	429a      	cmp	r2, r3
 8019538:	d137      	bne.n	80195aa <tcp_receive+0x182>
              found_dupack = 1;
 801953a:	2301      	movs	r3, #1
 801953c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019544:	2bff      	cmp	r3, #255	; 0xff
 8019546:	d007      	beq.n	8019558 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801954e:	3301      	adds	r3, #1
 8019550:	b2da      	uxtb	r2, r3
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801955e:	2b03      	cmp	r3, #3
 8019560:	d91b      	bls.n	801959a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801956c:	4413      	add	r3, r2
 801956e:	b29a      	uxth	r2, r3
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019576:	429a      	cmp	r2, r3
 8019578:	d30a      	bcc.n	8019590 <tcp_receive+0x168>
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019584:	4413      	add	r3, r2
 8019586:	b29a      	uxth	r2, r3
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801958e:	e004      	b.n	801959a <tcp_receive+0x172>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80195a0:	2b02      	cmp	r3, #2
 80195a2:	d902      	bls.n	80195aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	f001 feed 	bl	801b384 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80195aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	f040 8160 	bne.w	8019872 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	2200      	movs	r2, #0
 80195b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80195ba:	e15a      	b.n	8019872 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195bc:	4b4b      	ldr	r3, [pc, #300]	; (80196ec <tcp_receive+0x2c4>)
 80195be:	681a      	ldr	r2, [r3, #0]
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195c4:	1ad3      	subs	r3, r2, r3
 80195c6:	3b01      	subs	r3, #1
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	f2c0 814d 	blt.w	8019868 <tcp_receive+0x440>
 80195ce:	4b47      	ldr	r3, [pc, #284]	; (80196ec <tcp_receive+0x2c4>)
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195d6:	1ad3      	subs	r3, r2, r3
 80195d8:	2b00      	cmp	r3, #0
 80195da:	f300 8145 	bgt.w	8019868 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	8b5b      	ldrh	r3, [r3, #26]
 80195e2:	f003 0304 	and.w	r3, r3, #4
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d010      	beq.n	801960c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	8b5b      	ldrh	r3, [r3, #26]
 80195ee:	f023 0304 	bic.w	r3, r3, #4
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2200      	movs	r2, #0
 8019608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2200      	movs	r2, #0
 8019610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801961a:	10db      	asrs	r3, r3, #3
 801961c:	b21b      	sxth	r3, r3
 801961e:	b29a      	uxth	r2, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019626:	b29b      	uxth	r3, r3
 8019628:	4413      	add	r3, r2
 801962a:	b29b      	uxth	r3, r3
 801962c:	b21a      	sxth	r2, r3
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019634:	4b2d      	ldr	r3, [pc, #180]	; (80196ec <tcp_receive+0x2c4>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	b29a      	uxth	r2, r3
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801963e:	b29b      	uxth	r3, r3
 8019640:	1ad3      	subs	r3, r2, r3
 8019642:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	2200      	movs	r2, #0
 8019648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801964c:	4b27      	ldr	r3, [pc, #156]	; (80196ec <tcp_receive+0x2c4>)
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	7d1b      	ldrb	r3, [r3, #20]
 8019658:	2b03      	cmp	r3, #3
 801965a:	f240 8096 	bls.w	801978a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801966a:	429a      	cmp	r2, r3
 801966c:	d244      	bcs.n	80196f8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	8b5b      	ldrh	r3, [r3, #26]
 8019672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019676:	2b00      	cmp	r3, #0
 8019678:	d001      	beq.n	801967e <tcp_receive+0x256>
 801967a:	2301      	movs	r3, #1
 801967c:	e000      	b.n	8019680 <tcp_receive+0x258>
 801967e:	2302      	movs	r3, #2
 8019680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019684:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019688:	b29a      	uxth	r2, r3
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801968e:	fb12 f303 	smulbb	r3, r2, r3
 8019692:	b29b      	uxth	r3, r3
 8019694:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019696:	4293      	cmp	r3, r2
 8019698:	bf28      	it	cs
 801969a:	4613      	movcs	r3, r2
 801969c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80196a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80196a6:	4413      	add	r3, r2
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d309      	bcc.n	80196c8 <tcp_receive+0x2a0>
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80196ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80196bc:	4413      	add	r3, r2
 80196be:	b29a      	uxth	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80196c6:	e060      	b.n	801978a <tcp_receive+0x362>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80196d2:	e05a      	b.n	801978a <tcp_receive+0x362>
 80196d4:	0801f7bc 	.word	0x0801f7bc
 80196d8:	0801fb18 	.word	0x0801fb18
 80196dc:	0801f834 	.word	0x0801f834
 80196e0:	0801fb34 	.word	0x0801fb34
 80196e4:	200075d8 	.word	0x200075d8
 80196e8:	200075cc 	.word	0x200075cc
 80196ec:	200075d0 	.word	0x200075d0
 80196f0:	200075bc 	.word	0x200075bc
 80196f4:	200075d6 	.word	0x200075d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80196fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019700:	4413      	add	r3, r2
 8019702:	b29a      	uxth	r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801970a:	429a      	cmp	r2, r3
 801970c:	d309      	bcc.n	8019722 <tcp_receive+0x2fa>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019714:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019716:	4413      	add	r3, r2
 8019718:	b29a      	uxth	r2, r3
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019720:	e004      	b.n	801972c <tcp_receive+0x304>
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019738:	429a      	cmp	r2, r3
 801973a:	d326      	bcc.n	801978a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019748:	1ad3      	subs	r3, r2, r3
 801974a:	b29a      	uxth	r2, r3
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801975c:	4413      	add	r3, r2
 801975e:	b29a      	uxth	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019766:	429a      	cmp	r2, r3
 8019768:	d30a      	bcc.n	8019780 <tcp_receive+0x358>
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019774:	4413      	add	r3, r2
 8019776:	b29a      	uxth	r2, r3
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801977e:	e004      	b.n	801978a <tcp_receive+0x362>
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019786:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019792:	4a98      	ldr	r2, [pc, #608]	; (80199f4 <tcp_receive+0x5cc>)
 8019794:	6878      	ldr	r0, [r7, #4]
 8019796:	f7ff fdcb 	bl	8019330 <tcp_free_acked_segments>
 801979a:	4602      	mov	r2, r0
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197a8:	4a93      	ldr	r2, [pc, #588]	; (80199f8 <tcp_receive+0x5d0>)
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	f7ff fdc0 	bl	8019330 <tcp_free_acked_segments>
 80197b0:	4602      	mov	r2, r0
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d104      	bne.n	80197c8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197c4:	861a      	strh	r2, [r3, #48]	; 0x30
 80197c6:	e002      	b.n	80197ce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2200      	movs	r2, #0
 80197cc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	2200      	movs	r2, #0
 80197d2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d103      	bne.n	80197e4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2200      	movs	r2, #0
 80197e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80197ea:	4b84      	ldr	r3, [pc, #528]	; (80199fc <tcp_receive+0x5d4>)
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	4413      	add	r3, r2
 80197f0:	b29a      	uxth	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	8b5b      	ldrh	r3, [r3, #26]
 80197fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019800:	2b00      	cmp	r3, #0
 8019802:	d035      	beq.n	8019870 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019808:	2b00      	cmp	r3, #0
 801980a:	d118      	bne.n	801983e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019810:	2b00      	cmp	r3, #0
 8019812:	d00c      	beq.n	801982e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801981c:	68db      	ldr	r3, [r3, #12]
 801981e:	685b      	ldr	r3, [r3, #4]
 8019820:	4618      	mov	r0, r3
 8019822:	f7f6 fdce 	bl	80103c2 <lwip_htonl>
 8019826:	4603      	mov	r3, r0
 8019828:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801982a:	2b00      	cmp	r3, #0
 801982c:	dc20      	bgt.n	8019870 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	8b5b      	ldrh	r3, [r3, #26]
 8019832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019836:	b29a      	uxth	r2, r3
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801983c:	e018      	b.n	8019870 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019846:	68db      	ldr	r3, [r3, #12]
 8019848:	685b      	ldr	r3, [r3, #4]
 801984a:	4618      	mov	r0, r3
 801984c:	f7f6 fdb9 	bl	80103c2 <lwip_htonl>
 8019850:	4603      	mov	r3, r0
 8019852:	1ae3      	subs	r3, r4, r3
 8019854:	2b00      	cmp	r3, #0
 8019856:	dc0b      	bgt.n	8019870 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	8b5b      	ldrh	r3, [r3, #26]
 801985c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019860:	b29a      	uxth	r2, r3
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019866:	e003      	b.n	8019870 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f001 ff85 	bl	801b778 <tcp_send_empty_ack>
 801986e:	e000      	b.n	8019872 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019870:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019876:	2b00      	cmp	r3, #0
 8019878:	d05b      	beq.n	8019932 <tcp_receive+0x50a>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801987e:	4b60      	ldr	r3, [pc, #384]	; (8019a00 <tcp_receive+0x5d8>)
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	1ad3      	subs	r3, r2, r3
 8019884:	2b00      	cmp	r3, #0
 8019886:	da54      	bge.n	8019932 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019888:	4b5e      	ldr	r3, [pc, #376]	; (8019a04 <tcp_receive+0x5dc>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	b29a      	uxth	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019892:	b29b      	uxth	r3, r3
 8019894:	1ad3      	subs	r3, r2, r3
 8019896:	b29b      	uxth	r3, r3
 8019898:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801989c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80198a6:	10db      	asrs	r3, r3, #3
 80198a8:	b21b      	sxth	r3, r3
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	1ad3      	subs	r3, r2, r3
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80198ba:	b29a      	uxth	r2, r3
 80198bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80198c0:	4413      	add	r3, r2
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	b21a      	sxth	r2, r3
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80198ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	da05      	bge.n	80198de <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80198d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80198d6:	425b      	negs	r3, r3
 80198d8:	b29b      	uxth	r3, r3
 80198da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80198de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80198e8:	109b      	asrs	r3, r3, #2
 80198ea:	b21b      	sxth	r3, r3
 80198ec:	b29b      	uxth	r3, r3
 80198ee:	1ad3      	subs	r3, r2, r3
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019902:	4413      	add	r3, r2
 8019904:	b29b      	uxth	r3, r3
 8019906:	b21a      	sxth	r2, r3
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019912:	10db      	asrs	r3, r3, #3
 8019914:	b21b      	sxth	r3, r3
 8019916:	b29a      	uxth	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801991e:	b29b      	uxth	r3, r3
 8019920:	4413      	add	r3, r2
 8019922:	b29b      	uxth	r3, r3
 8019924:	b21a      	sxth	r2, r3
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	2200      	movs	r2, #0
 8019930:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019932:	4b35      	ldr	r3, [pc, #212]	; (8019a08 <tcp_receive+0x5e0>)
 8019934:	881b      	ldrh	r3, [r3, #0]
 8019936:	2b00      	cmp	r3, #0
 8019938:	f000 84e1 	beq.w	801a2fe <tcp_receive+0xed6>
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	7d1b      	ldrb	r3, [r3, #20]
 8019940:	2b06      	cmp	r3, #6
 8019942:	f200 84dc 	bhi.w	801a2fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801994a:	4b30      	ldr	r3, [pc, #192]	; (8019a0c <tcp_receive+0x5e4>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	1ad3      	subs	r3, r2, r3
 8019950:	3b01      	subs	r3, #1
 8019952:	2b00      	cmp	r3, #0
 8019954:	f2c0 808e 	blt.w	8019a74 <tcp_receive+0x64c>
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801995c:	4b2a      	ldr	r3, [pc, #168]	; (8019a08 <tcp_receive+0x5e0>)
 801995e:	881b      	ldrh	r3, [r3, #0]
 8019960:	4619      	mov	r1, r3
 8019962:	4b2a      	ldr	r3, [pc, #168]	; (8019a0c <tcp_receive+0x5e4>)
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	440b      	add	r3, r1
 8019968:	1ad3      	subs	r3, r2, r3
 801996a:	3301      	adds	r3, #1
 801996c:	2b00      	cmp	r3, #0
 801996e:	f300 8081 	bgt.w	8019a74 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019972:	4b27      	ldr	r3, [pc, #156]	; (8019a10 <tcp_receive+0x5e8>)
 8019974:	685b      	ldr	r3, [r3, #4]
 8019976:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801997c:	4b23      	ldr	r3, [pc, #140]	; (8019a0c <tcp_receive+0x5e4>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019984:	4b22      	ldr	r3, [pc, #136]	; (8019a10 <tcp_receive+0x5e8>)
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d106      	bne.n	801999a <tcp_receive+0x572>
 801998c:	4b21      	ldr	r3, [pc, #132]	; (8019a14 <tcp_receive+0x5ec>)
 801998e:	f240 5294 	movw	r2, #1428	; 0x594
 8019992:	4921      	ldr	r1, [pc, #132]	; (8019a18 <tcp_receive+0x5f0>)
 8019994:	4821      	ldr	r0, [pc, #132]	; (8019a1c <tcp_receive+0x5f4>)
 8019996:	f003 f877 	bl	801ca88 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199a0:	4293      	cmp	r3, r2
 80199a2:	d906      	bls.n	80199b2 <tcp_receive+0x58a>
 80199a4:	4b1b      	ldr	r3, [pc, #108]	; (8019a14 <tcp_receive+0x5ec>)
 80199a6:	f240 5295 	movw	r2, #1429	; 0x595
 80199aa:	491d      	ldr	r1, [pc, #116]	; (8019a20 <tcp_receive+0x5f8>)
 80199ac:	481b      	ldr	r0, [pc, #108]	; (8019a1c <tcp_receive+0x5f4>)
 80199ae:	f003 f86b 	bl	801ca88 <iprintf>
      off = (u16_t)off32;
 80199b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80199b8:	4b15      	ldr	r3, [pc, #84]	; (8019a10 <tcp_receive+0x5e8>)
 80199ba:	685b      	ldr	r3, [r3, #4]
 80199bc:	891b      	ldrh	r3, [r3, #8]
 80199be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80199c2:	429a      	cmp	r2, r3
 80199c4:	d906      	bls.n	80199d4 <tcp_receive+0x5ac>
 80199c6:	4b13      	ldr	r3, [pc, #76]	; (8019a14 <tcp_receive+0x5ec>)
 80199c8:	f240 5297 	movw	r2, #1431	; 0x597
 80199cc:	4915      	ldr	r1, [pc, #84]	; (8019a24 <tcp_receive+0x5fc>)
 80199ce:	4813      	ldr	r0, [pc, #76]	; (8019a1c <tcp_receive+0x5f4>)
 80199d0:	f003 f85a 	bl	801ca88 <iprintf>
      inseg.len -= off;
 80199d4:	4b0e      	ldr	r3, [pc, #56]	; (8019a10 <tcp_receive+0x5e8>)
 80199d6:	891a      	ldrh	r2, [r3, #8]
 80199d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199dc:	1ad3      	subs	r3, r2, r3
 80199de:	b29a      	uxth	r2, r3
 80199e0:	4b0b      	ldr	r3, [pc, #44]	; (8019a10 <tcp_receive+0x5e8>)
 80199e2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80199e4:	4b0a      	ldr	r3, [pc, #40]	; (8019a10 <tcp_receive+0x5e8>)
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	891a      	ldrh	r2, [r3, #8]
 80199ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199ee:	1ad3      	subs	r3, r2, r3
 80199f0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80199f2:	e029      	b.n	8019a48 <tcp_receive+0x620>
 80199f4:	0801fb50 	.word	0x0801fb50
 80199f8:	0801fb58 	.word	0x0801fb58
 80199fc:	200075d4 	.word	0x200075d4
 8019a00:	200075d0 	.word	0x200075d0
 8019a04:	2000b744 	.word	0x2000b744
 8019a08:	200075d6 	.word	0x200075d6
 8019a0c:	200075cc 	.word	0x200075cc
 8019a10:	200075ac 	.word	0x200075ac
 8019a14:	0801f7bc 	.word	0x0801f7bc
 8019a18:	0801fb60 	.word	0x0801fb60
 8019a1c:	0801f834 	.word	0x0801f834
 8019a20:	0801fb70 	.word	0x0801fb70
 8019a24:	0801fb80 	.word	0x0801fb80
        off -= p->len;
 8019a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a2a:	895b      	ldrh	r3, [r3, #10]
 8019a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a30:	1ad3      	subs	r3, r2, r3
 8019a32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019a3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a3e:	2200      	movs	r2, #0
 8019a40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a4a:	895b      	ldrh	r3, [r3, #10]
 8019a4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a50:	429a      	cmp	r2, r3
 8019a52:	d8e9      	bhi.n	8019a28 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019a54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a58:	4619      	mov	r1, r3
 8019a5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019a5c:	f7fc fa7e 	bl	8015f5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a64:	4a91      	ldr	r2, [pc, #580]	; (8019cac <tcp_receive+0x884>)
 8019a66:	6013      	str	r3, [r2, #0]
 8019a68:	4b91      	ldr	r3, [pc, #580]	; (8019cb0 <tcp_receive+0x888>)
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	4a8f      	ldr	r2, [pc, #572]	; (8019cac <tcp_receive+0x884>)
 8019a6e:	6812      	ldr	r2, [r2, #0]
 8019a70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019a72:	e00d      	b.n	8019a90 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019a74:	4b8d      	ldr	r3, [pc, #564]	; (8019cac <tcp_receive+0x884>)
 8019a76:	681a      	ldr	r2, [r3, #0]
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a7c:	1ad3      	subs	r3, r2, r3
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	da06      	bge.n	8019a90 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	8b5b      	ldrh	r3, [r3, #26]
 8019a86:	f043 0302 	orr.w	r3, r3, #2
 8019a8a:	b29a      	uxth	r2, r3
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019a90:	4b86      	ldr	r3, [pc, #536]	; (8019cac <tcp_receive+0x884>)
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a98:	1ad3      	subs	r3, r2, r3
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f2c0 842a 	blt.w	801a2f4 <tcp_receive+0xecc>
 8019aa0:	4b82      	ldr	r3, [pc, #520]	; (8019cac <tcp_receive+0x884>)
 8019aa2:	681a      	ldr	r2, [r3, #0]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aa8:	6879      	ldr	r1, [r7, #4]
 8019aaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019aac:	440b      	add	r3, r1
 8019aae:	1ad3      	subs	r3, r2, r3
 8019ab0:	3301      	adds	r3, #1
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	f300 841e 	bgt.w	801a2f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019abc:	4b7b      	ldr	r3, [pc, #492]	; (8019cac <tcp_receive+0x884>)
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	429a      	cmp	r2, r3
 8019ac2:	f040 829a 	bne.w	8019ffa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019ac6:	4b7a      	ldr	r3, [pc, #488]	; (8019cb0 <tcp_receive+0x888>)
 8019ac8:	891c      	ldrh	r4, [r3, #8]
 8019aca:	4b79      	ldr	r3, [pc, #484]	; (8019cb0 <tcp_receive+0x888>)
 8019acc:	68db      	ldr	r3, [r3, #12]
 8019ace:	899b      	ldrh	r3, [r3, #12]
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7f6 fc60 	bl	8010398 <lwip_htons>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	f003 0303 	and.w	r3, r3, #3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d001      	beq.n	8019ae8 <tcp_receive+0x6c0>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e000      	b.n	8019aea <tcp_receive+0x6c2>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4423      	add	r3, r4
 8019aec:	b29a      	uxth	r2, r3
 8019aee:	4b71      	ldr	r3, [pc, #452]	; (8019cb4 <tcp_receive+0x88c>)
 8019af0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019af6:	4b6f      	ldr	r3, [pc, #444]	; (8019cb4 <tcp_receive+0x88c>)
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d275      	bcs.n	8019bea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019afe:	4b6c      	ldr	r3, [pc, #432]	; (8019cb0 <tcp_receive+0x888>)
 8019b00:	68db      	ldr	r3, [r3, #12]
 8019b02:	899b      	ldrh	r3, [r3, #12]
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7f6 fc46 	bl	8010398 <lwip_htons>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	f003 0301 	and.w	r3, r3, #1
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d01f      	beq.n	8019b58 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019b18:	4b65      	ldr	r3, [pc, #404]	; (8019cb0 <tcp_receive+0x888>)
 8019b1a:	68db      	ldr	r3, [r3, #12]
 8019b1c:	899b      	ldrh	r3, [r3, #12]
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	b21b      	sxth	r3, r3
 8019b22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019b26:	b21c      	sxth	r4, r3
 8019b28:	4b61      	ldr	r3, [pc, #388]	; (8019cb0 <tcp_receive+0x888>)
 8019b2a:	68db      	ldr	r3, [r3, #12]
 8019b2c:	899b      	ldrh	r3, [r3, #12]
 8019b2e:	b29b      	uxth	r3, r3
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7f6 fc31 	bl	8010398 <lwip_htons>
 8019b36:	4603      	mov	r3, r0
 8019b38:	b2db      	uxtb	r3, r3
 8019b3a:	b29b      	uxth	r3, r3
 8019b3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019b40:	b29b      	uxth	r3, r3
 8019b42:	4618      	mov	r0, r3
 8019b44:	f7f6 fc28 	bl	8010398 <lwip_htons>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	b21b      	sxth	r3, r3
 8019b4c:	4323      	orrs	r3, r4
 8019b4e:	b21a      	sxth	r2, r3
 8019b50:	4b57      	ldr	r3, [pc, #348]	; (8019cb0 <tcp_receive+0x888>)
 8019b52:	68db      	ldr	r3, [r3, #12]
 8019b54:	b292      	uxth	r2, r2
 8019b56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b5c:	4b54      	ldr	r3, [pc, #336]	; (8019cb0 <tcp_receive+0x888>)
 8019b5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019b60:	4b53      	ldr	r3, [pc, #332]	; (8019cb0 <tcp_receive+0x888>)
 8019b62:	68db      	ldr	r3, [r3, #12]
 8019b64:	899b      	ldrh	r3, [r3, #12]
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7f6 fc15 	bl	8010398 <lwip_htons>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	b2db      	uxtb	r3, r3
 8019b72:	f003 0302 	and.w	r3, r3, #2
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d005      	beq.n	8019b86 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019b7a:	4b4d      	ldr	r3, [pc, #308]	; (8019cb0 <tcp_receive+0x888>)
 8019b7c:	891b      	ldrh	r3, [r3, #8]
 8019b7e:	3b01      	subs	r3, #1
 8019b80:	b29a      	uxth	r2, r3
 8019b82:	4b4b      	ldr	r3, [pc, #300]	; (8019cb0 <tcp_receive+0x888>)
 8019b84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019b86:	4b4a      	ldr	r3, [pc, #296]	; (8019cb0 <tcp_receive+0x888>)
 8019b88:	685a      	ldr	r2, [r3, #4]
 8019b8a:	4b49      	ldr	r3, [pc, #292]	; (8019cb0 <tcp_receive+0x888>)
 8019b8c:	891b      	ldrh	r3, [r3, #8]
 8019b8e:	4619      	mov	r1, r3
 8019b90:	4610      	mov	r0, r2
 8019b92:	f7fc f8e3 	bl	8015d5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019b96:	4b46      	ldr	r3, [pc, #280]	; (8019cb0 <tcp_receive+0x888>)
 8019b98:	891c      	ldrh	r4, [r3, #8]
 8019b9a:	4b45      	ldr	r3, [pc, #276]	; (8019cb0 <tcp_receive+0x888>)
 8019b9c:	68db      	ldr	r3, [r3, #12]
 8019b9e:	899b      	ldrh	r3, [r3, #12]
 8019ba0:	b29b      	uxth	r3, r3
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7f6 fbf8 	bl	8010398 <lwip_htons>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	b2db      	uxtb	r3, r3
 8019bac:	f003 0303 	and.w	r3, r3, #3
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d001      	beq.n	8019bb8 <tcp_receive+0x790>
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	e000      	b.n	8019bba <tcp_receive+0x792>
 8019bb8:	2300      	movs	r3, #0
 8019bba:	4423      	add	r3, r4
 8019bbc:	b29a      	uxth	r2, r3
 8019bbe:	4b3d      	ldr	r3, [pc, #244]	; (8019cb4 <tcp_receive+0x88c>)
 8019bc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019bc2:	4b3c      	ldr	r3, [pc, #240]	; (8019cb4 <tcp_receive+0x88c>)
 8019bc4:	881b      	ldrh	r3, [r3, #0]
 8019bc6:	461a      	mov	r2, r3
 8019bc8:	4b38      	ldr	r3, [pc, #224]	; (8019cac <tcp_receive+0x884>)
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	441a      	add	r2, r3
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bd2:	6879      	ldr	r1, [r7, #4]
 8019bd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019bd6:	440b      	add	r3, r1
 8019bd8:	429a      	cmp	r2, r3
 8019bda:	d006      	beq.n	8019bea <tcp_receive+0x7c2>
 8019bdc:	4b36      	ldr	r3, [pc, #216]	; (8019cb8 <tcp_receive+0x890>)
 8019bde:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019be2:	4936      	ldr	r1, [pc, #216]	; (8019cbc <tcp_receive+0x894>)
 8019be4:	4836      	ldr	r0, [pc, #216]	; (8019cc0 <tcp_receive+0x898>)
 8019be6:	f002 ff4f 	bl	801ca88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	f000 80e7 	beq.w	8019dc2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019bf4:	4b2e      	ldr	r3, [pc, #184]	; (8019cb0 <tcp_receive+0x888>)
 8019bf6:	68db      	ldr	r3, [r3, #12]
 8019bf8:	899b      	ldrh	r3, [r3, #12]
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	f7f6 fbcb 	bl	8010398 <lwip_htons>
 8019c02:	4603      	mov	r3, r0
 8019c04:	b2db      	uxtb	r3, r3
 8019c06:	f003 0301 	and.w	r3, r3, #1
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d010      	beq.n	8019c30 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019c0e:	e00a      	b.n	8019c26 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019c20:	68f8      	ldr	r0, [r7, #12]
 8019c22:	f7fd fd97 	bl	8017754 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d1f0      	bne.n	8019c10 <tcp_receive+0x7e8>
 8019c2e:	e0c8      	b.n	8019dc2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019c36:	e052      	b.n	8019cde <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c3a:	68db      	ldr	r3, [r3, #12]
 8019c3c:	899b      	ldrh	r3, [r3, #12]
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7f6 fba9 	bl	8010398 <lwip_htons>
 8019c46:	4603      	mov	r3, r0
 8019c48:	b2db      	uxtb	r3, r3
 8019c4a:	f003 0301 	and.w	r3, r3, #1
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d03d      	beq.n	8019cce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019c52:	4b17      	ldr	r3, [pc, #92]	; (8019cb0 <tcp_receive+0x888>)
 8019c54:	68db      	ldr	r3, [r3, #12]
 8019c56:	899b      	ldrh	r3, [r3, #12]
 8019c58:	b29b      	uxth	r3, r3
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f7f6 fb9c 	bl	8010398 <lwip_htons>
 8019c60:	4603      	mov	r3, r0
 8019c62:	b2db      	uxtb	r3, r3
 8019c64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d130      	bne.n	8019cce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019c6c:	4b10      	ldr	r3, [pc, #64]	; (8019cb0 <tcp_receive+0x888>)
 8019c6e:	68db      	ldr	r3, [r3, #12]
 8019c70:	899b      	ldrh	r3, [r3, #12]
 8019c72:	b29c      	uxth	r4, r3
 8019c74:	2001      	movs	r0, #1
 8019c76:	f7f6 fb8f 	bl	8010398 <lwip_htons>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	4b0c      	ldr	r3, [pc, #48]	; (8019cb0 <tcp_receive+0x888>)
 8019c80:	68db      	ldr	r3, [r3, #12]
 8019c82:	4322      	orrs	r2, r4
 8019c84:	b292      	uxth	r2, r2
 8019c86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019c88:	4b09      	ldr	r3, [pc, #36]	; (8019cb0 <tcp_receive+0x888>)
 8019c8a:	891c      	ldrh	r4, [r3, #8]
 8019c8c:	4b08      	ldr	r3, [pc, #32]	; (8019cb0 <tcp_receive+0x888>)
 8019c8e:	68db      	ldr	r3, [r3, #12]
 8019c90:	899b      	ldrh	r3, [r3, #12]
 8019c92:	b29b      	uxth	r3, r3
 8019c94:	4618      	mov	r0, r3
 8019c96:	f7f6 fb7f 	bl	8010398 <lwip_htons>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	f003 0303 	and.w	r3, r3, #3
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d00e      	beq.n	8019cc4 <tcp_receive+0x89c>
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	e00d      	b.n	8019cc6 <tcp_receive+0x89e>
 8019caa:	bf00      	nop
 8019cac:	200075cc 	.word	0x200075cc
 8019cb0:	200075ac 	.word	0x200075ac
 8019cb4:	200075d6 	.word	0x200075d6
 8019cb8:	0801f7bc 	.word	0x0801f7bc
 8019cbc:	0801fb90 	.word	0x0801fb90
 8019cc0:	0801f834 	.word	0x0801f834
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	4423      	add	r3, r4
 8019cc8:	b29a      	uxth	r2, r3
 8019cca:	4b98      	ldr	r3, [pc, #608]	; (8019f2c <tcp_receive+0xb04>)
 8019ccc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019cd8:	6938      	ldr	r0, [r7, #16]
 8019cda:	f7fd fd3b 	bl	8017754 <tcp_seg_free>
            while (next &&
 8019cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d00e      	beq.n	8019d02 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019ce4:	4b91      	ldr	r3, [pc, #580]	; (8019f2c <tcp_receive+0xb04>)
 8019ce6:	881b      	ldrh	r3, [r3, #0]
 8019ce8:	461a      	mov	r2, r3
 8019cea:	4b91      	ldr	r3, [pc, #580]	; (8019f30 <tcp_receive+0xb08>)
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	441a      	add	r2, r3
 8019cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cf2:	68db      	ldr	r3, [r3, #12]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019cf8:	8909      	ldrh	r1, [r1, #8]
 8019cfa:	440b      	add	r3, r1
 8019cfc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	da9a      	bge.n	8019c38 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d059      	beq.n	8019dbc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019d08:	4b88      	ldr	r3, [pc, #544]	; (8019f2c <tcp_receive+0xb04>)
 8019d0a:	881b      	ldrh	r3, [r3, #0]
 8019d0c:	461a      	mov	r2, r3
 8019d0e:	4b88      	ldr	r3, [pc, #544]	; (8019f30 <tcp_receive+0xb08>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	441a      	add	r2, r3
 8019d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d16:	68db      	ldr	r3, [r3, #12]
 8019d18:	685b      	ldr	r3, [r3, #4]
 8019d1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	dd4d      	ble.n	8019dbc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d22:	68db      	ldr	r3, [r3, #12]
 8019d24:	685b      	ldr	r3, [r3, #4]
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	4b81      	ldr	r3, [pc, #516]	; (8019f30 <tcp_receive+0xb08>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	1ad3      	subs	r3, r2, r3
 8019d30:	b29a      	uxth	r2, r3
 8019d32:	4b80      	ldr	r3, [pc, #512]	; (8019f34 <tcp_receive+0xb0c>)
 8019d34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019d36:	4b7f      	ldr	r3, [pc, #508]	; (8019f34 <tcp_receive+0xb0c>)
 8019d38:	68db      	ldr	r3, [r3, #12]
 8019d3a:	899b      	ldrh	r3, [r3, #12]
 8019d3c:	b29b      	uxth	r3, r3
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7f6 fb2a 	bl	8010398 <lwip_htons>
 8019d44:	4603      	mov	r3, r0
 8019d46:	b2db      	uxtb	r3, r3
 8019d48:	f003 0302 	and.w	r3, r3, #2
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d005      	beq.n	8019d5c <tcp_receive+0x934>
                inseg.len -= 1;
 8019d50:	4b78      	ldr	r3, [pc, #480]	; (8019f34 <tcp_receive+0xb0c>)
 8019d52:	891b      	ldrh	r3, [r3, #8]
 8019d54:	3b01      	subs	r3, #1
 8019d56:	b29a      	uxth	r2, r3
 8019d58:	4b76      	ldr	r3, [pc, #472]	; (8019f34 <tcp_receive+0xb0c>)
 8019d5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019d5c:	4b75      	ldr	r3, [pc, #468]	; (8019f34 <tcp_receive+0xb0c>)
 8019d5e:	685a      	ldr	r2, [r3, #4]
 8019d60:	4b74      	ldr	r3, [pc, #464]	; (8019f34 <tcp_receive+0xb0c>)
 8019d62:	891b      	ldrh	r3, [r3, #8]
 8019d64:	4619      	mov	r1, r3
 8019d66:	4610      	mov	r0, r2
 8019d68:	f7fb fff8 	bl	8015d5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019d6c:	4b71      	ldr	r3, [pc, #452]	; (8019f34 <tcp_receive+0xb0c>)
 8019d6e:	891c      	ldrh	r4, [r3, #8]
 8019d70:	4b70      	ldr	r3, [pc, #448]	; (8019f34 <tcp_receive+0xb0c>)
 8019d72:	68db      	ldr	r3, [r3, #12]
 8019d74:	899b      	ldrh	r3, [r3, #12]
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7f6 fb0d 	bl	8010398 <lwip_htons>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	f003 0303 	and.w	r3, r3, #3
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d001      	beq.n	8019d8e <tcp_receive+0x966>
 8019d8a:	2301      	movs	r3, #1
 8019d8c:	e000      	b.n	8019d90 <tcp_receive+0x968>
 8019d8e:	2300      	movs	r3, #0
 8019d90:	4423      	add	r3, r4
 8019d92:	b29a      	uxth	r2, r3
 8019d94:	4b65      	ldr	r3, [pc, #404]	; (8019f2c <tcp_receive+0xb04>)
 8019d96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019d98:	4b64      	ldr	r3, [pc, #400]	; (8019f2c <tcp_receive+0xb04>)
 8019d9a:	881b      	ldrh	r3, [r3, #0]
 8019d9c:	461a      	mov	r2, r3
 8019d9e:	4b64      	ldr	r3, [pc, #400]	; (8019f30 <tcp_receive+0xb08>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	441a      	add	r2, r3
 8019da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019da6:	68db      	ldr	r3, [r3, #12]
 8019da8:	685b      	ldr	r3, [r3, #4]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d006      	beq.n	8019dbc <tcp_receive+0x994>
 8019dae:	4b62      	ldr	r3, [pc, #392]	; (8019f38 <tcp_receive+0xb10>)
 8019db0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019db4:	4961      	ldr	r1, [pc, #388]	; (8019f3c <tcp_receive+0xb14>)
 8019db6:	4862      	ldr	r0, [pc, #392]	; (8019f40 <tcp_receive+0xb18>)
 8019db8:	f002 fe66 	bl	801ca88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019dc0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019dc2:	4b5a      	ldr	r3, [pc, #360]	; (8019f2c <tcp_receive+0xb04>)
 8019dc4:	881b      	ldrh	r3, [r3, #0]
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	4b59      	ldr	r3, [pc, #356]	; (8019f30 <tcp_receive+0xb08>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	441a      	add	r2, r3
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019dd6:	4b55      	ldr	r3, [pc, #340]	; (8019f2c <tcp_receive+0xb04>)
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d206      	bcs.n	8019dec <tcp_receive+0x9c4>
 8019dde:	4b56      	ldr	r3, [pc, #344]	; (8019f38 <tcp_receive+0xb10>)
 8019de0:	f240 6207 	movw	r2, #1543	; 0x607
 8019de4:	4957      	ldr	r1, [pc, #348]	; (8019f44 <tcp_receive+0xb1c>)
 8019de6:	4856      	ldr	r0, [pc, #344]	; (8019f40 <tcp_receive+0xb18>)
 8019de8:	f002 fe4e 	bl	801ca88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019df0:	4b4e      	ldr	r3, [pc, #312]	; (8019f2c <tcp_receive+0xb04>)
 8019df2:	881b      	ldrh	r3, [r3, #0]
 8019df4:	1ad3      	subs	r3, r2, r3
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	f7fc ffcd 	bl	8016d9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019e02:	4b4c      	ldr	r3, [pc, #304]	; (8019f34 <tcp_receive+0xb0c>)
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	891b      	ldrh	r3, [r3, #8]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d006      	beq.n	8019e1a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019e0c:	4b49      	ldr	r3, [pc, #292]	; (8019f34 <tcp_receive+0xb0c>)
 8019e0e:	685b      	ldr	r3, [r3, #4]
 8019e10:	4a4d      	ldr	r2, [pc, #308]	; (8019f48 <tcp_receive+0xb20>)
 8019e12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019e14:	4b47      	ldr	r3, [pc, #284]	; (8019f34 <tcp_receive+0xb0c>)
 8019e16:	2200      	movs	r2, #0
 8019e18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e1a:	4b46      	ldr	r3, [pc, #280]	; (8019f34 <tcp_receive+0xb0c>)
 8019e1c:	68db      	ldr	r3, [r3, #12]
 8019e1e:	899b      	ldrh	r3, [r3, #12]
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7f6 fab8 	bl	8010398 <lwip_htons>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	b2db      	uxtb	r3, r3
 8019e2c:	f003 0301 	and.w	r3, r3, #1
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	f000 80b8 	beq.w	8019fa6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019e36:	4b45      	ldr	r3, [pc, #276]	; (8019f4c <tcp_receive+0xb24>)
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	f043 0320 	orr.w	r3, r3, #32
 8019e3e:	b2da      	uxtb	r2, r3
 8019e40:	4b42      	ldr	r3, [pc, #264]	; (8019f4c <tcp_receive+0xb24>)
 8019e42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019e44:	e0af      	b.n	8019fa6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e50:	68db      	ldr	r3, [r3, #12]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	4a36      	ldr	r2, [pc, #216]	; (8019f30 <tcp_receive+0xb08>)
 8019e56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	891b      	ldrh	r3, [r3, #8]
 8019e5c:	461c      	mov	r4, r3
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	68db      	ldr	r3, [r3, #12]
 8019e62:	899b      	ldrh	r3, [r3, #12]
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7f6 fa96 	bl	8010398 <lwip_htons>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	b2db      	uxtb	r3, r3
 8019e70:	f003 0303 	and.w	r3, r3, #3
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d001      	beq.n	8019e7c <tcp_receive+0xa54>
 8019e78:	2301      	movs	r3, #1
 8019e7a:	e000      	b.n	8019e7e <tcp_receive+0xa56>
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	191a      	adds	r2, r3, r4
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e84:	441a      	add	r2, r3
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e8e:	461c      	mov	r4, r3
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	891b      	ldrh	r3, [r3, #8]
 8019e94:	461d      	mov	r5, r3
 8019e96:	68bb      	ldr	r3, [r7, #8]
 8019e98:	68db      	ldr	r3, [r3, #12]
 8019e9a:	899b      	ldrh	r3, [r3, #12]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7f6 fa7a 	bl	8010398 <lwip_htons>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	f003 0303 	and.w	r3, r3, #3
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d001      	beq.n	8019eb4 <tcp_receive+0xa8c>
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	e000      	b.n	8019eb6 <tcp_receive+0xa8e>
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	442b      	add	r3, r5
 8019eb8:	429c      	cmp	r4, r3
 8019eba:	d206      	bcs.n	8019eca <tcp_receive+0xaa2>
 8019ebc:	4b1e      	ldr	r3, [pc, #120]	; (8019f38 <tcp_receive+0xb10>)
 8019ebe:	f240 622c 	movw	r2, #1580	; 0x62c
 8019ec2:	4923      	ldr	r1, [pc, #140]	; (8019f50 <tcp_receive+0xb28>)
 8019ec4:	481e      	ldr	r0, [pc, #120]	; (8019f40 <tcp_receive+0xb18>)
 8019ec6:	f002 fddf 	bl	801ca88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019eca:	68bb      	ldr	r3, [r7, #8]
 8019ecc:	891b      	ldrh	r3, [r3, #8]
 8019ece:	461c      	mov	r4, r3
 8019ed0:	68bb      	ldr	r3, [r7, #8]
 8019ed2:	68db      	ldr	r3, [r3, #12]
 8019ed4:	899b      	ldrh	r3, [r3, #12]
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7f6 fa5d 	bl	8010398 <lwip_htons>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	f003 0303 	and.w	r3, r3, #3
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d001      	beq.n	8019eee <tcp_receive+0xac6>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e000      	b.n	8019ef0 <tcp_receive+0xac8>
 8019eee:	2300      	movs	r3, #0
 8019ef0:	1919      	adds	r1, r3, r4
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019ef6:	b28b      	uxth	r3, r1
 8019ef8:	1ad3      	subs	r3, r2, r3
 8019efa:	b29a      	uxth	r2, r3
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f7fc ff4b 	bl	8016d9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	891b      	ldrh	r3, [r3, #8]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d028      	beq.n	8019f62 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019f10:	4b0d      	ldr	r3, [pc, #52]	; (8019f48 <tcp_receive+0xb20>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d01d      	beq.n	8019f54 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019f18:	4b0b      	ldr	r3, [pc, #44]	; (8019f48 <tcp_receive+0xb20>)
 8019f1a:	681a      	ldr	r2, [r3, #0]
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	685b      	ldr	r3, [r3, #4]
 8019f20:	4619      	mov	r1, r3
 8019f22:	4610      	mov	r0, r2
 8019f24:	f7fc f96e 	bl	8016204 <pbuf_cat>
 8019f28:	e018      	b.n	8019f5c <tcp_receive+0xb34>
 8019f2a:	bf00      	nop
 8019f2c:	200075d6 	.word	0x200075d6
 8019f30:	200075cc 	.word	0x200075cc
 8019f34:	200075ac 	.word	0x200075ac
 8019f38:	0801f7bc 	.word	0x0801f7bc
 8019f3c:	0801fbc8 	.word	0x0801fbc8
 8019f40:	0801f834 	.word	0x0801f834
 8019f44:	0801fc04 	.word	0x0801fc04
 8019f48:	200075dc 	.word	0x200075dc
 8019f4c:	200075d9 	.word	0x200075d9
 8019f50:	0801fc24 	.word	0x0801fc24
            } else {
              recv_data = cseg->p;
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	4a70      	ldr	r2, [pc, #448]	; (801a11c <tcp_receive+0xcf4>)
 8019f5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	68db      	ldr	r3, [r3, #12]
 8019f66:	899b      	ldrh	r3, [r3, #12]
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f7f6 fa14 	bl	8010398 <lwip_htons>
 8019f70:	4603      	mov	r3, r0
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	f003 0301 	and.w	r3, r3, #1
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d00d      	beq.n	8019f98 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019f7c:	4b68      	ldr	r3, [pc, #416]	; (801a120 <tcp_receive+0xcf8>)
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	f043 0320 	orr.w	r3, r3, #32
 8019f84:	b2da      	uxtb	r2, r3
 8019f86:	4b66      	ldr	r3, [pc, #408]	; (801a120 <tcp_receive+0xcf8>)
 8019f88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	7d1b      	ldrb	r3, [r3, #20]
 8019f8e:	2b04      	cmp	r3, #4
 8019f90:	d102      	bne.n	8019f98 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2207      	movs	r2, #7
 8019f96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019fa0:	68b8      	ldr	r0, [r7, #8]
 8019fa2:	f7fd fbd7 	bl	8017754 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d008      	beq.n	8019fc0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fb2:	68db      	ldr	r3, [r3, #12]
 8019fb4:	685a      	ldr	r2, [r3, #4]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	f43f af43 	beq.w	8019e46 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	8b5b      	ldrh	r3, [r3, #26]
 8019fc4:	f003 0301 	and.w	r3, r3, #1
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d00e      	beq.n	8019fea <tcp_receive+0xbc2>
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	8b5b      	ldrh	r3, [r3, #26]
 8019fd0:	f023 0301 	bic.w	r3, r3, #1
 8019fd4:	b29a      	uxth	r2, r3
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	835a      	strh	r2, [r3, #26]
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	8b5b      	ldrh	r3, [r3, #26]
 8019fde:	f043 0302 	orr.w	r3, r3, #2
 8019fe2:	b29a      	uxth	r2, r3
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019fe8:	e188      	b.n	801a2fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	8b5b      	ldrh	r3, [r3, #26]
 8019fee:	f043 0301 	orr.w	r3, r3, #1
 8019ff2:	b29a      	uxth	r2, r3
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019ff8:	e180      	b.n	801a2fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d106      	bne.n	801a010 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a002:	4848      	ldr	r0, [pc, #288]	; (801a124 <tcp_receive+0xcfc>)
 801a004:	f7fd fbbe 	bl	8017784 <tcp_seg_copy>
 801a008:	4602      	mov	r2, r0
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	675a      	str	r2, [r3, #116]	; 0x74
 801a00e:	e16d      	b.n	801a2ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a010:	2300      	movs	r3, #0
 801a012:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a018:	63bb      	str	r3, [r7, #56]	; 0x38
 801a01a:	e157      	b.n	801a2cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	685a      	ldr	r2, [r3, #4]
 801a022:	4b41      	ldr	r3, [pc, #260]	; (801a128 <tcp_receive+0xd00>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	429a      	cmp	r2, r3
 801a028:	d11d      	bne.n	801a066 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a02a:	4b3e      	ldr	r3, [pc, #248]	; (801a124 <tcp_receive+0xcfc>)
 801a02c:	891a      	ldrh	r2, [r3, #8]
 801a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a030:	891b      	ldrh	r3, [r3, #8]
 801a032:	429a      	cmp	r2, r3
 801a034:	f240 814f 	bls.w	801a2d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a038:	483a      	ldr	r0, [pc, #232]	; (801a124 <tcp_receive+0xcfc>)
 801a03a:	f7fd fba3 	bl	8017784 <tcp_seg_copy>
 801a03e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a040:	697b      	ldr	r3, [r7, #20]
 801a042:	2b00      	cmp	r3, #0
 801a044:	f000 8149 	beq.w	801a2da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d003      	beq.n	801a056 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a050:	697a      	ldr	r2, [r7, #20]
 801a052:	601a      	str	r2, [r3, #0]
 801a054:	e002      	b.n	801a05c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	697a      	ldr	r2, [r7, #20]
 801a05a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a05c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a05e:	6978      	ldr	r0, [r7, #20]
 801a060:	f7ff f8de 	bl	8019220 <tcp_oos_insert_segment>
                }
                break;
 801a064:	e139      	b.n	801a2da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d117      	bne.n	801a09c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a06c:	4b2e      	ldr	r3, [pc, #184]	; (801a128 <tcp_receive+0xd00>)
 801a06e:	681a      	ldr	r2, [r3, #0]
 801a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	1ad3      	subs	r3, r2, r3
 801a078:	2b00      	cmp	r3, #0
 801a07a:	da57      	bge.n	801a12c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a07c:	4829      	ldr	r0, [pc, #164]	; (801a124 <tcp_receive+0xcfc>)
 801a07e:	f7fd fb81 	bl	8017784 <tcp_seg_copy>
 801a082:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a084:	69bb      	ldr	r3, [r7, #24]
 801a086:	2b00      	cmp	r3, #0
 801a088:	f000 8129 	beq.w	801a2de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	69ba      	ldr	r2, [r7, #24]
 801a090:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a092:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a094:	69b8      	ldr	r0, [r7, #24]
 801a096:	f7ff f8c3 	bl	8019220 <tcp_oos_insert_segment>
                  }
                  break;
 801a09a:	e120      	b.n	801a2de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a09c:	4b22      	ldr	r3, [pc, #136]	; (801a128 <tcp_receive+0xd00>)
 801a09e:	681a      	ldr	r2, [r3, #0]
 801a0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0a2:	68db      	ldr	r3, [r3, #12]
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	1ad3      	subs	r3, r2, r3
 801a0a8:	3b01      	subs	r3, #1
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	db3e      	blt.n	801a12c <tcp_receive+0xd04>
 801a0ae:	4b1e      	ldr	r3, [pc, #120]	; (801a128 <tcp_receive+0xd00>)
 801a0b0:	681a      	ldr	r2, [r3, #0]
 801a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0b4:	68db      	ldr	r3, [r3, #12]
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	1ad3      	subs	r3, r2, r3
 801a0ba:	3301      	adds	r3, #1
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	dc35      	bgt.n	801a12c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a0c0:	4818      	ldr	r0, [pc, #96]	; (801a124 <tcp_receive+0xcfc>)
 801a0c2:	f7fd fb5f 	bl	8017784 <tcp_seg_copy>
 801a0c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a0c8:	69fb      	ldr	r3, [r7, #28]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	f000 8109 	beq.w	801a2e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	685b      	ldr	r3, [r3, #4]
 801a0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a0d8:	8912      	ldrh	r2, [r2, #8]
 801a0da:	441a      	add	r2, r3
 801a0dc:	4b12      	ldr	r3, [pc, #72]	; (801a128 <tcp_receive+0xd00>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	1ad3      	subs	r3, r2, r3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	dd12      	ble.n	801a10c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a0e6:	4b10      	ldr	r3, [pc, #64]	; (801a128 <tcp_receive+0xd00>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	b29a      	uxth	r2, r3
 801a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0ee:	68db      	ldr	r3, [r3, #12]
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	b29b      	uxth	r3, r3
 801a0f4:	1ad3      	subs	r3, r2, r3
 801a0f6:	b29a      	uxth	r2, r3
 801a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0fe:	685a      	ldr	r2, [r3, #4]
 801a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a102:	891b      	ldrh	r3, [r3, #8]
 801a104:	4619      	mov	r1, r3
 801a106:	4610      	mov	r0, r2
 801a108:	f7fb fe28 	bl	8015d5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a10e:	69fa      	ldr	r2, [r7, #28]
 801a110:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a114:	69f8      	ldr	r0, [r7, #28]
 801a116:	f7ff f883 	bl	8019220 <tcp_oos_insert_segment>
                  }
                  break;
 801a11a:	e0e2      	b.n	801a2e2 <tcp_receive+0xeba>
 801a11c:	200075dc 	.word	0x200075dc
 801a120:	200075d9 	.word	0x200075d9
 801a124:	200075ac 	.word	0x200075ac
 801a128:	200075cc 	.word	0x200075cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a12e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	f040 80c6 	bne.w	801a2c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a13a:	4b80      	ldr	r3, [pc, #512]	; (801a33c <tcp_receive+0xf14>)
 801a13c:	681a      	ldr	r2, [r3, #0]
 801a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a140:	68db      	ldr	r3, [r3, #12]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a146:	2b00      	cmp	r3, #0
 801a148:	f340 80bd 	ble.w	801a2c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a14e:	68db      	ldr	r3, [r3, #12]
 801a150:	899b      	ldrh	r3, [r3, #12]
 801a152:	b29b      	uxth	r3, r3
 801a154:	4618      	mov	r0, r3
 801a156:	f7f6 f91f 	bl	8010398 <lwip_htons>
 801a15a:	4603      	mov	r3, r0
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	f003 0301 	and.w	r3, r3, #1
 801a162:	2b00      	cmp	r3, #0
 801a164:	f040 80bf 	bne.w	801a2e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a168:	4875      	ldr	r0, [pc, #468]	; (801a340 <tcp_receive+0xf18>)
 801a16a:	f7fd fb0b 	bl	8017784 <tcp_seg_copy>
 801a16e:	4602      	mov	r2, r0
 801a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a172:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	f000 80b6 	beq.w	801a2ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a180:	68db      	ldr	r3, [r3, #12]
 801a182:	685b      	ldr	r3, [r3, #4]
 801a184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a186:	8912      	ldrh	r2, [r2, #8]
 801a188:	441a      	add	r2, r3
 801a18a:	4b6c      	ldr	r3, [pc, #432]	; (801a33c <tcp_receive+0xf14>)
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	1ad3      	subs	r3, r2, r3
 801a190:	2b00      	cmp	r3, #0
 801a192:	dd12      	ble.n	801a1ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a194:	4b69      	ldr	r3, [pc, #420]	; (801a33c <tcp_receive+0xf14>)
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	b29a      	uxth	r2, r3
 801a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a19c:	68db      	ldr	r3, [r3, #12]
 801a19e:	685b      	ldr	r3, [r3, #4]
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	1ad3      	subs	r3, r2, r3
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1ac:	685a      	ldr	r2, [r3, #4]
 801a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1b0:	891b      	ldrh	r3, [r3, #8]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	4610      	mov	r0, r2
 801a1b6:	f7fb fdd1 	bl	8015d5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a1ba:	4b62      	ldr	r3, [pc, #392]	; (801a344 <tcp_receive+0xf1c>)
 801a1bc:	881b      	ldrh	r3, [r3, #0]
 801a1be:	461a      	mov	r2, r3
 801a1c0:	4b5e      	ldr	r3, [pc, #376]	; (801a33c <tcp_receive+0xf14>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	441a      	add	r2, r3
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ca:	6879      	ldr	r1, [r7, #4]
 801a1cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a1ce:	440b      	add	r3, r1
 801a1d0:	1ad3      	subs	r3, r2, r3
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	f340 8089 	ble.w	801a2ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	68db      	ldr	r3, [r3, #12]
 801a1de:	899b      	ldrh	r3, [r3, #12]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7f6 f8d8 	bl	8010398 <lwip_htons>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	b2db      	uxtb	r3, r3
 801a1ec:	f003 0301 	and.w	r3, r3, #1
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d022      	beq.n	801a23a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	68db      	ldr	r3, [r3, #12]
 801a1fa:	899b      	ldrh	r3, [r3, #12]
 801a1fc:	b29b      	uxth	r3, r3
 801a1fe:	b21b      	sxth	r3, r3
 801a200:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a204:	b21c      	sxth	r4, r3
 801a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	68db      	ldr	r3, [r3, #12]
 801a20c:	899b      	ldrh	r3, [r3, #12]
 801a20e:	b29b      	uxth	r3, r3
 801a210:	4618      	mov	r0, r3
 801a212:	f7f6 f8c1 	bl	8010398 <lwip_htons>
 801a216:	4603      	mov	r3, r0
 801a218:	b2db      	uxtb	r3, r3
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a220:	b29b      	uxth	r3, r3
 801a222:	4618      	mov	r0, r3
 801a224:	f7f6 f8b8 	bl	8010398 <lwip_htons>
 801a228:	4603      	mov	r3, r0
 801a22a:	b21b      	sxth	r3, r3
 801a22c:	4323      	orrs	r3, r4
 801a22e:	b21a      	sxth	r2, r3
 801a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	68db      	ldr	r3, [r3, #12]
 801a236:	b292      	uxth	r2, r2
 801a238:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a23e:	b29a      	uxth	r2, r3
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a244:	4413      	add	r3, r2
 801a246:	b299      	uxth	r1, r3
 801a248:	4b3c      	ldr	r3, [pc, #240]	; (801a33c <tcp_receive+0xf14>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	b29a      	uxth	r2, r3
 801a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	1a8a      	subs	r2, r1, r2
 801a254:	b292      	uxth	r2, r2
 801a256:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	685a      	ldr	r2, [r3, #4]
 801a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	891b      	ldrh	r3, [r3, #8]
 801a264:	4619      	mov	r1, r3
 801a266:	4610      	mov	r0, r2
 801a268:	f7fb fd78 	bl	8015d5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	891c      	ldrh	r4, [r3, #8]
 801a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	68db      	ldr	r3, [r3, #12]
 801a278:	899b      	ldrh	r3, [r3, #12]
 801a27a:	b29b      	uxth	r3, r3
 801a27c:	4618      	mov	r0, r3
 801a27e:	f7f6 f88b 	bl	8010398 <lwip_htons>
 801a282:	4603      	mov	r3, r0
 801a284:	b2db      	uxtb	r3, r3
 801a286:	f003 0303 	and.w	r3, r3, #3
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d001      	beq.n	801a292 <tcp_receive+0xe6a>
 801a28e:	2301      	movs	r3, #1
 801a290:	e000      	b.n	801a294 <tcp_receive+0xe6c>
 801a292:	2300      	movs	r3, #0
 801a294:	4423      	add	r3, r4
 801a296:	b29a      	uxth	r2, r3
 801a298:	4b2a      	ldr	r3, [pc, #168]	; (801a344 <tcp_receive+0xf1c>)
 801a29a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a29c:	4b29      	ldr	r3, [pc, #164]	; (801a344 <tcp_receive+0xf1c>)
 801a29e:	881b      	ldrh	r3, [r3, #0]
 801a2a0:	461a      	mov	r2, r3
 801a2a2:	4b26      	ldr	r3, [pc, #152]	; (801a33c <tcp_receive+0xf14>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	441a      	add	r2, r3
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ac:	6879      	ldr	r1, [r7, #4]
 801a2ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a2b0:	440b      	add	r3, r1
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d019      	beq.n	801a2ea <tcp_receive+0xec2>
 801a2b6:	4b24      	ldr	r3, [pc, #144]	; (801a348 <tcp_receive+0xf20>)
 801a2b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a2bc:	4923      	ldr	r1, [pc, #140]	; (801a34c <tcp_receive+0xf24>)
 801a2be:	4824      	ldr	r0, [pc, #144]	; (801a350 <tcp_receive+0xf28>)
 801a2c0:	f002 fbe2 	bl	801ca88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a2c4:	e011      	b.n	801a2ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	63bb      	str	r3, [r7, #56]	; 0x38
 801a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f47f aea4 	bne.w	801a01c <tcp_receive+0xbf4>
 801a2d4:	e00a      	b.n	801a2ec <tcp_receive+0xec4>
                break;
 801a2d6:	bf00      	nop
 801a2d8:	e008      	b.n	801a2ec <tcp_receive+0xec4>
                break;
 801a2da:	bf00      	nop
 801a2dc:	e006      	b.n	801a2ec <tcp_receive+0xec4>
                  break;
 801a2de:	bf00      	nop
 801a2e0:	e004      	b.n	801a2ec <tcp_receive+0xec4>
                  break;
 801a2e2:	bf00      	nop
 801a2e4:	e002      	b.n	801a2ec <tcp_receive+0xec4>
                  break;
 801a2e6:	bf00      	nop
 801a2e8:	e000      	b.n	801a2ec <tcp_receive+0xec4>
                break;
 801a2ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f001 fa43 	bl	801b778 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a2f2:	e003      	b.n	801a2fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	f001 fa3f 	bl	801b778 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a2fa:	e01a      	b.n	801a332 <tcp_receive+0xf0a>
 801a2fc:	e019      	b.n	801a332 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a2fe:	4b0f      	ldr	r3, [pc, #60]	; (801a33c <tcp_receive+0xf14>)
 801a300:	681a      	ldr	r2, [r3, #0]
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a306:	1ad3      	subs	r3, r2, r3
 801a308:	2b00      	cmp	r3, #0
 801a30a:	db0a      	blt.n	801a322 <tcp_receive+0xefa>
 801a30c:	4b0b      	ldr	r3, [pc, #44]	; (801a33c <tcp_receive+0xf14>)
 801a30e:	681a      	ldr	r2, [r3, #0]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a314:	6879      	ldr	r1, [r7, #4]
 801a316:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a318:	440b      	add	r3, r1
 801a31a:	1ad3      	subs	r3, r2, r3
 801a31c:	3301      	adds	r3, #1
 801a31e:	2b00      	cmp	r3, #0
 801a320:	dd07      	ble.n	801a332 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	8b5b      	ldrh	r3, [r3, #26]
 801a326:	f043 0302 	orr.w	r3, r3, #2
 801a32a:	b29a      	uxth	r2, r3
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a330:	e7ff      	b.n	801a332 <tcp_receive+0xf0a>
 801a332:	bf00      	nop
 801a334:	3750      	adds	r7, #80	; 0x50
 801a336:	46bd      	mov	sp, r7
 801a338:	bdb0      	pop	{r4, r5, r7, pc}
 801a33a:	bf00      	nop
 801a33c:	200075cc 	.word	0x200075cc
 801a340:	200075ac 	.word	0x200075ac
 801a344:	200075d6 	.word	0x200075d6
 801a348:	0801f7bc 	.word	0x0801f7bc
 801a34c:	0801fb90 	.word	0x0801fb90
 801a350:	0801f834 	.word	0x0801f834

0801a354 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a354:	b480      	push	{r7}
 801a356:	b083      	sub	sp, #12
 801a358:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a35a:	4b15      	ldr	r3, [pc, #84]	; (801a3b0 <tcp_get_next_optbyte+0x5c>)
 801a35c:	881b      	ldrh	r3, [r3, #0]
 801a35e:	1c5a      	adds	r2, r3, #1
 801a360:	b291      	uxth	r1, r2
 801a362:	4a13      	ldr	r2, [pc, #76]	; (801a3b0 <tcp_get_next_optbyte+0x5c>)
 801a364:	8011      	strh	r1, [r2, #0]
 801a366:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a368:	4b12      	ldr	r3, [pc, #72]	; (801a3b4 <tcp_get_next_optbyte+0x60>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d004      	beq.n	801a37a <tcp_get_next_optbyte+0x26>
 801a370:	4b11      	ldr	r3, [pc, #68]	; (801a3b8 <tcp_get_next_optbyte+0x64>)
 801a372:	881b      	ldrh	r3, [r3, #0]
 801a374:	88fa      	ldrh	r2, [r7, #6]
 801a376:	429a      	cmp	r2, r3
 801a378:	d208      	bcs.n	801a38c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a37a:	4b10      	ldr	r3, [pc, #64]	; (801a3bc <tcp_get_next_optbyte+0x68>)
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	3314      	adds	r3, #20
 801a380:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a382:	88fb      	ldrh	r3, [r7, #6]
 801a384:	683a      	ldr	r2, [r7, #0]
 801a386:	4413      	add	r3, r2
 801a388:	781b      	ldrb	r3, [r3, #0]
 801a38a:	e00b      	b.n	801a3a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a38c:	88fb      	ldrh	r3, [r7, #6]
 801a38e:	b2da      	uxtb	r2, r3
 801a390:	4b09      	ldr	r3, [pc, #36]	; (801a3b8 <tcp_get_next_optbyte+0x64>)
 801a392:	881b      	ldrh	r3, [r3, #0]
 801a394:	b2db      	uxtb	r3, r3
 801a396:	1ad3      	subs	r3, r2, r3
 801a398:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a39a:	4b06      	ldr	r3, [pc, #24]	; (801a3b4 <tcp_get_next_optbyte+0x60>)
 801a39c:	681a      	ldr	r2, [r3, #0]
 801a39e:	797b      	ldrb	r3, [r7, #5]
 801a3a0:	4413      	add	r3, r2
 801a3a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	370c      	adds	r7, #12
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ae:	4770      	bx	lr
 801a3b0:	200075c8 	.word	0x200075c8
 801a3b4:	200075c4 	.word	0x200075c4
 801a3b8:	200075c2 	.word	0x200075c2
 801a3bc:	200075bc 	.word	0x200075bc

0801a3c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d106      	bne.n	801a3dc <tcp_parseopt+0x1c>
 801a3ce:	4b31      	ldr	r3, [pc, #196]	; (801a494 <tcp_parseopt+0xd4>)
 801a3d0:	f240 727d 	movw	r2, #1917	; 0x77d
 801a3d4:	4930      	ldr	r1, [pc, #192]	; (801a498 <tcp_parseopt+0xd8>)
 801a3d6:	4831      	ldr	r0, [pc, #196]	; (801a49c <tcp_parseopt+0xdc>)
 801a3d8:	f002 fb56 	bl	801ca88 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a3dc:	4b30      	ldr	r3, [pc, #192]	; (801a4a0 <tcp_parseopt+0xe0>)
 801a3de:	881b      	ldrh	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d053      	beq.n	801a48c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a3e4:	4b2f      	ldr	r3, [pc, #188]	; (801a4a4 <tcp_parseopt+0xe4>)
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	801a      	strh	r2, [r3, #0]
 801a3ea:	e043      	b.n	801a474 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a3ec:	f7ff ffb2 	bl	801a354 <tcp_get_next_optbyte>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a3f4:	7bfb      	ldrb	r3, [r7, #15]
 801a3f6:	2b01      	cmp	r3, #1
 801a3f8:	d03c      	beq.n	801a474 <tcp_parseopt+0xb4>
 801a3fa:	2b02      	cmp	r3, #2
 801a3fc:	d002      	beq.n	801a404 <tcp_parseopt+0x44>
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d03f      	beq.n	801a482 <tcp_parseopt+0xc2>
 801a402:	e026      	b.n	801a452 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a404:	f7ff ffa6 	bl	801a354 <tcp_get_next_optbyte>
 801a408:	4603      	mov	r3, r0
 801a40a:	2b04      	cmp	r3, #4
 801a40c:	d13b      	bne.n	801a486 <tcp_parseopt+0xc6>
 801a40e:	4b25      	ldr	r3, [pc, #148]	; (801a4a4 <tcp_parseopt+0xe4>)
 801a410:	881b      	ldrh	r3, [r3, #0]
 801a412:	3302      	adds	r3, #2
 801a414:	4a22      	ldr	r2, [pc, #136]	; (801a4a0 <tcp_parseopt+0xe0>)
 801a416:	8812      	ldrh	r2, [r2, #0]
 801a418:	4293      	cmp	r3, r2
 801a41a:	dc34      	bgt.n	801a486 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a41c:	f7ff ff9a 	bl	801a354 <tcp_get_next_optbyte>
 801a420:	4603      	mov	r3, r0
 801a422:	b29b      	uxth	r3, r3
 801a424:	021b      	lsls	r3, r3, #8
 801a426:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a428:	f7ff ff94 	bl	801a354 <tcp_get_next_optbyte>
 801a42c:	4603      	mov	r3, r0
 801a42e:	b29a      	uxth	r2, r3
 801a430:	89bb      	ldrh	r3, [r7, #12]
 801a432:	4313      	orrs	r3, r2
 801a434:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a436:	89bb      	ldrh	r3, [r7, #12]
 801a438:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a43c:	d804      	bhi.n	801a448 <tcp_parseopt+0x88>
 801a43e:	89bb      	ldrh	r3, [r7, #12]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d001      	beq.n	801a448 <tcp_parseopt+0x88>
 801a444:	89ba      	ldrh	r2, [r7, #12]
 801a446:	e001      	b.n	801a44c <tcp_parseopt+0x8c>
 801a448:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a450:	e010      	b.n	801a474 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a452:	f7ff ff7f 	bl	801a354 <tcp_get_next_optbyte>
 801a456:	4603      	mov	r3, r0
 801a458:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a45a:	7afb      	ldrb	r3, [r7, #11]
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	d914      	bls.n	801a48a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a460:	7afb      	ldrb	r3, [r7, #11]
 801a462:	b29a      	uxth	r2, r3
 801a464:	4b0f      	ldr	r3, [pc, #60]	; (801a4a4 <tcp_parseopt+0xe4>)
 801a466:	881b      	ldrh	r3, [r3, #0]
 801a468:	4413      	add	r3, r2
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	3b02      	subs	r3, #2
 801a46e:	b29a      	uxth	r2, r3
 801a470:	4b0c      	ldr	r3, [pc, #48]	; (801a4a4 <tcp_parseopt+0xe4>)
 801a472:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a474:	4b0b      	ldr	r3, [pc, #44]	; (801a4a4 <tcp_parseopt+0xe4>)
 801a476:	881a      	ldrh	r2, [r3, #0]
 801a478:	4b09      	ldr	r3, [pc, #36]	; (801a4a0 <tcp_parseopt+0xe0>)
 801a47a:	881b      	ldrh	r3, [r3, #0]
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d3b5      	bcc.n	801a3ec <tcp_parseopt+0x2c>
 801a480:	e004      	b.n	801a48c <tcp_parseopt+0xcc>
          return;
 801a482:	bf00      	nop
 801a484:	e002      	b.n	801a48c <tcp_parseopt+0xcc>
            return;
 801a486:	bf00      	nop
 801a488:	e000      	b.n	801a48c <tcp_parseopt+0xcc>
            return;
 801a48a:	bf00      	nop
      }
    }
  }
}
 801a48c:	3710      	adds	r7, #16
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	0801f7bc 	.word	0x0801f7bc
 801a498:	0801fc4c 	.word	0x0801fc4c
 801a49c:	0801f834 	.word	0x0801f834
 801a4a0:	200075c0 	.word	0x200075c0
 801a4a4:	200075c8 	.word	0x200075c8

0801a4a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a4a8:	b480      	push	{r7}
 801a4aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a4ac:	4b05      	ldr	r3, [pc, #20]	; (801a4c4 <tcp_trigger_input_pcb_close+0x1c>)
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	f043 0310 	orr.w	r3, r3, #16
 801a4b4:	b2da      	uxtb	r2, r3
 801a4b6:	4b03      	ldr	r3, [pc, #12]	; (801a4c4 <tcp_trigger_input_pcb_close+0x1c>)
 801a4b8:	701a      	strb	r2, [r3, #0]
}
 801a4ba:	bf00      	nop
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c2:	4770      	bx	lr
 801a4c4:	200075d9 	.word	0x200075d9

0801a4c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b084      	sub	sp, #16
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	60f8      	str	r0, [r7, #12]
 801a4d0:	60b9      	str	r1, [r7, #8]
 801a4d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d00a      	beq.n	801a4f0 <tcp_route+0x28>
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	7a1b      	ldrb	r3, [r3, #8]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d006      	beq.n	801a4f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	7a1b      	ldrb	r3, [r3, #8]
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	f7fb fa34 	bl	8015954 <netif_get_by_index>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	e003      	b.n	801a4f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	f7f9 f8d1 	bl	8013698 <ip4_route>
 801a4f6:	4603      	mov	r3, r0
  }
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	3710      	adds	r7, #16
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a500:	b590      	push	{r4, r7, lr}
 801a502:	b087      	sub	sp, #28
 801a504:	af00      	add	r7, sp, #0
 801a506:	60f8      	str	r0, [r7, #12]
 801a508:	60b9      	str	r1, [r7, #8]
 801a50a:	603b      	str	r3, [r7, #0]
 801a50c:	4613      	mov	r3, r2
 801a50e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d105      	bne.n	801a522 <tcp_create_segment+0x22>
 801a516:	4b44      	ldr	r3, [pc, #272]	; (801a628 <tcp_create_segment+0x128>)
 801a518:	22a3      	movs	r2, #163	; 0xa3
 801a51a:	4944      	ldr	r1, [pc, #272]	; (801a62c <tcp_create_segment+0x12c>)
 801a51c:	4844      	ldr	r0, [pc, #272]	; (801a630 <tcp_create_segment+0x130>)
 801a51e:	f002 fab3 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a522:	68bb      	ldr	r3, [r7, #8]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d105      	bne.n	801a534 <tcp_create_segment+0x34>
 801a528:	4b3f      	ldr	r3, [pc, #252]	; (801a628 <tcp_create_segment+0x128>)
 801a52a:	22a4      	movs	r2, #164	; 0xa4
 801a52c:	4941      	ldr	r1, [pc, #260]	; (801a634 <tcp_create_segment+0x134>)
 801a52e:	4840      	ldr	r0, [pc, #256]	; (801a630 <tcp_create_segment+0x130>)
 801a530:	f002 faaa 	bl	801ca88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a538:	009b      	lsls	r3, r3, #2
 801a53a:	b2db      	uxtb	r3, r3
 801a53c:	f003 0304 	and.w	r3, r3, #4
 801a540:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a542:	2003      	movs	r0, #3
 801a544:	f7fa fe6e 	bl	8015224 <memp_malloc>
 801a548:	6138      	str	r0, [r7, #16]
 801a54a:	693b      	ldr	r3, [r7, #16]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d104      	bne.n	801a55a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a550:	68b8      	ldr	r0, [r7, #8]
 801a552:	f7fb fd89 	bl	8016068 <pbuf_free>
    return NULL;
 801a556:	2300      	movs	r3, #0
 801a558:	e061      	b.n	801a61e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a560:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a562:	693b      	ldr	r3, [r7, #16]
 801a564:	2200      	movs	r2, #0
 801a566:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a568:	693b      	ldr	r3, [r7, #16]
 801a56a:	68ba      	ldr	r2, [r7, #8]
 801a56c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	891a      	ldrh	r2, [r3, #8]
 801a572:	7dfb      	ldrb	r3, [r7, #23]
 801a574:	b29b      	uxth	r3, r3
 801a576:	429a      	cmp	r2, r3
 801a578:	d205      	bcs.n	801a586 <tcp_create_segment+0x86>
 801a57a:	4b2b      	ldr	r3, [pc, #172]	; (801a628 <tcp_create_segment+0x128>)
 801a57c:	22b0      	movs	r2, #176	; 0xb0
 801a57e:	492e      	ldr	r1, [pc, #184]	; (801a638 <tcp_create_segment+0x138>)
 801a580:	482b      	ldr	r0, [pc, #172]	; (801a630 <tcp_create_segment+0x130>)
 801a582:	f002 fa81 	bl	801ca88 <iprintf>
  seg->len = p->tot_len - optlen;
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	891a      	ldrh	r2, [r3, #8]
 801a58a:	7dfb      	ldrb	r3, [r7, #23]
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	1ad3      	subs	r3, r2, r3
 801a590:	b29a      	uxth	r2, r3
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a596:	2114      	movs	r1, #20
 801a598:	68b8      	ldr	r0, [r7, #8]
 801a59a:	f7fb fccf 	bl	8015f3c <pbuf_add_header>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d004      	beq.n	801a5ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a5a4:	6938      	ldr	r0, [r7, #16]
 801a5a6:	f7fd f8d5 	bl	8017754 <tcp_seg_free>
    return NULL;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	e037      	b.n	801a61e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a5ae:	693b      	ldr	r3, [r7, #16]
 801a5b0:	685b      	ldr	r3, [r3, #4]
 801a5b2:	685a      	ldr	r2, [r3, #4]
 801a5b4:	693b      	ldr	r3, [r7, #16]
 801a5b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	8ada      	ldrh	r2, [r3, #22]
 801a5bc:	693b      	ldr	r3, [r7, #16]
 801a5be:	68dc      	ldr	r4, [r3, #12]
 801a5c0:	4610      	mov	r0, r2
 801a5c2:	f7f5 fee9 	bl	8010398 <lwip_htons>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	8b1a      	ldrh	r2, [r3, #24]
 801a5ce:	693b      	ldr	r3, [r7, #16]
 801a5d0:	68dc      	ldr	r4, [r3, #12]
 801a5d2:	4610      	mov	r0, r2
 801a5d4:	f7f5 fee0 	bl	8010398 <lwip_htons>
 801a5d8:	4603      	mov	r3, r0
 801a5da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a5dc:	693b      	ldr	r3, [r7, #16]
 801a5de:	68dc      	ldr	r4, [r3, #12]
 801a5e0:	6838      	ldr	r0, [r7, #0]
 801a5e2:	f7f5 feee 	bl	80103c2 <lwip_htonl>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a5ea:	7dfb      	ldrb	r3, [r7, #23]
 801a5ec:	089b      	lsrs	r3, r3, #2
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	3305      	adds	r3, #5
 801a5f4:	b29b      	uxth	r3, r3
 801a5f6:	031b      	lsls	r3, r3, #12
 801a5f8:	b29a      	uxth	r2, r3
 801a5fa:	79fb      	ldrb	r3, [r7, #7]
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	4313      	orrs	r3, r2
 801a600:	b29a      	uxth	r2, r3
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	68dc      	ldr	r4, [r3, #12]
 801a606:	4610      	mov	r0, r2
 801a608:	f7f5 fec6 	bl	8010398 <lwip_htons>
 801a60c:	4603      	mov	r3, r0
 801a60e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	68db      	ldr	r3, [r3, #12]
 801a614:	2200      	movs	r2, #0
 801a616:	749a      	strb	r2, [r3, #18]
 801a618:	2200      	movs	r2, #0
 801a61a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a61c:	693b      	ldr	r3, [r7, #16]
}
 801a61e:	4618      	mov	r0, r3
 801a620:	371c      	adds	r7, #28
 801a622:	46bd      	mov	sp, r7
 801a624:	bd90      	pop	{r4, r7, pc}
 801a626:	bf00      	nop
 801a628:	0801fc68 	.word	0x0801fc68
 801a62c:	0801fcc8 	.word	0x0801fcc8
 801a630:	0801fce8 	.word	0x0801fce8
 801a634:	0801fd10 	.word	0x0801fd10
 801a638:	0801fd34 	.word	0x0801fd34

0801a63c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a63c:	b590      	push	{r4, r7, lr}
 801a63e:	b08b      	sub	sp, #44	; 0x2c
 801a640:	af02      	add	r7, sp, #8
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	460b      	mov	r3, r1
 801a646:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a648:	2300      	movs	r3, #0
 801a64a:	61fb      	str	r3, [r7, #28]
 801a64c:	2300      	movs	r3, #0
 801a64e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a650:	2300      	movs	r3, #0
 801a652:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d106      	bne.n	801a668 <tcp_split_unsent_seg+0x2c>
 801a65a:	4b95      	ldr	r3, [pc, #596]	; (801a8b0 <tcp_split_unsent_seg+0x274>)
 801a65c:	f240 324b 	movw	r2, #843	; 0x34b
 801a660:	4994      	ldr	r1, [pc, #592]	; (801a8b4 <tcp_split_unsent_seg+0x278>)
 801a662:	4895      	ldr	r0, [pc, #596]	; (801a8b8 <tcp_split_unsent_seg+0x27c>)
 801a664:	f002 fa10 	bl	801ca88 <iprintf>

  useg = pcb->unsent;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a66c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a66e:	697b      	ldr	r3, [r7, #20]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d102      	bne.n	801a67a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a678:	e116      	b.n	801a8a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a67a:	887b      	ldrh	r3, [r7, #2]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d109      	bne.n	801a694 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a680:	4b8b      	ldr	r3, [pc, #556]	; (801a8b0 <tcp_split_unsent_seg+0x274>)
 801a682:	f240 3253 	movw	r2, #851	; 0x353
 801a686:	498d      	ldr	r1, [pc, #564]	; (801a8bc <tcp_split_unsent_seg+0x280>)
 801a688:	488b      	ldr	r0, [pc, #556]	; (801a8b8 <tcp_split_unsent_seg+0x27c>)
 801a68a:	f002 f9fd 	bl	801ca88 <iprintf>
    return ERR_VAL;
 801a68e:	f06f 0305 	mvn.w	r3, #5
 801a692:	e109      	b.n	801a8a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	891b      	ldrh	r3, [r3, #8]
 801a698:	887a      	ldrh	r2, [r7, #2]
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d301      	bcc.n	801a6a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a69e:	2300      	movs	r3, #0
 801a6a0:	e102      	b.n	801a8a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a6a6:	887a      	ldrh	r2, [r7, #2]
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d906      	bls.n	801a6ba <tcp_split_unsent_seg+0x7e>
 801a6ac:	4b80      	ldr	r3, [pc, #512]	; (801a8b0 <tcp_split_unsent_seg+0x274>)
 801a6ae:	f240 325b 	movw	r2, #859	; 0x35b
 801a6b2:	4983      	ldr	r1, [pc, #524]	; (801a8c0 <tcp_split_unsent_seg+0x284>)
 801a6b4:	4880      	ldr	r0, [pc, #512]	; (801a8b8 <tcp_split_unsent_seg+0x27c>)
 801a6b6:	f002 f9e7 	bl	801ca88 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a6ba:	697b      	ldr	r3, [r7, #20]
 801a6bc:	891b      	ldrh	r3, [r3, #8]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d106      	bne.n	801a6d0 <tcp_split_unsent_seg+0x94>
 801a6c2:	4b7b      	ldr	r3, [pc, #492]	; (801a8b0 <tcp_split_unsent_seg+0x274>)
 801a6c4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a6c8:	497e      	ldr	r1, [pc, #504]	; (801a8c4 <tcp_split_unsent_seg+0x288>)
 801a6ca:	487b      	ldr	r0, [pc, #492]	; (801a8b8 <tcp_split_unsent_seg+0x27c>)
 801a6cc:	f002 f9dc 	bl	801ca88 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	7a9b      	ldrb	r3, [r3, #10]
 801a6d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a6d6:	7bfb      	ldrb	r3, [r7, #15]
 801a6d8:	009b      	lsls	r3, r3, #2
 801a6da:	b2db      	uxtb	r3, r3
 801a6dc:	f003 0304 	and.w	r3, r3, #4
 801a6e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a6e2:	697b      	ldr	r3, [r7, #20]
 801a6e4:	891a      	ldrh	r2, [r3, #8]
 801a6e6:	887b      	ldrh	r3, [r7, #2]
 801a6e8:	1ad3      	subs	r3, r2, r3
 801a6ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a6ec:	7bbb      	ldrb	r3, [r7, #14]
 801a6ee:	b29a      	uxth	r2, r3
 801a6f0:	89bb      	ldrh	r3, [r7, #12]
 801a6f2:	4413      	add	r3, r2
 801a6f4:	b29b      	uxth	r3, r3
 801a6f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6fa:	4619      	mov	r1, r3
 801a6fc:	2036      	movs	r0, #54	; 0x36
 801a6fe:	f7fb f9d3 	bl	8015aa8 <pbuf_alloc>
 801a702:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a704:	693b      	ldr	r3, [r7, #16]
 801a706:	2b00      	cmp	r3, #0
 801a708:	f000 80b7 	beq.w	801a87a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a70c:	697b      	ldr	r3, [r7, #20]
 801a70e:	685b      	ldr	r3, [r3, #4]
 801a710:	891a      	ldrh	r2, [r3, #8]
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	891b      	ldrh	r3, [r3, #8]
 801a716:	1ad3      	subs	r3, r2, r3
 801a718:	b29a      	uxth	r2, r3
 801a71a:	887b      	ldrh	r3, [r7, #2]
 801a71c:	4413      	add	r3, r2
 801a71e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	6858      	ldr	r0, [r3, #4]
 801a724:	693b      	ldr	r3, [r7, #16]
 801a726:	685a      	ldr	r2, [r3, #4]
 801a728:	7bbb      	ldrb	r3, [r7, #14]
 801a72a:	18d1      	adds	r1, r2, r3
 801a72c:	897b      	ldrh	r3, [r7, #10]
 801a72e:	89ba      	ldrh	r2, [r7, #12]
 801a730:	f7fb fea0 	bl	8016474 <pbuf_copy_partial>
 801a734:	4603      	mov	r3, r0
 801a736:	461a      	mov	r2, r3
 801a738:	89bb      	ldrh	r3, [r7, #12]
 801a73a:	4293      	cmp	r3, r2
 801a73c:	f040 809f 	bne.w	801a87e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	68db      	ldr	r3, [r3, #12]
 801a744:	899b      	ldrh	r3, [r3, #12]
 801a746:	b29b      	uxth	r3, r3
 801a748:	4618      	mov	r0, r3
 801a74a:	f7f5 fe25 	bl	8010398 <lwip_htons>
 801a74e:	4603      	mov	r3, r0
 801a750:	b2db      	uxtb	r3, r3
 801a752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a756:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a758:	2300      	movs	r3, #0
 801a75a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a75c:	7efb      	ldrb	r3, [r7, #27]
 801a75e:	f003 0308 	and.w	r3, r3, #8
 801a762:	2b00      	cmp	r3, #0
 801a764:	d007      	beq.n	801a776 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a766:	7efb      	ldrb	r3, [r7, #27]
 801a768:	f023 0308 	bic.w	r3, r3, #8
 801a76c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a76e:	7ebb      	ldrb	r3, [r7, #26]
 801a770:	f043 0308 	orr.w	r3, r3, #8
 801a774:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a776:	7efb      	ldrb	r3, [r7, #27]
 801a778:	f003 0301 	and.w	r3, r3, #1
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d007      	beq.n	801a790 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a780:	7efb      	ldrb	r3, [r7, #27]
 801a782:	f023 0301 	bic.w	r3, r3, #1
 801a786:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a788:	7ebb      	ldrb	r3, [r7, #26]
 801a78a:	f043 0301 	orr.w	r3, r3, #1
 801a78e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	68db      	ldr	r3, [r3, #12]
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	4618      	mov	r0, r3
 801a798:	f7f5 fe13 	bl	80103c2 <lwip_htonl>
 801a79c:	4602      	mov	r2, r0
 801a79e:	887b      	ldrh	r3, [r7, #2]
 801a7a0:	18d1      	adds	r1, r2, r3
 801a7a2:	7eba      	ldrb	r2, [r7, #26]
 801a7a4:	7bfb      	ldrb	r3, [r7, #15]
 801a7a6:	9300      	str	r3, [sp, #0]
 801a7a8:	460b      	mov	r3, r1
 801a7aa:	6939      	ldr	r1, [r7, #16]
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f7ff fea7 	bl	801a500 <tcp_create_segment>
 801a7b2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a7b4:	69fb      	ldr	r3, [r7, #28]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d063      	beq.n	801a882 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7fb fce0 	bl	8016184 <pbuf_clen>
 801a7c4:	4603      	mov	r3, r0
 801a7c6:	461a      	mov	r2, r3
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a7ce:	1a9b      	subs	r3, r3, r2
 801a7d0:	b29a      	uxth	r2, r3
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	6858      	ldr	r0, [r3, #4]
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	685b      	ldr	r3, [r3, #4]
 801a7e0:	891a      	ldrh	r2, [r3, #8]
 801a7e2:	89bb      	ldrh	r3, [r7, #12]
 801a7e4:	1ad3      	subs	r3, r2, r3
 801a7e6:	b29b      	uxth	r3, r3
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	f7fb fab7 	bl	8015d5c <pbuf_realloc>
  useg->len -= remainder;
 801a7ee:	697b      	ldr	r3, [r7, #20]
 801a7f0:	891a      	ldrh	r2, [r3, #8]
 801a7f2:	89bb      	ldrh	r3, [r7, #12]
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	b29a      	uxth	r2, r3
 801a7f8:	697b      	ldr	r3, [r7, #20]
 801a7fa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	68db      	ldr	r3, [r3, #12]
 801a800:	899b      	ldrh	r3, [r3, #12]
 801a802:	b29c      	uxth	r4, r3
 801a804:	7efb      	ldrb	r3, [r7, #27]
 801a806:	b29b      	uxth	r3, r3
 801a808:	4618      	mov	r0, r3
 801a80a:	f7f5 fdc5 	bl	8010398 <lwip_htons>
 801a80e:	4603      	mov	r3, r0
 801a810:	461a      	mov	r2, r3
 801a812:	697b      	ldr	r3, [r7, #20]
 801a814:	68db      	ldr	r3, [r3, #12]
 801a816:	4322      	orrs	r2, r4
 801a818:	b292      	uxth	r2, r2
 801a81a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a81c:	697b      	ldr	r3, [r7, #20]
 801a81e:	685b      	ldr	r3, [r3, #4]
 801a820:	4618      	mov	r0, r3
 801a822:	f7fb fcaf 	bl	8016184 <pbuf_clen>
 801a826:	4603      	mov	r3, r0
 801a828:	461a      	mov	r2, r3
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a830:	4413      	add	r3, r2
 801a832:	b29a      	uxth	r2, r3
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a83a:	69fb      	ldr	r3, [r7, #28]
 801a83c:	685b      	ldr	r3, [r3, #4]
 801a83e:	4618      	mov	r0, r3
 801a840:	f7fb fca0 	bl	8016184 <pbuf_clen>
 801a844:	4603      	mov	r3, r0
 801a846:	461a      	mov	r2, r3
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a84e:	4413      	add	r3, r2
 801a850:	b29a      	uxth	r2, r3
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	69fb      	ldr	r3, [r7, #28]
 801a85e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	69fa      	ldr	r2, [r7, #28]
 801a864:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d103      	bne.n	801a876 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	2200      	movs	r2, #0
 801a872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a876:	2300      	movs	r3, #0
 801a878:	e016      	b.n	801a8a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a87a:	bf00      	nop
 801a87c:	e002      	b.n	801a884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a87e:	bf00      	nop
 801a880:	e000      	b.n	801a884 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a882:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a884:	69fb      	ldr	r3, [r7, #28]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d006      	beq.n	801a898 <tcp_split_unsent_seg+0x25c>
 801a88a:	4b09      	ldr	r3, [pc, #36]	; (801a8b0 <tcp_split_unsent_seg+0x274>)
 801a88c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a890:	490d      	ldr	r1, [pc, #52]	; (801a8c8 <tcp_split_unsent_seg+0x28c>)
 801a892:	4809      	ldr	r0, [pc, #36]	; (801a8b8 <tcp_split_unsent_seg+0x27c>)
 801a894:	f002 f8f8 	bl	801ca88 <iprintf>
  if (p != NULL) {
 801a898:	693b      	ldr	r3, [r7, #16]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d002      	beq.n	801a8a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a89e:	6938      	ldr	r0, [r7, #16]
 801a8a0:	f7fb fbe2 	bl	8016068 <pbuf_free>
  }

  return ERR_MEM;
 801a8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	3724      	adds	r7, #36	; 0x24
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd90      	pop	{r4, r7, pc}
 801a8b0:	0801fc68 	.word	0x0801fc68
 801a8b4:	08020028 	.word	0x08020028
 801a8b8:	0801fce8 	.word	0x0801fce8
 801a8bc:	0802004c 	.word	0x0802004c
 801a8c0:	08020070 	.word	0x08020070
 801a8c4:	08020080 	.word	0x08020080
 801a8c8:	08020090 	.word	0x08020090

0801a8cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a8cc:	b590      	push	{r4, r7, lr}
 801a8ce:	b085      	sub	sp, #20
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d106      	bne.n	801a8e8 <tcp_send_fin+0x1c>
 801a8da:	4b21      	ldr	r3, [pc, #132]	; (801a960 <tcp_send_fin+0x94>)
 801a8dc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a8e0:	4920      	ldr	r1, [pc, #128]	; (801a964 <tcp_send_fin+0x98>)
 801a8e2:	4821      	ldr	r0, [pc, #132]	; (801a968 <tcp_send_fin+0x9c>)
 801a8e4:	f002 f8d0 	bl	801ca88 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d02e      	beq.n	801a94e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8f4:	60fb      	str	r3, [r7, #12]
 801a8f6:	e002      	b.n	801a8fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d1f8      	bne.n	801a8f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	68db      	ldr	r3, [r3, #12]
 801a90a:	899b      	ldrh	r3, [r3, #12]
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	4618      	mov	r0, r3
 801a910:	f7f5 fd42 	bl	8010398 <lwip_htons>
 801a914:	4603      	mov	r3, r0
 801a916:	b2db      	uxtb	r3, r3
 801a918:	f003 0307 	and.w	r3, r3, #7
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d116      	bne.n	801a94e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	68db      	ldr	r3, [r3, #12]
 801a924:	899b      	ldrh	r3, [r3, #12]
 801a926:	b29c      	uxth	r4, r3
 801a928:	2001      	movs	r0, #1
 801a92a:	f7f5 fd35 	bl	8010398 <lwip_htons>
 801a92e:	4603      	mov	r3, r0
 801a930:	461a      	mov	r2, r3
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	68db      	ldr	r3, [r3, #12]
 801a936:	4322      	orrs	r2, r4
 801a938:	b292      	uxth	r2, r2
 801a93a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	8b5b      	ldrh	r3, [r3, #26]
 801a940:	f043 0320 	orr.w	r3, r3, #32
 801a944:	b29a      	uxth	r2, r3
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a94a:	2300      	movs	r3, #0
 801a94c:	e004      	b.n	801a958 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a94e:	2101      	movs	r1, #1
 801a950:	6878      	ldr	r0, [r7, #4]
 801a952:	f000 f80b 	bl	801a96c <tcp_enqueue_flags>
 801a956:	4603      	mov	r3, r0
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3714      	adds	r7, #20
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd90      	pop	{r4, r7, pc}
 801a960:	0801fc68 	.word	0x0801fc68
 801a964:	0802009c 	.word	0x0802009c
 801a968:	0801fce8 	.word	0x0801fce8

0801a96c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b08a      	sub	sp, #40	; 0x28
 801a970:	af02      	add	r7, sp, #8
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	460b      	mov	r3, r1
 801a976:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a978:	2300      	movs	r3, #0
 801a97a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a97c:	2300      	movs	r3, #0
 801a97e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a980:	78fb      	ldrb	r3, [r7, #3]
 801a982:	f003 0303 	and.w	r3, r3, #3
 801a986:	2b00      	cmp	r3, #0
 801a988:	d106      	bne.n	801a998 <tcp_enqueue_flags+0x2c>
 801a98a:	4b67      	ldr	r3, [pc, #412]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801a98c:	f240 4212 	movw	r2, #1042	; 0x412
 801a990:	4966      	ldr	r1, [pc, #408]	; (801ab2c <tcp_enqueue_flags+0x1c0>)
 801a992:	4867      	ldr	r0, [pc, #412]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801a994:	f002 f878 	bl	801ca88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d106      	bne.n	801a9ac <tcp_enqueue_flags+0x40>
 801a99e:	4b62      	ldr	r3, [pc, #392]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801a9a0:	f240 4213 	movw	r2, #1043	; 0x413
 801a9a4:	4963      	ldr	r1, [pc, #396]	; (801ab34 <tcp_enqueue_flags+0x1c8>)
 801a9a6:	4862      	ldr	r0, [pc, #392]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801a9a8:	f002 f86e 	bl	801ca88 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a9ac:	78fb      	ldrb	r3, [r7, #3]
 801a9ae:	f003 0302 	and.w	r3, r3, #2
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d001      	beq.n	801a9ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a9ba:	7ffb      	ldrb	r3, [r7, #31]
 801a9bc:	009b      	lsls	r3, r3, #2
 801a9be:	b2db      	uxtb	r3, r3
 801a9c0:	f003 0304 	and.w	r3, r3, #4
 801a9c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a9c6:	7dfb      	ldrb	r3, [r7, #23]
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9ce:	4619      	mov	r1, r3
 801a9d0:	2036      	movs	r0, #54	; 0x36
 801a9d2:	f7fb f869 	bl	8015aa8 <pbuf_alloc>
 801a9d6:	6138      	str	r0, [r7, #16]
 801a9d8:	693b      	ldr	r3, [r7, #16]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d109      	bne.n	801a9f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	8b5b      	ldrh	r3, [r3, #26]
 801a9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9e6:	b29a      	uxth	r2, r3
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9f0:	e095      	b.n	801ab1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a9f2:	693b      	ldr	r3, [r7, #16]
 801a9f4:	895a      	ldrh	r2, [r3, #10]
 801a9f6:	7dfb      	ldrb	r3, [r7, #23]
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	429a      	cmp	r2, r3
 801a9fc:	d206      	bcs.n	801aa0c <tcp_enqueue_flags+0xa0>
 801a9fe:	4b4a      	ldr	r3, [pc, #296]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801aa00:	f240 423a 	movw	r2, #1082	; 0x43a
 801aa04:	494c      	ldr	r1, [pc, #304]	; (801ab38 <tcp_enqueue_flags+0x1cc>)
 801aa06:	484a      	ldr	r0, [pc, #296]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801aa08:	f002 f83e 	bl	801ca88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801aa10:	78fa      	ldrb	r2, [r7, #3]
 801aa12:	7ffb      	ldrb	r3, [r7, #31]
 801aa14:	9300      	str	r3, [sp, #0]
 801aa16:	460b      	mov	r3, r1
 801aa18:	6939      	ldr	r1, [r7, #16]
 801aa1a:	6878      	ldr	r0, [r7, #4]
 801aa1c:	f7ff fd70 	bl	801a500 <tcp_create_segment>
 801aa20:	60f8      	str	r0, [r7, #12]
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d109      	bne.n	801aa3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	8b5b      	ldrh	r3, [r3, #26]
 801aa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa30:	b29a      	uxth	r2, r3
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801aa36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa3a:	e070      	b.n	801ab1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	68db      	ldr	r3, [r3, #12]
 801aa40:	f003 0303 	and.w	r3, r3, #3
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d006      	beq.n	801aa56 <tcp_enqueue_flags+0xea>
 801aa48:	4b37      	ldr	r3, [pc, #220]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801aa4a:	f240 4242 	movw	r2, #1090	; 0x442
 801aa4e:	493b      	ldr	r1, [pc, #236]	; (801ab3c <tcp_enqueue_flags+0x1d0>)
 801aa50:	4837      	ldr	r0, [pc, #220]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801aa52:	f002 f819 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	891b      	ldrh	r3, [r3, #8]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d006      	beq.n	801aa6c <tcp_enqueue_flags+0x100>
 801aa5e:	4b32      	ldr	r3, [pc, #200]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801aa60:	f240 4243 	movw	r2, #1091	; 0x443
 801aa64:	4936      	ldr	r1, [pc, #216]	; (801ab40 <tcp_enqueue_flags+0x1d4>)
 801aa66:	4832      	ldr	r0, [pc, #200]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801aa68:	f002 f80e 	bl	801ca88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d103      	bne.n	801aa7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	68fa      	ldr	r2, [r7, #12]
 801aa78:	66da      	str	r2, [r3, #108]	; 0x6c
 801aa7a:	e00d      	b.n	801aa98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa80:	61bb      	str	r3, [r7, #24]
 801aa82:	e002      	b.n	801aa8a <tcp_enqueue_flags+0x11e>
 801aa84:	69bb      	ldr	r3, [r7, #24]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	61bb      	str	r3, [r7, #24]
 801aa8a:	69bb      	ldr	r3, [r7, #24]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d1f8      	bne.n	801aa84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801aa92:	69bb      	ldr	r3, [r7, #24]
 801aa94:	68fa      	ldr	r2, [r7, #12]
 801aa96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801aaa0:	78fb      	ldrb	r3, [r7, #3]
 801aaa2:	f003 0302 	and.w	r3, r3, #2
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d104      	bne.n	801aab4 <tcp_enqueue_flags+0x148>
 801aaaa:	78fb      	ldrb	r3, [r7, #3]
 801aaac:	f003 0301 	and.w	r3, r3, #1
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d004      	beq.n	801aabe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aab8:	1c5a      	adds	r2, r3, #1
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801aabe:	78fb      	ldrb	r3, [r7, #3]
 801aac0:	f003 0301 	and.w	r3, r3, #1
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d006      	beq.n	801aad6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	8b5b      	ldrh	r3, [r3, #26]
 801aacc:	f043 0320 	orr.w	r3, r3, #32
 801aad0:	b29a      	uxth	r2, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	685b      	ldr	r3, [r3, #4]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7fb fb52 	bl	8016184 <pbuf_clen>
 801aae0:	4603      	mov	r3, r0
 801aae2:	461a      	mov	r2, r3
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aaea:	4413      	add	r3, r2
 801aaec:	b29a      	uxth	r2, r3
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d00e      	beq.n	801ab1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d10a      	bne.n	801ab1c <tcp_enqueue_flags+0x1b0>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d106      	bne.n	801ab1c <tcp_enqueue_flags+0x1b0>
 801ab0e:	4b06      	ldr	r3, [pc, #24]	; (801ab28 <tcp_enqueue_flags+0x1bc>)
 801ab10:	f240 4266 	movw	r2, #1126	; 0x466
 801ab14:	490b      	ldr	r1, [pc, #44]	; (801ab44 <tcp_enqueue_flags+0x1d8>)
 801ab16:	4806      	ldr	r0, [pc, #24]	; (801ab30 <tcp_enqueue_flags+0x1c4>)
 801ab18:	f001 ffb6 	bl	801ca88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ab1c:	2300      	movs	r3, #0
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	3720      	adds	r7, #32
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	0801fc68 	.word	0x0801fc68
 801ab2c:	080200b8 	.word	0x080200b8
 801ab30:	0801fce8 	.word	0x0801fce8
 801ab34:	08020110 	.word	0x08020110
 801ab38:	08020130 	.word	0x08020130
 801ab3c:	0802016c 	.word	0x0802016c
 801ab40:	08020184 	.word	0x08020184
 801ab44:	080201b0 	.word	0x080201b0

0801ab48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ab48:	b5b0      	push	{r4, r5, r7, lr}
 801ab4a:	b08a      	sub	sp, #40	; 0x28
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d106      	bne.n	801ab64 <tcp_output+0x1c>
 801ab56:	4ba0      	ldr	r3, [pc, #640]	; (801add8 <tcp_output+0x290>)
 801ab58:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ab5c:	499f      	ldr	r1, [pc, #636]	; (801addc <tcp_output+0x294>)
 801ab5e:	48a0      	ldr	r0, [pc, #640]	; (801ade0 <tcp_output+0x298>)
 801ab60:	f001 ff92 	bl	801ca88 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	7d1b      	ldrb	r3, [r3, #20]
 801ab68:	2b01      	cmp	r3, #1
 801ab6a:	d106      	bne.n	801ab7a <tcp_output+0x32>
 801ab6c:	4b9a      	ldr	r3, [pc, #616]	; (801add8 <tcp_output+0x290>)
 801ab6e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801ab72:	499c      	ldr	r1, [pc, #624]	; (801ade4 <tcp_output+0x29c>)
 801ab74:	489a      	ldr	r0, [pc, #616]	; (801ade0 <tcp_output+0x298>)
 801ab76:	f001 ff87 	bl	801ca88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801ab7a:	4b9b      	ldr	r3, [pc, #620]	; (801ade8 <tcp_output+0x2a0>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	687a      	ldr	r2, [r7, #4]
 801ab80:	429a      	cmp	r2, r3
 801ab82:	d101      	bne.n	801ab88 <tcp_output+0x40>
    return ERR_OK;
 801ab84:	2300      	movs	r3, #0
 801ab86:	e1d2      	b.n	801af2e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d203      	bcs.n	801aba0 <tcp_output+0x58>
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ab9e:	e002      	b.n	801aba6 <tcp_output+0x5e>
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aba6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abac:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d10b      	bne.n	801abcc <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	8b5b      	ldrh	r3, [r3, #26]
 801abb8:	f003 0302 	and.w	r3, r3, #2
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	f000 81a9 	beq.w	801af14 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801abc2:	6878      	ldr	r0, [r7, #4]
 801abc4:	f000 fdd8 	bl	801b778 <tcp_send_empty_ack>
 801abc8:	4603      	mov	r3, r0
 801abca:	e1b0      	b.n	801af2e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801abcc:	6879      	ldr	r1, [r7, #4]
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	3304      	adds	r3, #4
 801abd2:	461a      	mov	r2, r3
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f7ff fc77 	bl	801a4c8 <tcp_route>
 801abda:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801abdc:	697b      	ldr	r3, [r7, #20]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d102      	bne.n	801abe8 <tcp_output+0xa0>
    return ERR_RTE;
 801abe2:	f06f 0303 	mvn.w	r3, #3
 801abe6:	e1a2      	b.n	801af2e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d003      	beq.n	801abf6 <tcp_output+0xae>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d111      	bne.n	801ac1a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801abf6:	697b      	ldr	r3, [r7, #20]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d002      	beq.n	801ac02 <tcp_output+0xba>
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	3304      	adds	r3, #4
 801ac00:	e000      	b.n	801ac04 <tcp_output+0xbc>
 801ac02:	2300      	movs	r3, #0
 801ac04:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ac06:	693b      	ldr	r3, [r7, #16]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d102      	bne.n	801ac12 <tcp_output+0xca>
      return ERR_RTE;
 801ac0c:	f06f 0303 	mvn.w	r3, #3
 801ac10:	e18d      	b.n	801af2e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	681a      	ldr	r2, [r3, #0]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac1c:	68db      	ldr	r3, [r3, #12]
 801ac1e:	685b      	ldr	r3, [r3, #4]
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7f5 fbce 	bl	80103c2 <lwip_htonl>
 801ac26:	4602      	mov	r2, r0
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac2c:	1ad3      	subs	r3, r2, r3
 801ac2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac30:	8912      	ldrh	r2, [r2, #8]
 801ac32:	4413      	add	r3, r2
 801ac34:	69ba      	ldr	r2, [r7, #24]
 801ac36:	429a      	cmp	r2, r3
 801ac38:	d227      	bcs.n	801ac8a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ac40:	461a      	mov	r2, r3
 801ac42:	69bb      	ldr	r3, [r7, #24]
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d114      	bne.n	801ac72 <tcp_output+0x12a>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d110      	bne.n	801ac72 <tcp_output+0x12a>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d10b      	bne.n	801ac72 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	2200      	movs	r2, #0
 801ac5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	2201      	movs	r2, #1
 801ac66:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	8b5b      	ldrh	r3, [r3, #26]
 801ac76:	f003 0302 	and.w	r3, r3, #2
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f000 814c 	beq.w	801af18 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801ac80:	6878      	ldr	r0, [r7, #4]
 801ac82:	f000 fd79 	bl	801b778 <tcp_send_empty_ack>
 801ac86:	4603      	mov	r3, r0
 801ac88:	e151      	b.n	801af2e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac96:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ac98:	6a3b      	ldr	r3, [r7, #32]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	f000 811b 	beq.w	801aed6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801aca0:	e002      	b.n	801aca8 <tcp_output+0x160>
 801aca2:	6a3b      	ldr	r3, [r7, #32]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	623b      	str	r3, [r7, #32]
 801aca8:	6a3b      	ldr	r3, [r7, #32]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d1f8      	bne.n	801aca2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801acb0:	e111      	b.n	801aed6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb4:	68db      	ldr	r3, [r3, #12]
 801acb6:	899b      	ldrh	r3, [r3, #12]
 801acb8:	b29b      	uxth	r3, r3
 801acba:	4618      	mov	r0, r3
 801acbc:	f7f5 fb6c 	bl	8010398 <lwip_htons>
 801acc0:	4603      	mov	r3, r0
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	f003 0304 	and.w	r3, r3, #4
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d006      	beq.n	801acda <tcp_output+0x192>
 801accc:	4b42      	ldr	r3, [pc, #264]	; (801add8 <tcp_output+0x290>)
 801acce:	f240 5237 	movw	r2, #1335	; 0x537
 801acd2:	4946      	ldr	r1, [pc, #280]	; (801adec <tcp_output+0x2a4>)
 801acd4:	4842      	ldr	r0, [pc, #264]	; (801ade0 <tcp_output+0x298>)
 801acd6:	f001 fed7 	bl	801ca88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d01f      	beq.n	801ad22 <tcp_output+0x1da>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	8b5b      	ldrh	r3, [r3, #26]
 801ace6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801acea:	2b00      	cmp	r3, #0
 801acec:	d119      	bne.n	801ad22 <tcp_output+0x1da>
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d00b      	beq.n	801ad0e <tcp_output+0x1c6>
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d110      	bne.n	801ad22 <tcp_output+0x1da>
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad04:	891a      	ldrh	r2, [r3, #8]
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d209      	bcs.n	801ad22 <tcp_output+0x1da>
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d004      	beq.n	801ad22 <tcp_output+0x1da>
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ad1e:	2b08      	cmp	r3, #8
 801ad20:	d901      	bls.n	801ad26 <tcp_output+0x1de>
 801ad22:	2301      	movs	r3, #1
 801ad24:	e000      	b.n	801ad28 <tcp_output+0x1e0>
 801ad26:	2300      	movs	r3, #0
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d106      	bne.n	801ad3a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	8b5b      	ldrh	r3, [r3, #26]
 801ad30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	f000 80e3 	beq.w	801af00 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	7d1b      	ldrb	r3, [r3, #20]
 801ad3e:	2b02      	cmp	r3, #2
 801ad40:	d00d      	beq.n	801ad5e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad44:	68db      	ldr	r3, [r3, #12]
 801ad46:	899b      	ldrh	r3, [r3, #12]
 801ad48:	b29c      	uxth	r4, r3
 801ad4a:	2010      	movs	r0, #16
 801ad4c:	f7f5 fb24 	bl	8010398 <lwip_htons>
 801ad50:	4603      	mov	r3, r0
 801ad52:	461a      	mov	r2, r3
 801ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad56:	68db      	ldr	r3, [r3, #12]
 801ad58:	4322      	orrs	r2, r4
 801ad5a:	b292      	uxth	r2, r2
 801ad5c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ad5e:	697a      	ldr	r2, [r7, #20]
 801ad60:	6879      	ldr	r1, [r7, #4]
 801ad62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad64:	f000 f908 	bl	801af78 <tcp_output_segment>
 801ad68:	4603      	mov	r3, r0
 801ad6a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ad6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d009      	beq.n	801ad88 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	8b5b      	ldrh	r3, [r3, #26]
 801ad78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad7c:	b29a      	uxth	r2, r3
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	835a      	strh	r2, [r3, #26]
      return err;
 801ad82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad86:	e0d2      	b.n	801af2e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	7d1b      	ldrb	r3, [r3, #20]
 801ad94:	2b02      	cmp	r3, #2
 801ad96:	d006      	beq.n	801ada6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	8b5b      	ldrh	r3, [r3, #26]
 801ad9c:	f023 0303 	bic.w	r3, r3, #3
 801ada0:	b29a      	uxth	r2, r3
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada8:	68db      	ldr	r3, [r3, #12]
 801adaa:	685b      	ldr	r3, [r3, #4]
 801adac:	4618      	mov	r0, r3
 801adae:	f7f5 fb08 	bl	80103c2 <lwip_htonl>
 801adb2:	4604      	mov	r4, r0
 801adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb6:	891b      	ldrh	r3, [r3, #8]
 801adb8:	461d      	mov	r5, r3
 801adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adbc:	68db      	ldr	r3, [r3, #12]
 801adbe:	899b      	ldrh	r3, [r3, #12]
 801adc0:	b29b      	uxth	r3, r3
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7f5 fae8 	bl	8010398 <lwip_htons>
 801adc8:	4603      	mov	r3, r0
 801adca:	b2db      	uxtb	r3, r3
 801adcc:	f003 0303 	and.w	r3, r3, #3
 801add0:	2b00      	cmp	r3, #0
 801add2:	d00d      	beq.n	801adf0 <tcp_output+0x2a8>
 801add4:	2301      	movs	r3, #1
 801add6:	e00c      	b.n	801adf2 <tcp_output+0x2aa>
 801add8:	0801fc68 	.word	0x0801fc68
 801addc:	080201d8 	.word	0x080201d8
 801ade0:	0801fce8 	.word	0x0801fce8
 801ade4:	080201f0 	.word	0x080201f0
 801ade8:	2000b754 	.word	0x2000b754
 801adec:	08020218 	.word	0x08020218
 801adf0:	2300      	movs	r3, #0
 801adf2:	442b      	add	r3, r5
 801adf4:	4423      	add	r3, r4
 801adf6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	1ad3      	subs	r3, r2, r3
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	da02      	bge.n	801ae0a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	68ba      	ldr	r2, [r7, #8]
 801ae08:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae0c:	891b      	ldrh	r3, [r3, #8]
 801ae0e:	461c      	mov	r4, r3
 801ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae12:	68db      	ldr	r3, [r3, #12]
 801ae14:	899b      	ldrh	r3, [r3, #12]
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7f5 fabd 	bl	8010398 <lwip_htons>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	b2db      	uxtb	r3, r3
 801ae22:	f003 0303 	and.w	r3, r3, #3
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d001      	beq.n	801ae2e <tcp_output+0x2e6>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e000      	b.n	801ae30 <tcp_output+0x2e8>
 801ae2e:	2300      	movs	r3, #0
 801ae30:	4423      	add	r3, r4
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d049      	beq.n	801aeca <tcp_output+0x382>
      seg->next = NULL;
 801ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae38:	2200      	movs	r2, #0
 801ae3a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d105      	bne.n	801ae50 <tcp_output+0x308>
        pcb->unacked = seg;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae48:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae4c:	623b      	str	r3, [r7, #32]
 801ae4e:	e03f      	b.n	801aed0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae52:	68db      	ldr	r3, [r3, #12]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	4618      	mov	r0, r3
 801ae58:	f7f5 fab3 	bl	80103c2 <lwip_htonl>
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	6a3b      	ldr	r3, [r7, #32]
 801ae60:	68db      	ldr	r3, [r3, #12]
 801ae62:	685b      	ldr	r3, [r3, #4]
 801ae64:	4618      	mov	r0, r3
 801ae66:	f7f5 faac 	bl	80103c2 <lwip_htonl>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	1ae3      	subs	r3, r4, r3
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	da24      	bge.n	801aebc <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	3370      	adds	r3, #112	; 0x70
 801ae76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ae78:	e002      	b.n	801ae80 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ae80:	69fb      	ldr	r3, [r7, #28]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d011      	beq.n	801aeac <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ae88:	69fb      	ldr	r3, [r7, #28]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	685b      	ldr	r3, [r3, #4]
 801ae90:	4618      	mov	r0, r3
 801ae92:	f7f5 fa96 	bl	80103c2 <lwip_htonl>
 801ae96:	4604      	mov	r4, r0
 801ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae9a:	68db      	ldr	r3, [r3, #12]
 801ae9c:	685b      	ldr	r3, [r3, #4]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f7f5 fa8f 	bl	80103c2 <lwip_htonl>
 801aea4:	4603      	mov	r3, r0
 801aea6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	dbe6      	blt.n	801ae7a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801aeac:	69fb      	ldr	r3, [r7, #28]
 801aeae:	681a      	ldr	r2, [r3, #0]
 801aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801aeb4:	69fb      	ldr	r3, [r7, #28]
 801aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aeb8:	601a      	str	r2, [r3, #0]
 801aeba:	e009      	b.n	801aed0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801aebc:	6a3b      	ldr	r3, [r7, #32]
 801aebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aec0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801aec2:	6a3b      	ldr	r3, [r7, #32]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	623b      	str	r3, [r7, #32]
 801aec8:	e002      	b.n	801aed0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801aeca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aecc:	f7fc fc42 	bl	8017754 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aed4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d012      	beq.n	801af02 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7f5 fa6d 	bl	80103c2 <lwip_htonl>
 801aee8:	4602      	mov	r2, r0
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aeee:	1ad3      	subs	r3, r2, r3
 801aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aef2:	8912      	ldrh	r2, [r2, #8]
 801aef4:	4413      	add	r3, r2
  while (seg != NULL &&
 801aef6:	69ba      	ldr	r2, [r7, #24]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	f4bf aeda 	bcs.w	801acb2 <tcp_output+0x16a>
 801aefe:	e000      	b.n	801af02 <tcp_output+0x3ba>
      break;
 801af00:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af06:	2b00      	cmp	r3, #0
 801af08:	d108      	bne.n	801af1c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2200      	movs	r2, #0
 801af0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801af12:	e004      	b.n	801af1e <tcp_output+0x3d6>
    goto output_done;
 801af14:	bf00      	nop
 801af16:	e002      	b.n	801af1e <tcp_output+0x3d6>
    goto output_done;
 801af18:	bf00      	nop
 801af1a:	e000      	b.n	801af1e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801af1c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	8b5b      	ldrh	r3, [r3, #26]
 801af22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801af26:	b29a      	uxth	r2, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801af2c:	2300      	movs	r3, #0
}
 801af2e:	4618      	mov	r0, r3
 801af30:	3728      	adds	r7, #40	; 0x28
 801af32:	46bd      	mov	sp, r7
 801af34:	bdb0      	pop	{r4, r5, r7, pc}
 801af36:	bf00      	nop

0801af38 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d106      	bne.n	801af54 <tcp_output_segment_busy+0x1c>
 801af46:	4b09      	ldr	r3, [pc, #36]	; (801af6c <tcp_output_segment_busy+0x34>)
 801af48:	f240 529a 	movw	r2, #1434	; 0x59a
 801af4c:	4908      	ldr	r1, [pc, #32]	; (801af70 <tcp_output_segment_busy+0x38>)
 801af4e:	4809      	ldr	r0, [pc, #36]	; (801af74 <tcp_output_segment_busy+0x3c>)
 801af50:	f001 fd9a 	bl	801ca88 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	685b      	ldr	r3, [r3, #4]
 801af58:	7b9b      	ldrb	r3, [r3, #14]
 801af5a:	2b01      	cmp	r3, #1
 801af5c:	d001      	beq.n	801af62 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801af5e:	2301      	movs	r3, #1
 801af60:	e000      	b.n	801af64 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801af62:	2300      	movs	r3, #0
}
 801af64:	4618      	mov	r0, r3
 801af66:	3708      	adds	r7, #8
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}
 801af6c:	0801fc68 	.word	0x0801fc68
 801af70:	08020230 	.word	0x08020230
 801af74:	0801fce8 	.word	0x0801fce8

0801af78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801af78:	b5b0      	push	{r4, r5, r7, lr}
 801af7a:	b08c      	sub	sp, #48	; 0x30
 801af7c:	af04      	add	r7, sp, #16
 801af7e:	60f8      	str	r0, [r7, #12]
 801af80:	60b9      	str	r1, [r7, #8]
 801af82:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d106      	bne.n	801af98 <tcp_output_segment+0x20>
 801af8a:	4b64      	ldr	r3, [pc, #400]	; (801b11c <tcp_output_segment+0x1a4>)
 801af8c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801af90:	4963      	ldr	r1, [pc, #396]	; (801b120 <tcp_output_segment+0x1a8>)
 801af92:	4864      	ldr	r0, [pc, #400]	; (801b124 <tcp_output_segment+0x1ac>)
 801af94:	f001 fd78 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d106      	bne.n	801afac <tcp_output_segment+0x34>
 801af9e:	4b5f      	ldr	r3, [pc, #380]	; (801b11c <tcp_output_segment+0x1a4>)
 801afa0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801afa4:	4960      	ldr	r1, [pc, #384]	; (801b128 <tcp_output_segment+0x1b0>)
 801afa6:	485f      	ldr	r0, [pc, #380]	; (801b124 <tcp_output_segment+0x1ac>)
 801afa8:	f001 fd6e 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d106      	bne.n	801afc0 <tcp_output_segment+0x48>
 801afb2:	4b5a      	ldr	r3, [pc, #360]	; (801b11c <tcp_output_segment+0x1a4>)
 801afb4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801afb8:	495c      	ldr	r1, [pc, #368]	; (801b12c <tcp_output_segment+0x1b4>)
 801afba:	485a      	ldr	r0, [pc, #360]	; (801b124 <tcp_output_segment+0x1ac>)
 801afbc:	f001 fd64 	bl	801ca88 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801afc0:	68f8      	ldr	r0, [r7, #12]
 801afc2:	f7ff ffb9 	bl	801af38 <tcp_output_segment_busy>
 801afc6:	4603      	mov	r3, r0
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d001      	beq.n	801afd0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801afcc:	2300      	movs	r3, #0
 801afce:	e0a0      	b.n	801b112 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801afd0:	68bb      	ldr	r3, [r7, #8]
 801afd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	68dc      	ldr	r4, [r3, #12]
 801afd8:	4610      	mov	r0, r2
 801afda:	f7f5 f9f2 	bl	80103c2 <lwip_htonl>
 801afde:	4603      	mov	r3, r0
 801afe0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801afe2:	68bb      	ldr	r3, [r7, #8]
 801afe4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	68dc      	ldr	r4, [r3, #12]
 801afea:	4610      	mov	r0, r2
 801afec:	f7f5 f9d4 	bl	8010398 <lwip_htons>
 801aff0:	4603      	mov	r3, r0
 801aff2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aff4:	68bb      	ldr	r3, [r7, #8]
 801aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aff8:	68ba      	ldr	r2, [r7, #8]
 801affa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801affc:	441a      	add	r2, r3
 801affe:	68bb      	ldr	r3, [r7, #8]
 801b000:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	68db      	ldr	r3, [r3, #12]
 801b006:	3314      	adds	r3, #20
 801b008:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	7a9b      	ldrb	r3, [r3, #10]
 801b00e:	f003 0301 	and.w	r3, r3, #1
 801b012:	2b00      	cmp	r3, #0
 801b014:	d015      	beq.n	801b042 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b016:	68bb      	ldr	r3, [r7, #8]
 801b018:	3304      	adds	r3, #4
 801b01a:	461a      	mov	r2, r3
 801b01c:	6879      	ldr	r1, [r7, #4]
 801b01e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b022:	f7fc fe8d 	bl	8017d40 <tcp_eff_send_mss_netif>
 801b026:	4603      	mov	r3, r0
 801b028:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b02a:	8b7b      	ldrh	r3, [r7, #26]
 801b02c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b030:	4618      	mov	r0, r3
 801b032:	f7f5 f9c6 	bl	80103c2 <lwip_htonl>
 801b036:	4602      	mov	r2, r0
 801b038:	69fb      	ldr	r3, [r7, #28]
 801b03a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b03c:	69fb      	ldr	r3, [r7, #28]
 801b03e:	3304      	adds	r3, #4
 801b040:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b048:	2b00      	cmp	r3, #0
 801b04a:	da02      	bge.n	801b052 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	2200      	movs	r2, #0
 801b050:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b056:	2b00      	cmp	r3, #0
 801b058:	d10c      	bne.n	801b074 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b05a:	4b35      	ldr	r3, [pc, #212]	; (801b130 <tcp_output_segment+0x1b8>)
 801b05c:	681a      	ldr	r2, [r3, #0]
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	68db      	ldr	r3, [r3, #12]
 801b066:	685b      	ldr	r3, [r3, #4]
 801b068:	4618      	mov	r0, r3
 801b06a:	f7f5 f9aa 	bl	80103c2 <lwip_htonl>
 801b06e:	4602      	mov	r2, r0
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	68db      	ldr	r3, [r3, #12]
 801b078:	461a      	mov	r2, r3
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	685b      	ldr	r3, [r3, #4]
 801b07e:	685b      	ldr	r3, [r3, #4]
 801b080:	1ad3      	subs	r3, r2, r3
 801b082:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	685b      	ldr	r3, [r3, #4]
 801b088:	8959      	ldrh	r1, [r3, #10]
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	685b      	ldr	r3, [r3, #4]
 801b08e:	8b3a      	ldrh	r2, [r7, #24]
 801b090:	1a8a      	subs	r2, r1, r2
 801b092:	b292      	uxth	r2, r2
 801b094:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	8919      	ldrh	r1, [r3, #8]
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	685b      	ldr	r3, [r3, #4]
 801b0a0:	8b3a      	ldrh	r2, [r7, #24]
 801b0a2:	1a8a      	subs	r2, r1, r2
 801b0a4:	b292      	uxth	r2, r2
 801b0a6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	685b      	ldr	r3, [r3, #4]
 801b0ac:	68fa      	ldr	r2, [r7, #12]
 801b0ae:	68d2      	ldr	r2, [r2, #12]
 801b0b0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	68db      	ldr	r3, [r3, #12]
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	741a      	strb	r2, [r3, #16]
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	68db      	ldr	r3, [r3, #12]
 801b0c2:	f103 0214 	add.w	r2, r3, #20
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	7a9b      	ldrb	r3, [r3, #10]
 801b0ca:	009b      	lsls	r3, r3, #2
 801b0cc:	f003 0304 	and.w	r3, r3, #4
 801b0d0:	4413      	add	r3, r2
 801b0d2:	69fa      	ldr	r2, [r7, #28]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d006      	beq.n	801b0e6 <tcp_output_segment+0x16e>
 801b0d8:	4b10      	ldr	r3, [pc, #64]	; (801b11c <tcp_output_segment+0x1a4>)
 801b0da:	f240 621c 	movw	r2, #1564	; 0x61c
 801b0de:	4915      	ldr	r1, [pc, #84]	; (801b134 <tcp_output_segment+0x1bc>)
 801b0e0:	4810      	ldr	r0, [pc, #64]	; (801b124 <tcp_output_segment+0x1ac>)
 801b0e2:	f001 fcd1 	bl	801ca88 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	6858      	ldr	r0, [r3, #4]
 801b0ea:	68b9      	ldr	r1, [r7, #8]
 801b0ec:	68bb      	ldr	r3, [r7, #8]
 801b0ee:	1d1c      	adds	r4, r3, #4
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	7add      	ldrb	r5, [r3, #11]
 801b0f4:	68bb      	ldr	r3, [r7, #8]
 801b0f6:	7a9b      	ldrb	r3, [r3, #10]
 801b0f8:	687a      	ldr	r2, [r7, #4]
 801b0fa:	9202      	str	r2, [sp, #8]
 801b0fc:	2206      	movs	r2, #6
 801b0fe:	9201      	str	r2, [sp, #4]
 801b100:	9300      	str	r3, [sp, #0]
 801b102:	462b      	mov	r3, r5
 801b104:	4622      	mov	r2, r4
 801b106:	f7f8 fca1 	bl	8013a4c <ip4_output_if>
 801b10a:	4603      	mov	r3, r0
 801b10c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b112:	4618      	mov	r0, r3
 801b114:	3720      	adds	r7, #32
 801b116:	46bd      	mov	sp, r7
 801b118:	bdb0      	pop	{r4, r5, r7, pc}
 801b11a:	bf00      	nop
 801b11c:	0801fc68 	.word	0x0801fc68
 801b120:	08020258 	.word	0x08020258
 801b124:	0801fce8 	.word	0x0801fce8
 801b128:	08020278 	.word	0x08020278
 801b12c:	08020298 	.word	0x08020298
 801b130:	2000b744 	.word	0x2000b744
 801b134:	080202bc 	.word	0x080202bc

0801b138 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b138:	b5b0      	push	{r4, r5, r7, lr}
 801b13a:	b084      	sub	sp, #16
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d106      	bne.n	801b154 <tcp_rexmit_rto_prepare+0x1c>
 801b146:	4b31      	ldr	r3, [pc, #196]	; (801b20c <tcp_rexmit_rto_prepare+0xd4>)
 801b148:	f240 6263 	movw	r2, #1635	; 0x663
 801b14c:	4930      	ldr	r1, [pc, #192]	; (801b210 <tcp_rexmit_rto_prepare+0xd8>)
 801b14e:	4831      	ldr	r0, [pc, #196]	; (801b214 <tcp_rexmit_rto_prepare+0xdc>)
 801b150:	f001 fc9a 	bl	801ca88 <iprintf>

  if (pcb->unacked == NULL) {
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d102      	bne.n	801b162 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b15c:	f06f 0305 	mvn.w	r3, #5
 801b160:	e050      	b.n	801b204 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b166:	60fb      	str	r3, [r7, #12]
 801b168:	e00b      	b.n	801b182 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b16a:	68f8      	ldr	r0, [r7, #12]
 801b16c:	f7ff fee4 	bl	801af38 <tcp_output_segment_busy>
 801b170:	4603      	mov	r3, r0
 801b172:	2b00      	cmp	r3, #0
 801b174:	d002      	beq.n	801b17c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b176:	f06f 0305 	mvn.w	r3, #5
 801b17a:	e043      	b.n	801b204 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	60fb      	str	r3, [r7, #12]
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d1ef      	bne.n	801b16a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b18a:	68f8      	ldr	r0, [r7, #12]
 801b18c:	f7ff fed4 	bl	801af38 <tcp_output_segment_busy>
 801b190:	4603      	mov	r3, r0
 801b192:	2b00      	cmp	r3, #0
 801b194:	d002      	beq.n	801b19c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b196:	f06f 0305 	mvn.w	r3, #5
 801b19a:	e033      	b.n	801b204 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2200      	movs	r2, #0
 801b1b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	8b5b      	ldrh	r3, [r3, #26]
 801b1b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b1ba:	b29a      	uxth	r2, r3
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	685b      	ldr	r3, [r3, #4]
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7f5 f8fb 	bl	80103c2 <lwip_htonl>
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	891b      	ldrh	r3, [r3, #8]
 801b1d2:	461d      	mov	r5, r3
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	899b      	ldrh	r3, [r3, #12]
 801b1da:	b29b      	uxth	r3, r3
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f7f5 f8db 	bl	8010398 <lwip_htons>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	b2db      	uxtb	r3, r3
 801b1e6:	f003 0303 	and.w	r3, r3, #3
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d001      	beq.n	801b1f2 <tcp_rexmit_rto_prepare+0xba>
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	e000      	b.n	801b1f4 <tcp_rexmit_rto_prepare+0xbc>
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	442b      	add	r3, r5
 801b1f6:	18e2      	adds	r2, r4, r3
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	2200      	movs	r2, #0
 801b200:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b202:	2300      	movs	r3, #0
}
 801b204:	4618      	mov	r0, r3
 801b206:	3710      	adds	r7, #16
 801b208:	46bd      	mov	sp, r7
 801b20a:	bdb0      	pop	{r4, r5, r7, pc}
 801b20c:	0801fc68 	.word	0x0801fc68
 801b210:	080202d0 	.word	0x080202d0
 801b214:	0801fce8 	.word	0x0801fce8

0801b218 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b082      	sub	sp, #8
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d106      	bne.n	801b234 <tcp_rexmit_rto_commit+0x1c>
 801b226:	4b0d      	ldr	r3, [pc, #52]	; (801b25c <tcp_rexmit_rto_commit+0x44>)
 801b228:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b22c:	490c      	ldr	r1, [pc, #48]	; (801b260 <tcp_rexmit_rto_commit+0x48>)
 801b22e:	480d      	ldr	r0, [pc, #52]	; (801b264 <tcp_rexmit_rto_commit+0x4c>)
 801b230:	f001 fc2a 	bl	801ca88 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b23a:	2bff      	cmp	r3, #255	; 0xff
 801b23c:	d007      	beq.n	801b24e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b244:	3301      	adds	r3, #1
 801b246:	b2da      	uxtb	r2, r3
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b24e:	6878      	ldr	r0, [r7, #4]
 801b250:	f7ff fc7a 	bl	801ab48 <tcp_output>
}
 801b254:	bf00      	nop
 801b256:	3708      	adds	r7, #8
 801b258:	46bd      	mov	sp, r7
 801b25a:	bd80      	pop	{r7, pc}
 801b25c:	0801fc68 	.word	0x0801fc68
 801b260:	080202f4 	.word	0x080202f4
 801b264:	0801fce8 	.word	0x0801fce8

0801b268 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d106      	bne.n	801b284 <tcp_rexmit_rto+0x1c>
 801b276:	4b0a      	ldr	r3, [pc, #40]	; (801b2a0 <tcp_rexmit_rto+0x38>)
 801b278:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b27c:	4909      	ldr	r1, [pc, #36]	; (801b2a4 <tcp_rexmit_rto+0x3c>)
 801b27e:	480a      	ldr	r0, [pc, #40]	; (801b2a8 <tcp_rexmit_rto+0x40>)
 801b280:	f001 fc02 	bl	801ca88 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b284:	6878      	ldr	r0, [r7, #4]
 801b286:	f7ff ff57 	bl	801b138 <tcp_rexmit_rto_prepare>
 801b28a:	4603      	mov	r3, r0
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d102      	bne.n	801b296 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	f7ff ffc1 	bl	801b218 <tcp_rexmit_rto_commit>
  }
}
 801b296:	bf00      	nop
 801b298:	3708      	adds	r7, #8
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd80      	pop	{r7, pc}
 801b29e:	bf00      	nop
 801b2a0:	0801fc68 	.word	0x0801fc68
 801b2a4:	08020318 	.word	0x08020318
 801b2a8:	0801fce8 	.word	0x0801fce8

0801b2ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b2ac:	b590      	push	{r4, r7, lr}
 801b2ae:	b085      	sub	sp, #20
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d106      	bne.n	801b2c8 <tcp_rexmit+0x1c>
 801b2ba:	4b2f      	ldr	r3, [pc, #188]	; (801b378 <tcp_rexmit+0xcc>)
 801b2bc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b2c0:	492e      	ldr	r1, [pc, #184]	; (801b37c <tcp_rexmit+0xd0>)
 801b2c2:	482f      	ldr	r0, [pc, #188]	; (801b380 <tcp_rexmit+0xd4>)
 801b2c4:	f001 fbe0 	bl	801ca88 <iprintf>

  if (pcb->unacked == NULL) {
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d102      	bne.n	801b2d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b2d0:	f06f 0305 	mvn.w	r3, #5
 801b2d4:	e04c      	b.n	801b370 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b2dc:	68b8      	ldr	r0, [r7, #8]
 801b2de:	f7ff fe2b 	bl	801af38 <tcp_output_segment_busy>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d002      	beq.n	801b2ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b2e8:	f06f 0305 	mvn.w	r3, #5
 801b2ec:	e040      	b.n	801b370 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	681a      	ldr	r2, [r3, #0]
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	336c      	adds	r3, #108	; 0x6c
 801b2fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b2fc:	e002      	b.n	801b304 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d011      	beq.n	801b330 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	68db      	ldr	r3, [r3, #12]
 801b312:	685b      	ldr	r3, [r3, #4]
 801b314:	4618      	mov	r0, r3
 801b316:	f7f5 f854 	bl	80103c2 <lwip_htonl>
 801b31a:	4604      	mov	r4, r0
 801b31c:	68bb      	ldr	r3, [r7, #8]
 801b31e:	68db      	ldr	r3, [r3, #12]
 801b320:	685b      	ldr	r3, [r3, #4]
 801b322:	4618      	mov	r0, r3
 801b324:	f7f5 f84d 	bl	80103c2 <lwip_htonl>
 801b328:	4603      	mov	r3, r0
 801b32a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	dbe6      	blt.n	801b2fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	681a      	ldr	r2, [r3, #0]
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	68ba      	ldr	r2, [r7, #8]
 801b33c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d103      	bne.n	801b34e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2200      	movs	r2, #0
 801b34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b354:	2bff      	cmp	r3, #255	; 0xff
 801b356:	d007      	beq.n	801b368 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b35e:	3301      	adds	r3, #1
 801b360:	b2da      	uxtb	r2, r3
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	2200      	movs	r2, #0
 801b36c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b36e:	2300      	movs	r3, #0
}
 801b370:	4618      	mov	r0, r3
 801b372:	3714      	adds	r7, #20
 801b374:	46bd      	mov	sp, r7
 801b376:	bd90      	pop	{r4, r7, pc}
 801b378:	0801fc68 	.word	0x0801fc68
 801b37c:	08020334 	.word	0x08020334
 801b380:	0801fce8 	.word	0x0801fce8

0801b384 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b082      	sub	sp, #8
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d106      	bne.n	801b3a0 <tcp_rexmit_fast+0x1c>
 801b392:	4b2f      	ldr	r3, [pc, #188]	; (801b450 <tcp_rexmit_fast+0xcc>)
 801b394:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b398:	492e      	ldr	r1, [pc, #184]	; (801b454 <tcp_rexmit_fast+0xd0>)
 801b39a:	482f      	ldr	r0, [pc, #188]	; (801b458 <tcp_rexmit_fast+0xd4>)
 801b39c:	f001 fb74 	bl	801ca88 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d04f      	beq.n	801b448 <tcp_rexmit_fast+0xc4>
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	8b5b      	ldrh	r3, [r3, #26]
 801b3ac:	f003 0304 	and.w	r3, r3, #4
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d149      	bne.n	801b448 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b3b4:	6878      	ldr	r0, [r7, #4]
 801b3b6:	f7ff ff79 	bl	801b2ac <tcp_rexmit>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d143      	bne.n	801b448 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d208      	bcs.n	801b3e2 <tcp_rexmit_fast+0x5e>
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	da00      	bge.n	801b3dc <tcp_rexmit_fast+0x58>
 801b3da:	3301      	adds	r3, #1
 801b3dc:	105b      	asrs	r3, r3, #1
 801b3de:	b29b      	uxth	r3, r3
 801b3e0:	e007      	b.n	801b3f2 <tcp_rexmit_fast+0x6e>
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	da00      	bge.n	801b3ee <tcp_rexmit_fast+0x6a>
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	105b      	asrs	r3, r3, #1
 801b3f0:	b29b      	uxth	r3, r3
 801b3f2:	687a      	ldr	r2, [r7, #4]
 801b3f4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b3fe:	461a      	mov	r2, r3
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b404:	005b      	lsls	r3, r3, #1
 801b406:	429a      	cmp	r2, r3
 801b408:	d206      	bcs.n	801b418 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b40e:	005b      	lsls	r3, r3, #1
 801b410:	b29a      	uxth	r2, r3
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b422:	4619      	mov	r1, r3
 801b424:	0049      	lsls	r1, r1, #1
 801b426:	440b      	add	r3, r1
 801b428:	b29b      	uxth	r3, r3
 801b42a:	4413      	add	r3, r2
 801b42c:	b29a      	uxth	r2, r3
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	8b5b      	ldrh	r3, [r3, #26]
 801b438:	f043 0304 	orr.w	r3, r3, #4
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	2200      	movs	r2, #0
 801b446:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b448:	bf00      	nop
 801b44a:	3708      	adds	r7, #8
 801b44c:	46bd      	mov	sp, r7
 801b44e:	bd80      	pop	{r7, pc}
 801b450:	0801fc68 	.word	0x0801fc68
 801b454:	0802034c 	.word	0x0802034c
 801b458:	0801fce8 	.word	0x0801fce8

0801b45c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b086      	sub	sp, #24
 801b460:	af00      	add	r7, sp, #0
 801b462:	60f8      	str	r0, [r7, #12]
 801b464:	607b      	str	r3, [r7, #4]
 801b466:	460b      	mov	r3, r1
 801b468:	817b      	strh	r3, [r7, #10]
 801b46a:	4613      	mov	r3, r2
 801b46c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b46e:	897a      	ldrh	r2, [r7, #10]
 801b470:	893b      	ldrh	r3, [r7, #8]
 801b472:	4413      	add	r3, r2
 801b474:	b29b      	uxth	r3, r3
 801b476:	3314      	adds	r3, #20
 801b478:	b29b      	uxth	r3, r3
 801b47a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b47e:	4619      	mov	r1, r3
 801b480:	2022      	movs	r0, #34	; 0x22
 801b482:	f7fa fb11 	bl	8015aa8 <pbuf_alloc>
 801b486:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b488:	697b      	ldr	r3, [r7, #20]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d04e      	beq.n	801b52c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	895b      	ldrh	r3, [r3, #10]
 801b492:	461a      	mov	r2, r3
 801b494:	897b      	ldrh	r3, [r7, #10]
 801b496:	3314      	adds	r3, #20
 801b498:	429a      	cmp	r2, r3
 801b49a:	da06      	bge.n	801b4aa <tcp_output_alloc_header_common+0x4e>
 801b49c:	4b26      	ldr	r3, [pc, #152]	; (801b538 <tcp_output_alloc_header_common+0xdc>)
 801b49e:	f240 7224 	movw	r2, #1828	; 0x724
 801b4a2:	4926      	ldr	r1, [pc, #152]	; (801b53c <tcp_output_alloc_header_common+0xe0>)
 801b4a4:	4826      	ldr	r0, [pc, #152]	; (801b540 <tcp_output_alloc_header_common+0xe4>)
 801b4a6:	f001 faef 	bl	801ca88 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b4aa:	697b      	ldr	r3, [r7, #20]
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b4b0:	8c3b      	ldrh	r3, [r7, #32]
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	f7f4 ff70 	bl	8010398 <lwip_htons>
 801b4b8:	4603      	mov	r3, r0
 801b4ba:	461a      	mov	r2, r3
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7f4 ff68 	bl	8010398 <lwip_htons>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	461a      	mov	r2, r3
 801b4cc:	693b      	ldr	r3, [r7, #16]
 801b4ce:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	687a      	ldr	r2, [r7, #4]
 801b4d4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b4d6:	68f8      	ldr	r0, [r7, #12]
 801b4d8:	f7f4 ff73 	bl	80103c2 <lwip_htonl>
 801b4dc:	4602      	mov	r2, r0
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b4e2:	897b      	ldrh	r3, [r7, #10]
 801b4e4:	089b      	lsrs	r3, r3, #2
 801b4e6:	b29b      	uxth	r3, r3
 801b4e8:	3305      	adds	r3, #5
 801b4ea:	b29b      	uxth	r3, r3
 801b4ec:	031b      	lsls	r3, r3, #12
 801b4ee:	b29a      	uxth	r2, r3
 801b4f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b4f4:	b29b      	uxth	r3, r3
 801b4f6:	4313      	orrs	r3, r2
 801b4f8:	b29b      	uxth	r3, r3
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f7f4 ff4c 	bl	8010398 <lwip_htons>
 801b500:	4603      	mov	r3, r0
 801b502:	461a      	mov	r2, r3
 801b504:	693b      	ldr	r3, [r7, #16]
 801b506:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b508:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7f4 ff44 	bl	8010398 <lwip_htons>
 801b510:	4603      	mov	r3, r0
 801b512:	461a      	mov	r2, r3
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b518:	693b      	ldr	r3, [r7, #16]
 801b51a:	2200      	movs	r2, #0
 801b51c:	741a      	strb	r2, [r3, #16]
 801b51e:	2200      	movs	r2, #0
 801b520:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b522:	693b      	ldr	r3, [r7, #16]
 801b524:	2200      	movs	r2, #0
 801b526:	749a      	strb	r2, [r3, #18]
 801b528:	2200      	movs	r2, #0
 801b52a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b52c:	697b      	ldr	r3, [r7, #20]
}
 801b52e:	4618      	mov	r0, r3
 801b530:	3718      	adds	r7, #24
 801b532:	46bd      	mov	sp, r7
 801b534:	bd80      	pop	{r7, pc}
 801b536:	bf00      	nop
 801b538:	0801fc68 	.word	0x0801fc68
 801b53c:	0802036c 	.word	0x0802036c
 801b540:	0801fce8 	.word	0x0801fce8

0801b544 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b544:	b5b0      	push	{r4, r5, r7, lr}
 801b546:	b08a      	sub	sp, #40	; 0x28
 801b548:	af04      	add	r7, sp, #16
 801b54a:	60f8      	str	r0, [r7, #12]
 801b54c:	607b      	str	r3, [r7, #4]
 801b54e:	460b      	mov	r3, r1
 801b550:	817b      	strh	r3, [r7, #10]
 801b552:	4613      	mov	r3, r2
 801b554:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d106      	bne.n	801b56a <tcp_output_alloc_header+0x26>
 801b55c:	4b15      	ldr	r3, [pc, #84]	; (801b5b4 <tcp_output_alloc_header+0x70>)
 801b55e:	f240 7242 	movw	r2, #1858	; 0x742
 801b562:	4915      	ldr	r1, [pc, #84]	; (801b5b8 <tcp_output_alloc_header+0x74>)
 801b564:	4815      	ldr	r0, [pc, #84]	; (801b5bc <tcp_output_alloc_header+0x78>)
 801b566:	f001 fa8f 	bl	801ca88 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	8adb      	ldrh	r3, [r3, #22]
 801b572:	68fa      	ldr	r2, [r7, #12]
 801b574:	8b12      	ldrh	r2, [r2, #24]
 801b576:	68f9      	ldr	r1, [r7, #12]
 801b578:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b57a:	893d      	ldrh	r5, [r7, #8]
 801b57c:	897c      	ldrh	r4, [r7, #10]
 801b57e:	9103      	str	r1, [sp, #12]
 801b580:	2110      	movs	r1, #16
 801b582:	9102      	str	r1, [sp, #8]
 801b584:	9201      	str	r2, [sp, #4]
 801b586:	9300      	str	r3, [sp, #0]
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	462a      	mov	r2, r5
 801b58c:	4621      	mov	r1, r4
 801b58e:	f7ff ff65 	bl	801b45c <tcp_output_alloc_header_common>
 801b592:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	2b00      	cmp	r3, #0
 801b598:	d006      	beq.n	801b5a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b59e:	68fa      	ldr	r2, [r7, #12]
 801b5a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b5a2:	441a      	add	r2, r3
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b5a8:	697b      	ldr	r3, [r7, #20]
}
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	3718      	adds	r7, #24
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	0801fc68 	.word	0x0801fc68
 801b5b8:	0802039c 	.word	0x0802039c
 801b5bc:	0801fce8 	.word	0x0801fce8

0801b5c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b088      	sub	sp, #32
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	4611      	mov	r1, r2
 801b5cc:	461a      	mov	r2, r3
 801b5ce:	460b      	mov	r3, r1
 801b5d0:	71fb      	strb	r3, [r7, #7]
 801b5d2:	4613      	mov	r3, r2
 801b5d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b5da:	68bb      	ldr	r3, [r7, #8]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d106      	bne.n	801b5ee <tcp_output_fill_options+0x2e>
 801b5e0:	4b13      	ldr	r3, [pc, #76]	; (801b630 <tcp_output_fill_options+0x70>)
 801b5e2:	f240 7256 	movw	r2, #1878	; 0x756
 801b5e6:	4913      	ldr	r1, [pc, #76]	; (801b634 <tcp_output_fill_options+0x74>)
 801b5e8:	4813      	ldr	r0, [pc, #76]	; (801b638 <tcp_output_fill_options+0x78>)
 801b5ea:	f001 fa4d 	bl	801ca88 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b5ee:	68bb      	ldr	r3, [r7, #8]
 801b5f0:	685b      	ldr	r3, [r3, #4]
 801b5f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b5f4:	69bb      	ldr	r3, [r7, #24]
 801b5f6:	3314      	adds	r3, #20
 801b5f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b5fa:	69bb      	ldr	r3, [r7, #24]
 801b5fc:	f103 0214 	add.w	r2, r3, #20
 801b600:	8bfb      	ldrh	r3, [r7, #30]
 801b602:	009b      	lsls	r3, r3, #2
 801b604:	4619      	mov	r1, r3
 801b606:	79fb      	ldrb	r3, [r7, #7]
 801b608:	009b      	lsls	r3, r3, #2
 801b60a:	f003 0304 	and.w	r3, r3, #4
 801b60e:	440b      	add	r3, r1
 801b610:	4413      	add	r3, r2
 801b612:	697a      	ldr	r2, [r7, #20]
 801b614:	429a      	cmp	r2, r3
 801b616:	d006      	beq.n	801b626 <tcp_output_fill_options+0x66>
 801b618:	4b05      	ldr	r3, [pc, #20]	; (801b630 <tcp_output_fill_options+0x70>)
 801b61a:	f240 7275 	movw	r2, #1909	; 0x775
 801b61e:	4907      	ldr	r1, [pc, #28]	; (801b63c <tcp_output_fill_options+0x7c>)
 801b620:	4805      	ldr	r0, [pc, #20]	; (801b638 <tcp_output_fill_options+0x78>)
 801b622:	f001 fa31 	bl	801ca88 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b626:	bf00      	nop
 801b628:	3720      	adds	r7, #32
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}
 801b62e:	bf00      	nop
 801b630:	0801fc68 	.word	0x0801fc68
 801b634:	080203c4 	.word	0x080203c4
 801b638:	0801fce8 	.word	0x0801fce8
 801b63c:	080202bc 	.word	0x080202bc

0801b640 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b08a      	sub	sp, #40	; 0x28
 801b644:	af04      	add	r7, sp, #16
 801b646:	60f8      	str	r0, [r7, #12]
 801b648:	60b9      	str	r1, [r7, #8]
 801b64a:	607a      	str	r2, [r7, #4]
 801b64c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b64e:	68bb      	ldr	r3, [r7, #8]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d106      	bne.n	801b662 <tcp_output_control_segment+0x22>
 801b654:	4b1c      	ldr	r3, [pc, #112]	; (801b6c8 <tcp_output_control_segment+0x88>)
 801b656:	f240 7287 	movw	r2, #1927	; 0x787
 801b65a:	491c      	ldr	r1, [pc, #112]	; (801b6cc <tcp_output_control_segment+0x8c>)
 801b65c:	481c      	ldr	r0, [pc, #112]	; (801b6d0 <tcp_output_control_segment+0x90>)
 801b65e:	f001 fa13 	bl	801ca88 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b662:	683a      	ldr	r2, [r7, #0]
 801b664:	6879      	ldr	r1, [r7, #4]
 801b666:	68f8      	ldr	r0, [r7, #12]
 801b668:	f7fe ff2e 	bl	801a4c8 <tcp_route>
 801b66c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b66e:	693b      	ldr	r3, [r7, #16]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d102      	bne.n	801b67a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b674:	23fc      	movs	r3, #252	; 0xfc
 801b676:	75fb      	strb	r3, [r7, #23]
 801b678:	e01c      	b.n	801b6b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d006      	beq.n	801b68e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	7adb      	ldrb	r3, [r3, #11]
 801b684:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	7a9b      	ldrb	r3, [r3, #10]
 801b68a:	757b      	strb	r3, [r7, #21]
 801b68c:	e003      	b.n	801b696 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b68e:	23ff      	movs	r3, #255	; 0xff
 801b690:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b692:	2300      	movs	r3, #0
 801b694:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b696:	7dba      	ldrb	r2, [r7, #22]
 801b698:	693b      	ldr	r3, [r7, #16]
 801b69a:	9302      	str	r3, [sp, #8]
 801b69c:	2306      	movs	r3, #6
 801b69e:	9301      	str	r3, [sp, #4]
 801b6a0:	7d7b      	ldrb	r3, [r7, #21]
 801b6a2:	9300      	str	r3, [sp, #0]
 801b6a4:	4613      	mov	r3, r2
 801b6a6:	683a      	ldr	r2, [r7, #0]
 801b6a8:	6879      	ldr	r1, [r7, #4]
 801b6aa:	68b8      	ldr	r0, [r7, #8]
 801b6ac:	f7f8 f9ce 	bl	8013a4c <ip4_output_if>
 801b6b0:	4603      	mov	r3, r0
 801b6b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b6b4:	68b8      	ldr	r0, [r7, #8]
 801b6b6:	f7fa fcd7 	bl	8016068 <pbuf_free>
  return err;
 801b6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	3718      	adds	r7, #24
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	bd80      	pop	{r7, pc}
 801b6c6:	bf00      	nop
 801b6c8:	0801fc68 	.word	0x0801fc68
 801b6cc:	080203ec 	.word	0x080203ec
 801b6d0:	0801fce8 	.word	0x0801fce8

0801b6d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b6d4:	b590      	push	{r4, r7, lr}
 801b6d6:	b08b      	sub	sp, #44	; 0x2c
 801b6d8:	af04      	add	r7, sp, #16
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
 801b6e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b6e2:	683b      	ldr	r3, [r7, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d106      	bne.n	801b6f6 <tcp_rst+0x22>
 801b6e8:	4b1f      	ldr	r3, [pc, #124]	; (801b768 <tcp_rst+0x94>)
 801b6ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b6ee:	491f      	ldr	r1, [pc, #124]	; (801b76c <tcp_rst+0x98>)
 801b6f0:	481f      	ldr	r0, [pc, #124]	; (801b770 <tcp_rst+0x9c>)
 801b6f2:	f001 f9c9 	bl	801ca88 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d106      	bne.n	801b70a <tcp_rst+0x36>
 801b6fc:	4b1a      	ldr	r3, [pc, #104]	; (801b768 <tcp_rst+0x94>)
 801b6fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b702:	491c      	ldr	r1, [pc, #112]	; (801b774 <tcp_rst+0xa0>)
 801b704:	481a      	ldr	r0, [pc, #104]	; (801b770 <tcp_rst+0x9c>)
 801b706:	f001 f9bf 	bl	801ca88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b70a:	2300      	movs	r3, #0
 801b70c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b70e:	f246 0308 	movw	r3, #24584	; 0x6008
 801b712:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b714:	7dfb      	ldrb	r3, [r7, #23]
 801b716:	b29c      	uxth	r4, r3
 801b718:	68b8      	ldr	r0, [r7, #8]
 801b71a:	f7f4 fe52 	bl	80103c2 <lwip_htonl>
 801b71e:	4602      	mov	r2, r0
 801b720:	8abb      	ldrh	r3, [r7, #20]
 801b722:	9303      	str	r3, [sp, #12]
 801b724:	2314      	movs	r3, #20
 801b726:	9302      	str	r3, [sp, #8]
 801b728:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b72a:	9301      	str	r3, [sp, #4]
 801b72c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b72e:	9300      	str	r3, [sp, #0]
 801b730:	4613      	mov	r3, r2
 801b732:	2200      	movs	r2, #0
 801b734:	4621      	mov	r1, r4
 801b736:	6878      	ldr	r0, [r7, #4]
 801b738:	f7ff fe90 	bl	801b45c <tcp_output_alloc_header_common>
 801b73c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b73e:	693b      	ldr	r3, [r7, #16]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d00c      	beq.n	801b75e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b744:	7dfb      	ldrb	r3, [r7, #23]
 801b746:	2200      	movs	r2, #0
 801b748:	6939      	ldr	r1, [r7, #16]
 801b74a:	68f8      	ldr	r0, [r7, #12]
 801b74c:	f7ff ff38 	bl	801b5c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b752:	683a      	ldr	r2, [r7, #0]
 801b754:	6939      	ldr	r1, [r7, #16]
 801b756:	68f8      	ldr	r0, [r7, #12]
 801b758:	f7ff ff72 	bl	801b640 <tcp_output_control_segment>
 801b75c:	e000      	b.n	801b760 <tcp_rst+0x8c>
    return;
 801b75e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b760:	371c      	adds	r7, #28
 801b762:	46bd      	mov	sp, r7
 801b764:	bd90      	pop	{r4, r7, pc}
 801b766:	bf00      	nop
 801b768:	0801fc68 	.word	0x0801fc68
 801b76c:	08020418 	.word	0x08020418
 801b770:	0801fce8 	.word	0x0801fce8
 801b774:	08020434 	.word	0x08020434

0801b778 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b778:	b590      	push	{r4, r7, lr}
 801b77a:	b087      	sub	sp, #28
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b780:	2300      	movs	r3, #0
 801b782:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b784:	2300      	movs	r3, #0
 801b786:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d106      	bne.n	801b79c <tcp_send_empty_ack+0x24>
 801b78e:	4b28      	ldr	r3, [pc, #160]	; (801b830 <tcp_send_empty_ack+0xb8>)
 801b790:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b794:	4927      	ldr	r1, [pc, #156]	; (801b834 <tcp_send_empty_ack+0xbc>)
 801b796:	4828      	ldr	r0, [pc, #160]	; (801b838 <tcp_send_empty_ack+0xc0>)
 801b798:	f001 f976 	bl	801ca88 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b79c:	7dfb      	ldrb	r3, [r7, #23]
 801b79e:	009b      	lsls	r3, r3, #2
 801b7a0:	b2db      	uxtb	r3, r3
 801b7a2:	f003 0304 	and.w	r3, r3, #4
 801b7a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b7a8:	7d7b      	ldrb	r3, [r7, #21]
 801b7aa:	b29c      	uxth	r4, r3
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	f7f4 fe06 	bl	80103c2 <lwip_htonl>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	4621      	mov	r1, r4
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f7ff fec1 	bl	801b544 <tcp_output_alloc_header>
 801b7c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b7c4:	693b      	ldr	r3, [r7, #16]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d109      	bne.n	801b7de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	8b5b      	ldrh	r3, [r3, #26]
 801b7ce:	f043 0303 	orr.w	r3, r3, #3
 801b7d2:	b29a      	uxth	r2, r3
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b7d8:	f06f 0301 	mvn.w	r3, #1
 801b7dc:	e023      	b.n	801b826 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b7de:	7dbb      	ldrb	r3, [r7, #22]
 801b7e0:	7dfa      	ldrb	r2, [r7, #23]
 801b7e2:	6939      	ldr	r1, [r7, #16]
 801b7e4:	6878      	ldr	r0, [r7, #4]
 801b7e6:	f7ff feeb 	bl	801b5c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	3304      	adds	r3, #4
 801b7f0:	6939      	ldr	r1, [r7, #16]
 801b7f2:	6878      	ldr	r0, [r7, #4]
 801b7f4:	f7ff ff24 	bl	801b640 <tcp_output_control_segment>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b7fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d007      	beq.n	801b814 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	8b5b      	ldrh	r3, [r3, #26]
 801b808:	f043 0303 	orr.w	r3, r3, #3
 801b80c:	b29a      	uxth	r2, r3
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	835a      	strh	r2, [r3, #26]
 801b812:	e006      	b.n	801b822 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	8b5b      	ldrh	r3, [r3, #26]
 801b818:	f023 0303 	bic.w	r3, r3, #3
 801b81c:	b29a      	uxth	r2, r3
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b826:	4618      	mov	r0, r3
 801b828:	371c      	adds	r7, #28
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd90      	pop	{r4, r7, pc}
 801b82e:	bf00      	nop
 801b830:	0801fc68 	.word	0x0801fc68
 801b834:	08020450 	.word	0x08020450
 801b838:	0801fce8 	.word	0x0801fce8

0801b83c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b83c:	b590      	push	{r4, r7, lr}
 801b83e:	b087      	sub	sp, #28
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b844:	2300      	movs	r3, #0
 801b846:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d106      	bne.n	801b85c <tcp_keepalive+0x20>
 801b84e:	4b18      	ldr	r3, [pc, #96]	; (801b8b0 <tcp_keepalive+0x74>)
 801b850:	f640 0224 	movw	r2, #2084	; 0x824
 801b854:	4917      	ldr	r1, [pc, #92]	; (801b8b4 <tcp_keepalive+0x78>)
 801b856:	4818      	ldr	r0, [pc, #96]	; (801b8b8 <tcp_keepalive+0x7c>)
 801b858:	f001 f916 	bl	801ca88 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b85c:	7dfb      	ldrb	r3, [r7, #23]
 801b85e:	b29c      	uxth	r4, r3
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b864:	3b01      	subs	r3, #1
 801b866:	4618      	mov	r0, r3
 801b868:	f7f4 fdab 	bl	80103c2 <lwip_htonl>
 801b86c:	4603      	mov	r3, r0
 801b86e:	2200      	movs	r2, #0
 801b870:	4621      	mov	r1, r4
 801b872:	6878      	ldr	r0, [r7, #4]
 801b874:	f7ff fe66 	bl	801b544 <tcp_output_alloc_header>
 801b878:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b87a:	693b      	ldr	r3, [r7, #16]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d102      	bne.n	801b886 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b884:	e010      	b.n	801b8a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b886:	7dfb      	ldrb	r3, [r7, #23]
 801b888:	2200      	movs	r2, #0
 801b88a:	6939      	ldr	r1, [r7, #16]
 801b88c:	6878      	ldr	r0, [r7, #4]
 801b88e:	f7ff fe97 	bl	801b5c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	3304      	adds	r3, #4
 801b898:	6939      	ldr	r1, [r7, #16]
 801b89a:	6878      	ldr	r0, [r7, #4]
 801b89c:	f7ff fed0 	bl	801b640 <tcp_output_control_segment>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	371c      	adds	r7, #28
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	bd90      	pop	{r4, r7, pc}
 801b8b0:	0801fc68 	.word	0x0801fc68
 801b8b4:	08020470 	.word	0x08020470
 801b8b8:	0801fce8 	.word	0x0801fce8

0801b8bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b8bc:	b590      	push	{r4, r7, lr}
 801b8be:	b08b      	sub	sp, #44	; 0x2c
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d106      	bne.n	801b8de <tcp_zero_window_probe+0x22>
 801b8d0:	4b4c      	ldr	r3, [pc, #304]	; (801ba04 <tcp_zero_window_probe+0x148>)
 801b8d2:	f640 024f 	movw	r2, #2127	; 0x84f
 801b8d6:	494c      	ldr	r1, [pc, #304]	; (801ba08 <tcp_zero_window_probe+0x14c>)
 801b8d8:	484c      	ldr	r0, [pc, #304]	; (801ba0c <tcp_zero_window_probe+0x150>)
 801b8da:	f001 f8d5 	bl	801ca88 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b8e4:	6a3b      	ldr	r3, [r7, #32]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d101      	bne.n	801b8ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	e086      	b.n	801b9fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b8f4:	2bff      	cmp	r3, #255	; 0xff
 801b8f6:	d007      	beq.n	801b908 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b8fe:	3301      	adds	r3, #1
 801b900:	b2da      	uxtb	r2, r3
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b908:	6a3b      	ldr	r3, [r7, #32]
 801b90a:	68db      	ldr	r3, [r3, #12]
 801b90c:	899b      	ldrh	r3, [r3, #12]
 801b90e:	b29b      	uxth	r3, r3
 801b910:	4618      	mov	r0, r3
 801b912:	f7f4 fd41 	bl	8010398 <lwip_htons>
 801b916:	4603      	mov	r3, r0
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	f003 0301 	and.w	r3, r3, #1
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d005      	beq.n	801b92e <tcp_zero_window_probe+0x72>
 801b922:	6a3b      	ldr	r3, [r7, #32]
 801b924:	891b      	ldrh	r3, [r3, #8]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d101      	bne.n	801b92e <tcp_zero_window_probe+0x72>
 801b92a:	2301      	movs	r3, #1
 801b92c:	e000      	b.n	801b930 <tcp_zero_window_probe+0x74>
 801b92e:	2300      	movs	r3, #0
 801b930:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b932:	7ffb      	ldrb	r3, [r7, #31]
 801b934:	2b00      	cmp	r3, #0
 801b936:	bf0c      	ite	eq
 801b938:	2301      	moveq	r3, #1
 801b93a:	2300      	movne	r3, #0
 801b93c:	b2db      	uxtb	r3, r3
 801b93e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b944:	b299      	uxth	r1, r3
 801b946:	6a3b      	ldr	r3, [r7, #32]
 801b948:	68db      	ldr	r3, [r3, #12]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	8bba      	ldrh	r2, [r7, #28]
 801b94e:	6878      	ldr	r0, [r7, #4]
 801b950:	f7ff fdf8 	bl	801b544 <tcp_output_alloc_header>
 801b954:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b956:	69bb      	ldr	r3, [r7, #24]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d102      	bne.n	801b962 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b960:	e04c      	b.n	801b9fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b962:	69bb      	ldr	r3, [r7, #24]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b968:	7ffb      	ldrb	r3, [r7, #31]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d011      	beq.n	801b992 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b96e:	697b      	ldr	r3, [r7, #20]
 801b970:	899b      	ldrh	r3, [r3, #12]
 801b972:	b29b      	uxth	r3, r3
 801b974:	b21b      	sxth	r3, r3
 801b976:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b97a:	b21c      	sxth	r4, r3
 801b97c:	2011      	movs	r0, #17
 801b97e:	f7f4 fd0b 	bl	8010398 <lwip_htons>
 801b982:	4603      	mov	r3, r0
 801b984:	b21b      	sxth	r3, r3
 801b986:	4323      	orrs	r3, r4
 801b988:	b21b      	sxth	r3, r3
 801b98a:	b29a      	uxth	r2, r3
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	819a      	strh	r2, [r3, #12]
 801b990:	e010      	b.n	801b9b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b992:	69bb      	ldr	r3, [r7, #24]
 801b994:	685b      	ldr	r3, [r3, #4]
 801b996:	3314      	adds	r3, #20
 801b998:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b99a:	6a3b      	ldr	r3, [r7, #32]
 801b99c:	6858      	ldr	r0, [r3, #4]
 801b99e:	6a3b      	ldr	r3, [r7, #32]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	891a      	ldrh	r2, [r3, #8]
 801b9a4:	6a3b      	ldr	r3, [r7, #32]
 801b9a6:	891b      	ldrh	r3, [r3, #8]
 801b9a8:	1ad3      	subs	r3, r2, r3
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	2201      	movs	r2, #1
 801b9ae:	6939      	ldr	r1, [r7, #16]
 801b9b0:	f7fa fd60 	bl	8016474 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b9b4:	6a3b      	ldr	r3, [r7, #32]
 801b9b6:	68db      	ldr	r3, [r3, #12]
 801b9b8:	685b      	ldr	r3, [r3, #4]
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	f7f4 fd01 	bl	80103c2 <lwip_htonl>
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	3301      	adds	r3, #1
 801b9c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	1ad3      	subs	r3, r2, r3
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	da02      	bge.n	801b9d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	68fa      	ldr	r2, [r7, #12]
 801b9d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9dc:	2200      	movs	r2, #0
 801b9de:	69b9      	ldr	r1, [r7, #24]
 801b9e0:	6878      	ldr	r0, [r7, #4]
 801b9e2:	f7ff fded 	bl	801b5c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b9e6:	687a      	ldr	r2, [r7, #4]
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	3304      	adds	r3, #4
 801b9ec:	69b9      	ldr	r1, [r7, #24]
 801b9ee:	6878      	ldr	r0, [r7, #4]
 801b9f0:	f7ff fe26 	bl	801b640 <tcp_output_control_segment>
 801b9f4:	4603      	mov	r3, r0
 801b9f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b9f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	372c      	adds	r7, #44	; 0x2c
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd90      	pop	{r4, r7, pc}
 801ba04:	0801fc68 	.word	0x0801fc68
 801ba08:	0802048c 	.word	0x0802048c
 801ba0c:	0801fce8 	.word	0x0801fce8

0801ba10 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b084      	sub	sp, #16
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
 801ba18:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801ba1a:	f000 fafb 	bl	801c014 <sys_timeouts_sleeptime>
 801ba1e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ba26:	d10b      	bne.n	801ba40 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801ba28:	4813      	ldr	r0, [pc, #76]	; (801ba78 <tcpip_timeouts_mbox_fetch+0x68>)
 801ba2a:	f7fa fe6e 	bl	801670a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801ba2e:	2200      	movs	r2, #0
 801ba30:	6839      	ldr	r1, [r7, #0]
 801ba32:	6878      	ldr	r0, [r7, #4]
 801ba34:	f7fa fdf6 	bl	8016624 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801ba38:	480f      	ldr	r0, [pc, #60]	; (801ba78 <tcpip_timeouts_mbox_fetch+0x68>)
 801ba3a:	f7fa fe57 	bl	80166ec <sys_mutex_lock>
    return;
 801ba3e:	e018      	b.n	801ba72 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d102      	bne.n	801ba4c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801ba46:	f000 faab 	bl	801bfa0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ba4a:	e7e6      	b.n	801ba1a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801ba4c:	480a      	ldr	r0, [pc, #40]	; (801ba78 <tcpip_timeouts_mbox_fetch+0x68>)
 801ba4e:	f7fa fe5c 	bl	801670a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801ba52:	68fa      	ldr	r2, [r7, #12]
 801ba54:	6839      	ldr	r1, [r7, #0]
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f7fa fde4 	bl	8016624 <sys_arch_mbox_fetch>
 801ba5c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801ba5e:	4806      	ldr	r0, [pc, #24]	; (801ba78 <tcpip_timeouts_mbox_fetch+0x68>)
 801ba60:	f7fa fe44 	bl	80166ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801ba64:	68bb      	ldr	r3, [r7, #8]
 801ba66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ba6a:	d102      	bne.n	801ba72 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801ba6c:	f000 fa98 	bl	801bfa0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ba70:	e7d3      	b.n	801ba1a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801ba72:	3710      	adds	r7, #16
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bd80      	pop	{r7, pc}
 801ba78:	2000b758 	.word	0x2000b758

0801ba7c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b084      	sub	sp, #16
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801ba84:	4810      	ldr	r0, [pc, #64]	; (801bac8 <tcpip_thread+0x4c>)
 801ba86:	f7fa fe31 	bl	80166ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801ba8a:	4b10      	ldr	r3, [pc, #64]	; (801bacc <tcpip_thread+0x50>)
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d005      	beq.n	801ba9e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801ba92:	4b0e      	ldr	r3, [pc, #56]	; (801bacc <tcpip_thread+0x50>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	4a0e      	ldr	r2, [pc, #56]	; (801bad0 <tcpip_thread+0x54>)
 801ba98:	6812      	ldr	r2, [r2, #0]
 801ba9a:	4610      	mov	r0, r2
 801ba9c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801ba9e:	f107 030c 	add.w	r3, r7, #12
 801baa2:	4619      	mov	r1, r3
 801baa4:	480b      	ldr	r0, [pc, #44]	; (801bad4 <tcpip_thread+0x58>)
 801baa6:	f7ff ffb3 	bl	801ba10 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d106      	bne.n	801babe <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801bab0:	4b09      	ldr	r3, [pc, #36]	; (801bad8 <tcpip_thread+0x5c>)
 801bab2:	2291      	movs	r2, #145	; 0x91
 801bab4:	4909      	ldr	r1, [pc, #36]	; (801badc <tcpip_thread+0x60>)
 801bab6:	480a      	ldr	r0, [pc, #40]	; (801bae0 <tcpip_thread+0x64>)
 801bab8:	f000 ffe6 	bl	801ca88 <iprintf>
      continue;
 801babc:	e003      	b.n	801bac6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	4618      	mov	r0, r3
 801bac2:	f000 f80f 	bl	801bae4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801bac6:	e7ea      	b.n	801ba9e <tcpip_thread+0x22>
 801bac8:	2000b758 	.word	0x2000b758
 801bacc:	200075e0 	.word	0x200075e0
 801bad0:	200075e4 	.word	0x200075e4
 801bad4:	200075e8 	.word	0x200075e8
 801bad8:	080204b0 	.word	0x080204b0
 801badc:	0802050c 	.word	0x0802050c
 801bae0:	0802052c 	.word	0x0802052c

0801bae4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b082      	sub	sp, #8
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	781b      	ldrb	r3, [r3, #0]
 801baf0:	2b01      	cmp	r3, #1
 801baf2:	d018      	beq.n	801bb26 <tcpip_thread_handle_msg+0x42>
 801baf4:	2b02      	cmp	r3, #2
 801baf6:	d021      	beq.n	801bb3c <tcpip_thread_handle_msg+0x58>
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d126      	bne.n	801bb4a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	68db      	ldr	r3, [r3, #12]
 801bb00:	687a      	ldr	r2, [r7, #4]
 801bb02:	6850      	ldr	r0, [r2, #4]
 801bb04:	687a      	ldr	r2, [r7, #4]
 801bb06:	6892      	ldr	r2, [r2, #8]
 801bb08:	4611      	mov	r1, r2
 801bb0a:	4798      	blx	r3
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d004      	beq.n	801bb1c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	685b      	ldr	r3, [r3, #4]
 801bb16:	4618      	mov	r0, r3
 801bb18:	f7fa faa6 	bl	8016068 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bb1c:	6879      	ldr	r1, [r7, #4]
 801bb1e:	2009      	movs	r0, #9
 801bb20:	f7f9 fbf6 	bl	8015310 <memp_free>
      break;
 801bb24:	e018      	b.n	801bb58 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	685b      	ldr	r3, [r3, #4]
 801bb2a:	687a      	ldr	r2, [r7, #4]
 801bb2c:	6892      	ldr	r2, [r2, #8]
 801bb2e:	4610      	mov	r0, r2
 801bb30:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801bb32:	6879      	ldr	r1, [r7, #4]
 801bb34:	2008      	movs	r0, #8
 801bb36:	f7f9 fbeb 	bl	8015310 <memp_free>
      break;
 801bb3a:	e00d      	b.n	801bb58 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	687a      	ldr	r2, [r7, #4]
 801bb42:	6892      	ldr	r2, [r2, #8]
 801bb44:	4610      	mov	r0, r2
 801bb46:	4798      	blx	r3
      break;
 801bb48:	e006      	b.n	801bb58 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801bb4a:	4b05      	ldr	r3, [pc, #20]	; (801bb60 <tcpip_thread_handle_msg+0x7c>)
 801bb4c:	22cf      	movs	r2, #207	; 0xcf
 801bb4e:	4905      	ldr	r1, [pc, #20]	; (801bb64 <tcpip_thread_handle_msg+0x80>)
 801bb50:	4805      	ldr	r0, [pc, #20]	; (801bb68 <tcpip_thread_handle_msg+0x84>)
 801bb52:	f000 ff99 	bl	801ca88 <iprintf>
      break;
 801bb56:	bf00      	nop
  }
}
 801bb58:	bf00      	nop
 801bb5a:	3708      	adds	r7, #8
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}
 801bb60:	080204b0 	.word	0x080204b0
 801bb64:	0802050c 	.word	0x0802050c
 801bb68:	0802052c 	.word	0x0802052c

0801bb6c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b086      	sub	sp, #24
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	60f8      	str	r0, [r7, #12]
 801bb74:	60b9      	str	r1, [r7, #8]
 801bb76:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bb78:	481a      	ldr	r0, [pc, #104]	; (801bbe4 <tcpip_inpkt+0x78>)
 801bb7a:	f7fa fd84 	bl	8016686 <sys_mbox_valid>
 801bb7e:	4603      	mov	r3, r0
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d105      	bne.n	801bb90 <tcpip_inpkt+0x24>
 801bb84:	4b18      	ldr	r3, [pc, #96]	; (801bbe8 <tcpip_inpkt+0x7c>)
 801bb86:	22fc      	movs	r2, #252	; 0xfc
 801bb88:	4918      	ldr	r1, [pc, #96]	; (801bbec <tcpip_inpkt+0x80>)
 801bb8a:	4819      	ldr	r0, [pc, #100]	; (801bbf0 <tcpip_inpkt+0x84>)
 801bb8c:	f000 ff7c 	bl	801ca88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801bb90:	2009      	movs	r0, #9
 801bb92:	f7f9 fb47 	bl	8015224 <memp_malloc>
 801bb96:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d102      	bne.n	801bba4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801bb9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bba2:	e01a      	b.n	801bbda <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	2200      	movs	r2, #0
 801bba8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801bbaa:	697b      	ldr	r3, [r7, #20]
 801bbac:	68fa      	ldr	r2, [r7, #12]
 801bbae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	68ba      	ldr	r2, [r7, #8]
 801bbb4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801bbb6:	697b      	ldr	r3, [r7, #20]
 801bbb8:	687a      	ldr	r2, [r7, #4]
 801bbba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bbbc:	6979      	ldr	r1, [r7, #20]
 801bbbe:	4809      	ldr	r0, [pc, #36]	; (801bbe4 <tcpip_inpkt+0x78>)
 801bbc0:	f7fa fd16 	bl	80165f0 <sys_mbox_trypost>
 801bbc4:	4603      	mov	r3, r0
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d006      	beq.n	801bbd8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bbca:	6979      	ldr	r1, [r7, #20]
 801bbcc:	2009      	movs	r0, #9
 801bbce:	f7f9 fb9f 	bl	8015310 <memp_free>
    return ERR_MEM;
 801bbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bbd6:	e000      	b.n	801bbda <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801bbd8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801bbda:	4618      	mov	r0, r3
 801bbdc:	3718      	adds	r7, #24
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bd80      	pop	{r7, pc}
 801bbe2:	bf00      	nop
 801bbe4:	200075e8 	.word	0x200075e8
 801bbe8:	080204b0 	.word	0x080204b0
 801bbec:	08020554 	.word	0x08020554
 801bbf0:	0802052c 	.word	0x0802052c

0801bbf4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
 801bbfc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bc04:	f003 0318 	and.w	r3, r3, #24
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d006      	beq.n	801bc1a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801bc0c:	4a08      	ldr	r2, [pc, #32]	; (801bc30 <tcpip_input+0x3c>)
 801bc0e:	6839      	ldr	r1, [r7, #0]
 801bc10:	6878      	ldr	r0, [r7, #4]
 801bc12:	f7ff ffab 	bl	801bb6c <tcpip_inpkt>
 801bc16:	4603      	mov	r3, r0
 801bc18:	e005      	b.n	801bc26 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801bc1a:	4a06      	ldr	r2, [pc, #24]	; (801bc34 <tcpip_input+0x40>)
 801bc1c:	6839      	ldr	r1, [r7, #0]
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	f7ff ffa4 	bl	801bb6c <tcpip_inpkt>
 801bc24:	4603      	mov	r3, r0
}
 801bc26:	4618      	mov	r0, r3
 801bc28:	3708      	adds	r7, #8
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bd80      	pop	{r7, pc}
 801bc2e:	bf00      	nop
 801bc30:	08012fdd 	.word	0x08012fdd
 801bc34:	080137cd 	.word	0x080137cd

0801bc38 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b084      	sub	sp, #16
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
 801bc40:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bc42:	4819      	ldr	r0, [pc, #100]	; (801bca8 <tcpip_try_callback+0x70>)
 801bc44:	f7fa fd1f 	bl	8016686 <sys_mbox_valid>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d106      	bne.n	801bc5c <tcpip_try_callback+0x24>
 801bc4e:	4b17      	ldr	r3, [pc, #92]	; (801bcac <tcpip_try_callback+0x74>)
 801bc50:	f240 125d 	movw	r2, #349	; 0x15d
 801bc54:	4916      	ldr	r1, [pc, #88]	; (801bcb0 <tcpip_try_callback+0x78>)
 801bc56:	4817      	ldr	r0, [pc, #92]	; (801bcb4 <tcpip_try_callback+0x7c>)
 801bc58:	f000 ff16 	bl	801ca88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801bc5c:	2008      	movs	r0, #8
 801bc5e:	f7f9 fae1 	bl	8015224 <memp_malloc>
 801bc62:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d102      	bne.n	801bc70 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801bc6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc6e:	e017      	b.n	801bca0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	2201      	movs	r2, #1
 801bc74:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	687a      	ldr	r2, [r7, #4]
 801bc7a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	683a      	ldr	r2, [r7, #0]
 801bc80:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bc82:	68f9      	ldr	r1, [r7, #12]
 801bc84:	4808      	ldr	r0, [pc, #32]	; (801bca8 <tcpip_try_callback+0x70>)
 801bc86:	f7fa fcb3 	bl	80165f0 <sys_mbox_trypost>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d006      	beq.n	801bc9e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801bc90:	68f9      	ldr	r1, [r7, #12]
 801bc92:	2008      	movs	r0, #8
 801bc94:	f7f9 fb3c 	bl	8015310 <memp_free>
    return ERR_MEM;
 801bc98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc9c:	e000      	b.n	801bca0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801bc9e:	2300      	movs	r3, #0
}
 801bca0:	4618      	mov	r0, r3
 801bca2:	3710      	adds	r7, #16
 801bca4:	46bd      	mov	sp, r7
 801bca6:	bd80      	pop	{r7, pc}
 801bca8:	200075e8 	.word	0x200075e8
 801bcac:	080204b0 	.word	0x080204b0
 801bcb0:	08020554 	.word	0x08020554
 801bcb4:	0802052c 	.word	0x0802052c

0801bcb8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b084      	sub	sp, #16
 801bcbc:	af02      	add	r7, sp, #8
 801bcbe:	6078      	str	r0, [r7, #4]
 801bcc0:	6039      	str	r1, [r7, #0]
  lwip_init();
 801bcc2:	f7f7 fcd1 	bl	8013668 <lwip_init>

  tcpip_init_done = initfunc;
 801bcc6:	4a17      	ldr	r2, [pc, #92]	; (801bd24 <tcpip_init+0x6c>)
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801bccc:	4a16      	ldr	r2, [pc, #88]	; (801bd28 <tcpip_init+0x70>)
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801bcd2:	2106      	movs	r1, #6
 801bcd4:	4815      	ldr	r0, [pc, #84]	; (801bd2c <tcpip_init+0x74>)
 801bcd6:	f7fa fc71 	bl	80165bc <sys_mbox_new>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d006      	beq.n	801bcee <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801bce0:	4b13      	ldr	r3, [pc, #76]	; (801bd30 <tcpip_init+0x78>)
 801bce2:	f240 2261 	movw	r2, #609	; 0x261
 801bce6:	4913      	ldr	r1, [pc, #76]	; (801bd34 <tcpip_init+0x7c>)
 801bce8:	4813      	ldr	r0, [pc, #76]	; (801bd38 <tcpip_init+0x80>)
 801bcea:	f000 fecd 	bl	801ca88 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801bcee:	4813      	ldr	r0, [pc, #76]	; (801bd3c <tcpip_init+0x84>)
 801bcf0:	f7fa fce6 	bl	80166c0 <sys_mutex_new>
 801bcf4:	4603      	mov	r3, r0
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d006      	beq.n	801bd08 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801bcfa:	4b0d      	ldr	r3, [pc, #52]	; (801bd30 <tcpip_init+0x78>)
 801bcfc:	f240 2265 	movw	r2, #613	; 0x265
 801bd00:	490f      	ldr	r1, [pc, #60]	; (801bd40 <tcpip_init+0x88>)
 801bd02:	480d      	ldr	r0, [pc, #52]	; (801bd38 <tcpip_init+0x80>)
 801bd04:	f000 fec0 	bl	801ca88 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801bd08:	2318      	movs	r3, #24
 801bd0a:	9300      	str	r3, [sp, #0]
 801bd0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd10:	2200      	movs	r2, #0
 801bd12:	490c      	ldr	r1, [pc, #48]	; (801bd44 <tcpip_init+0x8c>)
 801bd14:	480c      	ldr	r0, [pc, #48]	; (801bd48 <tcpip_init+0x90>)
 801bd16:	f7fa fd05 	bl	8016724 <sys_thread_new>
}
 801bd1a:	bf00      	nop
 801bd1c:	3708      	adds	r7, #8
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	bf00      	nop
 801bd24:	200075e0 	.word	0x200075e0
 801bd28:	200075e4 	.word	0x200075e4
 801bd2c:	200075e8 	.word	0x200075e8
 801bd30:	080204b0 	.word	0x080204b0
 801bd34:	08020564 	.word	0x08020564
 801bd38:	0802052c 	.word	0x0802052c
 801bd3c:	2000b758 	.word	0x2000b758
 801bd40:	08020588 	.word	0x08020588
 801bd44:	0801ba7d 	.word	0x0801ba7d
 801bd48:	080205ac 	.word	0x080205ac

0801bd4c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b082      	sub	sp, #8
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bd54:	f7fa fd6e 	bl	8016834 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bd58:	4b0a      	ldr	r3, [pc, #40]	; (801bd84 <tcpip_tcp_timer+0x38>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d103      	bne.n	801bd68 <tcpip_tcp_timer+0x1c>
 801bd60:	4b09      	ldr	r3, [pc, #36]	; (801bd88 <tcpip_tcp_timer+0x3c>)
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d005      	beq.n	801bd74 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bd68:	2200      	movs	r2, #0
 801bd6a:	4908      	ldr	r1, [pc, #32]	; (801bd8c <tcpip_tcp_timer+0x40>)
 801bd6c:	20fa      	movs	r0, #250	; 0xfa
 801bd6e:	f000 f8f1 	bl	801bf54 <sys_timeout>
 801bd72:	e002      	b.n	801bd7a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bd74:	4b06      	ldr	r3, [pc, #24]	; (801bd90 <tcpip_tcp_timer+0x44>)
 801bd76:	2200      	movs	r2, #0
 801bd78:	601a      	str	r2, [r3, #0]
  }
}
 801bd7a:	bf00      	nop
 801bd7c:	3708      	adds	r7, #8
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	bf00      	nop
 801bd84:	2000b740 	.word	0x2000b740
 801bd88:	2000b750 	.word	0x2000b750
 801bd8c:	0801bd4d 	.word	0x0801bd4d
 801bd90:	200075f4 	.word	0x200075f4

0801bd94 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bd98:	4b0a      	ldr	r3, [pc, #40]	; (801bdc4 <tcp_timer_needed+0x30>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d10f      	bne.n	801bdc0 <tcp_timer_needed+0x2c>
 801bda0:	4b09      	ldr	r3, [pc, #36]	; (801bdc8 <tcp_timer_needed+0x34>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d103      	bne.n	801bdb0 <tcp_timer_needed+0x1c>
 801bda8:	4b08      	ldr	r3, [pc, #32]	; (801bdcc <tcp_timer_needed+0x38>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d007      	beq.n	801bdc0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bdb0:	4b04      	ldr	r3, [pc, #16]	; (801bdc4 <tcp_timer_needed+0x30>)
 801bdb2:	2201      	movs	r2, #1
 801bdb4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	4905      	ldr	r1, [pc, #20]	; (801bdd0 <tcp_timer_needed+0x3c>)
 801bdba:	20fa      	movs	r0, #250	; 0xfa
 801bdbc:	f000 f8ca 	bl	801bf54 <sys_timeout>
  }
}
 801bdc0:	bf00      	nop
 801bdc2:	bd80      	pop	{r7, pc}
 801bdc4:	200075f4 	.word	0x200075f4
 801bdc8:	2000b740 	.word	0x2000b740
 801bdcc:	2000b750 	.word	0x2000b750
 801bdd0:	0801bd4d 	.word	0x0801bd4d

0801bdd4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b086      	sub	sp, #24
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bde0:	200a      	movs	r0, #10
 801bde2:	f7f9 fa1f 	bl	8015224 <memp_malloc>
 801bde6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bde8:	693b      	ldr	r3, [r7, #16]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d109      	bne.n	801be02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801bdee:	693b      	ldr	r3, [r7, #16]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d151      	bne.n	801be98 <sys_timeout_abs+0xc4>
 801bdf4:	4b2a      	ldr	r3, [pc, #168]	; (801bea0 <sys_timeout_abs+0xcc>)
 801bdf6:	22be      	movs	r2, #190	; 0xbe
 801bdf8:	492a      	ldr	r1, [pc, #168]	; (801bea4 <sys_timeout_abs+0xd0>)
 801bdfa:	482b      	ldr	r0, [pc, #172]	; (801bea8 <sys_timeout_abs+0xd4>)
 801bdfc:	f000 fe44 	bl	801ca88 <iprintf>
    return;
 801be00:	e04a      	b.n	801be98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	2200      	movs	r2, #0
 801be06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801be08:	693b      	ldr	r3, [r7, #16]
 801be0a:	68ba      	ldr	r2, [r7, #8]
 801be0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	687a      	ldr	r2, [r7, #4]
 801be12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	68fa      	ldr	r2, [r7, #12]
 801be18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801be1a:	4b24      	ldr	r3, [pc, #144]	; (801beac <sys_timeout_abs+0xd8>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d103      	bne.n	801be2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801be22:	4a22      	ldr	r2, [pc, #136]	; (801beac <sys_timeout_abs+0xd8>)
 801be24:	693b      	ldr	r3, [r7, #16]
 801be26:	6013      	str	r3, [r2, #0]
    return;
 801be28:	e037      	b.n	801be9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801be2a:	693b      	ldr	r3, [r7, #16]
 801be2c:	685a      	ldr	r2, [r3, #4]
 801be2e:	4b1f      	ldr	r3, [pc, #124]	; (801beac <sys_timeout_abs+0xd8>)
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	685b      	ldr	r3, [r3, #4]
 801be34:	1ad3      	subs	r3, r2, r3
 801be36:	0fdb      	lsrs	r3, r3, #31
 801be38:	f003 0301 	and.w	r3, r3, #1
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d007      	beq.n	801be52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801be42:	4b1a      	ldr	r3, [pc, #104]	; (801beac <sys_timeout_abs+0xd8>)
 801be44:	681a      	ldr	r2, [r3, #0]
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801be4a:	4a18      	ldr	r2, [pc, #96]	; (801beac <sys_timeout_abs+0xd8>)
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	6013      	str	r3, [r2, #0]
 801be50:	e023      	b.n	801be9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801be52:	4b16      	ldr	r3, [pc, #88]	; (801beac <sys_timeout_abs+0xd8>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	617b      	str	r3, [r7, #20]
 801be58:	e01a      	b.n	801be90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d00b      	beq.n	801be7a <sys_timeout_abs+0xa6>
 801be62:	693b      	ldr	r3, [r7, #16]
 801be64:	685a      	ldr	r2, [r3, #4]
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	685b      	ldr	r3, [r3, #4]
 801be6c:	1ad3      	subs	r3, r2, r3
 801be6e:	0fdb      	lsrs	r3, r3, #31
 801be70:	f003 0301 	and.w	r3, r3, #1
 801be74:	b2db      	uxtb	r3, r3
 801be76:	2b00      	cmp	r3, #0
 801be78:	d007      	beq.n	801be8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801be7a:	697b      	ldr	r3, [r7, #20]
 801be7c:	681a      	ldr	r2, [r3, #0]
 801be7e:	693b      	ldr	r3, [r7, #16]
 801be80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	693a      	ldr	r2, [r7, #16]
 801be86:	601a      	str	r2, [r3, #0]
        break;
 801be88:	e007      	b.n	801be9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801be8a:	697b      	ldr	r3, [r7, #20]
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	617b      	str	r3, [r7, #20]
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d1e1      	bne.n	801be5a <sys_timeout_abs+0x86>
 801be96:	e000      	b.n	801be9a <sys_timeout_abs+0xc6>
    return;
 801be98:	bf00      	nop
      }
    }
  }
}
 801be9a:	3718      	adds	r7, #24
 801be9c:	46bd      	mov	sp, r7
 801be9e:	bd80      	pop	{r7, pc}
 801bea0:	080205bc 	.word	0x080205bc
 801bea4:	0802061c 	.word	0x0802061c
 801bea8:	0802065c 	.word	0x0802065c
 801beac:	200075ec 	.word	0x200075ec

0801beb0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b086      	sub	sp, #24
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bebc:	697b      	ldr	r3, [r7, #20]
 801bebe:	685b      	ldr	r3, [r3, #4]
 801bec0:	4798      	blx	r3

  now = sys_now();
 801bec2:	f7f0 fb25 	bl	800c510 <sys_now>
 801bec6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	4b0f      	ldr	r3, [pc, #60]	; (801bf0c <lwip_cyclic_timer+0x5c>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4413      	add	r3, r2
 801bed2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bed4:	68fa      	ldr	r2, [r7, #12]
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	0fdb      	lsrs	r3, r3, #31
 801bedc:	f003 0301 	and.w	r3, r3, #1
 801bee0:	b2db      	uxtb	r3, r3
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d009      	beq.n	801befa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	681a      	ldr	r2, [r3, #0]
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	4413      	add	r3, r2
 801beee:	687a      	ldr	r2, [r7, #4]
 801bef0:	4907      	ldr	r1, [pc, #28]	; (801bf10 <lwip_cyclic_timer+0x60>)
 801bef2:	4618      	mov	r0, r3
 801bef4:	f7ff ff6e 	bl	801bdd4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bef8:	e004      	b.n	801bf04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	4904      	ldr	r1, [pc, #16]	; (801bf10 <lwip_cyclic_timer+0x60>)
 801befe:	68f8      	ldr	r0, [r7, #12]
 801bf00:	f7ff ff68 	bl	801bdd4 <sys_timeout_abs>
}
 801bf04:	bf00      	nop
 801bf06:	3718      	adds	r7, #24
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	bd80      	pop	{r7, pc}
 801bf0c:	200075f0 	.word	0x200075f0
 801bf10:	0801beb1 	.word	0x0801beb1

0801bf14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b082      	sub	sp, #8
 801bf18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bf1a:	2301      	movs	r3, #1
 801bf1c:	607b      	str	r3, [r7, #4]
 801bf1e:	e00e      	b.n	801bf3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bf20:	4a0a      	ldr	r2, [pc, #40]	; (801bf4c <sys_timeouts_init+0x38>)
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	00db      	lsls	r3, r3, #3
 801bf2c:	4a07      	ldr	r2, [pc, #28]	; (801bf4c <sys_timeouts_init+0x38>)
 801bf2e:	4413      	add	r3, r2
 801bf30:	461a      	mov	r2, r3
 801bf32:	4907      	ldr	r1, [pc, #28]	; (801bf50 <sys_timeouts_init+0x3c>)
 801bf34:	f000 f80e 	bl	801bf54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	3301      	adds	r3, #1
 801bf3c:	607b      	str	r3, [r7, #4]
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	2b04      	cmp	r3, #4
 801bf42:	d9ed      	bls.n	801bf20 <sys_timeouts_init+0xc>
  }
}
 801bf44:	bf00      	nop
 801bf46:	3708      	adds	r7, #8
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd80      	pop	{r7, pc}
 801bf4c:	08020bd0 	.word	0x08020bd0
 801bf50:	0801beb1 	.word	0x0801beb1

0801bf54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b086      	sub	sp, #24
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	60f8      	str	r0, [r7, #12]
 801bf5c:	60b9      	str	r1, [r7, #8]
 801bf5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bf66:	d306      	bcc.n	801bf76 <sys_timeout+0x22>
 801bf68:	4b0a      	ldr	r3, [pc, #40]	; (801bf94 <sys_timeout+0x40>)
 801bf6a:	f240 1229 	movw	r2, #297	; 0x129
 801bf6e:	490a      	ldr	r1, [pc, #40]	; (801bf98 <sys_timeout+0x44>)
 801bf70:	480a      	ldr	r0, [pc, #40]	; (801bf9c <sys_timeout+0x48>)
 801bf72:	f000 fd89 	bl	801ca88 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bf76:	f7f0 facb 	bl	800c510 <sys_now>
 801bf7a:	4602      	mov	r2, r0
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	4413      	add	r3, r2
 801bf80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bf82:	687a      	ldr	r2, [r7, #4]
 801bf84:	68b9      	ldr	r1, [r7, #8]
 801bf86:	6978      	ldr	r0, [r7, #20]
 801bf88:	f7ff ff24 	bl	801bdd4 <sys_timeout_abs>
#endif
}
 801bf8c:	bf00      	nop
 801bf8e:	3718      	adds	r7, #24
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	080205bc 	.word	0x080205bc
 801bf98:	08020684 	.word	0x08020684
 801bf9c:	0802065c 	.word	0x0802065c

0801bfa0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bfa0:	b580      	push	{r7, lr}
 801bfa2:	b084      	sub	sp, #16
 801bfa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bfa6:	f7f0 fab3 	bl	800c510 <sys_now>
 801bfaa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bfac:	4b17      	ldr	r3, [pc, #92]	; (801c00c <sys_check_timeouts+0x6c>)
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d022      	beq.n	801bffe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	685b      	ldr	r3, [r3, #4]
 801bfbc:	68fa      	ldr	r2, [r7, #12]
 801bfbe:	1ad3      	subs	r3, r2, r3
 801bfc0:	0fdb      	lsrs	r3, r3, #31
 801bfc2:	f003 0301 	and.w	r3, r3, #1
 801bfc6:	b2db      	uxtb	r3, r3
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d11a      	bne.n	801c002 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801bfcc:	68bb      	ldr	r3, [r7, #8]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	4a0e      	ldr	r2, [pc, #56]	; (801c00c <sys_check_timeouts+0x6c>)
 801bfd2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bfd4:	68bb      	ldr	r3, [r7, #8]
 801bfd6:	689b      	ldr	r3, [r3, #8]
 801bfd8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bfda:	68bb      	ldr	r3, [r7, #8]
 801bfdc:	68db      	ldr	r3, [r3, #12]
 801bfde:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bfe0:	68bb      	ldr	r3, [r7, #8]
 801bfe2:	685b      	ldr	r3, [r3, #4]
 801bfe4:	4a0a      	ldr	r2, [pc, #40]	; (801c010 <sys_check_timeouts+0x70>)
 801bfe6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bfe8:	68b9      	ldr	r1, [r7, #8]
 801bfea:	200a      	movs	r0, #10
 801bfec:	f7f9 f990 	bl	8015310 <memp_free>
    if (handler != NULL) {
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d0da      	beq.n	801bfac <sys_check_timeouts+0xc>
      handler(arg);
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	6838      	ldr	r0, [r7, #0]
 801bffa:	4798      	blx	r3
  do {
 801bffc:	e7d6      	b.n	801bfac <sys_check_timeouts+0xc>
      return;
 801bffe:	bf00      	nop
 801c000:	e000      	b.n	801c004 <sys_check_timeouts+0x64>
      return;
 801c002:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c004:	3710      	adds	r7, #16
 801c006:	46bd      	mov	sp, r7
 801c008:	bd80      	pop	{r7, pc}
 801c00a:	bf00      	nop
 801c00c:	200075ec 	.word	0x200075ec
 801c010:	200075f0 	.word	0x200075f0

0801c014 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c014:	b580      	push	{r7, lr}
 801c016:	b082      	sub	sp, #8
 801c018:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c01a:	4b16      	ldr	r3, [pc, #88]	; (801c074 <sys_timeouts_sleeptime+0x60>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d102      	bne.n	801c028 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c026:	e020      	b.n	801c06a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c028:	f7f0 fa72 	bl	800c510 <sys_now>
 801c02c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c02e:	4b11      	ldr	r3, [pc, #68]	; (801c074 <sys_timeouts_sleeptime+0x60>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	685a      	ldr	r2, [r3, #4]
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	1ad3      	subs	r3, r2, r3
 801c038:	0fdb      	lsrs	r3, r3, #31
 801c03a:	f003 0301 	and.w	r3, r3, #1
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	2b00      	cmp	r3, #0
 801c042:	d001      	beq.n	801c048 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c044:	2300      	movs	r3, #0
 801c046:	e010      	b.n	801c06a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c048:	4b0a      	ldr	r3, [pc, #40]	; (801c074 <sys_timeouts_sleeptime+0x60>)
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	685a      	ldr	r2, [r3, #4]
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	1ad3      	subs	r3, r2, r3
 801c052:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c054:	683b      	ldr	r3, [r7, #0]
 801c056:	2b00      	cmp	r3, #0
 801c058:	da06      	bge.n	801c068 <sys_timeouts_sleeptime+0x54>
 801c05a:	4b07      	ldr	r3, [pc, #28]	; (801c078 <sys_timeouts_sleeptime+0x64>)
 801c05c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c060:	4906      	ldr	r1, [pc, #24]	; (801c07c <sys_timeouts_sleeptime+0x68>)
 801c062:	4807      	ldr	r0, [pc, #28]	; (801c080 <sys_timeouts_sleeptime+0x6c>)
 801c064:	f000 fd10 	bl	801ca88 <iprintf>
    return ret;
 801c068:	683b      	ldr	r3, [r7, #0]
  }
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	3708      	adds	r7, #8
 801c06e:	46bd      	mov	sp, r7
 801c070:	bd80      	pop	{r7, pc}
 801c072:	bf00      	nop
 801c074:	200075ec 	.word	0x200075ec
 801c078:	080205bc 	.word	0x080205bc
 801c07c:	080206bc 	.word	0x080206bc
 801c080:	0802065c 	.word	0x0802065c

0801c084 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c088:	f000 fd16 	bl	801cab8 <rand>
 801c08c:	4603      	mov	r3, r0
 801c08e:	b29b      	uxth	r3, r3
 801c090:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c094:	b29b      	uxth	r3, r3
 801c096:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c09a:	b29a      	uxth	r2, r3
 801c09c:	4b01      	ldr	r3, [pc, #4]	; (801c0a4 <udp_init+0x20>)
 801c09e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c0a0:	bf00      	nop
 801c0a2:	bd80      	pop	{r7, pc}
 801c0a4:	20000034 	.word	0x20000034

0801c0a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c0a8:	b480      	push	{r7}
 801c0aa:	b083      	sub	sp, #12
 801c0ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c0b2:	4b17      	ldr	r3, [pc, #92]	; (801c110 <udp_new_port+0x68>)
 801c0b4:	881b      	ldrh	r3, [r3, #0]
 801c0b6:	1c5a      	adds	r2, r3, #1
 801c0b8:	b291      	uxth	r1, r2
 801c0ba:	4a15      	ldr	r2, [pc, #84]	; (801c110 <udp_new_port+0x68>)
 801c0bc:	8011      	strh	r1, [r2, #0]
 801c0be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c0c2:	4293      	cmp	r3, r2
 801c0c4:	d103      	bne.n	801c0ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c0c6:	4b12      	ldr	r3, [pc, #72]	; (801c110 <udp_new_port+0x68>)
 801c0c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c0cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c0ce:	4b11      	ldr	r3, [pc, #68]	; (801c114 <udp_new_port+0x6c>)
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	603b      	str	r3, [r7, #0]
 801c0d4:	e011      	b.n	801c0fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	8a5a      	ldrh	r2, [r3, #18]
 801c0da:	4b0d      	ldr	r3, [pc, #52]	; (801c110 <udp_new_port+0x68>)
 801c0dc:	881b      	ldrh	r3, [r3, #0]
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d108      	bne.n	801c0f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c0e2:	88fb      	ldrh	r3, [r7, #6]
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	80fb      	strh	r3, [r7, #6]
 801c0e8:	88fb      	ldrh	r3, [r7, #6]
 801c0ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c0ee:	d3e0      	bcc.n	801c0b2 <udp_new_port+0xa>
        return 0;
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	e007      	b.n	801c104 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	68db      	ldr	r3, [r3, #12]
 801c0f8:	603b      	str	r3, [r7, #0]
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d1ea      	bne.n	801c0d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c100:	4b03      	ldr	r3, [pc, #12]	; (801c110 <udp_new_port+0x68>)
 801c102:	881b      	ldrh	r3, [r3, #0]
}
 801c104:	4618      	mov	r0, r3
 801c106:	370c      	adds	r7, #12
 801c108:	46bd      	mov	sp, r7
 801c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c10e:	4770      	bx	lr
 801c110:	20000034 	.word	0x20000034
 801c114:	2000b75c 	.word	0x2000b75c

0801c118 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b084      	sub	sp, #16
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	60f8      	str	r0, [r7, #12]
 801c120:	60b9      	str	r1, [r7, #8]
 801c122:	4613      	mov	r3, r2
 801c124:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d105      	bne.n	801c138 <udp_input_local_match+0x20>
 801c12c:	4b27      	ldr	r3, [pc, #156]	; (801c1cc <udp_input_local_match+0xb4>)
 801c12e:	2287      	movs	r2, #135	; 0x87
 801c130:	4927      	ldr	r1, [pc, #156]	; (801c1d0 <udp_input_local_match+0xb8>)
 801c132:	4828      	ldr	r0, [pc, #160]	; (801c1d4 <udp_input_local_match+0xbc>)
 801c134:	f000 fca8 	bl	801ca88 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d105      	bne.n	801c14a <udp_input_local_match+0x32>
 801c13e:	4b23      	ldr	r3, [pc, #140]	; (801c1cc <udp_input_local_match+0xb4>)
 801c140:	2288      	movs	r2, #136	; 0x88
 801c142:	4925      	ldr	r1, [pc, #148]	; (801c1d8 <udp_input_local_match+0xc0>)
 801c144:	4823      	ldr	r0, [pc, #140]	; (801c1d4 <udp_input_local_match+0xbc>)
 801c146:	f000 fc9f 	bl	801ca88 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	7a1b      	ldrb	r3, [r3, #8]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d00b      	beq.n	801c16a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	7a1a      	ldrb	r2, [r3, #8]
 801c156:	4b21      	ldr	r3, [pc, #132]	; (801c1dc <udp_input_local_match+0xc4>)
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c15e:	3301      	adds	r3, #1
 801c160:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c162:	429a      	cmp	r2, r3
 801c164:	d001      	beq.n	801c16a <udp_input_local_match+0x52>
    return 0;
 801c166:	2300      	movs	r3, #0
 801c168:	e02b      	b.n	801c1c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c16a:	79fb      	ldrb	r3, [r7, #7]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d018      	beq.n	801c1a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	2b00      	cmp	r3, #0
 801c174:	d013      	beq.n	801c19e <udp_input_local_match+0x86>
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d00f      	beq.n	801c19e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c17e:	4b17      	ldr	r3, [pc, #92]	; (801c1dc <udp_input_local_match+0xc4>)
 801c180:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c186:	d00a      	beq.n	801c19e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	681a      	ldr	r2, [r3, #0]
 801c18c:	4b13      	ldr	r3, [pc, #76]	; (801c1dc <udp_input_local_match+0xc4>)
 801c18e:	695b      	ldr	r3, [r3, #20]
 801c190:	405a      	eors	r2, r3
 801c192:	68bb      	ldr	r3, [r7, #8]
 801c194:	3308      	adds	r3, #8
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d110      	bne.n	801c1c0 <udp_input_local_match+0xa8>
          return 1;
 801c19e:	2301      	movs	r3, #1
 801c1a0:	e00f      	b.n	801c1c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d009      	beq.n	801c1bc <udp_input_local_match+0xa4>
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d005      	beq.n	801c1bc <udp_input_local_match+0xa4>
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	681a      	ldr	r2, [r3, #0]
 801c1b4:	4b09      	ldr	r3, [pc, #36]	; (801c1dc <udp_input_local_match+0xc4>)
 801c1b6:	695b      	ldr	r3, [r3, #20]
 801c1b8:	429a      	cmp	r2, r3
 801c1ba:	d101      	bne.n	801c1c0 <udp_input_local_match+0xa8>
        return 1;
 801c1bc:	2301      	movs	r3, #1
 801c1be:	e000      	b.n	801c1c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c1c0:	2300      	movs	r3, #0
}
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	3710      	adds	r7, #16
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	080206d0 	.word	0x080206d0
 801c1d0:	0802072c 	.word	0x0802072c
 801c1d4:	08020750 	.word	0x08020750
 801c1d8:	08020778 	.word	0x08020778
 801c1dc:	20008658 	.word	0x20008658

0801c1e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c1e0:	b590      	push	{r4, r7, lr}
 801c1e2:	b08d      	sub	sp, #52	; 0x34
 801c1e4:	af02      	add	r7, sp, #8
 801c1e6:	6078      	str	r0, [r7, #4]
 801c1e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d105      	bne.n	801c200 <udp_input+0x20>
 801c1f4:	4b7c      	ldr	r3, [pc, #496]	; (801c3e8 <udp_input+0x208>)
 801c1f6:	22cf      	movs	r2, #207	; 0xcf
 801c1f8:	497c      	ldr	r1, [pc, #496]	; (801c3ec <udp_input+0x20c>)
 801c1fa:	487d      	ldr	r0, [pc, #500]	; (801c3f0 <udp_input+0x210>)
 801c1fc:	f000 fc44 	bl	801ca88 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d105      	bne.n	801c212 <udp_input+0x32>
 801c206:	4b78      	ldr	r3, [pc, #480]	; (801c3e8 <udp_input+0x208>)
 801c208:	22d0      	movs	r2, #208	; 0xd0
 801c20a:	497a      	ldr	r1, [pc, #488]	; (801c3f4 <udp_input+0x214>)
 801c20c:	4878      	ldr	r0, [pc, #480]	; (801c3f0 <udp_input+0x210>)
 801c20e:	f000 fc3b 	bl	801ca88 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	895b      	ldrh	r3, [r3, #10]
 801c216:	2b07      	cmp	r3, #7
 801c218:	d803      	bhi.n	801c222 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7f9 ff24 	bl	8016068 <pbuf_free>
    goto end;
 801c220:	e0de      	b.n	801c3e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	685b      	ldr	r3, [r3, #4]
 801c226:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c228:	4b73      	ldr	r3, [pc, #460]	; (801c3f8 <udp_input+0x218>)
 801c22a:	695a      	ldr	r2, [r3, #20]
 801c22c:	4b72      	ldr	r3, [pc, #456]	; (801c3f8 <udp_input+0x218>)
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	4619      	mov	r1, r3
 801c232:	4610      	mov	r0, r2
 801c234:	f7f7 fce2 	bl	8013bfc <ip4_addr_isbroadcast_u32>
 801c238:	4603      	mov	r3, r0
 801c23a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c23c:	697b      	ldr	r3, [r7, #20]
 801c23e:	881b      	ldrh	r3, [r3, #0]
 801c240:	b29b      	uxth	r3, r3
 801c242:	4618      	mov	r0, r3
 801c244:	f7f4 f8a8 	bl	8010398 <lwip_htons>
 801c248:	4603      	mov	r3, r0
 801c24a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c24c:	697b      	ldr	r3, [r7, #20]
 801c24e:	885b      	ldrh	r3, [r3, #2]
 801c250:	b29b      	uxth	r3, r3
 801c252:	4618      	mov	r0, r3
 801c254:	f7f4 f8a0 	bl	8010398 <lwip_htons>
 801c258:	4603      	mov	r3, r0
 801c25a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c25c:	2300      	movs	r3, #0
 801c25e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c260:	2300      	movs	r3, #0
 801c262:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c264:	2300      	movs	r3, #0
 801c266:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c268:	4b64      	ldr	r3, [pc, #400]	; (801c3fc <udp_input+0x21c>)
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	627b      	str	r3, [r7, #36]	; 0x24
 801c26e:	e054      	b.n	801c31a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c272:	8a5b      	ldrh	r3, [r3, #18]
 801c274:	89fa      	ldrh	r2, [r7, #14]
 801c276:	429a      	cmp	r2, r3
 801c278:	d14a      	bne.n	801c310 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c27a:	7cfb      	ldrb	r3, [r7, #19]
 801c27c:	461a      	mov	r2, r3
 801c27e:	6839      	ldr	r1, [r7, #0]
 801c280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c282:	f7ff ff49 	bl	801c118 <udp_input_local_match>
 801c286:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d041      	beq.n	801c310 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c28e:	7c1b      	ldrb	r3, [r3, #16]
 801c290:	f003 0304 	and.w	r3, r3, #4
 801c294:	2b00      	cmp	r3, #0
 801c296:	d11d      	bne.n	801c2d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c298:	69fb      	ldr	r3, [r7, #28]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d102      	bne.n	801c2a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2a0:	61fb      	str	r3, [r7, #28]
 801c2a2:	e017      	b.n	801c2d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c2a4:	7cfb      	ldrb	r3, [r7, #19]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d014      	beq.n	801c2d4 <udp_input+0xf4>
 801c2aa:	4b53      	ldr	r3, [pc, #332]	; (801c3f8 <udp_input+0x218>)
 801c2ac:	695b      	ldr	r3, [r3, #20]
 801c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c2b2:	d10f      	bne.n	801c2d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c2b4:	69fb      	ldr	r3, [r7, #28]
 801c2b6:	681a      	ldr	r2, [r3, #0]
 801c2b8:	683b      	ldr	r3, [r7, #0]
 801c2ba:	3304      	adds	r3, #4
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d008      	beq.n	801c2d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c4:	681a      	ldr	r2, [r3, #0]
 801c2c6:	683b      	ldr	r3, [r7, #0]
 801c2c8:	3304      	adds	r3, #4
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	d101      	bne.n	801c2d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2d6:	8a9b      	ldrh	r3, [r3, #20]
 801c2d8:	8a3a      	ldrh	r2, [r7, #16]
 801c2da:	429a      	cmp	r2, r3
 801c2dc:	d118      	bne.n	801c310 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d005      	beq.n	801c2f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2e8:	685a      	ldr	r2, [r3, #4]
 801c2ea:	4b43      	ldr	r3, [pc, #268]	; (801c3f8 <udp_input+0x218>)
 801c2ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c2ee:	429a      	cmp	r2, r3
 801c2f0:	d10e      	bne.n	801c310 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c2f2:	6a3b      	ldr	r3, [r7, #32]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d014      	beq.n	801c322 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2fa:	68da      	ldr	r2, [r3, #12]
 801c2fc:	6a3b      	ldr	r3, [r7, #32]
 801c2fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c300:	4b3e      	ldr	r3, [pc, #248]	; (801c3fc <udp_input+0x21c>)
 801c302:	681a      	ldr	r2, [r3, #0]
 801c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c306:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c308:	4a3c      	ldr	r2, [pc, #240]	; (801c3fc <udp_input+0x21c>)
 801c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c30c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c30e:	e008      	b.n	801c322 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c312:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c316:	68db      	ldr	r3, [r3, #12]
 801c318:	627b      	str	r3, [r7, #36]	; 0x24
 801c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d1a7      	bne.n	801c270 <udp_input+0x90>
 801c320:	e000      	b.n	801c324 <udp_input+0x144>
        break;
 801c322:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c326:	2b00      	cmp	r3, #0
 801c328:	d101      	bne.n	801c32e <udp_input+0x14e>
    pcb = uncon_pcb;
 801c32a:	69fb      	ldr	r3, [r7, #28]
 801c32c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c330:	2b00      	cmp	r3, #0
 801c332:	d002      	beq.n	801c33a <udp_input+0x15a>
    for_us = 1;
 801c334:	2301      	movs	r3, #1
 801c336:	76fb      	strb	r3, [r7, #27]
 801c338:	e00a      	b.n	801c350 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	3304      	adds	r3, #4
 801c33e:	681a      	ldr	r2, [r3, #0]
 801c340:	4b2d      	ldr	r3, [pc, #180]	; (801c3f8 <udp_input+0x218>)
 801c342:	695b      	ldr	r3, [r3, #20]
 801c344:	429a      	cmp	r2, r3
 801c346:	bf0c      	ite	eq
 801c348:	2301      	moveq	r3, #1
 801c34a:	2300      	movne	r3, #0
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c350:	7efb      	ldrb	r3, [r7, #27]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d041      	beq.n	801c3da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c356:	2108      	movs	r1, #8
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f7f9 fdff 	bl	8015f5c <pbuf_remove_header>
 801c35e:	4603      	mov	r3, r0
 801c360:	2b00      	cmp	r3, #0
 801c362:	d00a      	beq.n	801c37a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c364:	4b20      	ldr	r3, [pc, #128]	; (801c3e8 <udp_input+0x208>)
 801c366:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c36a:	4925      	ldr	r1, [pc, #148]	; (801c400 <udp_input+0x220>)
 801c36c:	4820      	ldr	r0, [pc, #128]	; (801c3f0 <udp_input+0x210>)
 801c36e:	f000 fb8b 	bl	801ca88 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c372:	6878      	ldr	r0, [r7, #4]
 801c374:	f7f9 fe78 	bl	8016068 <pbuf_free>
      goto end;
 801c378:	e032      	b.n	801c3e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d012      	beq.n	801c3a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c382:	699b      	ldr	r3, [r3, #24]
 801c384:	2b00      	cmp	r3, #0
 801c386:	d00a      	beq.n	801c39e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c38a:	699c      	ldr	r4, [r3, #24]
 801c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c38e:	69d8      	ldr	r0, [r3, #28]
 801c390:	8a3b      	ldrh	r3, [r7, #16]
 801c392:	9300      	str	r3, [sp, #0]
 801c394:	4b1b      	ldr	r3, [pc, #108]	; (801c404 <udp_input+0x224>)
 801c396:	687a      	ldr	r2, [r7, #4]
 801c398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c39a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c39c:	e021      	b.n	801c3e2 <udp_input+0x202>
        pbuf_free(p);
 801c39e:	6878      	ldr	r0, [r7, #4]
 801c3a0:	f7f9 fe62 	bl	8016068 <pbuf_free>
        goto end;
 801c3a4:	e01c      	b.n	801c3e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c3a6:	7cfb      	ldrb	r3, [r7, #19]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d112      	bne.n	801c3d2 <udp_input+0x1f2>
 801c3ac:	4b12      	ldr	r3, [pc, #72]	; (801c3f8 <udp_input+0x218>)
 801c3ae:	695b      	ldr	r3, [r3, #20]
 801c3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c3b4:	2be0      	cmp	r3, #224	; 0xe0
 801c3b6:	d00c      	beq.n	801c3d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c3b8:	4b0f      	ldr	r3, [pc, #60]	; (801c3f8 <udp_input+0x218>)
 801c3ba:	899b      	ldrh	r3, [r3, #12]
 801c3bc:	3308      	adds	r3, #8
 801c3be:	b29b      	uxth	r3, r3
 801c3c0:	b21b      	sxth	r3, r3
 801c3c2:	4619      	mov	r1, r3
 801c3c4:	6878      	ldr	r0, [r7, #4]
 801c3c6:	f7f9 fe3c 	bl	8016042 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c3ca:	2103      	movs	r1, #3
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	f7f6 fffb 	bl	80133c8 <icmp_dest_unreach>
      pbuf_free(p);
 801c3d2:	6878      	ldr	r0, [r7, #4]
 801c3d4:	f7f9 fe48 	bl	8016068 <pbuf_free>
  return;
 801c3d8:	e003      	b.n	801c3e2 <udp_input+0x202>
    pbuf_free(p);
 801c3da:	6878      	ldr	r0, [r7, #4]
 801c3dc:	f7f9 fe44 	bl	8016068 <pbuf_free>
  return;
 801c3e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c3e2:	372c      	adds	r7, #44	; 0x2c
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bd90      	pop	{r4, r7, pc}
 801c3e8:	080206d0 	.word	0x080206d0
 801c3ec:	080207a0 	.word	0x080207a0
 801c3f0:	08020750 	.word	0x08020750
 801c3f4:	080207b8 	.word	0x080207b8
 801c3f8:	20008658 	.word	0x20008658
 801c3fc:	2000b75c 	.word	0x2000b75c
 801c400:	080207d4 	.word	0x080207d4
 801c404:	20008668 	.word	0x20008668

0801c408 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b088      	sub	sp, #32
 801c40c:	af02      	add	r7, sp, #8
 801c40e:	60f8      	str	r0, [r7, #12]
 801c410:	60b9      	str	r1, [r7, #8]
 801c412:	607a      	str	r2, [r7, #4]
 801c414:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d109      	bne.n	801c430 <udp_sendto_if+0x28>
 801c41c:	4b2e      	ldr	r3, [pc, #184]	; (801c4d8 <udp_sendto_if+0xd0>)
 801c41e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c422:	492e      	ldr	r1, [pc, #184]	; (801c4dc <udp_sendto_if+0xd4>)
 801c424:	482e      	ldr	r0, [pc, #184]	; (801c4e0 <udp_sendto_if+0xd8>)
 801c426:	f000 fb2f 	bl	801ca88 <iprintf>
 801c42a:	f06f 030f 	mvn.w	r3, #15
 801c42e:	e04f      	b.n	801c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d109      	bne.n	801c44a <udp_sendto_if+0x42>
 801c436:	4b28      	ldr	r3, [pc, #160]	; (801c4d8 <udp_sendto_if+0xd0>)
 801c438:	f240 2281 	movw	r2, #641	; 0x281
 801c43c:	4929      	ldr	r1, [pc, #164]	; (801c4e4 <udp_sendto_if+0xdc>)
 801c43e:	4828      	ldr	r0, [pc, #160]	; (801c4e0 <udp_sendto_if+0xd8>)
 801c440:	f000 fb22 	bl	801ca88 <iprintf>
 801c444:	f06f 030f 	mvn.w	r3, #15
 801c448:	e042      	b.n	801c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d109      	bne.n	801c464 <udp_sendto_if+0x5c>
 801c450:	4b21      	ldr	r3, [pc, #132]	; (801c4d8 <udp_sendto_if+0xd0>)
 801c452:	f240 2282 	movw	r2, #642	; 0x282
 801c456:	4924      	ldr	r1, [pc, #144]	; (801c4e8 <udp_sendto_if+0xe0>)
 801c458:	4821      	ldr	r0, [pc, #132]	; (801c4e0 <udp_sendto_if+0xd8>)
 801c45a:	f000 fb15 	bl	801ca88 <iprintf>
 801c45e:	f06f 030f 	mvn.w	r3, #15
 801c462:	e035      	b.n	801c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c464:	6a3b      	ldr	r3, [r7, #32]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d109      	bne.n	801c47e <udp_sendto_if+0x76>
 801c46a:	4b1b      	ldr	r3, [pc, #108]	; (801c4d8 <udp_sendto_if+0xd0>)
 801c46c:	f240 2283 	movw	r2, #643	; 0x283
 801c470:	491e      	ldr	r1, [pc, #120]	; (801c4ec <udp_sendto_if+0xe4>)
 801c472:	481b      	ldr	r0, [pc, #108]	; (801c4e0 <udp_sendto_if+0xd8>)
 801c474:	f000 fb08 	bl	801ca88 <iprintf>
 801c478:	f06f 030f 	mvn.w	r3, #15
 801c47c:	e028      	b.n	801c4d0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d009      	beq.n	801c498 <udp_sendto_if+0x90>
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d005      	beq.n	801c498 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c494:	2be0      	cmp	r3, #224	; 0xe0
 801c496:	d103      	bne.n	801c4a0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c498:	6a3b      	ldr	r3, [r7, #32]
 801c49a:	3304      	adds	r3, #4
 801c49c:	617b      	str	r3, [r7, #20]
 801c49e:	e00b      	b.n	801c4b8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	6a3b      	ldr	r3, [r7, #32]
 801c4a6:	3304      	adds	r3, #4
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	429a      	cmp	r2, r3
 801c4ac:	d002      	beq.n	801c4b4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c4ae:	f06f 0303 	mvn.w	r3, #3
 801c4b2:	e00d      	b.n	801c4d0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c4b8:	887a      	ldrh	r2, [r7, #2]
 801c4ba:	697b      	ldr	r3, [r7, #20]
 801c4bc:	9301      	str	r3, [sp, #4]
 801c4be:	6a3b      	ldr	r3, [r7, #32]
 801c4c0:	9300      	str	r3, [sp, #0]
 801c4c2:	4613      	mov	r3, r2
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	68b9      	ldr	r1, [r7, #8]
 801c4c8:	68f8      	ldr	r0, [r7, #12]
 801c4ca:	f000 f811 	bl	801c4f0 <udp_sendto_if_src>
 801c4ce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	3718      	adds	r7, #24
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	bd80      	pop	{r7, pc}
 801c4d8:	080206d0 	.word	0x080206d0
 801c4dc:	08020870 	.word	0x08020870
 801c4e0:	08020750 	.word	0x08020750
 801c4e4:	0802088c 	.word	0x0802088c
 801c4e8:	080208a8 	.word	0x080208a8
 801c4ec:	080208c8 	.word	0x080208c8

0801c4f0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b08c      	sub	sp, #48	; 0x30
 801c4f4:	af04      	add	r7, sp, #16
 801c4f6:	60f8      	str	r0, [r7, #12]
 801c4f8:	60b9      	str	r1, [r7, #8]
 801c4fa:	607a      	str	r2, [r7, #4]
 801c4fc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d109      	bne.n	801c518 <udp_sendto_if_src+0x28>
 801c504:	4b65      	ldr	r3, [pc, #404]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c506:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c50a:	4965      	ldr	r1, [pc, #404]	; (801c6a0 <udp_sendto_if_src+0x1b0>)
 801c50c:	4865      	ldr	r0, [pc, #404]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c50e:	f000 fabb 	bl	801ca88 <iprintf>
 801c512:	f06f 030f 	mvn.w	r3, #15
 801c516:	e0bc      	b.n	801c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c518:	68bb      	ldr	r3, [r7, #8]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d109      	bne.n	801c532 <udp_sendto_if_src+0x42>
 801c51e:	4b5f      	ldr	r3, [pc, #380]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c520:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c524:	4960      	ldr	r1, [pc, #384]	; (801c6a8 <udp_sendto_if_src+0x1b8>)
 801c526:	485f      	ldr	r0, [pc, #380]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c528:	f000 faae 	bl	801ca88 <iprintf>
 801c52c:	f06f 030f 	mvn.w	r3, #15
 801c530:	e0af      	b.n	801c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d109      	bne.n	801c54c <udp_sendto_if_src+0x5c>
 801c538:	4b58      	ldr	r3, [pc, #352]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c53a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c53e:	495b      	ldr	r1, [pc, #364]	; (801c6ac <udp_sendto_if_src+0x1bc>)
 801c540:	4858      	ldr	r0, [pc, #352]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c542:	f000 faa1 	bl	801ca88 <iprintf>
 801c546:	f06f 030f 	mvn.w	r3, #15
 801c54a:	e0a2      	b.n	801c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d109      	bne.n	801c566 <udp_sendto_if_src+0x76>
 801c552:	4b52      	ldr	r3, [pc, #328]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c554:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c558:	4955      	ldr	r1, [pc, #340]	; (801c6b0 <udp_sendto_if_src+0x1c0>)
 801c55a:	4852      	ldr	r0, [pc, #328]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c55c:	f000 fa94 	bl	801ca88 <iprintf>
 801c560:	f06f 030f 	mvn.w	r3, #15
 801c564:	e095      	b.n	801c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d109      	bne.n	801c580 <udp_sendto_if_src+0x90>
 801c56c:	4b4b      	ldr	r3, [pc, #300]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c56e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c572:	4950      	ldr	r1, [pc, #320]	; (801c6b4 <udp_sendto_if_src+0x1c4>)
 801c574:	484b      	ldr	r0, [pc, #300]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c576:	f000 fa87 	bl	801ca88 <iprintf>
 801c57a:	f06f 030f 	mvn.w	r3, #15
 801c57e:	e088      	b.n	801c692 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	8a5b      	ldrh	r3, [r3, #18]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d10f      	bne.n	801c5a8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c588:	68f9      	ldr	r1, [r7, #12]
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	8a5b      	ldrh	r3, [r3, #18]
 801c58e:	461a      	mov	r2, r3
 801c590:	68f8      	ldr	r0, [r7, #12]
 801c592:	f000 f893 	bl	801c6bc <udp_bind>
 801c596:	4603      	mov	r3, r0
 801c598:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c59a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d002      	beq.n	801c5a8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c5a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c5a6:	e074      	b.n	801c692 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c5a8:	68bb      	ldr	r3, [r7, #8]
 801c5aa:	891b      	ldrh	r3, [r3, #8]
 801c5ac:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c5b0:	4293      	cmp	r3, r2
 801c5b2:	d902      	bls.n	801c5ba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5b8:	e06b      	b.n	801c692 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c5ba:	2108      	movs	r1, #8
 801c5bc:	68b8      	ldr	r0, [r7, #8]
 801c5be:	f7f9 fcbd 	bl	8015f3c <pbuf_add_header>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d015      	beq.n	801c5f4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c5c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5cc:	2108      	movs	r1, #8
 801c5ce:	2022      	movs	r0, #34	; 0x22
 801c5d0:	f7f9 fa6a 	bl	8015aa8 <pbuf_alloc>
 801c5d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c5d6:	69fb      	ldr	r3, [r7, #28]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d102      	bne.n	801c5e2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5e0:	e057      	b.n	801c692 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c5e2:	68bb      	ldr	r3, [r7, #8]
 801c5e4:	891b      	ldrh	r3, [r3, #8]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d006      	beq.n	801c5f8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c5ea:	68b9      	ldr	r1, [r7, #8]
 801c5ec:	69f8      	ldr	r0, [r7, #28]
 801c5ee:	f7f9 fe5f 	bl	80162b0 <pbuf_chain>
 801c5f2:	e001      	b.n	801c5f8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c5f4:	68bb      	ldr	r3, [r7, #8]
 801c5f6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c5f8:	69fb      	ldr	r3, [r7, #28]
 801c5fa:	895b      	ldrh	r3, [r3, #10]
 801c5fc:	2b07      	cmp	r3, #7
 801c5fe:	d806      	bhi.n	801c60e <udp_sendto_if_src+0x11e>
 801c600:	4b26      	ldr	r3, [pc, #152]	; (801c69c <udp_sendto_if_src+0x1ac>)
 801c602:	f240 320e 	movw	r2, #782	; 0x30e
 801c606:	492c      	ldr	r1, [pc, #176]	; (801c6b8 <udp_sendto_if_src+0x1c8>)
 801c608:	4826      	ldr	r0, [pc, #152]	; (801c6a4 <udp_sendto_if_src+0x1b4>)
 801c60a:	f000 fa3d 	bl	801ca88 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c60e:	69fb      	ldr	r3, [r7, #28]
 801c610:	685b      	ldr	r3, [r3, #4]
 801c612:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	8a5b      	ldrh	r3, [r3, #18]
 801c618:	4618      	mov	r0, r3
 801c61a:	f7f3 febd 	bl	8010398 <lwip_htons>
 801c61e:	4603      	mov	r3, r0
 801c620:	461a      	mov	r2, r3
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c626:	887b      	ldrh	r3, [r7, #2]
 801c628:	4618      	mov	r0, r3
 801c62a:	f7f3 feb5 	bl	8010398 <lwip_htons>
 801c62e:	4603      	mov	r3, r0
 801c630:	461a      	mov	r2, r3
 801c632:	697b      	ldr	r3, [r7, #20]
 801c634:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	2200      	movs	r2, #0
 801c63a:	719a      	strb	r2, [r3, #6]
 801c63c:	2200      	movs	r2, #0
 801c63e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c640:	69fb      	ldr	r3, [r7, #28]
 801c642:	891b      	ldrh	r3, [r3, #8]
 801c644:	4618      	mov	r0, r3
 801c646:	f7f3 fea7 	bl	8010398 <lwip_htons>
 801c64a:	4603      	mov	r3, r0
 801c64c:	461a      	mov	r2, r3
 801c64e:	697b      	ldr	r3, [r7, #20]
 801c650:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c652:	2311      	movs	r3, #17
 801c654:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	7adb      	ldrb	r3, [r3, #11]
 801c65a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	7a9b      	ldrb	r3, [r3, #10]
 801c660:	7cb9      	ldrb	r1, [r7, #18]
 801c662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c664:	9202      	str	r2, [sp, #8]
 801c666:	7cfa      	ldrb	r2, [r7, #19]
 801c668:	9201      	str	r2, [sp, #4]
 801c66a:	9300      	str	r3, [sp, #0]
 801c66c:	460b      	mov	r3, r1
 801c66e:	687a      	ldr	r2, [r7, #4]
 801c670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c672:	69f8      	ldr	r0, [r7, #28]
 801c674:	f7f7 fa14 	bl	8013aa0 <ip4_output_if_src>
 801c678:	4603      	mov	r3, r0
 801c67a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c67c:	69fa      	ldr	r2, [r7, #28]
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	429a      	cmp	r2, r3
 801c682:	d004      	beq.n	801c68e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c684:	69f8      	ldr	r0, [r7, #28]
 801c686:	f7f9 fcef 	bl	8016068 <pbuf_free>
    q = NULL;
 801c68a:	2300      	movs	r3, #0
 801c68c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c68e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c692:	4618      	mov	r0, r3
 801c694:	3720      	adds	r7, #32
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
 801c69a:	bf00      	nop
 801c69c:	080206d0 	.word	0x080206d0
 801c6a0:	080208e8 	.word	0x080208e8
 801c6a4:	08020750 	.word	0x08020750
 801c6a8:	08020908 	.word	0x08020908
 801c6ac:	08020928 	.word	0x08020928
 801c6b0:	0802094c 	.word	0x0802094c
 801c6b4:	08020970 	.word	0x08020970
 801c6b8:	08020994 	.word	0x08020994

0801c6bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	b086      	sub	sp, #24
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	60f8      	str	r0, [r7, #12]
 801c6c4:	60b9      	str	r1, [r7, #8]
 801c6c6:	4613      	mov	r3, r2
 801c6c8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c6ca:	68bb      	ldr	r3, [r7, #8]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d101      	bne.n	801c6d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c6d0:	4b39      	ldr	r3, [pc, #228]	; (801c7b8 <udp_bind+0xfc>)
 801c6d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d109      	bne.n	801c6ee <udp_bind+0x32>
 801c6da:	4b38      	ldr	r3, [pc, #224]	; (801c7bc <udp_bind+0x100>)
 801c6dc:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c6e0:	4937      	ldr	r1, [pc, #220]	; (801c7c0 <udp_bind+0x104>)
 801c6e2:	4838      	ldr	r0, [pc, #224]	; (801c7c4 <udp_bind+0x108>)
 801c6e4:	f000 f9d0 	bl	801ca88 <iprintf>
 801c6e8:	f06f 030f 	mvn.w	r3, #15
 801c6ec:	e060      	b.n	801c7b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c6f2:	4b35      	ldr	r3, [pc, #212]	; (801c7c8 <udp_bind+0x10c>)
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	617b      	str	r3, [r7, #20]
 801c6f8:	e009      	b.n	801c70e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c6fa:	68fa      	ldr	r2, [r7, #12]
 801c6fc:	697b      	ldr	r3, [r7, #20]
 801c6fe:	429a      	cmp	r2, r3
 801c700:	d102      	bne.n	801c708 <udp_bind+0x4c>
      rebind = 1;
 801c702:	2301      	movs	r3, #1
 801c704:	74fb      	strb	r3, [r7, #19]
      break;
 801c706:	e005      	b.n	801c714 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c708:	697b      	ldr	r3, [r7, #20]
 801c70a:	68db      	ldr	r3, [r3, #12]
 801c70c:	617b      	str	r3, [r7, #20]
 801c70e:	697b      	ldr	r3, [r7, #20]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d1f2      	bne.n	801c6fa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c714:	88fb      	ldrh	r3, [r7, #6]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d109      	bne.n	801c72e <udp_bind+0x72>
    port = udp_new_port();
 801c71a:	f7ff fcc5 	bl	801c0a8 <udp_new_port>
 801c71e:	4603      	mov	r3, r0
 801c720:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c722:	88fb      	ldrh	r3, [r7, #6]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d12c      	bne.n	801c782 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c728:	f06f 0307 	mvn.w	r3, #7
 801c72c:	e040      	b.n	801c7b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c72e:	4b26      	ldr	r3, [pc, #152]	; (801c7c8 <udp_bind+0x10c>)
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	617b      	str	r3, [r7, #20]
 801c734:	e022      	b.n	801c77c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c736:	68fa      	ldr	r2, [r7, #12]
 801c738:	697b      	ldr	r3, [r7, #20]
 801c73a:	429a      	cmp	r2, r3
 801c73c:	d01b      	beq.n	801c776 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c73e:	697b      	ldr	r3, [r7, #20]
 801c740:	8a5b      	ldrh	r3, [r3, #18]
 801c742:	88fa      	ldrh	r2, [r7, #6]
 801c744:	429a      	cmp	r2, r3
 801c746:	d116      	bne.n	801c776 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c748:	697b      	ldr	r3, [r7, #20]
 801c74a:	681a      	ldr	r2, [r3, #0]
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c750:	429a      	cmp	r2, r3
 801c752:	d00d      	beq.n	801c770 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c754:	68bb      	ldr	r3, [r7, #8]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d00a      	beq.n	801c770 <udp_bind+0xb4>
 801c75a:	68bb      	ldr	r3, [r7, #8]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d006      	beq.n	801c770 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c762:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c764:	2b00      	cmp	r3, #0
 801c766:	d003      	beq.n	801c770 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c768:	697b      	ldr	r3, [r7, #20]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d102      	bne.n	801c776 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c770:	f06f 0307 	mvn.w	r3, #7
 801c774:	e01c      	b.n	801c7b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c776:	697b      	ldr	r3, [r7, #20]
 801c778:	68db      	ldr	r3, [r3, #12]
 801c77a:	617b      	str	r3, [r7, #20]
 801c77c:	697b      	ldr	r3, [r7, #20]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d1d9      	bne.n	801c736 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c782:	68bb      	ldr	r3, [r7, #8]
 801c784:	2b00      	cmp	r3, #0
 801c786:	d002      	beq.n	801c78e <udp_bind+0xd2>
 801c788:	68bb      	ldr	r3, [r7, #8]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	e000      	b.n	801c790 <udp_bind+0xd4>
 801c78e:	2300      	movs	r3, #0
 801c790:	68fa      	ldr	r2, [r7, #12]
 801c792:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	88fa      	ldrh	r2, [r7, #6]
 801c798:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c79a:	7cfb      	ldrb	r3, [r7, #19]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d106      	bne.n	801c7ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c7a0:	4b09      	ldr	r3, [pc, #36]	; (801c7c8 <udp_bind+0x10c>)
 801c7a2:	681a      	ldr	r2, [r3, #0]
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c7a8:	4a07      	ldr	r2, [pc, #28]	; (801c7c8 <udp_bind+0x10c>)
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c7ae:	2300      	movs	r3, #0
}
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	3718      	adds	r7, #24
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	bd80      	pop	{r7, pc}
 801c7b8:	08020ad0 	.word	0x08020ad0
 801c7bc:	080206d0 	.word	0x080206d0
 801c7c0:	080209c4 	.word	0x080209c4
 801c7c4:	08020750 	.word	0x08020750
 801c7c8:	2000b75c 	.word	0x2000b75c

0801c7cc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b086      	sub	sp, #24
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	60f8      	str	r0, [r7, #12]
 801c7d4:	60b9      	str	r1, [r7, #8]
 801c7d6:	4613      	mov	r3, r2
 801c7d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d109      	bne.n	801c7f4 <udp_connect+0x28>
 801c7e0:	4b2c      	ldr	r3, [pc, #176]	; (801c894 <udp_connect+0xc8>)
 801c7e2:	f240 4235 	movw	r2, #1077	; 0x435
 801c7e6:	492c      	ldr	r1, [pc, #176]	; (801c898 <udp_connect+0xcc>)
 801c7e8:	482c      	ldr	r0, [pc, #176]	; (801c89c <udp_connect+0xd0>)
 801c7ea:	f000 f94d 	bl	801ca88 <iprintf>
 801c7ee:	f06f 030f 	mvn.w	r3, #15
 801c7f2:	e04b      	b.n	801c88c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d109      	bne.n	801c80e <udp_connect+0x42>
 801c7fa:	4b26      	ldr	r3, [pc, #152]	; (801c894 <udp_connect+0xc8>)
 801c7fc:	f240 4236 	movw	r2, #1078	; 0x436
 801c800:	4927      	ldr	r1, [pc, #156]	; (801c8a0 <udp_connect+0xd4>)
 801c802:	4826      	ldr	r0, [pc, #152]	; (801c89c <udp_connect+0xd0>)
 801c804:	f000 f940 	bl	801ca88 <iprintf>
 801c808:	f06f 030f 	mvn.w	r3, #15
 801c80c:	e03e      	b.n	801c88c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	8a5b      	ldrh	r3, [r3, #18]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d10f      	bne.n	801c836 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c816:	68f9      	ldr	r1, [r7, #12]
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	8a5b      	ldrh	r3, [r3, #18]
 801c81c:	461a      	mov	r2, r3
 801c81e:	68f8      	ldr	r0, [r7, #12]
 801c820:	f7ff ff4c 	bl	801c6bc <udp_bind>
 801c824:	4603      	mov	r3, r0
 801c826:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d002      	beq.n	801c836 <udp_connect+0x6a>
      return err;
 801c830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c834:	e02a      	b.n	801c88c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c836:	68bb      	ldr	r3, [r7, #8]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d002      	beq.n	801c842 <udp_connect+0x76>
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	e000      	b.n	801c844 <udp_connect+0x78>
 801c842:	2300      	movs	r3, #0
 801c844:	68fa      	ldr	r2, [r7, #12]
 801c846:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	88fa      	ldrh	r2, [r7, #6]
 801c84c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	7c1b      	ldrb	r3, [r3, #16]
 801c852:	f043 0304 	orr.w	r3, r3, #4
 801c856:	b2da      	uxtb	r2, r3
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c85c:	4b11      	ldr	r3, [pc, #68]	; (801c8a4 <udp_connect+0xd8>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	617b      	str	r3, [r7, #20]
 801c862:	e008      	b.n	801c876 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c864:	68fa      	ldr	r2, [r7, #12]
 801c866:	697b      	ldr	r3, [r7, #20]
 801c868:	429a      	cmp	r2, r3
 801c86a:	d101      	bne.n	801c870 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c86c:	2300      	movs	r3, #0
 801c86e:	e00d      	b.n	801c88c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c870:	697b      	ldr	r3, [r7, #20]
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	617b      	str	r3, [r7, #20]
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1f3      	bne.n	801c864 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c87c:	4b09      	ldr	r3, [pc, #36]	; (801c8a4 <udp_connect+0xd8>)
 801c87e:	681a      	ldr	r2, [r3, #0]
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c884:	4a07      	ldr	r2, [pc, #28]	; (801c8a4 <udp_connect+0xd8>)
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c88a:	2300      	movs	r3, #0
}
 801c88c:	4618      	mov	r0, r3
 801c88e:	3718      	adds	r7, #24
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}
 801c894:	080206d0 	.word	0x080206d0
 801c898:	080209dc 	.word	0x080209dc
 801c89c:	08020750 	.word	0x08020750
 801c8a0:	080209f8 	.word	0x080209f8
 801c8a4:	2000b75c 	.word	0x2000b75c

0801c8a8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	b084      	sub	sp, #16
 801c8ac:	af00      	add	r7, sp, #0
 801c8ae:	60f8      	str	r0, [r7, #12]
 801c8b0:	60b9      	str	r1, [r7, #8]
 801c8b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d107      	bne.n	801c8ca <udp_recv+0x22>
 801c8ba:	4b08      	ldr	r3, [pc, #32]	; (801c8dc <udp_recv+0x34>)
 801c8bc:	f240 428a 	movw	r2, #1162	; 0x48a
 801c8c0:	4907      	ldr	r1, [pc, #28]	; (801c8e0 <udp_recv+0x38>)
 801c8c2:	4808      	ldr	r0, [pc, #32]	; (801c8e4 <udp_recv+0x3c>)
 801c8c4:	f000 f8e0 	bl	801ca88 <iprintf>
 801c8c8:	e005      	b.n	801c8d6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	68ba      	ldr	r2, [r7, #8]
 801c8ce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	687a      	ldr	r2, [r7, #4]
 801c8d4:	61da      	str	r2, [r3, #28]
}
 801c8d6:	3710      	adds	r7, #16
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	bd80      	pop	{r7, pc}
 801c8dc:	080206d0 	.word	0x080206d0
 801c8e0:	08020a30 	.word	0x08020a30
 801c8e4:	08020750 	.word	0x08020750

0801c8e8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b084      	sub	sp, #16
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d107      	bne.n	801c906 <udp_remove+0x1e>
 801c8f6:	4b19      	ldr	r3, [pc, #100]	; (801c95c <udp_remove+0x74>)
 801c8f8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c8fc:	4918      	ldr	r1, [pc, #96]	; (801c960 <udp_remove+0x78>)
 801c8fe:	4819      	ldr	r0, [pc, #100]	; (801c964 <udp_remove+0x7c>)
 801c900:	f000 f8c2 	bl	801ca88 <iprintf>
 801c904:	e026      	b.n	801c954 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c906:	4b18      	ldr	r3, [pc, #96]	; (801c968 <udp_remove+0x80>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	687a      	ldr	r2, [r7, #4]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d105      	bne.n	801c91c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c910:	4b15      	ldr	r3, [pc, #84]	; (801c968 <udp_remove+0x80>)
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	68db      	ldr	r3, [r3, #12]
 801c916:	4a14      	ldr	r2, [pc, #80]	; (801c968 <udp_remove+0x80>)
 801c918:	6013      	str	r3, [r2, #0]
 801c91a:	e017      	b.n	801c94c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c91c:	4b12      	ldr	r3, [pc, #72]	; (801c968 <udp_remove+0x80>)
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	60fb      	str	r3, [r7, #12]
 801c922:	e010      	b.n	801c946 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	68db      	ldr	r3, [r3, #12]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d009      	beq.n	801c940 <udp_remove+0x58>
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	68db      	ldr	r3, [r3, #12]
 801c930:	687a      	ldr	r2, [r7, #4]
 801c932:	429a      	cmp	r2, r3
 801c934:	d104      	bne.n	801c940 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	68da      	ldr	r2, [r3, #12]
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	60da      	str	r2, [r3, #12]
        break;
 801c93e:	e005      	b.n	801c94c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	68db      	ldr	r3, [r3, #12]
 801c944:	60fb      	str	r3, [r7, #12]
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d1eb      	bne.n	801c924 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c94c:	6879      	ldr	r1, [r7, #4]
 801c94e:	2000      	movs	r0, #0
 801c950:	f7f8 fcde 	bl	8015310 <memp_free>
}
 801c954:	3710      	adds	r7, #16
 801c956:	46bd      	mov	sp, r7
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	bf00      	nop
 801c95c:	080206d0 	.word	0x080206d0
 801c960:	08020a48 	.word	0x08020a48
 801c964:	08020750 	.word	0x08020750
 801c968:	2000b75c 	.word	0x2000b75c

0801c96c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b082      	sub	sp, #8
 801c970:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c972:	2000      	movs	r0, #0
 801c974:	f7f8 fc56 	bl	8015224 <memp_malloc>
 801c978:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d007      	beq.n	801c990 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c980:	2220      	movs	r2, #32
 801c982:	2100      	movs	r1, #0
 801c984:	6878      	ldr	r0, [r7, #4]
 801c986:	f000 f877 	bl	801ca78 <memset>
    pcb->ttl = UDP_TTL;
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	22ff      	movs	r2, #255	; 0xff
 801c98e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c990:	687b      	ldr	r3, [r7, #4]
}
 801c992:	4618      	mov	r0, r3
 801c994:	3708      	adds	r7, #8
 801c996:	46bd      	mov	sp, r7
 801c998:	bd80      	pop	{r7, pc}
	...

0801c99c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c99c:	b480      	push	{r7}
 801c99e:	b085      	sub	sp, #20
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	6078      	str	r0, [r7, #4]
 801c9a4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d01e      	beq.n	801c9ea <udp_netif_ip_addr_changed+0x4e>
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d01a      	beq.n	801c9ea <udp_netif_ip_addr_changed+0x4e>
 801c9b4:	683b      	ldr	r3, [r7, #0]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d017      	beq.n	801c9ea <udp_netif_ip_addr_changed+0x4e>
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d013      	beq.n	801c9ea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c9c2:	4b0d      	ldr	r3, [pc, #52]	; (801c9f8 <udp_netif_ip_addr_changed+0x5c>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	60fb      	str	r3, [r7, #12]
 801c9c8:	e00c      	b.n	801c9e4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	681a      	ldr	r2, [r3, #0]
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	d103      	bne.n	801c9de <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c9d6:	683b      	ldr	r3, [r7, #0]
 801c9d8:	681a      	ldr	r2, [r3, #0]
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	68db      	ldr	r3, [r3, #12]
 801c9e2:	60fb      	str	r3, [r7, #12]
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d1ef      	bne.n	801c9ca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c9ea:	bf00      	nop
 801c9ec:	3714      	adds	r7, #20
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f4:	4770      	bx	lr
 801c9f6:	bf00      	nop
 801c9f8:	2000b75c 	.word	0x2000b75c

0801c9fc <__libc_init_array>:
 801c9fc:	b570      	push	{r4, r5, r6, lr}
 801c9fe:	4e0d      	ldr	r6, [pc, #52]	; (801ca34 <__libc_init_array+0x38>)
 801ca00:	4c0d      	ldr	r4, [pc, #52]	; (801ca38 <__libc_init_array+0x3c>)
 801ca02:	1ba4      	subs	r4, r4, r6
 801ca04:	10a4      	asrs	r4, r4, #2
 801ca06:	2500      	movs	r5, #0
 801ca08:	42a5      	cmp	r5, r4
 801ca0a:	d109      	bne.n	801ca20 <__libc_init_array+0x24>
 801ca0c:	4e0b      	ldr	r6, [pc, #44]	; (801ca3c <__libc_init_array+0x40>)
 801ca0e:	4c0c      	ldr	r4, [pc, #48]	; (801ca40 <__libc_init_array+0x44>)
 801ca10:	f000 ff5a 	bl	801d8c8 <_init>
 801ca14:	1ba4      	subs	r4, r4, r6
 801ca16:	10a4      	asrs	r4, r4, #2
 801ca18:	2500      	movs	r5, #0
 801ca1a:	42a5      	cmp	r5, r4
 801ca1c:	d105      	bne.n	801ca2a <__libc_init_array+0x2e>
 801ca1e:	bd70      	pop	{r4, r5, r6, pc}
 801ca20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ca24:	4798      	blx	r3
 801ca26:	3501      	adds	r5, #1
 801ca28:	e7ee      	b.n	801ca08 <__libc_init_array+0xc>
 801ca2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ca2e:	4798      	blx	r3
 801ca30:	3501      	adds	r5, #1
 801ca32:	e7f2      	b.n	801ca1a <__libc_init_array+0x1e>
 801ca34:	08020c98 	.word	0x08020c98
 801ca38:	08020c98 	.word	0x08020c98
 801ca3c:	08020c98 	.word	0x08020c98
 801ca40:	08020c9c 	.word	0x08020c9c

0801ca44 <memcmp>:
 801ca44:	b530      	push	{r4, r5, lr}
 801ca46:	2400      	movs	r4, #0
 801ca48:	42a2      	cmp	r2, r4
 801ca4a:	d101      	bne.n	801ca50 <memcmp+0xc>
 801ca4c:	2000      	movs	r0, #0
 801ca4e:	e007      	b.n	801ca60 <memcmp+0x1c>
 801ca50:	5d03      	ldrb	r3, [r0, r4]
 801ca52:	3401      	adds	r4, #1
 801ca54:	190d      	adds	r5, r1, r4
 801ca56:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ca5a:	42ab      	cmp	r3, r5
 801ca5c:	d0f4      	beq.n	801ca48 <memcmp+0x4>
 801ca5e:	1b58      	subs	r0, r3, r5
 801ca60:	bd30      	pop	{r4, r5, pc}

0801ca62 <memcpy>:
 801ca62:	b510      	push	{r4, lr}
 801ca64:	1e43      	subs	r3, r0, #1
 801ca66:	440a      	add	r2, r1
 801ca68:	4291      	cmp	r1, r2
 801ca6a:	d100      	bne.n	801ca6e <memcpy+0xc>
 801ca6c:	bd10      	pop	{r4, pc}
 801ca6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca72:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ca76:	e7f7      	b.n	801ca68 <memcpy+0x6>

0801ca78 <memset>:
 801ca78:	4402      	add	r2, r0
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	4293      	cmp	r3, r2
 801ca7e:	d100      	bne.n	801ca82 <memset+0xa>
 801ca80:	4770      	bx	lr
 801ca82:	f803 1b01 	strb.w	r1, [r3], #1
 801ca86:	e7f9      	b.n	801ca7c <memset+0x4>

0801ca88 <iprintf>:
 801ca88:	b40f      	push	{r0, r1, r2, r3}
 801ca8a:	4b0a      	ldr	r3, [pc, #40]	; (801cab4 <iprintf+0x2c>)
 801ca8c:	b513      	push	{r0, r1, r4, lr}
 801ca8e:	681c      	ldr	r4, [r3, #0]
 801ca90:	b124      	cbz	r4, 801ca9c <iprintf+0x14>
 801ca92:	69a3      	ldr	r3, [r4, #24]
 801ca94:	b913      	cbnz	r3, 801ca9c <iprintf+0x14>
 801ca96:	4620      	mov	r0, r4
 801ca98:	f000 f882 	bl	801cba0 <__sinit>
 801ca9c:	ab05      	add	r3, sp, #20
 801ca9e:	9a04      	ldr	r2, [sp, #16]
 801caa0:	68a1      	ldr	r1, [r4, #8]
 801caa2:	9301      	str	r3, [sp, #4]
 801caa4:	4620      	mov	r0, r4
 801caa6:	f000 f9df 	bl	801ce68 <_vfiprintf_r>
 801caaa:	b002      	add	sp, #8
 801caac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cab0:	b004      	add	sp, #16
 801cab2:	4770      	bx	lr
 801cab4:	20000038 	.word	0x20000038

0801cab8 <rand>:
 801cab8:	b538      	push	{r3, r4, r5, lr}
 801caba:	4b13      	ldr	r3, [pc, #76]	; (801cb08 <rand+0x50>)
 801cabc:	681c      	ldr	r4, [r3, #0]
 801cabe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cac0:	b97b      	cbnz	r3, 801cae2 <rand+0x2a>
 801cac2:	2018      	movs	r0, #24
 801cac4:	f000 f8f6 	bl	801ccb4 <malloc>
 801cac8:	4a10      	ldr	r2, [pc, #64]	; (801cb0c <rand+0x54>)
 801caca:	4b11      	ldr	r3, [pc, #68]	; (801cb10 <rand+0x58>)
 801cacc:	63a0      	str	r0, [r4, #56]	; 0x38
 801cace:	e9c0 2300 	strd	r2, r3, [r0]
 801cad2:	4b10      	ldr	r3, [pc, #64]	; (801cb14 <rand+0x5c>)
 801cad4:	6083      	str	r3, [r0, #8]
 801cad6:	230b      	movs	r3, #11
 801cad8:	8183      	strh	r3, [r0, #12]
 801cada:	2201      	movs	r2, #1
 801cadc:	2300      	movs	r3, #0
 801cade:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cae2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cae4:	480c      	ldr	r0, [pc, #48]	; (801cb18 <rand+0x60>)
 801cae6:	690a      	ldr	r2, [r1, #16]
 801cae8:	694b      	ldr	r3, [r1, #20]
 801caea:	4c0c      	ldr	r4, [pc, #48]	; (801cb1c <rand+0x64>)
 801caec:	4350      	muls	r0, r2
 801caee:	fb04 0003 	mla	r0, r4, r3, r0
 801caf2:	fba2 2304 	umull	r2, r3, r2, r4
 801caf6:	4403      	add	r3, r0
 801caf8:	1c54      	adds	r4, r2, #1
 801cafa:	f143 0500 	adc.w	r5, r3, #0
 801cafe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801cb02:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801cb06:	bd38      	pop	{r3, r4, r5, pc}
 801cb08:	20000038 	.word	0x20000038
 801cb0c:	abcd330e 	.word	0xabcd330e
 801cb10:	e66d1234 	.word	0xe66d1234
 801cb14:	0005deec 	.word	0x0005deec
 801cb18:	5851f42d 	.word	0x5851f42d
 801cb1c:	4c957f2d 	.word	0x4c957f2d

0801cb20 <std>:
 801cb20:	2300      	movs	r3, #0
 801cb22:	b510      	push	{r4, lr}
 801cb24:	4604      	mov	r4, r0
 801cb26:	e9c0 3300 	strd	r3, r3, [r0]
 801cb2a:	6083      	str	r3, [r0, #8]
 801cb2c:	8181      	strh	r1, [r0, #12]
 801cb2e:	6643      	str	r3, [r0, #100]	; 0x64
 801cb30:	81c2      	strh	r2, [r0, #14]
 801cb32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cb36:	6183      	str	r3, [r0, #24]
 801cb38:	4619      	mov	r1, r3
 801cb3a:	2208      	movs	r2, #8
 801cb3c:	305c      	adds	r0, #92	; 0x5c
 801cb3e:	f7ff ff9b 	bl	801ca78 <memset>
 801cb42:	4b05      	ldr	r3, [pc, #20]	; (801cb58 <std+0x38>)
 801cb44:	6263      	str	r3, [r4, #36]	; 0x24
 801cb46:	4b05      	ldr	r3, [pc, #20]	; (801cb5c <std+0x3c>)
 801cb48:	62a3      	str	r3, [r4, #40]	; 0x28
 801cb4a:	4b05      	ldr	r3, [pc, #20]	; (801cb60 <std+0x40>)
 801cb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cb4e:	4b05      	ldr	r3, [pc, #20]	; (801cb64 <std+0x44>)
 801cb50:	6224      	str	r4, [r4, #32]
 801cb52:	6323      	str	r3, [r4, #48]	; 0x30
 801cb54:	bd10      	pop	{r4, pc}
 801cb56:	bf00      	nop
 801cb58:	0801d3c5 	.word	0x0801d3c5
 801cb5c:	0801d3e7 	.word	0x0801d3e7
 801cb60:	0801d41f 	.word	0x0801d41f
 801cb64:	0801d443 	.word	0x0801d443

0801cb68 <_cleanup_r>:
 801cb68:	4901      	ldr	r1, [pc, #4]	; (801cb70 <_cleanup_r+0x8>)
 801cb6a:	f000 b885 	b.w	801cc78 <_fwalk_reent>
 801cb6e:	bf00      	nop
 801cb70:	0801d71d 	.word	0x0801d71d

0801cb74 <__sfmoreglue>:
 801cb74:	b570      	push	{r4, r5, r6, lr}
 801cb76:	1e4a      	subs	r2, r1, #1
 801cb78:	2568      	movs	r5, #104	; 0x68
 801cb7a:	4355      	muls	r5, r2
 801cb7c:	460e      	mov	r6, r1
 801cb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cb82:	f000 f8ed 	bl	801cd60 <_malloc_r>
 801cb86:	4604      	mov	r4, r0
 801cb88:	b140      	cbz	r0, 801cb9c <__sfmoreglue+0x28>
 801cb8a:	2100      	movs	r1, #0
 801cb8c:	e9c0 1600 	strd	r1, r6, [r0]
 801cb90:	300c      	adds	r0, #12
 801cb92:	60a0      	str	r0, [r4, #8]
 801cb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cb98:	f7ff ff6e 	bl	801ca78 <memset>
 801cb9c:	4620      	mov	r0, r4
 801cb9e:	bd70      	pop	{r4, r5, r6, pc}

0801cba0 <__sinit>:
 801cba0:	6983      	ldr	r3, [r0, #24]
 801cba2:	b510      	push	{r4, lr}
 801cba4:	4604      	mov	r4, r0
 801cba6:	bb33      	cbnz	r3, 801cbf6 <__sinit+0x56>
 801cba8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801cbac:	6503      	str	r3, [r0, #80]	; 0x50
 801cbae:	4b12      	ldr	r3, [pc, #72]	; (801cbf8 <__sinit+0x58>)
 801cbb0:	4a12      	ldr	r2, [pc, #72]	; (801cbfc <__sinit+0x5c>)
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	6282      	str	r2, [r0, #40]	; 0x28
 801cbb6:	4298      	cmp	r0, r3
 801cbb8:	bf04      	itt	eq
 801cbba:	2301      	moveq	r3, #1
 801cbbc:	6183      	streq	r3, [r0, #24]
 801cbbe:	f000 f81f 	bl	801cc00 <__sfp>
 801cbc2:	6060      	str	r0, [r4, #4]
 801cbc4:	4620      	mov	r0, r4
 801cbc6:	f000 f81b 	bl	801cc00 <__sfp>
 801cbca:	60a0      	str	r0, [r4, #8]
 801cbcc:	4620      	mov	r0, r4
 801cbce:	f000 f817 	bl	801cc00 <__sfp>
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	60e0      	str	r0, [r4, #12]
 801cbd6:	2104      	movs	r1, #4
 801cbd8:	6860      	ldr	r0, [r4, #4]
 801cbda:	f7ff ffa1 	bl	801cb20 <std>
 801cbde:	2201      	movs	r2, #1
 801cbe0:	2109      	movs	r1, #9
 801cbe2:	68a0      	ldr	r0, [r4, #8]
 801cbe4:	f7ff ff9c 	bl	801cb20 <std>
 801cbe8:	2202      	movs	r2, #2
 801cbea:	2112      	movs	r1, #18
 801cbec:	68e0      	ldr	r0, [r4, #12]
 801cbee:	f7ff ff97 	bl	801cb20 <std>
 801cbf2:	2301      	movs	r3, #1
 801cbf4:	61a3      	str	r3, [r4, #24]
 801cbf6:	bd10      	pop	{r4, pc}
 801cbf8:	08020bf8 	.word	0x08020bf8
 801cbfc:	0801cb69 	.word	0x0801cb69

0801cc00 <__sfp>:
 801cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc02:	4b1b      	ldr	r3, [pc, #108]	; (801cc70 <__sfp+0x70>)
 801cc04:	681e      	ldr	r6, [r3, #0]
 801cc06:	69b3      	ldr	r3, [r6, #24]
 801cc08:	4607      	mov	r7, r0
 801cc0a:	b913      	cbnz	r3, 801cc12 <__sfp+0x12>
 801cc0c:	4630      	mov	r0, r6
 801cc0e:	f7ff ffc7 	bl	801cba0 <__sinit>
 801cc12:	3648      	adds	r6, #72	; 0x48
 801cc14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cc18:	3b01      	subs	r3, #1
 801cc1a:	d503      	bpl.n	801cc24 <__sfp+0x24>
 801cc1c:	6833      	ldr	r3, [r6, #0]
 801cc1e:	b133      	cbz	r3, 801cc2e <__sfp+0x2e>
 801cc20:	6836      	ldr	r6, [r6, #0]
 801cc22:	e7f7      	b.n	801cc14 <__sfp+0x14>
 801cc24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cc28:	b16d      	cbz	r5, 801cc46 <__sfp+0x46>
 801cc2a:	3468      	adds	r4, #104	; 0x68
 801cc2c:	e7f4      	b.n	801cc18 <__sfp+0x18>
 801cc2e:	2104      	movs	r1, #4
 801cc30:	4638      	mov	r0, r7
 801cc32:	f7ff ff9f 	bl	801cb74 <__sfmoreglue>
 801cc36:	6030      	str	r0, [r6, #0]
 801cc38:	2800      	cmp	r0, #0
 801cc3a:	d1f1      	bne.n	801cc20 <__sfp+0x20>
 801cc3c:	230c      	movs	r3, #12
 801cc3e:	603b      	str	r3, [r7, #0]
 801cc40:	4604      	mov	r4, r0
 801cc42:	4620      	mov	r0, r4
 801cc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc46:	4b0b      	ldr	r3, [pc, #44]	; (801cc74 <__sfp+0x74>)
 801cc48:	6665      	str	r5, [r4, #100]	; 0x64
 801cc4a:	e9c4 5500 	strd	r5, r5, [r4]
 801cc4e:	60a5      	str	r5, [r4, #8]
 801cc50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cc54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801cc58:	2208      	movs	r2, #8
 801cc5a:	4629      	mov	r1, r5
 801cc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cc60:	f7ff ff0a 	bl	801ca78 <memset>
 801cc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cc6c:	e7e9      	b.n	801cc42 <__sfp+0x42>
 801cc6e:	bf00      	nop
 801cc70:	08020bf8 	.word	0x08020bf8
 801cc74:	ffff0001 	.word	0xffff0001

0801cc78 <_fwalk_reent>:
 801cc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc7c:	4680      	mov	r8, r0
 801cc7e:	4689      	mov	r9, r1
 801cc80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cc84:	2600      	movs	r6, #0
 801cc86:	b914      	cbnz	r4, 801cc8e <_fwalk_reent+0x16>
 801cc88:	4630      	mov	r0, r6
 801cc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801cc92:	3f01      	subs	r7, #1
 801cc94:	d501      	bpl.n	801cc9a <_fwalk_reent+0x22>
 801cc96:	6824      	ldr	r4, [r4, #0]
 801cc98:	e7f5      	b.n	801cc86 <_fwalk_reent+0xe>
 801cc9a:	89ab      	ldrh	r3, [r5, #12]
 801cc9c:	2b01      	cmp	r3, #1
 801cc9e:	d907      	bls.n	801ccb0 <_fwalk_reent+0x38>
 801cca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cca4:	3301      	adds	r3, #1
 801cca6:	d003      	beq.n	801ccb0 <_fwalk_reent+0x38>
 801cca8:	4629      	mov	r1, r5
 801ccaa:	4640      	mov	r0, r8
 801ccac:	47c8      	blx	r9
 801ccae:	4306      	orrs	r6, r0
 801ccb0:	3568      	adds	r5, #104	; 0x68
 801ccb2:	e7ee      	b.n	801cc92 <_fwalk_reent+0x1a>

0801ccb4 <malloc>:
 801ccb4:	4b02      	ldr	r3, [pc, #8]	; (801ccc0 <malloc+0xc>)
 801ccb6:	4601      	mov	r1, r0
 801ccb8:	6818      	ldr	r0, [r3, #0]
 801ccba:	f000 b851 	b.w	801cd60 <_malloc_r>
 801ccbe:	bf00      	nop
 801ccc0:	20000038 	.word	0x20000038

0801ccc4 <_free_r>:
 801ccc4:	b538      	push	{r3, r4, r5, lr}
 801ccc6:	4605      	mov	r5, r0
 801ccc8:	2900      	cmp	r1, #0
 801ccca:	d045      	beq.n	801cd58 <_free_r+0x94>
 801cccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccd0:	1f0c      	subs	r4, r1, #4
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	bfb8      	it	lt
 801ccd6:	18e4      	addlt	r4, r4, r3
 801ccd8:	f000 fdc0 	bl	801d85c <__malloc_lock>
 801ccdc:	4a1f      	ldr	r2, [pc, #124]	; (801cd5c <_free_r+0x98>)
 801ccde:	6813      	ldr	r3, [r2, #0]
 801cce0:	4610      	mov	r0, r2
 801cce2:	b933      	cbnz	r3, 801ccf2 <_free_r+0x2e>
 801cce4:	6063      	str	r3, [r4, #4]
 801cce6:	6014      	str	r4, [r2, #0]
 801cce8:	4628      	mov	r0, r5
 801ccea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ccee:	f000 bdb6 	b.w	801d85e <__malloc_unlock>
 801ccf2:	42a3      	cmp	r3, r4
 801ccf4:	d90c      	bls.n	801cd10 <_free_r+0x4c>
 801ccf6:	6821      	ldr	r1, [r4, #0]
 801ccf8:	1862      	adds	r2, r4, r1
 801ccfa:	4293      	cmp	r3, r2
 801ccfc:	bf04      	itt	eq
 801ccfe:	681a      	ldreq	r2, [r3, #0]
 801cd00:	685b      	ldreq	r3, [r3, #4]
 801cd02:	6063      	str	r3, [r4, #4]
 801cd04:	bf04      	itt	eq
 801cd06:	1852      	addeq	r2, r2, r1
 801cd08:	6022      	streq	r2, [r4, #0]
 801cd0a:	6004      	str	r4, [r0, #0]
 801cd0c:	e7ec      	b.n	801cce8 <_free_r+0x24>
 801cd0e:	4613      	mov	r3, r2
 801cd10:	685a      	ldr	r2, [r3, #4]
 801cd12:	b10a      	cbz	r2, 801cd18 <_free_r+0x54>
 801cd14:	42a2      	cmp	r2, r4
 801cd16:	d9fa      	bls.n	801cd0e <_free_r+0x4a>
 801cd18:	6819      	ldr	r1, [r3, #0]
 801cd1a:	1858      	adds	r0, r3, r1
 801cd1c:	42a0      	cmp	r0, r4
 801cd1e:	d10b      	bne.n	801cd38 <_free_r+0x74>
 801cd20:	6820      	ldr	r0, [r4, #0]
 801cd22:	4401      	add	r1, r0
 801cd24:	1858      	adds	r0, r3, r1
 801cd26:	4282      	cmp	r2, r0
 801cd28:	6019      	str	r1, [r3, #0]
 801cd2a:	d1dd      	bne.n	801cce8 <_free_r+0x24>
 801cd2c:	6810      	ldr	r0, [r2, #0]
 801cd2e:	6852      	ldr	r2, [r2, #4]
 801cd30:	605a      	str	r2, [r3, #4]
 801cd32:	4401      	add	r1, r0
 801cd34:	6019      	str	r1, [r3, #0]
 801cd36:	e7d7      	b.n	801cce8 <_free_r+0x24>
 801cd38:	d902      	bls.n	801cd40 <_free_r+0x7c>
 801cd3a:	230c      	movs	r3, #12
 801cd3c:	602b      	str	r3, [r5, #0]
 801cd3e:	e7d3      	b.n	801cce8 <_free_r+0x24>
 801cd40:	6820      	ldr	r0, [r4, #0]
 801cd42:	1821      	adds	r1, r4, r0
 801cd44:	428a      	cmp	r2, r1
 801cd46:	bf04      	itt	eq
 801cd48:	6811      	ldreq	r1, [r2, #0]
 801cd4a:	6852      	ldreq	r2, [r2, #4]
 801cd4c:	6062      	str	r2, [r4, #4]
 801cd4e:	bf04      	itt	eq
 801cd50:	1809      	addeq	r1, r1, r0
 801cd52:	6021      	streq	r1, [r4, #0]
 801cd54:	605c      	str	r4, [r3, #4]
 801cd56:	e7c7      	b.n	801cce8 <_free_r+0x24>
 801cd58:	bd38      	pop	{r3, r4, r5, pc}
 801cd5a:	bf00      	nop
 801cd5c:	200075f8 	.word	0x200075f8

0801cd60 <_malloc_r>:
 801cd60:	b570      	push	{r4, r5, r6, lr}
 801cd62:	1ccd      	adds	r5, r1, #3
 801cd64:	f025 0503 	bic.w	r5, r5, #3
 801cd68:	3508      	adds	r5, #8
 801cd6a:	2d0c      	cmp	r5, #12
 801cd6c:	bf38      	it	cc
 801cd6e:	250c      	movcc	r5, #12
 801cd70:	2d00      	cmp	r5, #0
 801cd72:	4606      	mov	r6, r0
 801cd74:	db01      	blt.n	801cd7a <_malloc_r+0x1a>
 801cd76:	42a9      	cmp	r1, r5
 801cd78:	d903      	bls.n	801cd82 <_malloc_r+0x22>
 801cd7a:	230c      	movs	r3, #12
 801cd7c:	6033      	str	r3, [r6, #0]
 801cd7e:	2000      	movs	r0, #0
 801cd80:	bd70      	pop	{r4, r5, r6, pc}
 801cd82:	f000 fd6b 	bl	801d85c <__malloc_lock>
 801cd86:	4a21      	ldr	r2, [pc, #132]	; (801ce0c <_malloc_r+0xac>)
 801cd88:	6814      	ldr	r4, [r2, #0]
 801cd8a:	4621      	mov	r1, r4
 801cd8c:	b991      	cbnz	r1, 801cdb4 <_malloc_r+0x54>
 801cd8e:	4c20      	ldr	r4, [pc, #128]	; (801ce10 <_malloc_r+0xb0>)
 801cd90:	6823      	ldr	r3, [r4, #0]
 801cd92:	b91b      	cbnz	r3, 801cd9c <_malloc_r+0x3c>
 801cd94:	4630      	mov	r0, r6
 801cd96:	f000 fb05 	bl	801d3a4 <_sbrk_r>
 801cd9a:	6020      	str	r0, [r4, #0]
 801cd9c:	4629      	mov	r1, r5
 801cd9e:	4630      	mov	r0, r6
 801cda0:	f000 fb00 	bl	801d3a4 <_sbrk_r>
 801cda4:	1c43      	adds	r3, r0, #1
 801cda6:	d124      	bne.n	801cdf2 <_malloc_r+0x92>
 801cda8:	230c      	movs	r3, #12
 801cdaa:	6033      	str	r3, [r6, #0]
 801cdac:	4630      	mov	r0, r6
 801cdae:	f000 fd56 	bl	801d85e <__malloc_unlock>
 801cdb2:	e7e4      	b.n	801cd7e <_malloc_r+0x1e>
 801cdb4:	680b      	ldr	r3, [r1, #0]
 801cdb6:	1b5b      	subs	r3, r3, r5
 801cdb8:	d418      	bmi.n	801cdec <_malloc_r+0x8c>
 801cdba:	2b0b      	cmp	r3, #11
 801cdbc:	d90f      	bls.n	801cdde <_malloc_r+0x7e>
 801cdbe:	600b      	str	r3, [r1, #0]
 801cdc0:	50cd      	str	r5, [r1, r3]
 801cdc2:	18cc      	adds	r4, r1, r3
 801cdc4:	4630      	mov	r0, r6
 801cdc6:	f000 fd4a 	bl	801d85e <__malloc_unlock>
 801cdca:	f104 000b 	add.w	r0, r4, #11
 801cdce:	1d23      	adds	r3, r4, #4
 801cdd0:	f020 0007 	bic.w	r0, r0, #7
 801cdd4:	1ac3      	subs	r3, r0, r3
 801cdd6:	d0d3      	beq.n	801cd80 <_malloc_r+0x20>
 801cdd8:	425a      	negs	r2, r3
 801cdda:	50e2      	str	r2, [r4, r3]
 801cddc:	e7d0      	b.n	801cd80 <_malloc_r+0x20>
 801cdde:	428c      	cmp	r4, r1
 801cde0:	684b      	ldr	r3, [r1, #4]
 801cde2:	bf16      	itet	ne
 801cde4:	6063      	strne	r3, [r4, #4]
 801cde6:	6013      	streq	r3, [r2, #0]
 801cde8:	460c      	movne	r4, r1
 801cdea:	e7eb      	b.n	801cdc4 <_malloc_r+0x64>
 801cdec:	460c      	mov	r4, r1
 801cdee:	6849      	ldr	r1, [r1, #4]
 801cdf0:	e7cc      	b.n	801cd8c <_malloc_r+0x2c>
 801cdf2:	1cc4      	adds	r4, r0, #3
 801cdf4:	f024 0403 	bic.w	r4, r4, #3
 801cdf8:	42a0      	cmp	r0, r4
 801cdfa:	d005      	beq.n	801ce08 <_malloc_r+0xa8>
 801cdfc:	1a21      	subs	r1, r4, r0
 801cdfe:	4630      	mov	r0, r6
 801ce00:	f000 fad0 	bl	801d3a4 <_sbrk_r>
 801ce04:	3001      	adds	r0, #1
 801ce06:	d0cf      	beq.n	801cda8 <_malloc_r+0x48>
 801ce08:	6025      	str	r5, [r4, #0]
 801ce0a:	e7db      	b.n	801cdc4 <_malloc_r+0x64>
 801ce0c:	200075f8 	.word	0x200075f8
 801ce10:	200075fc 	.word	0x200075fc

0801ce14 <__sfputc_r>:
 801ce14:	6893      	ldr	r3, [r2, #8]
 801ce16:	3b01      	subs	r3, #1
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	b410      	push	{r4}
 801ce1c:	6093      	str	r3, [r2, #8]
 801ce1e:	da08      	bge.n	801ce32 <__sfputc_r+0x1e>
 801ce20:	6994      	ldr	r4, [r2, #24]
 801ce22:	42a3      	cmp	r3, r4
 801ce24:	db01      	blt.n	801ce2a <__sfputc_r+0x16>
 801ce26:	290a      	cmp	r1, #10
 801ce28:	d103      	bne.n	801ce32 <__sfputc_r+0x1e>
 801ce2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce2e:	f000 bb0d 	b.w	801d44c <__swbuf_r>
 801ce32:	6813      	ldr	r3, [r2, #0]
 801ce34:	1c58      	adds	r0, r3, #1
 801ce36:	6010      	str	r0, [r2, #0]
 801ce38:	7019      	strb	r1, [r3, #0]
 801ce3a:	4608      	mov	r0, r1
 801ce3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce40:	4770      	bx	lr

0801ce42 <__sfputs_r>:
 801ce42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce44:	4606      	mov	r6, r0
 801ce46:	460f      	mov	r7, r1
 801ce48:	4614      	mov	r4, r2
 801ce4a:	18d5      	adds	r5, r2, r3
 801ce4c:	42ac      	cmp	r4, r5
 801ce4e:	d101      	bne.n	801ce54 <__sfputs_r+0x12>
 801ce50:	2000      	movs	r0, #0
 801ce52:	e007      	b.n	801ce64 <__sfputs_r+0x22>
 801ce54:	463a      	mov	r2, r7
 801ce56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce5a:	4630      	mov	r0, r6
 801ce5c:	f7ff ffda 	bl	801ce14 <__sfputc_r>
 801ce60:	1c43      	adds	r3, r0, #1
 801ce62:	d1f3      	bne.n	801ce4c <__sfputs_r+0xa>
 801ce64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ce68 <_vfiprintf_r>:
 801ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce6c:	460c      	mov	r4, r1
 801ce6e:	b09d      	sub	sp, #116	; 0x74
 801ce70:	4617      	mov	r7, r2
 801ce72:	461d      	mov	r5, r3
 801ce74:	4606      	mov	r6, r0
 801ce76:	b118      	cbz	r0, 801ce80 <_vfiprintf_r+0x18>
 801ce78:	6983      	ldr	r3, [r0, #24]
 801ce7a:	b90b      	cbnz	r3, 801ce80 <_vfiprintf_r+0x18>
 801ce7c:	f7ff fe90 	bl	801cba0 <__sinit>
 801ce80:	4b7c      	ldr	r3, [pc, #496]	; (801d074 <_vfiprintf_r+0x20c>)
 801ce82:	429c      	cmp	r4, r3
 801ce84:	d158      	bne.n	801cf38 <_vfiprintf_r+0xd0>
 801ce86:	6874      	ldr	r4, [r6, #4]
 801ce88:	89a3      	ldrh	r3, [r4, #12]
 801ce8a:	0718      	lsls	r0, r3, #28
 801ce8c:	d55e      	bpl.n	801cf4c <_vfiprintf_r+0xe4>
 801ce8e:	6923      	ldr	r3, [r4, #16]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d05b      	beq.n	801cf4c <_vfiprintf_r+0xe4>
 801ce94:	2300      	movs	r3, #0
 801ce96:	9309      	str	r3, [sp, #36]	; 0x24
 801ce98:	2320      	movs	r3, #32
 801ce9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ce9e:	2330      	movs	r3, #48	; 0x30
 801cea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cea4:	9503      	str	r5, [sp, #12]
 801cea6:	f04f 0b01 	mov.w	fp, #1
 801ceaa:	46b8      	mov	r8, r7
 801ceac:	4645      	mov	r5, r8
 801ceae:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ceb2:	b10b      	cbz	r3, 801ceb8 <_vfiprintf_r+0x50>
 801ceb4:	2b25      	cmp	r3, #37	; 0x25
 801ceb6:	d154      	bne.n	801cf62 <_vfiprintf_r+0xfa>
 801ceb8:	ebb8 0a07 	subs.w	sl, r8, r7
 801cebc:	d00b      	beq.n	801ced6 <_vfiprintf_r+0x6e>
 801cebe:	4653      	mov	r3, sl
 801cec0:	463a      	mov	r2, r7
 801cec2:	4621      	mov	r1, r4
 801cec4:	4630      	mov	r0, r6
 801cec6:	f7ff ffbc 	bl	801ce42 <__sfputs_r>
 801ceca:	3001      	adds	r0, #1
 801cecc:	f000 80c2 	beq.w	801d054 <_vfiprintf_r+0x1ec>
 801ced0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ced2:	4453      	add	r3, sl
 801ced4:	9309      	str	r3, [sp, #36]	; 0x24
 801ced6:	f898 3000 	ldrb.w	r3, [r8]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	f000 80ba 	beq.w	801d054 <_vfiprintf_r+0x1ec>
 801cee0:	2300      	movs	r3, #0
 801cee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ceea:	9304      	str	r3, [sp, #16]
 801ceec:	9307      	str	r3, [sp, #28]
 801ceee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cef2:	931a      	str	r3, [sp, #104]	; 0x68
 801cef4:	46a8      	mov	r8, r5
 801cef6:	2205      	movs	r2, #5
 801cef8:	f818 1b01 	ldrb.w	r1, [r8], #1
 801cefc:	485e      	ldr	r0, [pc, #376]	; (801d078 <_vfiprintf_r+0x210>)
 801cefe:	f7e3 f9ef 	bl	80002e0 <memchr>
 801cf02:	9b04      	ldr	r3, [sp, #16]
 801cf04:	bb78      	cbnz	r0, 801cf66 <_vfiprintf_r+0xfe>
 801cf06:	06d9      	lsls	r1, r3, #27
 801cf08:	bf44      	itt	mi
 801cf0a:	2220      	movmi	r2, #32
 801cf0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cf10:	071a      	lsls	r2, r3, #28
 801cf12:	bf44      	itt	mi
 801cf14:	222b      	movmi	r2, #43	; 0x2b
 801cf16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801cf1a:	782a      	ldrb	r2, [r5, #0]
 801cf1c:	2a2a      	cmp	r2, #42	; 0x2a
 801cf1e:	d02a      	beq.n	801cf76 <_vfiprintf_r+0x10e>
 801cf20:	9a07      	ldr	r2, [sp, #28]
 801cf22:	46a8      	mov	r8, r5
 801cf24:	2000      	movs	r0, #0
 801cf26:	250a      	movs	r5, #10
 801cf28:	4641      	mov	r1, r8
 801cf2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf2e:	3b30      	subs	r3, #48	; 0x30
 801cf30:	2b09      	cmp	r3, #9
 801cf32:	d969      	bls.n	801d008 <_vfiprintf_r+0x1a0>
 801cf34:	b360      	cbz	r0, 801cf90 <_vfiprintf_r+0x128>
 801cf36:	e024      	b.n	801cf82 <_vfiprintf_r+0x11a>
 801cf38:	4b50      	ldr	r3, [pc, #320]	; (801d07c <_vfiprintf_r+0x214>)
 801cf3a:	429c      	cmp	r4, r3
 801cf3c:	d101      	bne.n	801cf42 <_vfiprintf_r+0xda>
 801cf3e:	68b4      	ldr	r4, [r6, #8]
 801cf40:	e7a2      	b.n	801ce88 <_vfiprintf_r+0x20>
 801cf42:	4b4f      	ldr	r3, [pc, #316]	; (801d080 <_vfiprintf_r+0x218>)
 801cf44:	429c      	cmp	r4, r3
 801cf46:	bf08      	it	eq
 801cf48:	68f4      	ldreq	r4, [r6, #12]
 801cf4a:	e79d      	b.n	801ce88 <_vfiprintf_r+0x20>
 801cf4c:	4621      	mov	r1, r4
 801cf4e:	4630      	mov	r0, r6
 801cf50:	f000 fae0 	bl	801d514 <__swsetup_r>
 801cf54:	2800      	cmp	r0, #0
 801cf56:	d09d      	beq.n	801ce94 <_vfiprintf_r+0x2c>
 801cf58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cf5c:	b01d      	add	sp, #116	; 0x74
 801cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf62:	46a8      	mov	r8, r5
 801cf64:	e7a2      	b.n	801ceac <_vfiprintf_r+0x44>
 801cf66:	4a44      	ldr	r2, [pc, #272]	; (801d078 <_vfiprintf_r+0x210>)
 801cf68:	1a80      	subs	r0, r0, r2
 801cf6a:	fa0b f000 	lsl.w	r0, fp, r0
 801cf6e:	4318      	orrs	r0, r3
 801cf70:	9004      	str	r0, [sp, #16]
 801cf72:	4645      	mov	r5, r8
 801cf74:	e7be      	b.n	801cef4 <_vfiprintf_r+0x8c>
 801cf76:	9a03      	ldr	r2, [sp, #12]
 801cf78:	1d11      	adds	r1, r2, #4
 801cf7a:	6812      	ldr	r2, [r2, #0]
 801cf7c:	9103      	str	r1, [sp, #12]
 801cf7e:	2a00      	cmp	r2, #0
 801cf80:	db01      	blt.n	801cf86 <_vfiprintf_r+0x11e>
 801cf82:	9207      	str	r2, [sp, #28]
 801cf84:	e004      	b.n	801cf90 <_vfiprintf_r+0x128>
 801cf86:	4252      	negs	r2, r2
 801cf88:	f043 0302 	orr.w	r3, r3, #2
 801cf8c:	9207      	str	r2, [sp, #28]
 801cf8e:	9304      	str	r3, [sp, #16]
 801cf90:	f898 3000 	ldrb.w	r3, [r8]
 801cf94:	2b2e      	cmp	r3, #46	; 0x2e
 801cf96:	d10e      	bne.n	801cfb6 <_vfiprintf_r+0x14e>
 801cf98:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cf9c:	2b2a      	cmp	r3, #42	; 0x2a
 801cf9e:	d138      	bne.n	801d012 <_vfiprintf_r+0x1aa>
 801cfa0:	9b03      	ldr	r3, [sp, #12]
 801cfa2:	1d1a      	adds	r2, r3, #4
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	9203      	str	r2, [sp, #12]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	bfb8      	it	lt
 801cfac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cfb0:	f108 0802 	add.w	r8, r8, #2
 801cfb4:	9305      	str	r3, [sp, #20]
 801cfb6:	4d33      	ldr	r5, [pc, #204]	; (801d084 <_vfiprintf_r+0x21c>)
 801cfb8:	f898 1000 	ldrb.w	r1, [r8]
 801cfbc:	2203      	movs	r2, #3
 801cfbe:	4628      	mov	r0, r5
 801cfc0:	f7e3 f98e 	bl	80002e0 <memchr>
 801cfc4:	b140      	cbz	r0, 801cfd8 <_vfiprintf_r+0x170>
 801cfc6:	2340      	movs	r3, #64	; 0x40
 801cfc8:	1b40      	subs	r0, r0, r5
 801cfca:	fa03 f000 	lsl.w	r0, r3, r0
 801cfce:	9b04      	ldr	r3, [sp, #16]
 801cfd0:	4303      	orrs	r3, r0
 801cfd2:	f108 0801 	add.w	r8, r8, #1
 801cfd6:	9304      	str	r3, [sp, #16]
 801cfd8:	f898 1000 	ldrb.w	r1, [r8]
 801cfdc:	482a      	ldr	r0, [pc, #168]	; (801d088 <_vfiprintf_r+0x220>)
 801cfde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cfe2:	2206      	movs	r2, #6
 801cfe4:	f108 0701 	add.w	r7, r8, #1
 801cfe8:	f7e3 f97a 	bl	80002e0 <memchr>
 801cfec:	2800      	cmp	r0, #0
 801cfee:	d037      	beq.n	801d060 <_vfiprintf_r+0x1f8>
 801cff0:	4b26      	ldr	r3, [pc, #152]	; (801d08c <_vfiprintf_r+0x224>)
 801cff2:	bb1b      	cbnz	r3, 801d03c <_vfiprintf_r+0x1d4>
 801cff4:	9b03      	ldr	r3, [sp, #12]
 801cff6:	3307      	adds	r3, #7
 801cff8:	f023 0307 	bic.w	r3, r3, #7
 801cffc:	3308      	adds	r3, #8
 801cffe:	9303      	str	r3, [sp, #12]
 801d000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d002:	444b      	add	r3, r9
 801d004:	9309      	str	r3, [sp, #36]	; 0x24
 801d006:	e750      	b.n	801ceaa <_vfiprintf_r+0x42>
 801d008:	fb05 3202 	mla	r2, r5, r2, r3
 801d00c:	2001      	movs	r0, #1
 801d00e:	4688      	mov	r8, r1
 801d010:	e78a      	b.n	801cf28 <_vfiprintf_r+0xc0>
 801d012:	2300      	movs	r3, #0
 801d014:	f108 0801 	add.w	r8, r8, #1
 801d018:	9305      	str	r3, [sp, #20]
 801d01a:	4619      	mov	r1, r3
 801d01c:	250a      	movs	r5, #10
 801d01e:	4640      	mov	r0, r8
 801d020:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d024:	3a30      	subs	r2, #48	; 0x30
 801d026:	2a09      	cmp	r2, #9
 801d028:	d903      	bls.n	801d032 <_vfiprintf_r+0x1ca>
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d0c3      	beq.n	801cfb6 <_vfiprintf_r+0x14e>
 801d02e:	9105      	str	r1, [sp, #20]
 801d030:	e7c1      	b.n	801cfb6 <_vfiprintf_r+0x14e>
 801d032:	fb05 2101 	mla	r1, r5, r1, r2
 801d036:	2301      	movs	r3, #1
 801d038:	4680      	mov	r8, r0
 801d03a:	e7f0      	b.n	801d01e <_vfiprintf_r+0x1b6>
 801d03c:	ab03      	add	r3, sp, #12
 801d03e:	9300      	str	r3, [sp, #0]
 801d040:	4622      	mov	r2, r4
 801d042:	4b13      	ldr	r3, [pc, #76]	; (801d090 <_vfiprintf_r+0x228>)
 801d044:	a904      	add	r1, sp, #16
 801d046:	4630      	mov	r0, r6
 801d048:	f3af 8000 	nop.w
 801d04c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801d050:	4681      	mov	r9, r0
 801d052:	d1d5      	bne.n	801d000 <_vfiprintf_r+0x198>
 801d054:	89a3      	ldrh	r3, [r4, #12]
 801d056:	065b      	lsls	r3, r3, #25
 801d058:	f53f af7e 	bmi.w	801cf58 <_vfiprintf_r+0xf0>
 801d05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d05e:	e77d      	b.n	801cf5c <_vfiprintf_r+0xf4>
 801d060:	ab03      	add	r3, sp, #12
 801d062:	9300      	str	r3, [sp, #0]
 801d064:	4622      	mov	r2, r4
 801d066:	4b0a      	ldr	r3, [pc, #40]	; (801d090 <_vfiprintf_r+0x228>)
 801d068:	a904      	add	r1, sp, #16
 801d06a:	4630      	mov	r0, r6
 801d06c:	f000 f888 	bl	801d180 <_printf_i>
 801d070:	e7ec      	b.n	801d04c <_vfiprintf_r+0x1e4>
 801d072:	bf00      	nop
 801d074:	08020c1c 	.word	0x08020c1c
 801d078:	08020c5c 	.word	0x08020c5c
 801d07c:	08020c3c 	.word	0x08020c3c
 801d080:	08020bfc 	.word	0x08020bfc
 801d084:	08020c62 	.word	0x08020c62
 801d088:	08020c66 	.word	0x08020c66
 801d08c:	00000000 	.word	0x00000000
 801d090:	0801ce43 	.word	0x0801ce43

0801d094 <_printf_common>:
 801d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d098:	4691      	mov	r9, r2
 801d09a:	461f      	mov	r7, r3
 801d09c:	688a      	ldr	r2, [r1, #8]
 801d09e:	690b      	ldr	r3, [r1, #16]
 801d0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d0a4:	4293      	cmp	r3, r2
 801d0a6:	bfb8      	it	lt
 801d0a8:	4613      	movlt	r3, r2
 801d0aa:	f8c9 3000 	str.w	r3, [r9]
 801d0ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d0b2:	4606      	mov	r6, r0
 801d0b4:	460c      	mov	r4, r1
 801d0b6:	b112      	cbz	r2, 801d0be <_printf_common+0x2a>
 801d0b8:	3301      	adds	r3, #1
 801d0ba:	f8c9 3000 	str.w	r3, [r9]
 801d0be:	6823      	ldr	r3, [r4, #0]
 801d0c0:	0699      	lsls	r1, r3, #26
 801d0c2:	bf42      	ittt	mi
 801d0c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 801d0c8:	3302      	addmi	r3, #2
 801d0ca:	f8c9 3000 	strmi.w	r3, [r9]
 801d0ce:	6825      	ldr	r5, [r4, #0]
 801d0d0:	f015 0506 	ands.w	r5, r5, #6
 801d0d4:	d107      	bne.n	801d0e6 <_printf_common+0x52>
 801d0d6:	f104 0a19 	add.w	sl, r4, #25
 801d0da:	68e3      	ldr	r3, [r4, #12]
 801d0dc:	f8d9 2000 	ldr.w	r2, [r9]
 801d0e0:	1a9b      	subs	r3, r3, r2
 801d0e2:	42ab      	cmp	r3, r5
 801d0e4:	dc28      	bgt.n	801d138 <_printf_common+0xa4>
 801d0e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d0ea:	6822      	ldr	r2, [r4, #0]
 801d0ec:	3300      	adds	r3, #0
 801d0ee:	bf18      	it	ne
 801d0f0:	2301      	movne	r3, #1
 801d0f2:	0692      	lsls	r2, r2, #26
 801d0f4:	d42d      	bmi.n	801d152 <_printf_common+0xbe>
 801d0f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d0fa:	4639      	mov	r1, r7
 801d0fc:	4630      	mov	r0, r6
 801d0fe:	47c0      	blx	r8
 801d100:	3001      	adds	r0, #1
 801d102:	d020      	beq.n	801d146 <_printf_common+0xb2>
 801d104:	6823      	ldr	r3, [r4, #0]
 801d106:	68e5      	ldr	r5, [r4, #12]
 801d108:	f8d9 2000 	ldr.w	r2, [r9]
 801d10c:	f003 0306 	and.w	r3, r3, #6
 801d110:	2b04      	cmp	r3, #4
 801d112:	bf08      	it	eq
 801d114:	1aad      	subeq	r5, r5, r2
 801d116:	68a3      	ldr	r3, [r4, #8]
 801d118:	6922      	ldr	r2, [r4, #16]
 801d11a:	bf0c      	ite	eq
 801d11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d120:	2500      	movne	r5, #0
 801d122:	4293      	cmp	r3, r2
 801d124:	bfc4      	itt	gt
 801d126:	1a9b      	subgt	r3, r3, r2
 801d128:	18ed      	addgt	r5, r5, r3
 801d12a:	f04f 0900 	mov.w	r9, #0
 801d12e:	341a      	adds	r4, #26
 801d130:	454d      	cmp	r5, r9
 801d132:	d11a      	bne.n	801d16a <_printf_common+0xd6>
 801d134:	2000      	movs	r0, #0
 801d136:	e008      	b.n	801d14a <_printf_common+0xb6>
 801d138:	2301      	movs	r3, #1
 801d13a:	4652      	mov	r2, sl
 801d13c:	4639      	mov	r1, r7
 801d13e:	4630      	mov	r0, r6
 801d140:	47c0      	blx	r8
 801d142:	3001      	adds	r0, #1
 801d144:	d103      	bne.n	801d14e <_printf_common+0xba>
 801d146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d14e:	3501      	adds	r5, #1
 801d150:	e7c3      	b.n	801d0da <_printf_common+0x46>
 801d152:	18e1      	adds	r1, r4, r3
 801d154:	1c5a      	adds	r2, r3, #1
 801d156:	2030      	movs	r0, #48	; 0x30
 801d158:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d15c:	4422      	add	r2, r4
 801d15e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d166:	3302      	adds	r3, #2
 801d168:	e7c5      	b.n	801d0f6 <_printf_common+0x62>
 801d16a:	2301      	movs	r3, #1
 801d16c:	4622      	mov	r2, r4
 801d16e:	4639      	mov	r1, r7
 801d170:	4630      	mov	r0, r6
 801d172:	47c0      	blx	r8
 801d174:	3001      	adds	r0, #1
 801d176:	d0e6      	beq.n	801d146 <_printf_common+0xb2>
 801d178:	f109 0901 	add.w	r9, r9, #1
 801d17c:	e7d8      	b.n	801d130 <_printf_common+0x9c>
	...

0801d180 <_printf_i>:
 801d180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d184:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d188:	460c      	mov	r4, r1
 801d18a:	7e09      	ldrb	r1, [r1, #24]
 801d18c:	b085      	sub	sp, #20
 801d18e:	296e      	cmp	r1, #110	; 0x6e
 801d190:	4617      	mov	r7, r2
 801d192:	4606      	mov	r6, r0
 801d194:	4698      	mov	r8, r3
 801d196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d198:	f000 80b3 	beq.w	801d302 <_printf_i+0x182>
 801d19c:	d822      	bhi.n	801d1e4 <_printf_i+0x64>
 801d19e:	2963      	cmp	r1, #99	; 0x63
 801d1a0:	d036      	beq.n	801d210 <_printf_i+0x90>
 801d1a2:	d80a      	bhi.n	801d1ba <_printf_i+0x3a>
 801d1a4:	2900      	cmp	r1, #0
 801d1a6:	f000 80b9 	beq.w	801d31c <_printf_i+0x19c>
 801d1aa:	2958      	cmp	r1, #88	; 0x58
 801d1ac:	f000 8083 	beq.w	801d2b6 <_printf_i+0x136>
 801d1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d1b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d1b8:	e032      	b.n	801d220 <_printf_i+0xa0>
 801d1ba:	2964      	cmp	r1, #100	; 0x64
 801d1bc:	d001      	beq.n	801d1c2 <_printf_i+0x42>
 801d1be:	2969      	cmp	r1, #105	; 0x69
 801d1c0:	d1f6      	bne.n	801d1b0 <_printf_i+0x30>
 801d1c2:	6820      	ldr	r0, [r4, #0]
 801d1c4:	6813      	ldr	r3, [r2, #0]
 801d1c6:	0605      	lsls	r5, r0, #24
 801d1c8:	f103 0104 	add.w	r1, r3, #4
 801d1cc:	d52a      	bpl.n	801d224 <_printf_i+0xa4>
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	6011      	str	r1, [r2, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	da03      	bge.n	801d1de <_printf_i+0x5e>
 801d1d6:	222d      	movs	r2, #45	; 0x2d
 801d1d8:	425b      	negs	r3, r3
 801d1da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d1de:	486f      	ldr	r0, [pc, #444]	; (801d39c <_printf_i+0x21c>)
 801d1e0:	220a      	movs	r2, #10
 801d1e2:	e039      	b.n	801d258 <_printf_i+0xd8>
 801d1e4:	2973      	cmp	r1, #115	; 0x73
 801d1e6:	f000 809d 	beq.w	801d324 <_printf_i+0x1a4>
 801d1ea:	d808      	bhi.n	801d1fe <_printf_i+0x7e>
 801d1ec:	296f      	cmp	r1, #111	; 0x6f
 801d1ee:	d020      	beq.n	801d232 <_printf_i+0xb2>
 801d1f0:	2970      	cmp	r1, #112	; 0x70
 801d1f2:	d1dd      	bne.n	801d1b0 <_printf_i+0x30>
 801d1f4:	6823      	ldr	r3, [r4, #0]
 801d1f6:	f043 0320 	orr.w	r3, r3, #32
 801d1fa:	6023      	str	r3, [r4, #0]
 801d1fc:	e003      	b.n	801d206 <_printf_i+0x86>
 801d1fe:	2975      	cmp	r1, #117	; 0x75
 801d200:	d017      	beq.n	801d232 <_printf_i+0xb2>
 801d202:	2978      	cmp	r1, #120	; 0x78
 801d204:	d1d4      	bne.n	801d1b0 <_printf_i+0x30>
 801d206:	2378      	movs	r3, #120	; 0x78
 801d208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d20c:	4864      	ldr	r0, [pc, #400]	; (801d3a0 <_printf_i+0x220>)
 801d20e:	e055      	b.n	801d2bc <_printf_i+0x13c>
 801d210:	6813      	ldr	r3, [r2, #0]
 801d212:	1d19      	adds	r1, r3, #4
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	6011      	str	r1, [r2, #0]
 801d218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d220:	2301      	movs	r3, #1
 801d222:	e08c      	b.n	801d33e <_printf_i+0x1be>
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	6011      	str	r1, [r2, #0]
 801d228:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d22c:	bf18      	it	ne
 801d22e:	b21b      	sxthne	r3, r3
 801d230:	e7cf      	b.n	801d1d2 <_printf_i+0x52>
 801d232:	6813      	ldr	r3, [r2, #0]
 801d234:	6825      	ldr	r5, [r4, #0]
 801d236:	1d18      	adds	r0, r3, #4
 801d238:	6010      	str	r0, [r2, #0]
 801d23a:	0628      	lsls	r0, r5, #24
 801d23c:	d501      	bpl.n	801d242 <_printf_i+0xc2>
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	e002      	b.n	801d248 <_printf_i+0xc8>
 801d242:	0668      	lsls	r0, r5, #25
 801d244:	d5fb      	bpl.n	801d23e <_printf_i+0xbe>
 801d246:	881b      	ldrh	r3, [r3, #0]
 801d248:	4854      	ldr	r0, [pc, #336]	; (801d39c <_printf_i+0x21c>)
 801d24a:	296f      	cmp	r1, #111	; 0x6f
 801d24c:	bf14      	ite	ne
 801d24e:	220a      	movne	r2, #10
 801d250:	2208      	moveq	r2, #8
 801d252:	2100      	movs	r1, #0
 801d254:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d258:	6865      	ldr	r5, [r4, #4]
 801d25a:	60a5      	str	r5, [r4, #8]
 801d25c:	2d00      	cmp	r5, #0
 801d25e:	f2c0 8095 	blt.w	801d38c <_printf_i+0x20c>
 801d262:	6821      	ldr	r1, [r4, #0]
 801d264:	f021 0104 	bic.w	r1, r1, #4
 801d268:	6021      	str	r1, [r4, #0]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d13d      	bne.n	801d2ea <_printf_i+0x16a>
 801d26e:	2d00      	cmp	r5, #0
 801d270:	f040 808e 	bne.w	801d390 <_printf_i+0x210>
 801d274:	4665      	mov	r5, ip
 801d276:	2a08      	cmp	r2, #8
 801d278:	d10b      	bne.n	801d292 <_printf_i+0x112>
 801d27a:	6823      	ldr	r3, [r4, #0]
 801d27c:	07db      	lsls	r3, r3, #31
 801d27e:	d508      	bpl.n	801d292 <_printf_i+0x112>
 801d280:	6923      	ldr	r3, [r4, #16]
 801d282:	6862      	ldr	r2, [r4, #4]
 801d284:	429a      	cmp	r2, r3
 801d286:	bfde      	ittt	le
 801d288:	2330      	movle	r3, #48	; 0x30
 801d28a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d28e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d292:	ebac 0305 	sub.w	r3, ip, r5
 801d296:	6123      	str	r3, [r4, #16]
 801d298:	f8cd 8000 	str.w	r8, [sp]
 801d29c:	463b      	mov	r3, r7
 801d29e:	aa03      	add	r2, sp, #12
 801d2a0:	4621      	mov	r1, r4
 801d2a2:	4630      	mov	r0, r6
 801d2a4:	f7ff fef6 	bl	801d094 <_printf_common>
 801d2a8:	3001      	adds	r0, #1
 801d2aa:	d14d      	bne.n	801d348 <_printf_i+0x1c8>
 801d2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2b0:	b005      	add	sp, #20
 801d2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d2b6:	4839      	ldr	r0, [pc, #228]	; (801d39c <_printf_i+0x21c>)
 801d2b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d2bc:	6813      	ldr	r3, [r2, #0]
 801d2be:	6821      	ldr	r1, [r4, #0]
 801d2c0:	1d1d      	adds	r5, r3, #4
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	6015      	str	r5, [r2, #0]
 801d2c6:	060a      	lsls	r2, r1, #24
 801d2c8:	d50b      	bpl.n	801d2e2 <_printf_i+0x162>
 801d2ca:	07ca      	lsls	r2, r1, #31
 801d2cc:	bf44      	itt	mi
 801d2ce:	f041 0120 	orrmi.w	r1, r1, #32
 801d2d2:	6021      	strmi	r1, [r4, #0]
 801d2d4:	b91b      	cbnz	r3, 801d2de <_printf_i+0x15e>
 801d2d6:	6822      	ldr	r2, [r4, #0]
 801d2d8:	f022 0220 	bic.w	r2, r2, #32
 801d2dc:	6022      	str	r2, [r4, #0]
 801d2de:	2210      	movs	r2, #16
 801d2e0:	e7b7      	b.n	801d252 <_printf_i+0xd2>
 801d2e2:	064d      	lsls	r5, r1, #25
 801d2e4:	bf48      	it	mi
 801d2e6:	b29b      	uxthmi	r3, r3
 801d2e8:	e7ef      	b.n	801d2ca <_printf_i+0x14a>
 801d2ea:	4665      	mov	r5, ip
 801d2ec:	fbb3 f1f2 	udiv	r1, r3, r2
 801d2f0:	fb02 3311 	mls	r3, r2, r1, r3
 801d2f4:	5cc3      	ldrb	r3, [r0, r3]
 801d2f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d2fa:	460b      	mov	r3, r1
 801d2fc:	2900      	cmp	r1, #0
 801d2fe:	d1f5      	bne.n	801d2ec <_printf_i+0x16c>
 801d300:	e7b9      	b.n	801d276 <_printf_i+0xf6>
 801d302:	6813      	ldr	r3, [r2, #0]
 801d304:	6825      	ldr	r5, [r4, #0]
 801d306:	6961      	ldr	r1, [r4, #20]
 801d308:	1d18      	adds	r0, r3, #4
 801d30a:	6010      	str	r0, [r2, #0]
 801d30c:	0628      	lsls	r0, r5, #24
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	d501      	bpl.n	801d316 <_printf_i+0x196>
 801d312:	6019      	str	r1, [r3, #0]
 801d314:	e002      	b.n	801d31c <_printf_i+0x19c>
 801d316:	066a      	lsls	r2, r5, #25
 801d318:	d5fb      	bpl.n	801d312 <_printf_i+0x192>
 801d31a:	8019      	strh	r1, [r3, #0]
 801d31c:	2300      	movs	r3, #0
 801d31e:	6123      	str	r3, [r4, #16]
 801d320:	4665      	mov	r5, ip
 801d322:	e7b9      	b.n	801d298 <_printf_i+0x118>
 801d324:	6813      	ldr	r3, [r2, #0]
 801d326:	1d19      	adds	r1, r3, #4
 801d328:	6011      	str	r1, [r2, #0]
 801d32a:	681d      	ldr	r5, [r3, #0]
 801d32c:	6862      	ldr	r2, [r4, #4]
 801d32e:	2100      	movs	r1, #0
 801d330:	4628      	mov	r0, r5
 801d332:	f7e2 ffd5 	bl	80002e0 <memchr>
 801d336:	b108      	cbz	r0, 801d33c <_printf_i+0x1bc>
 801d338:	1b40      	subs	r0, r0, r5
 801d33a:	6060      	str	r0, [r4, #4]
 801d33c:	6863      	ldr	r3, [r4, #4]
 801d33e:	6123      	str	r3, [r4, #16]
 801d340:	2300      	movs	r3, #0
 801d342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d346:	e7a7      	b.n	801d298 <_printf_i+0x118>
 801d348:	6923      	ldr	r3, [r4, #16]
 801d34a:	462a      	mov	r2, r5
 801d34c:	4639      	mov	r1, r7
 801d34e:	4630      	mov	r0, r6
 801d350:	47c0      	blx	r8
 801d352:	3001      	adds	r0, #1
 801d354:	d0aa      	beq.n	801d2ac <_printf_i+0x12c>
 801d356:	6823      	ldr	r3, [r4, #0]
 801d358:	079b      	lsls	r3, r3, #30
 801d35a:	d413      	bmi.n	801d384 <_printf_i+0x204>
 801d35c:	68e0      	ldr	r0, [r4, #12]
 801d35e:	9b03      	ldr	r3, [sp, #12]
 801d360:	4298      	cmp	r0, r3
 801d362:	bfb8      	it	lt
 801d364:	4618      	movlt	r0, r3
 801d366:	e7a3      	b.n	801d2b0 <_printf_i+0x130>
 801d368:	2301      	movs	r3, #1
 801d36a:	464a      	mov	r2, r9
 801d36c:	4639      	mov	r1, r7
 801d36e:	4630      	mov	r0, r6
 801d370:	47c0      	blx	r8
 801d372:	3001      	adds	r0, #1
 801d374:	d09a      	beq.n	801d2ac <_printf_i+0x12c>
 801d376:	3501      	adds	r5, #1
 801d378:	68e3      	ldr	r3, [r4, #12]
 801d37a:	9a03      	ldr	r2, [sp, #12]
 801d37c:	1a9b      	subs	r3, r3, r2
 801d37e:	42ab      	cmp	r3, r5
 801d380:	dcf2      	bgt.n	801d368 <_printf_i+0x1e8>
 801d382:	e7eb      	b.n	801d35c <_printf_i+0x1dc>
 801d384:	2500      	movs	r5, #0
 801d386:	f104 0919 	add.w	r9, r4, #25
 801d38a:	e7f5      	b.n	801d378 <_printf_i+0x1f8>
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d1ac      	bne.n	801d2ea <_printf_i+0x16a>
 801d390:	7803      	ldrb	r3, [r0, #0]
 801d392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d39a:	e76c      	b.n	801d276 <_printf_i+0xf6>
 801d39c:	08020c6d 	.word	0x08020c6d
 801d3a0:	08020c7e 	.word	0x08020c7e

0801d3a4 <_sbrk_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4c06      	ldr	r4, [pc, #24]	; (801d3c0 <_sbrk_r+0x1c>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4605      	mov	r5, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	6023      	str	r3, [r4, #0]
 801d3b0:	f7e4 ff46 	bl	8002240 <_sbrk>
 801d3b4:	1c43      	adds	r3, r0, #1
 801d3b6:	d102      	bne.n	801d3be <_sbrk_r+0x1a>
 801d3b8:	6823      	ldr	r3, [r4, #0]
 801d3ba:	b103      	cbz	r3, 801d3be <_sbrk_r+0x1a>
 801d3bc:	602b      	str	r3, [r5, #0]
 801d3be:	bd38      	pop	{r3, r4, r5, pc}
 801d3c0:	2000b734 	.word	0x2000b734

0801d3c4 <__sread>:
 801d3c4:	b510      	push	{r4, lr}
 801d3c6:	460c      	mov	r4, r1
 801d3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d3cc:	f000 fa48 	bl	801d860 <_read_r>
 801d3d0:	2800      	cmp	r0, #0
 801d3d2:	bfab      	itete	ge
 801d3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d3d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d3d8:	181b      	addge	r3, r3, r0
 801d3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d3de:	bfac      	ite	ge
 801d3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d3e2:	81a3      	strhlt	r3, [r4, #12]
 801d3e4:	bd10      	pop	{r4, pc}

0801d3e6 <__swrite>:
 801d3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ea:	461f      	mov	r7, r3
 801d3ec:	898b      	ldrh	r3, [r1, #12]
 801d3ee:	05db      	lsls	r3, r3, #23
 801d3f0:	4605      	mov	r5, r0
 801d3f2:	460c      	mov	r4, r1
 801d3f4:	4616      	mov	r6, r2
 801d3f6:	d505      	bpl.n	801d404 <__swrite+0x1e>
 801d3f8:	2302      	movs	r3, #2
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d400:	f000 f9b6 	bl	801d770 <_lseek_r>
 801d404:	89a3      	ldrh	r3, [r4, #12]
 801d406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d40e:	81a3      	strh	r3, [r4, #12]
 801d410:	4632      	mov	r2, r6
 801d412:	463b      	mov	r3, r7
 801d414:	4628      	mov	r0, r5
 801d416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d41a:	f000 b869 	b.w	801d4f0 <_write_r>

0801d41e <__sseek>:
 801d41e:	b510      	push	{r4, lr}
 801d420:	460c      	mov	r4, r1
 801d422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d426:	f000 f9a3 	bl	801d770 <_lseek_r>
 801d42a:	1c43      	adds	r3, r0, #1
 801d42c:	89a3      	ldrh	r3, [r4, #12]
 801d42e:	bf15      	itete	ne
 801d430:	6560      	strne	r0, [r4, #84]	; 0x54
 801d432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d43a:	81a3      	strheq	r3, [r4, #12]
 801d43c:	bf18      	it	ne
 801d43e:	81a3      	strhne	r3, [r4, #12]
 801d440:	bd10      	pop	{r4, pc}

0801d442 <__sclose>:
 801d442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d446:	f000 b8d3 	b.w	801d5f0 <_close_r>
	...

0801d44c <__swbuf_r>:
 801d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d44e:	460e      	mov	r6, r1
 801d450:	4614      	mov	r4, r2
 801d452:	4605      	mov	r5, r0
 801d454:	b118      	cbz	r0, 801d45e <__swbuf_r+0x12>
 801d456:	6983      	ldr	r3, [r0, #24]
 801d458:	b90b      	cbnz	r3, 801d45e <__swbuf_r+0x12>
 801d45a:	f7ff fba1 	bl	801cba0 <__sinit>
 801d45e:	4b21      	ldr	r3, [pc, #132]	; (801d4e4 <__swbuf_r+0x98>)
 801d460:	429c      	cmp	r4, r3
 801d462:	d12a      	bne.n	801d4ba <__swbuf_r+0x6e>
 801d464:	686c      	ldr	r4, [r5, #4]
 801d466:	69a3      	ldr	r3, [r4, #24]
 801d468:	60a3      	str	r3, [r4, #8]
 801d46a:	89a3      	ldrh	r3, [r4, #12]
 801d46c:	071a      	lsls	r2, r3, #28
 801d46e:	d52e      	bpl.n	801d4ce <__swbuf_r+0x82>
 801d470:	6923      	ldr	r3, [r4, #16]
 801d472:	b363      	cbz	r3, 801d4ce <__swbuf_r+0x82>
 801d474:	6923      	ldr	r3, [r4, #16]
 801d476:	6820      	ldr	r0, [r4, #0]
 801d478:	1ac0      	subs	r0, r0, r3
 801d47a:	6963      	ldr	r3, [r4, #20]
 801d47c:	b2f6      	uxtb	r6, r6
 801d47e:	4283      	cmp	r3, r0
 801d480:	4637      	mov	r7, r6
 801d482:	dc04      	bgt.n	801d48e <__swbuf_r+0x42>
 801d484:	4621      	mov	r1, r4
 801d486:	4628      	mov	r0, r5
 801d488:	f000 f948 	bl	801d71c <_fflush_r>
 801d48c:	bb28      	cbnz	r0, 801d4da <__swbuf_r+0x8e>
 801d48e:	68a3      	ldr	r3, [r4, #8]
 801d490:	3b01      	subs	r3, #1
 801d492:	60a3      	str	r3, [r4, #8]
 801d494:	6823      	ldr	r3, [r4, #0]
 801d496:	1c5a      	adds	r2, r3, #1
 801d498:	6022      	str	r2, [r4, #0]
 801d49a:	701e      	strb	r6, [r3, #0]
 801d49c:	6963      	ldr	r3, [r4, #20]
 801d49e:	3001      	adds	r0, #1
 801d4a0:	4283      	cmp	r3, r0
 801d4a2:	d004      	beq.n	801d4ae <__swbuf_r+0x62>
 801d4a4:	89a3      	ldrh	r3, [r4, #12]
 801d4a6:	07db      	lsls	r3, r3, #31
 801d4a8:	d519      	bpl.n	801d4de <__swbuf_r+0x92>
 801d4aa:	2e0a      	cmp	r6, #10
 801d4ac:	d117      	bne.n	801d4de <__swbuf_r+0x92>
 801d4ae:	4621      	mov	r1, r4
 801d4b0:	4628      	mov	r0, r5
 801d4b2:	f000 f933 	bl	801d71c <_fflush_r>
 801d4b6:	b190      	cbz	r0, 801d4de <__swbuf_r+0x92>
 801d4b8:	e00f      	b.n	801d4da <__swbuf_r+0x8e>
 801d4ba:	4b0b      	ldr	r3, [pc, #44]	; (801d4e8 <__swbuf_r+0x9c>)
 801d4bc:	429c      	cmp	r4, r3
 801d4be:	d101      	bne.n	801d4c4 <__swbuf_r+0x78>
 801d4c0:	68ac      	ldr	r4, [r5, #8]
 801d4c2:	e7d0      	b.n	801d466 <__swbuf_r+0x1a>
 801d4c4:	4b09      	ldr	r3, [pc, #36]	; (801d4ec <__swbuf_r+0xa0>)
 801d4c6:	429c      	cmp	r4, r3
 801d4c8:	bf08      	it	eq
 801d4ca:	68ec      	ldreq	r4, [r5, #12]
 801d4cc:	e7cb      	b.n	801d466 <__swbuf_r+0x1a>
 801d4ce:	4621      	mov	r1, r4
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	f000 f81f 	bl	801d514 <__swsetup_r>
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	d0cc      	beq.n	801d474 <__swbuf_r+0x28>
 801d4da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d4de:	4638      	mov	r0, r7
 801d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4e2:	bf00      	nop
 801d4e4:	08020c1c 	.word	0x08020c1c
 801d4e8:	08020c3c 	.word	0x08020c3c
 801d4ec:	08020bfc 	.word	0x08020bfc

0801d4f0 <_write_r>:
 801d4f0:	b538      	push	{r3, r4, r5, lr}
 801d4f2:	4c07      	ldr	r4, [pc, #28]	; (801d510 <_write_r+0x20>)
 801d4f4:	4605      	mov	r5, r0
 801d4f6:	4608      	mov	r0, r1
 801d4f8:	4611      	mov	r1, r2
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	6022      	str	r2, [r4, #0]
 801d4fe:	461a      	mov	r2, r3
 801d500:	f7e4 fe4d 	bl	800219e <_write>
 801d504:	1c43      	adds	r3, r0, #1
 801d506:	d102      	bne.n	801d50e <_write_r+0x1e>
 801d508:	6823      	ldr	r3, [r4, #0]
 801d50a:	b103      	cbz	r3, 801d50e <_write_r+0x1e>
 801d50c:	602b      	str	r3, [r5, #0]
 801d50e:	bd38      	pop	{r3, r4, r5, pc}
 801d510:	2000b734 	.word	0x2000b734

0801d514 <__swsetup_r>:
 801d514:	4b32      	ldr	r3, [pc, #200]	; (801d5e0 <__swsetup_r+0xcc>)
 801d516:	b570      	push	{r4, r5, r6, lr}
 801d518:	681d      	ldr	r5, [r3, #0]
 801d51a:	4606      	mov	r6, r0
 801d51c:	460c      	mov	r4, r1
 801d51e:	b125      	cbz	r5, 801d52a <__swsetup_r+0x16>
 801d520:	69ab      	ldr	r3, [r5, #24]
 801d522:	b913      	cbnz	r3, 801d52a <__swsetup_r+0x16>
 801d524:	4628      	mov	r0, r5
 801d526:	f7ff fb3b 	bl	801cba0 <__sinit>
 801d52a:	4b2e      	ldr	r3, [pc, #184]	; (801d5e4 <__swsetup_r+0xd0>)
 801d52c:	429c      	cmp	r4, r3
 801d52e:	d10f      	bne.n	801d550 <__swsetup_r+0x3c>
 801d530:	686c      	ldr	r4, [r5, #4]
 801d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d536:	b29a      	uxth	r2, r3
 801d538:	0715      	lsls	r5, r2, #28
 801d53a:	d42c      	bmi.n	801d596 <__swsetup_r+0x82>
 801d53c:	06d0      	lsls	r0, r2, #27
 801d53e:	d411      	bmi.n	801d564 <__swsetup_r+0x50>
 801d540:	2209      	movs	r2, #9
 801d542:	6032      	str	r2, [r6, #0]
 801d544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d548:	81a3      	strh	r3, [r4, #12]
 801d54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d54e:	e03e      	b.n	801d5ce <__swsetup_r+0xba>
 801d550:	4b25      	ldr	r3, [pc, #148]	; (801d5e8 <__swsetup_r+0xd4>)
 801d552:	429c      	cmp	r4, r3
 801d554:	d101      	bne.n	801d55a <__swsetup_r+0x46>
 801d556:	68ac      	ldr	r4, [r5, #8]
 801d558:	e7eb      	b.n	801d532 <__swsetup_r+0x1e>
 801d55a:	4b24      	ldr	r3, [pc, #144]	; (801d5ec <__swsetup_r+0xd8>)
 801d55c:	429c      	cmp	r4, r3
 801d55e:	bf08      	it	eq
 801d560:	68ec      	ldreq	r4, [r5, #12]
 801d562:	e7e6      	b.n	801d532 <__swsetup_r+0x1e>
 801d564:	0751      	lsls	r1, r2, #29
 801d566:	d512      	bpl.n	801d58e <__swsetup_r+0x7a>
 801d568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d56a:	b141      	cbz	r1, 801d57e <__swsetup_r+0x6a>
 801d56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d570:	4299      	cmp	r1, r3
 801d572:	d002      	beq.n	801d57a <__swsetup_r+0x66>
 801d574:	4630      	mov	r0, r6
 801d576:	f7ff fba5 	bl	801ccc4 <_free_r>
 801d57a:	2300      	movs	r3, #0
 801d57c:	6363      	str	r3, [r4, #52]	; 0x34
 801d57e:	89a3      	ldrh	r3, [r4, #12]
 801d580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d584:	81a3      	strh	r3, [r4, #12]
 801d586:	2300      	movs	r3, #0
 801d588:	6063      	str	r3, [r4, #4]
 801d58a:	6923      	ldr	r3, [r4, #16]
 801d58c:	6023      	str	r3, [r4, #0]
 801d58e:	89a3      	ldrh	r3, [r4, #12]
 801d590:	f043 0308 	orr.w	r3, r3, #8
 801d594:	81a3      	strh	r3, [r4, #12]
 801d596:	6923      	ldr	r3, [r4, #16]
 801d598:	b94b      	cbnz	r3, 801d5ae <__swsetup_r+0x9a>
 801d59a:	89a3      	ldrh	r3, [r4, #12]
 801d59c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d5a4:	d003      	beq.n	801d5ae <__swsetup_r+0x9a>
 801d5a6:	4621      	mov	r1, r4
 801d5a8:	4630      	mov	r0, r6
 801d5aa:	f000 f917 	bl	801d7dc <__smakebuf_r>
 801d5ae:	89a2      	ldrh	r2, [r4, #12]
 801d5b0:	f012 0301 	ands.w	r3, r2, #1
 801d5b4:	d00c      	beq.n	801d5d0 <__swsetup_r+0xbc>
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	60a3      	str	r3, [r4, #8]
 801d5ba:	6963      	ldr	r3, [r4, #20]
 801d5bc:	425b      	negs	r3, r3
 801d5be:	61a3      	str	r3, [r4, #24]
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	b953      	cbnz	r3, 801d5da <__swsetup_r+0xc6>
 801d5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d5cc:	d1ba      	bne.n	801d544 <__swsetup_r+0x30>
 801d5ce:	bd70      	pop	{r4, r5, r6, pc}
 801d5d0:	0792      	lsls	r2, r2, #30
 801d5d2:	bf58      	it	pl
 801d5d4:	6963      	ldrpl	r3, [r4, #20]
 801d5d6:	60a3      	str	r3, [r4, #8]
 801d5d8:	e7f2      	b.n	801d5c0 <__swsetup_r+0xac>
 801d5da:	2000      	movs	r0, #0
 801d5dc:	e7f7      	b.n	801d5ce <__swsetup_r+0xba>
 801d5de:	bf00      	nop
 801d5e0:	20000038 	.word	0x20000038
 801d5e4:	08020c1c 	.word	0x08020c1c
 801d5e8:	08020c3c 	.word	0x08020c3c
 801d5ec:	08020bfc 	.word	0x08020bfc

0801d5f0 <_close_r>:
 801d5f0:	b538      	push	{r3, r4, r5, lr}
 801d5f2:	4c06      	ldr	r4, [pc, #24]	; (801d60c <_close_r+0x1c>)
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	4605      	mov	r5, r0
 801d5f8:	4608      	mov	r0, r1
 801d5fa:	6023      	str	r3, [r4, #0]
 801d5fc:	f7e4 fdeb 	bl	80021d6 <_close>
 801d600:	1c43      	adds	r3, r0, #1
 801d602:	d102      	bne.n	801d60a <_close_r+0x1a>
 801d604:	6823      	ldr	r3, [r4, #0]
 801d606:	b103      	cbz	r3, 801d60a <_close_r+0x1a>
 801d608:	602b      	str	r3, [r5, #0]
 801d60a:	bd38      	pop	{r3, r4, r5, pc}
 801d60c:	2000b734 	.word	0x2000b734

0801d610 <__sflush_r>:
 801d610:	898a      	ldrh	r2, [r1, #12]
 801d612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d616:	4605      	mov	r5, r0
 801d618:	0710      	lsls	r0, r2, #28
 801d61a:	460c      	mov	r4, r1
 801d61c:	d458      	bmi.n	801d6d0 <__sflush_r+0xc0>
 801d61e:	684b      	ldr	r3, [r1, #4]
 801d620:	2b00      	cmp	r3, #0
 801d622:	dc05      	bgt.n	801d630 <__sflush_r+0x20>
 801d624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d626:	2b00      	cmp	r3, #0
 801d628:	dc02      	bgt.n	801d630 <__sflush_r+0x20>
 801d62a:	2000      	movs	r0, #0
 801d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d632:	2e00      	cmp	r6, #0
 801d634:	d0f9      	beq.n	801d62a <__sflush_r+0x1a>
 801d636:	2300      	movs	r3, #0
 801d638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d63c:	682f      	ldr	r7, [r5, #0]
 801d63e:	6a21      	ldr	r1, [r4, #32]
 801d640:	602b      	str	r3, [r5, #0]
 801d642:	d032      	beq.n	801d6aa <__sflush_r+0x9a>
 801d644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d646:	89a3      	ldrh	r3, [r4, #12]
 801d648:	075a      	lsls	r2, r3, #29
 801d64a:	d505      	bpl.n	801d658 <__sflush_r+0x48>
 801d64c:	6863      	ldr	r3, [r4, #4]
 801d64e:	1ac0      	subs	r0, r0, r3
 801d650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d652:	b10b      	cbz	r3, 801d658 <__sflush_r+0x48>
 801d654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d656:	1ac0      	subs	r0, r0, r3
 801d658:	2300      	movs	r3, #0
 801d65a:	4602      	mov	r2, r0
 801d65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d65e:	6a21      	ldr	r1, [r4, #32]
 801d660:	4628      	mov	r0, r5
 801d662:	47b0      	blx	r6
 801d664:	1c43      	adds	r3, r0, #1
 801d666:	89a3      	ldrh	r3, [r4, #12]
 801d668:	d106      	bne.n	801d678 <__sflush_r+0x68>
 801d66a:	6829      	ldr	r1, [r5, #0]
 801d66c:	291d      	cmp	r1, #29
 801d66e:	d848      	bhi.n	801d702 <__sflush_r+0xf2>
 801d670:	4a29      	ldr	r2, [pc, #164]	; (801d718 <__sflush_r+0x108>)
 801d672:	40ca      	lsrs	r2, r1
 801d674:	07d6      	lsls	r6, r2, #31
 801d676:	d544      	bpl.n	801d702 <__sflush_r+0xf2>
 801d678:	2200      	movs	r2, #0
 801d67a:	6062      	str	r2, [r4, #4]
 801d67c:	04d9      	lsls	r1, r3, #19
 801d67e:	6922      	ldr	r2, [r4, #16]
 801d680:	6022      	str	r2, [r4, #0]
 801d682:	d504      	bpl.n	801d68e <__sflush_r+0x7e>
 801d684:	1c42      	adds	r2, r0, #1
 801d686:	d101      	bne.n	801d68c <__sflush_r+0x7c>
 801d688:	682b      	ldr	r3, [r5, #0]
 801d68a:	b903      	cbnz	r3, 801d68e <__sflush_r+0x7e>
 801d68c:	6560      	str	r0, [r4, #84]	; 0x54
 801d68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d690:	602f      	str	r7, [r5, #0]
 801d692:	2900      	cmp	r1, #0
 801d694:	d0c9      	beq.n	801d62a <__sflush_r+0x1a>
 801d696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d69a:	4299      	cmp	r1, r3
 801d69c:	d002      	beq.n	801d6a4 <__sflush_r+0x94>
 801d69e:	4628      	mov	r0, r5
 801d6a0:	f7ff fb10 	bl	801ccc4 <_free_r>
 801d6a4:	2000      	movs	r0, #0
 801d6a6:	6360      	str	r0, [r4, #52]	; 0x34
 801d6a8:	e7c0      	b.n	801d62c <__sflush_r+0x1c>
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	4628      	mov	r0, r5
 801d6ae:	47b0      	blx	r6
 801d6b0:	1c41      	adds	r1, r0, #1
 801d6b2:	d1c8      	bne.n	801d646 <__sflush_r+0x36>
 801d6b4:	682b      	ldr	r3, [r5, #0]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d0c5      	beq.n	801d646 <__sflush_r+0x36>
 801d6ba:	2b1d      	cmp	r3, #29
 801d6bc:	d001      	beq.n	801d6c2 <__sflush_r+0xb2>
 801d6be:	2b16      	cmp	r3, #22
 801d6c0:	d101      	bne.n	801d6c6 <__sflush_r+0xb6>
 801d6c2:	602f      	str	r7, [r5, #0]
 801d6c4:	e7b1      	b.n	801d62a <__sflush_r+0x1a>
 801d6c6:	89a3      	ldrh	r3, [r4, #12]
 801d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6cc:	81a3      	strh	r3, [r4, #12]
 801d6ce:	e7ad      	b.n	801d62c <__sflush_r+0x1c>
 801d6d0:	690f      	ldr	r7, [r1, #16]
 801d6d2:	2f00      	cmp	r7, #0
 801d6d4:	d0a9      	beq.n	801d62a <__sflush_r+0x1a>
 801d6d6:	0793      	lsls	r3, r2, #30
 801d6d8:	680e      	ldr	r6, [r1, #0]
 801d6da:	bf08      	it	eq
 801d6dc:	694b      	ldreq	r3, [r1, #20]
 801d6de:	600f      	str	r7, [r1, #0]
 801d6e0:	bf18      	it	ne
 801d6e2:	2300      	movne	r3, #0
 801d6e4:	eba6 0807 	sub.w	r8, r6, r7
 801d6e8:	608b      	str	r3, [r1, #8]
 801d6ea:	f1b8 0f00 	cmp.w	r8, #0
 801d6ee:	dd9c      	ble.n	801d62a <__sflush_r+0x1a>
 801d6f0:	4643      	mov	r3, r8
 801d6f2:	463a      	mov	r2, r7
 801d6f4:	6a21      	ldr	r1, [r4, #32]
 801d6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d6f8:	4628      	mov	r0, r5
 801d6fa:	47b0      	blx	r6
 801d6fc:	2800      	cmp	r0, #0
 801d6fe:	dc06      	bgt.n	801d70e <__sflush_r+0xfe>
 801d700:	89a3      	ldrh	r3, [r4, #12]
 801d702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d706:	81a3      	strh	r3, [r4, #12]
 801d708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d70c:	e78e      	b.n	801d62c <__sflush_r+0x1c>
 801d70e:	4407      	add	r7, r0
 801d710:	eba8 0800 	sub.w	r8, r8, r0
 801d714:	e7e9      	b.n	801d6ea <__sflush_r+0xda>
 801d716:	bf00      	nop
 801d718:	20400001 	.word	0x20400001

0801d71c <_fflush_r>:
 801d71c:	b538      	push	{r3, r4, r5, lr}
 801d71e:	690b      	ldr	r3, [r1, #16]
 801d720:	4605      	mov	r5, r0
 801d722:	460c      	mov	r4, r1
 801d724:	b1db      	cbz	r3, 801d75e <_fflush_r+0x42>
 801d726:	b118      	cbz	r0, 801d730 <_fflush_r+0x14>
 801d728:	6983      	ldr	r3, [r0, #24]
 801d72a:	b90b      	cbnz	r3, 801d730 <_fflush_r+0x14>
 801d72c:	f7ff fa38 	bl	801cba0 <__sinit>
 801d730:	4b0c      	ldr	r3, [pc, #48]	; (801d764 <_fflush_r+0x48>)
 801d732:	429c      	cmp	r4, r3
 801d734:	d109      	bne.n	801d74a <_fflush_r+0x2e>
 801d736:	686c      	ldr	r4, [r5, #4]
 801d738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d73c:	b17b      	cbz	r3, 801d75e <_fflush_r+0x42>
 801d73e:	4621      	mov	r1, r4
 801d740:	4628      	mov	r0, r5
 801d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d746:	f7ff bf63 	b.w	801d610 <__sflush_r>
 801d74a:	4b07      	ldr	r3, [pc, #28]	; (801d768 <_fflush_r+0x4c>)
 801d74c:	429c      	cmp	r4, r3
 801d74e:	d101      	bne.n	801d754 <_fflush_r+0x38>
 801d750:	68ac      	ldr	r4, [r5, #8]
 801d752:	e7f1      	b.n	801d738 <_fflush_r+0x1c>
 801d754:	4b05      	ldr	r3, [pc, #20]	; (801d76c <_fflush_r+0x50>)
 801d756:	429c      	cmp	r4, r3
 801d758:	bf08      	it	eq
 801d75a:	68ec      	ldreq	r4, [r5, #12]
 801d75c:	e7ec      	b.n	801d738 <_fflush_r+0x1c>
 801d75e:	2000      	movs	r0, #0
 801d760:	bd38      	pop	{r3, r4, r5, pc}
 801d762:	bf00      	nop
 801d764:	08020c1c 	.word	0x08020c1c
 801d768:	08020c3c 	.word	0x08020c3c
 801d76c:	08020bfc 	.word	0x08020bfc

0801d770 <_lseek_r>:
 801d770:	b538      	push	{r3, r4, r5, lr}
 801d772:	4c07      	ldr	r4, [pc, #28]	; (801d790 <_lseek_r+0x20>)
 801d774:	4605      	mov	r5, r0
 801d776:	4608      	mov	r0, r1
 801d778:	4611      	mov	r1, r2
 801d77a:	2200      	movs	r2, #0
 801d77c:	6022      	str	r2, [r4, #0]
 801d77e:	461a      	mov	r2, r3
 801d780:	f7e4 fd50 	bl	8002224 <_lseek>
 801d784:	1c43      	adds	r3, r0, #1
 801d786:	d102      	bne.n	801d78e <_lseek_r+0x1e>
 801d788:	6823      	ldr	r3, [r4, #0]
 801d78a:	b103      	cbz	r3, 801d78e <_lseek_r+0x1e>
 801d78c:	602b      	str	r3, [r5, #0]
 801d78e:	bd38      	pop	{r3, r4, r5, pc}
 801d790:	2000b734 	.word	0x2000b734

0801d794 <__swhatbuf_r>:
 801d794:	b570      	push	{r4, r5, r6, lr}
 801d796:	460e      	mov	r6, r1
 801d798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d79c:	2900      	cmp	r1, #0
 801d79e:	b096      	sub	sp, #88	; 0x58
 801d7a0:	4614      	mov	r4, r2
 801d7a2:	461d      	mov	r5, r3
 801d7a4:	da07      	bge.n	801d7b6 <__swhatbuf_r+0x22>
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	602b      	str	r3, [r5, #0]
 801d7aa:	89b3      	ldrh	r3, [r6, #12]
 801d7ac:	061a      	lsls	r2, r3, #24
 801d7ae:	d410      	bmi.n	801d7d2 <__swhatbuf_r+0x3e>
 801d7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d7b4:	e00e      	b.n	801d7d4 <__swhatbuf_r+0x40>
 801d7b6:	466a      	mov	r2, sp
 801d7b8:	f000 f864 	bl	801d884 <_fstat_r>
 801d7bc:	2800      	cmp	r0, #0
 801d7be:	dbf2      	blt.n	801d7a6 <__swhatbuf_r+0x12>
 801d7c0:	9a01      	ldr	r2, [sp, #4]
 801d7c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d7c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d7ca:	425a      	negs	r2, r3
 801d7cc:	415a      	adcs	r2, r3
 801d7ce:	602a      	str	r2, [r5, #0]
 801d7d0:	e7ee      	b.n	801d7b0 <__swhatbuf_r+0x1c>
 801d7d2:	2340      	movs	r3, #64	; 0x40
 801d7d4:	2000      	movs	r0, #0
 801d7d6:	6023      	str	r3, [r4, #0]
 801d7d8:	b016      	add	sp, #88	; 0x58
 801d7da:	bd70      	pop	{r4, r5, r6, pc}

0801d7dc <__smakebuf_r>:
 801d7dc:	898b      	ldrh	r3, [r1, #12]
 801d7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7e0:	079d      	lsls	r5, r3, #30
 801d7e2:	4606      	mov	r6, r0
 801d7e4:	460c      	mov	r4, r1
 801d7e6:	d507      	bpl.n	801d7f8 <__smakebuf_r+0x1c>
 801d7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d7ec:	6023      	str	r3, [r4, #0]
 801d7ee:	6123      	str	r3, [r4, #16]
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	6163      	str	r3, [r4, #20]
 801d7f4:	b002      	add	sp, #8
 801d7f6:	bd70      	pop	{r4, r5, r6, pc}
 801d7f8:	ab01      	add	r3, sp, #4
 801d7fa:	466a      	mov	r2, sp
 801d7fc:	f7ff ffca 	bl	801d794 <__swhatbuf_r>
 801d800:	9900      	ldr	r1, [sp, #0]
 801d802:	4605      	mov	r5, r0
 801d804:	4630      	mov	r0, r6
 801d806:	f7ff faab 	bl	801cd60 <_malloc_r>
 801d80a:	b948      	cbnz	r0, 801d820 <__smakebuf_r+0x44>
 801d80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d810:	059a      	lsls	r2, r3, #22
 801d812:	d4ef      	bmi.n	801d7f4 <__smakebuf_r+0x18>
 801d814:	f023 0303 	bic.w	r3, r3, #3
 801d818:	f043 0302 	orr.w	r3, r3, #2
 801d81c:	81a3      	strh	r3, [r4, #12]
 801d81e:	e7e3      	b.n	801d7e8 <__smakebuf_r+0xc>
 801d820:	4b0d      	ldr	r3, [pc, #52]	; (801d858 <__smakebuf_r+0x7c>)
 801d822:	62b3      	str	r3, [r6, #40]	; 0x28
 801d824:	89a3      	ldrh	r3, [r4, #12]
 801d826:	6020      	str	r0, [r4, #0]
 801d828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d82c:	81a3      	strh	r3, [r4, #12]
 801d82e:	9b00      	ldr	r3, [sp, #0]
 801d830:	6163      	str	r3, [r4, #20]
 801d832:	9b01      	ldr	r3, [sp, #4]
 801d834:	6120      	str	r0, [r4, #16]
 801d836:	b15b      	cbz	r3, 801d850 <__smakebuf_r+0x74>
 801d838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d83c:	4630      	mov	r0, r6
 801d83e:	f000 f833 	bl	801d8a8 <_isatty_r>
 801d842:	b128      	cbz	r0, 801d850 <__smakebuf_r+0x74>
 801d844:	89a3      	ldrh	r3, [r4, #12]
 801d846:	f023 0303 	bic.w	r3, r3, #3
 801d84a:	f043 0301 	orr.w	r3, r3, #1
 801d84e:	81a3      	strh	r3, [r4, #12]
 801d850:	89a3      	ldrh	r3, [r4, #12]
 801d852:	431d      	orrs	r5, r3
 801d854:	81a5      	strh	r5, [r4, #12]
 801d856:	e7cd      	b.n	801d7f4 <__smakebuf_r+0x18>
 801d858:	0801cb69 	.word	0x0801cb69

0801d85c <__malloc_lock>:
 801d85c:	4770      	bx	lr

0801d85e <__malloc_unlock>:
 801d85e:	4770      	bx	lr

0801d860 <_read_r>:
 801d860:	b538      	push	{r3, r4, r5, lr}
 801d862:	4c07      	ldr	r4, [pc, #28]	; (801d880 <_read_r+0x20>)
 801d864:	4605      	mov	r5, r0
 801d866:	4608      	mov	r0, r1
 801d868:	4611      	mov	r1, r2
 801d86a:	2200      	movs	r2, #0
 801d86c:	6022      	str	r2, [r4, #0]
 801d86e:	461a      	mov	r2, r3
 801d870:	f7e4 fc78 	bl	8002164 <_read>
 801d874:	1c43      	adds	r3, r0, #1
 801d876:	d102      	bne.n	801d87e <_read_r+0x1e>
 801d878:	6823      	ldr	r3, [r4, #0]
 801d87a:	b103      	cbz	r3, 801d87e <_read_r+0x1e>
 801d87c:	602b      	str	r3, [r5, #0]
 801d87e:	bd38      	pop	{r3, r4, r5, pc}
 801d880:	2000b734 	.word	0x2000b734

0801d884 <_fstat_r>:
 801d884:	b538      	push	{r3, r4, r5, lr}
 801d886:	4c07      	ldr	r4, [pc, #28]	; (801d8a4 <_fstat_r+0x20>)
 801d888:	2300      	movs	r3, #0
 801d88a:	4605      	mov	r5, r0
 801d88c:	4608      	mov	r0, r1
 801d88e:	4611      	mov	r1, r2
 801d890:	6023      	str	r3, [r4, #0]
 801d892:	f7e4 fcac 	bl	80021ee <_fstat>
 801d896:	1c43      	adds	r3, r0, #1
 801d898:	d102      	bne.n	801d8a0 <_fstat_r+0x1c>
 801d89a:	6823      	ldr	r3, [r4, #0]
 801d89c:	b103      	cbz	r3, 801d8a0 <_fstat_r+0x1c>
 801d89e:	602b      	str	r3, [r5, #0]
 801d8a0:	bd38      	pop	{r3, r4, r5, pc}
 801d8a2:	bf00      	nop
 801d8a4:	2000b734 	.word	0x2000b734

0801d8a8 <_isatty_r>:
 801d8a8:	b538      	push	{r3, r4, r5, lr}
 801d8aa:	4c06      	ldr	r4, [pc, #24]	; (801d8c4 <_isatty_r+0x1c>)
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	4605      	mov	r5, r0
 801d8b0:	4608      	mov	r0, r1
 801d8b2:	6023      	str	r3, [r4, #0]
 801d8b4:	f7e4 fcab 	bl	800220e <_isatty>
 801d8b8:	1c43      	adds	r3, r0, #1
 801d8ba:	d102      	bne.n	801d8c2 <_isatty_r+0x1a>
 801d8bc:	6823      	ldr	r3, [r4, #0]
 801d8be:	b103      	cbz	r3, 801d8c2 <_isatty_r+0x1a>
 801d8c0:	602b      	str	r3, [r5, #0]
 801d8c2:	bd38      	pop	{r3, r4, r5, pc}
 801d8c4:	2000b734 	.word	0x2000b734

0801d8c8 <_init>:
 801d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8ca:	bf00      	nop
 801d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8ce:	bc08      	pop	{r3}
 801d8d0:	469e      	mov	lr, r3
 801d8d2:	4770      	bx	lr

0801d8d4 <_fini>:
 801d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8d6:	bf00      	nop
 801d8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8da:	bc08      	pop	{r3}
 801d8dc:	469e      	mov	lr, r3
 801d8de:	4770      	bx	lr
