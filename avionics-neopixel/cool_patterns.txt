// NeoPixel test program showing use of the WHITE channel for RGBW
// pixels only (won't look correct on regular RGB NeoPixel strips).

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

#define LED_PIN     19
#define LED_COUNT  20
#define BRIGHTNESS 50 // Set BRIGHTNESS to about 1/5 (max = 255)

//contains the gradient I want to implement, but I can't seem to get it right
int colors[][3] = {
  {0, 0, 0},
  {26, 0, 0},
  {51, 0, 0},
  {77, 0, 0},
  {102, 0, 0},
  {128, 0, 0},
  {153, 0, 0},
  {179, 0, 0},
  {204, 0, 0},
  {230, 0, 0},
  {230, 0, 76},
  {204, 0, 68},
  {153, 0, 77},
  {153, 51, 102},
  {172, 57, 115},
  {153, 0, 153},
  {128, 0, 128},
  {102, 0, 102},
  {77, 0, 77},
  {51, 0, 51},
};

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRBW + NEO_KHZ800);
// Argument 1 = Number of pixels in NeoPixel strip
// Argument 2 = Arduino pin number (most are valid)
// Argument 3 = Pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)

void colorWipe(uint32_t color, int wait);
void whiteOverRainbow(int whiteSpeed, int whiteLength);
void pulseWhite(uint8_t wait);
void rainbowFade2White(int wait, int rainbowLoops, int whiteLoops);

void setup() {
  // Serial.begin(115200); // Initialize serial communication at 115200 baud rate
  // pinMode(LED_PIN, OUTPUT); // Initialize the LED pin as an output
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  // strip.setBrightness(BRIGHTNESS);
}

void loop() {
  // for(int colorIndex = 0; colorIndex < sizeof(colors) / sizeof(colors[0]); colorIndex++) {
  //   for(int pixelIndex = 0; pixelIndex < strip.numPixels(); pixelIndex++) {
  //     strip.setPixelColor(pixelIndex, strip.Color(colors[colorIndex][0], colors[colorIndex][1], colors[colorIndex][2]));
  //     strip.show();
  //     delay(100); // Adjust this delay to control the speed of color propagation
  //   }
  // }
  // digitalWrite(LED_PIN_Board, HIGH); // Turn the LED on
  // delay(1000); // Wait for a second
  // digitalWrite(LED_PIN_Board, LOW); // Turn the LED off
  // delay(1000); // Wait for a second
  // Fill along the length of the strip in various colors...
  colorWipe(strip.Color(242, 46, 62)     , 50); // Red
  colorWipe(strip.Color(207, 42, 62)     , 50); // Green
  colorWipe(strip.Color(171, 38, 63)     , 50); // Blue
  // colorWipe(strip.Color(136, 34, 63)     , 50); // True white (not RGB white)
  // colorWipe(strip.Color(101, 29, 63)     , 50); // True white (not RGB white)
  // colorWipe(strip.Color(65, 25, 64)      , 50); // True white (not RGB white)
  // colorWipe(strip.Color(30, 21, 64)      , 50); // True white (not RGB white)

  // whiteOverRainbow(75, 5);
  // pulseWhite(5);
  // rainbowFade2White(3, 3, 1);
  // colorFade(0, 65535, 0, 65535, 50); // Fade from red to purple to black

}

void colorFade(uint16_t startHue, uint16_t endHue, uint16_t startBrightness, uint16_t endBrightness, uint16_t wait) {
  uint16_t hueDifference = endHue - startHue;
  uint16_t brightnessDifference = endBrightness - startBrightness;
  uint16_t steps = strip.numPixels(); // Number of steps in the fade

  for(uint16_t i = 0; i < steps; i++) {
    uint16_t hue = startHue + (i * hueDifference / steps);
    uint16_t brightness = startBrightness + (i * brightnessDifference / steps);
    uint32_t color = strip.ColorHSV(hue, 255, brightness); // Create a color in HSV space

    for(uint16_t j = 0; j <= i; j++) {
      strip.setPixelColor(j, color); // Set the color of pixel j
    }

    strip.show(); // Update the strip with the new colors
    delay(wait); // Wait for a moment
  }
}

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

void whiteOverRainbow(int whiteSpeed, int whiteLength) {

  if(whiteLength >= strip.numPixels()) whiteLength = strip.numPixels() - 1;

  int      head          = whiteLength - 1;
  int      tail          = 0;
  int      loops         = 3;
  int      loopNum       = 0;
  uint32_t lastTime      = millis();
  uint32_t firstPixelHue = 0;

  for(;;) { // Repeat forever (or until a 'break' or 'return')
    for(int i=0; i<strip.numPixels(); i++) {  // For each pixel in strip...
      if(((i >= tail) && (i <= head)) ||      //  If between head & tail...
         ((tail > head) && ((i >= tail) || (i <= head)))) {
        strip.setPixelColor(i, strip.Color(0, 0, 0, 255)); // Set white
      } else {                                             // else set rainbow
        int pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());
        strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
      }
    }

    strip.show(); // Update strip with new contents
    // There's no delay here, it just runs full-tilt until the timer and
    // counter combination below runs out.

    firstPixelHue += 40; // Advance just a little along the color wheel

    if((millis() - lastTime) > whiteSpeed) { // Time to update head/tail?
      if(++head >= strip.numPixels()) {      // Advance head, wrap around
        head = 0;
        if(++loopNum >= loops) return;
      }
      if(++tail >= strip.numPixels()) {      // Advance tail, wrap around
        tail = 0;
      }
      lastTime = millis();                   // Save time of last movement
    }
  }
}

void pulseWhite(uint8_t wait) {
  for(int j=0; j<256; j++) { // Ramp up from 0 to 255
    // Fill entire strip with white at gamma-corrected brightness level 'j':
    strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));
    strip.show();
    delay(wait);
  }

  for(int j=255; j>=0; j--) { // Ramp down from 255 to 0
    strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));
    strip.show();
    delay(wait);
  }
}

void rainbowFade2White(int wait, int rainbowLoops, int whiteLoops) {
  int fadeVal=0, fadeMax=100;

  // Hue of first pixel runs 'rainbowLoops' complete loops through the color
  // wheel. Color wheel has a range of 65536 but it's OK if we roll over, so
  // just count from 0 to rainbowLoops*65536, using steps of 256 so we
  // advance around the wheel at a decent clip.
  for(uint32_t firstPixelHue = 0; firstPixelHue < rainbowLoops*65536;
    firstPixelHue += 256) {

    for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...

      // Offset pixel hue by an amount to make one full revolution of the
      // color wheel (range of 65536) along the length of the strip
      // (strip.numPixels() steps):
      uint32_t pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());

      // strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or
      // optionally add saturation and value (brightness) (each 0 to 255).
      // Here we're using just the three-argument variant, though the
      // second value (saturation) is a constant 255.
      strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue, 255,
        255 * fadeVal / fadeMax)));
    }

    strip.show();
    delay(wait);

    if(firstPixelHue < 65536) {                              // First loop,
      if(fadeVal < fadeMax) fadeVal++;                       // fade in
    } else if(firstPixelHue >= ((rainbowLoops-1) * 65536)) { // Last loop,
      if(fadeVal > 0) fadeVal--;                             // fade out
    } else {
      fadeVal = fadeMax; // Interim loop, make sure fade is at max
    }
  }

  for(int k=0; k<whiteLoops; k++) {
    for(int j=0; j<256; j++) { // Ramp up 0 to 255
      // Fill entire strip with white at gamma-corrected brightness level 'j':
      strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));
      strip.show();
    }
    delay(1000); // Pause 1 second
    for(int j=255; j>=0; j--) { // Ramp down 255 to 0
      strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));
      strip.show();
    }
  }

  delay(500); // Pause 1/2 second
}