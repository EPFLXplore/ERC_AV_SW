#include <Adafruit_NeoPixel.h>
#define PIN 27
#define NUM_LEDS 60
// Parameter 1 = number of pixels in strip
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_GRB + NEO_KHZ800);
unsigned startMillis;

void setAll(int start, int end, byte red, byte green, byte blue) {
  for(int i = start; i < end; i++ ) {
    strip.setPixelColor(i, strip.Color(red, green, blue));
  }
  strip.show();
}

// yes
void CylonBounce(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay){

  for(int i = start; i < end-EyeSize-2; i++) {
    setAll(start, end, 0,0,0);
    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));

    for(int j = 1; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));
    strip.show();
    delay(SpeedDelay);
  }

  delay(ReturnDelay);

  for(int i = end-EyeSize-2; i > start; i--) {
    setAll(start, end, 0,0,0);
    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));

    for(int j = 1; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));
    strip.show();
    delay(SpeedDelay);
  }
  
  delay(ReturnDelay);
}

// maybe
void RunningLights(int start, int end, byte red, byte green, byte blue, int WaveDelay) {
  int Position=0;
  
  for(int i=start; i<end*2; i++)
  {
      Position++; // = 0; //Position + Rate;
      for(int i=start; i<end; i++) {
        // sine wave, 3 offset waves make a rainbow!
        //float level = sin(i+Position) * 127 + 128;
        //setPixel(i,level,0,0);
        //float level = sin(i+Position) * 127 + 128;
        strip.setPixelColor(i, strip.Color(((sin(i+Position) * 127 + 128)/255)*red,
                              ((sin(i+Position) * 127 + 128)/255)*green,
                              ((sin(i+Position) * 127 + 128)/255)*blue));
      }
      
      strip.show();
      delay(WaveDelay);
  }
}

// Yes
void colorWipe(int start, int end, byte red, byte green, byte blue, int SpeedDelay) {
  for(uint16_t i=start; i<end; i++) {
      strip.setPixelColor(i, strip.Color(red, green, blue));
      strip.show();
      delay(SpeedDelay);
  }

}

// Yes
void FadeInOut(int start, int end, byte red, byte green, byte blue){
  float r, g, b;
     
  for(int k = 255; k >= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(start,end,r,g,b);
    strip.show();
  }

  for(int k = 0; k < 256; k=k+1) { 
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(start,end,r,g,b);
    strip.show();
  }

}

// No
/*
void CenterToOutside(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay) {
  for(int i =((end-EyeSize)/2); i>=start; i--) {
    setAll(start,end,0,0,0);
    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));
    strip.setPixelColor(end-i, strip.Color(red/10, green/10, blue/10));
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(end-i-j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(end-i-EyeSize-1, strip.Color(red/10, green/10, blue/10));
    
    strip.show();
    delay(SpeedDelay);
  }
  delay(ReturnDelay);
}

void OutsideToCenter(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay) {
  for(int i = start; i<=((end-EyeSize)/2); i++) {
    setAll(start,end,0,0,0);

    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));

    strip.setPixelColor(end-i, strip.Color(red/10, green/10, blue/10));    
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(end-i-j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(end-i-EyeSize-1, strip.Color(red/10, green/10, blue/10));
    
    strip.show();
    delay(SpeedDelay);
  }
  delay(ReturnDelay);
}

void LeftToRight(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay) {
  for(int i = start; i < end-EyeSize-2; i++) {
    setAll(start,end,0,0,0);
    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));
    strip.show();
    delay(SpeedDelay);
  }
  delay(ReturnDelay);
}

void RightToLeft(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay) {
  for(int i = end-EyeSize-2; i > start; i--) {
    setAll(start,end,0,0,0);
    strip.setPixelColor(i, strip.Color(red/10, green/10, blue/10));
    for(int j = start; j <= EyeSize; j++) {
      strip.setPixelColor(i+j, strip.Color(red, green, blue));
    }
    strip.setPixelColor(i+EyeSize+1, strip.Color(red/10, green/10, blue/10));
    strip.show();
    delay(SpeedDelay);
  }
  delay(ReturnDelay);
}

void NewKITT(int start, int end, byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay){
  RightToLeft(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  LeftToRight(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  OutsideToCenter(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  CenterToOutside(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  LeftToRight(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  RightToLeft(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  OutsideToCenter(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
  CenterToOutside(start, end, red, green, blue, EyeSize, SpeedDelay, ReturnDelay);
}
*/

// Yes
void theaterChase(int start, int end, byte red, byte green, byte blue, int SpeedDelay) {
  for (int j=0; j<10; j++) {  //do 10 cycles of chasing
    for (int q=0; q < 3; q++) {
      for (int i=start; i < end; i=i+2) {
        strip.setPixelColor(i+q, strip.Color(red, green, blue));
      }
      strip.show();
     
      delay(SpeedDelay);
     
      for (int i=start; i < end; i=i+2) {
        strip.setPixelColor(i+q, strip.Color(0,0,0));
      }
    }
  }
  setAll(start,end,red,green,blue);
}

void off(int start, int end, bool gradual){
  static uint32_t time = 0;
  static uint32_t off_interval = 50;
  static uint16_t i = 0;
  if (gradual) {
    if (millis() - time > off_interval) {
      time = millis();
      strip.setPixelColor(i, strip.Color(0, 0, 0));
      strip.show();
      i++;
    }
  } else {
    setAll(start,end,0,0,0);
  }

}

void setup() {
  startMillis = millis();
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

// *** REPLACE FROM HERE ***
void loop() {
  // unsigned long currentMillis = millis();
  // int segmentSize = NUM_LEDS / 3;

  theaterChase(0,20,0xff,0,0,50);
  FadeInOut(20, 40, 0xff, 0x77, 0x00);
  // off(20,40,false);
  CylonBounce(40, 60, 127, 0, 255, 4, 10, 50);
  // colorWipe(40,60,0x00,0xff,0x00, 20);
  // colorWipe(40,60,0x00,0x00,0x00, 20);
  // CylonBounce(20, 40, 153, 0, 0, 4, 10, 50);
  // CylonBounce(40, 60, 102, 51, 0, 4, 10, 50);

  // if (currentMillis - startMillis >= 5000) {
  //   // NAV segment: Violet
  //   for (int i = 0; i < segmentSize; i++)
  //     strip.setPixelColor(i, strip.Color(127, 0, 255));
  //   // HD segment: Red
  //   for (int i = segmentSize; i < 2 * segmentSize; i++)
  //     strip.setPixelColor(i, strip.Color(153, 0, 0));
  //   // DRILL segment: Brown
  //   for (int i = 2 * segmentSize; i < NUM_LEDS; i++)
  //     strip.setPixelColor(i, strip.Color(102, 51, 0));
    
    
  //   startMillis = millis();
  //   strip.show();
  //   delay(2000);
  //   // turn off strip
  //   for (int i = 0; i < NUM_LEDS; i++) {
  //     strip.setPixelColor(i, strip.Color(0x00, 0x00, 0x00));
  //   }
  //   strip.show();
  // }

}



